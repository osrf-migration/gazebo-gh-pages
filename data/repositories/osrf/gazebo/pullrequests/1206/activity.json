{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206/comments/3165425.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206/_/diff#comment-3165425"}}, "parent": {"id": 3165373, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206/comments/3165373.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206/_/diff#comment-3165373"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}, "content": {"raw": "before diving into the code... what happens when someone uses `ODEJoint::SetVelocity` with no joint friction?", "markup": "markdown", "html": "<p>before diving into the code... what happens when someone uses <code>ODEJoint::SetVelocity</code> with no joint friction?</p>", "type": "rendered"}, "created_on": "2014-09-22T18:40:25.567145+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2014-09-22T18:40:25.577899+00:00", "type": "pullrequest_comment", "id": 3165425}, "pull_request": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}}, {"update": {"description": "This pull request uses the `<axis><dynamics><friction>` tag to implements Coulomb joint friction (see Fig 1 in [this paper](http://robotics.tch.harvard.edu/publications/pdfs/armstrong1994survey.pdf), thanks to @traversaro for the suggestion). It is currently implemented for ODE revolute, prismatic, and slider joints using the [velocity and force parameters in the ODE joint motor](http://www.ode.org/ode-latest-userguide.html#sec_7_5_0) (see #381 for further discussion).\r\n\r\nI've added a section to the `INTEGRATION_joint_spawn` test to verify the `SetParam(\"friction\", ...)` API, and I've also added a demo world: `worlds/joint_friction_demo.world` (note that it is generated from an embedded ruby template with suffic `.rworld`). In this world, there are several joints with different friction values that should behave differently. The universal joints are set to mimic the behavior of the revolute joints.\r\n\r\nI should be able to get bullet to work in a similar manner. I will address this in a future pull request.\r\n\r\nCaveats: the `ODEJoint::SetVelocity` had previously been using the ODE joint motors, so this function will currently interfere with joint friction. I plan to address this in a future pull request.\r\n\r\nApologies: I did some refactoring in the `ODEJoint::[GS]etParam` functions, which has made this diff a bit larger than it needed to be, but it allowed me to delete quite a bit of duplicate code.\r\n\r\nAssorted comments:\r\n\r\n* I also moved the sdf parameter loading from `ODEJoint::Load` to the parent class.\r\n* I had to modify `Joint::Reset` to allow joint friction values to persist after a world reset (try resetting the demo world to verify that it works).\r\n* I had to add a small fix to the `INTEGRATION_joint_spawn` test to counteract the interference between SetVelocity and joint friction.\r\n\r\n[Jenkins build](http://build.osrfoundation.org/job/gazebo-any-devel-trusty-amd64-gpu-nvidia/214) is happy", "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)", "destination": {"commit": {"hash": "034a329082ff", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/034a329082ff.json"}, "html": {"href": "#!/osrf/gazebo/commits/034a329082ff"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo_4.0"}}, "reason": "I'm going to decline this until `ODEJoint::SetVelocity` is fixed.", "source": {"commit": {"hash": "42490d4bc26e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/42490d4bc26e.json"}, "html": {"href": "#!/osrf/gazebo/commits/42490d4bc26e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "issue_381"}}, "state": "DECLINED", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2014-09-22T18:36:34.084061+00:00"}, "pull_request": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206/comments/3165373.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206/_/diff#comment-3165373"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}, "content": {"raw": "I'm going to decline this until `ODEJoint::SetVelocity` is fixed.", "markup": "markdown", "html": "<p>I'm going to decline this until <code>ODEJoint::SetVelocity</code> is fixed.</p>", "type": "rendered"}, "created_on": "2014-09-22T18:36:26.064956+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2014-09-22T18:36:26.074784+00:00", "type": "pullrequest_comment", "id": 3165373}, "pull_request": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206/comments/3145337.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206/_/diff#comment-3145337"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}, "content": {"raw": "Note: We should update the URDF->SDF parser to handle joint friction. See this [question](http://answers.gazebosim.org/question/7074/urdf-to-sdf-conversion-using-gzsdf/#).", "markup": "markdown", "html": "<p>Note: We should update the URDF-&gt;SDF parser to handle joint friction. See this <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/7074/urdf-to-sdf-conversion-using-gzsdf/\" rel=\"nofollow\">question</a>.</p>", "type": "rendered"}, "created_on": "2014-09-19T16:07:09.469025+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2014-09-19T16:07:09.475979+00:00", "type": "pullrequest_comment", "id": 3145337}, "pull_request": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}}, {"update": {"description": "This pull request uses the `<axis><dynamics><friction>` tag to implements Coulomb joint friction (see Fig 1 in [this paper](http://robotics.tch.harvard.edu/publications/pdfs/armstrong1994survey.pdf), thanks to @traversaro for the suggestion). It is currently implemented for ODE revolute, prismatic, and slider joints using the [velocity and force parameters in the ODE joint motor](http://www.ode.org/ode-latest-userguide.html#sec_7_5_0) (see #381 for further discussion).\r\n\r\nI've added a section to the `INTEGRATION_joint_spawn` test to verify the `SetParam(\"friction\", ...)` API, and I've also added a demo world: `worlds/joint_friction_demo.world` (note that it is generated from an embedded ruby template with suffic `.rworld`). In this world, there are several joints with different friction values that should behave differently. The universal joints are set to mimic the behavior of the revolute joints.\r\n\r\nI should be able to get bullet to work in a similar manner. I will address this in a future pull request.\r\n\r\nCaveats: the `ODEJoint::SetVelocity` had previously been using the ODE joint motors, so this function will currently interfere with joint friction. I plan to address this in a future pull request.\r\n\r\nApologies: I did some refactoring in the `ODEJoint::[GS]etParam` functions, which has made this diff a bit larger than it needed to be, but it allowed me to delete quite a bit of duplicate code.\r\n\r\nAssorted comments:\r\n\r\n* I also moved the sdf parameter loading from `ODEJoint::Load` to the parent class.\r\n* I had to modify `Joint::Reset` to allow joint friction values to persist after a world reset (try resetting the demo world to verify that it works).\r\n* I had to add a small fix to the `INTEGRATION_joint_spawn` test to counteract the interference between SetVelocity and joint friction.\r\n\r\n[Jenkins build](http://build.osrfoundation.org/job/gazebo-any-devel-trusty-amd64-gpu-nvidia/214) is happy", "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)", "destination": {"commit": {"hash": "8e4cd40a8d16", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/8e4cd40a8d16.json"}, "html": {"href": "#!/osrf/gazebo/commits/8e4cd40a8d16"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo_4.0"}}, "reason": "", "source": {"commit": {"hash": "42490d4bc26e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/42490d4bc26e.json"}, "html": {"href": "#!/osrf/gazebo/commits/42490d4bc26e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "issue_381"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2014-09-18T20:32:00.454640+00:00"}, "pull_request": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}}, {"update": {"description": "This pull request uses the `<axis><dynamics><friction>` tag to implements Coulomb joint friction (see Fig 1 in [this paper](http://robotics.tch.harvard.edu/publications/pdfs/armstrong1994survey.pdf), thanks to @traversaro for the suggestion). It is currently implemented for ODE revolute, prismatic, and slider joints using the [velocity and force parameters in the ODE joint motor](http://www.ode.org/ode-latest-userguide.html#sec_7_5_0) (see #381 for further discussion).\r\n\r\nI've added a section to the `INTEGRATION_joint_spawn` test to verify the `SetParam(\"friction\", ...)` API, and I've also added a demo world: `worlds/joint_friction_demo.world` (note that it is generated from an embedded ruby template with suffic `.rworld`). In this world, there are several joints with different friction values that should behave differently. The universal joints are set to mimic the behavior of the revolute joints.\r\n\r\nI should be able to get bullet to work in a similar manner. I will address this in a future pull request.\r\n\r\nCaveats: the `ODEJoint::SetVelocity` had previously been using the ODE joint motors, so this function will currently interfere with joint friction. I plan to address this in a future pull request.\r\n\r\nApologies: I did some refactoring in the `ODEJoint::[GS]etParam` functions, which has made this diff a bit larger than it needed to be, but it allowed me to delete quite a bit of duplicate code.\r\n\r\nAssorted comments:\r\n\r\n* I also moved the sdf parameter loading from `ODEJoint::Load` to the parent class.\r\n* I had to modify `Joint::Reset` to allow joint friction values to persist after a world reset (try resetting the demo world to verify that it works).\r\n* I had to add a small fix to the `INTEGRATION_joint_spawn` test to counteract the interference between SetVelocity and joint friction.\r\n\r\n[queued jenkins build](http://build.osrfoundation.org/job/gazebo-any-devel-trusty-amd64-gpu-nvidia/214)", "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)", "destination": {"commit": {"hash": "bbfed2b3cba2", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/bbfed2b3cba2.json"}, "html": {"href": "#!/osrf/gazebo/commits/bbfed2b3cba2"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo_4.0"}}, "reason": "", "source": {"commit": {"hash": "42490d4bc26e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/42490d4bc26e.json"}, "html": {"href": "#!/osrf/gazebo/commits/42490d4bc26e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "issue_381"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2014-09-18T17:43:38.126158+00:00"}, "pull_request": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}}, {"update": {"description": "This pull request uses the `<axis><dynamics><friction>` tag to implements Coulomb joint friction (see Fig 1 in [this paper](http://robotics.tch.harvard.edu/publications/pdfs/armstrong1994survey.pdf), thanks to @traversaro for the suggestion). It is currently implemented for ODE revolute, prismatic, and slider joints using the [velocity and force parameters in the ODE joint motor](http://www.ode.org/ode-latest-userguide.html#sec_7_5_0) (see #381 for further discussion).\r\n\r\nI've added a section to the `INTEGRATION_joint_spawn` test to verify the `SetParam(\"friction\", ...)` API, and I've also added a demo world: `worlds/joint_friction_demo.world` (note that it is generated from an embedded ruby template with suffic `.rworld`). In this world, there are several joints with different friction values that should behave differently. The universal joints are set to mimic the behavior of the revolute joints.\r\n\r\nI should be able to get bullet to work in a similar manner. I will address this in a future pull request.\r\n\r\nCaveats: the `ODEJoint::SetVelocity` had previously been using the ODE joint motors, so this function will currently interfere with joint friction. I plan to address this in a future pull request.\r\n\r\nApologies: I did some refactoring in the `ODEJoint::[GS]etParam` functions, which has made this diff a bit larger than it needed to be, but it allowed me to delete quite a bit of duplicate code.\r\n\r\nAssorted comments:\r\n\r\n* I also moved the sdf parameter loading from `ODEJoint::Load` to the parent class.\r\n* I had to modify `Joint::Reset` to allow joint friction values to persist after a world reset (try resetting the demo world to verify that it works).\r\n* I had to add a small fix to the `INTEGRATION_joint_spawn` test to counteract the interference between SetVelocity and joint friction.", "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)", "destination": {"commit": {"hash": "bbfed2b3cba2", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/bbfed2b3cba2.json"}, "html": {"href": "#!/osrf/gazebo/commits/bbfed2b3cba2"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo_4.0"}}, "reason": "", "source": {"commit": {"hash": "42490d4bc26e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/42490d4bc26e.json"}, "html": {"href": "#!/osrf/gazebo/commits/42490d4bc26e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "issue_381"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2014-09-18T17:42:17.533210+00:00"}, "pull_request": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}}, {"update": {"description": "This pull request uses the `<axis><dynamics><friction>` tag to implements Coulomb joint friction (see Fig 1 in [this paper](http://robotics.tch.harvard.edu/publications/pdfs/armstrong1994survey.pdf), thanks to @traversaro for the suggestion). It is currently implemented for ODE revolute, prismatic, and slider joints using the [velocity and force parameters in the ODE joint motor](http://www.ode.org/ode-latest-userguide.html#sec_7_5_0) (see #381 for further discussion).\r\n\r\nI've added a section to the `INTEGRATION_joint_spawn` test to verify the `SetParam(\"friction\", ...)` API, and I've also added a demo world: `worlds/joint_friction_demo.world` (note that it is generated from an embedded ruby template with suffic `.rworld`). In this world, there are several joints with different friction values that should behave differently. The universal joints are set to mimic the behavior of the revolute joints.\r\n\r\nI should be able to get bullet to work in a similar manner. I will address this in a future pull request.\r\n\r\nCaveats: the `ODEJoint::SetVelocity` had previously been using the ODE joint motors, so this function will currently interfere with joint friction. I plan to address this in a future pull request.\r\n\r\nApologies: I did some refactoring in the `ODEJoint::[GS]etParam` functions, which has made this diff a bit larger than it needed to be, but it allowed me to delete quite a bit of duplicate code.\r\n\r\nAssorted comments:\r\n\r\n* I also moved the sdf parameter loading from `ODEJoint::Load` to the parent class.\r\n* I had to modify `Joint::Reset` to allow joint friction values to persist after a world reset (try resetting the demo world to verify that it works).\r\n* I had to add a small fix to the `INTEGRATION_joint_spawn` test to counteract the interference between SetVelocity and joint friction.", "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)", "destination": {"commit": {"hash": "bbfed2b3cba2", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/bbfed2b3cba2.json"}, "html": {"href": "#!/osrf/gazebo/commits/bbfed2b3cba2"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo_4.0"}}, "reason": "", "source": {"commit": {"hash": "42490d4bc26e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/42490d4bc26e.json"}, "html": {"href": "#!/osrf/gazebo/commits/42490d4bc26e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "issue_381"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2014-09-18T17:42:17.500181+00:00"}, "pull_request": {"type": "pullrequest", "id": 1206, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1206.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1206"}}, "title": "Add joint friction for ODE revolute, prismatic, and universal joints (#381)"}}]}