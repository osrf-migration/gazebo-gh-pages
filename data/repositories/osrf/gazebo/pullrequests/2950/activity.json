{"pagelen": 50, "values": [{"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "132a395ad2a2", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/132a395ad2a2.json"}, "html": {"href": "#!/osrf/gazebo/commits/132a395ad2a2"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "02433c983b79", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/02433c983b79.json"}, "html": {"href": "#!/osrf/gazebo/commits/02433c983b79"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "MERGED", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-11-16T21:26:57.395694+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"approval": {"date": "2018-11-16T20:38:32.403983+00:00", "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/82598083.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-82598083"}}, "parent": {"id": 82479351, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/82479351.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-82479351"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "error message added in 02433c983b79", "markup": "markdown", "html": "<p>error message added in <a href=\"#!/osrf/gazebo/commits/02433c983b79\" rel=\"nofollow\" class=\"ap-connect-link\">02433c983b79</a></p>", "type": "rendered"}, "created_on": "2018-11-15T20:06:57.220247+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-11-15T20:06:57.229382+00:00", "type": "pullrequest_comment", "id": 82598083}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "132a395ad2a2", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/132a395ad2a2.json"}, "html": {"href": "#!/osrf/gazebo/commits/132a395ad2a2"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "02433c983b79", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/02433c983b79.json"}, "html": {"href": "#!/osrf/gazebo/commits/02433c983b79"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-11-15T20:06:46.804373+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/82479351.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-82479351"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "It's unlikely, but someone might try to use a shape other than cylinder or sphere for a wheel. Maybe print an error message here?", "markup": "markdown", "html": "<p>It's unlikely, but someone might try to use a shape other than cylinder or sphere for a wheel. Maybe print an error message here?</p>", "type": "rendered"}, "created_on": "2018-11-15T04:16:46.725625+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-11-15T04:16:46.732995+00:00", "type": "pullrequest_comment", "id": 82479351}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/82479284.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-82479284"}}, "parent": {"id": 82316014, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/82316014.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-82316014"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "Looks good, thanks.", "markup": "markdown", "html": "<p>Looks good, thanks.</p>", "type": "rendered"}, "created_on": "2018-11-15T04:15:05.899496+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-11-15T04:15:05.908695+00:00", "type": "pullrequest_comment", "id": 82479284}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/82316031.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-82316031"}}, "parent": {"id": 82306547, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/82306547.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-82306547"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "I address this in this comment: #!/osrf/gazebo/pull-requests/2950/adding-wheelslipplugin-for-adding-wheel/diff#comment-82316014", "markup": "markdown", "html": "<p>I address this in this comment: <a href=\"#!/osrf/gazebo/pull-requests/2950/adding-wheelslipplugin-for-adding-wheel/diff#comment-82316014\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/pull-requests/2950/adding-wheelslipplugin-for-adding-wheel/diff#comment-82316014</a></p>", "type": "rendered"}, "created_on": "2018-11-14T01:34:02.181273+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-11-14T01:34:02.190313+00:00", "type": "pullrequest_comment", "id": 82316031}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/82316014.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-82316014"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "@nkoenig this check will only pass on ODE and has an error message below. Is that sufficient or should I rephrase the message to say that it explicitly only works with ODE?", "markup": "markdown", "html": "<p>@nkoenig this check will only pass on ODE and has an error message below. Is that sufficient or should I rephrase the message to say that it explicitly only works with ODE?</p>", "type": "rendered"}, "created_on": "2018-11-14T01:33:41.062111+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-11-14T01:33:41.076696+00:00", "type": "pullrequest_comment", "id": 82316014}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/82306547.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-82306547"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "Based on some comments in this code, it seems that this plugin will only work with ODE. If that is correct, do you want to add a check for ODE?", "markup": "markdown", "html": "<p>Based on some comments in this code, it seems that this plugin will only work with ODE. If that is correct, do you want to add a check for ODE?</p>", "type": "rendered"}, "created_on": "2018-11-13T22:50:59.373185+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {}, "updated_on": "2018-11-13T22:50:59.380067+00:00", "type": "pullrequest_comment", "id": 82306547}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"approval": {"date": "2018-10-17T22:19:33.794199+00:00", "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/77090346.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-77090346"}}, "parent": {"id": 70932495, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/70932495.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-70932495"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "sure, I just added a description of the TireDrum test in 391b1e5, and noticed a bit more that could be added to describe the TriballDrift test so I expanded that too in 018bbed", "markup": "markdown", "html": "<p>sure, I just added a description of the TireDrum test in <a href=\"#!/osrf/gazebo/commits/391b1e5\" rel=\"nofollow\" class=\"ap-connect-link\">391b1e5</a>, and noticed a bit more that could be added to describe the TriballDrift test so I expanded that too in <a href=\"#!/osrf/gazebo/commits/018bbed\" rel=\"nofollow\" class=\"ap-connect-link\">018bbed</a></p>", "type": "rendered"}, "created_on": "2018-09-25T17:34:58.824773+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-09-25T17:34:58.833251+00:00", "type": "pullrequest_comment", "id": 77090346}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "02e3da787295", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/02e3da787295.json"}, "html": {"href": "#!/osrf/gazebo/commits/02e3da787295"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "391b1e5cd338", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/391b1e5cd338.json"}, "html": {"href": "#!/osrf/gazebo/commits/391b1e5cd338"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-09-25T17:19:27.360765+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "02e3da787295", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/02e3da787295.json"}, "html": {"href": "#!/osrf/gazebo/commits/02e3da787295"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "391b1e5cd338", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/391b1e5cd338.json"}, "html": {"href": "#!/osrf/gazebo/commits/391b1e5cd338"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-09-25T17:19:24.669936+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/76972871.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-76972871"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "This pull request is now relevant to subt, so I'm giving more attention to responding to these comments", "markup": "markdown", "html": "<p>This pull request is now relevant to subt, so I'm giving more attention to responding to these comments</p>", "type": "rendered"}, "created_on": "2018-09-25T01:09:29.432077+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-09-25T01:09:29.439585+00:00", "type": "pullrequest_comment", "id": 76972871}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/76972681.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-76972681"}}, "parent": {"id": 76968318, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/76968318.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-76968318"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "I've added some documentation in 4bc6304d9b01; let me know if it needs to be improved.\n\nI also slightly changed the calculation of the reference speed as discussed in the previous comment", "markup": "markdown", "html": "<p>I've added some documentation in <a href=\"#!/osrf/gazebo/commits/4bc6304d9b01\" rel=\"nofollow\" class=\"ap-connect-link\">4bc6304d9b01</a>; let me know if it needs to be improved.</p>\n<p>I also slightly changed the calculation of the reference speed as discussed in the previous comment</p>", "type": "rendered"}, "created_on": "2018-09-25T01:04:42.330098+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-09-25T01:04:42.344302+00:00", "type": "pullrequest_comment", "id": 76972681}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "02e3da787295", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/02e3da787295.json"}, "html": {"href": "#!/osrf/gazebo/commits/02e3da787295"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "4bc6304d9b01", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4bc6304d9b01.json"}, "html": {"href": "#!/osrf/gazebo/commits/4bc6304d9b01"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-09-25T01:03:29.894725+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/76968318.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-76968318"}}, "parent": {"id": 70362510, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/70362510.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-70362510"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "I'm writing up a response to this as a comment in the code\n\nWhile writing this response to this, it occurs to me that the joint velocity is measured relative to the parent, but I think the speed should be computed from the angular velocity of the child link relative to the world frame. I'll have an updated comment soon.", "markup": "markdown", "html": "<p>I'm writing up a response to this as a comment in the code</p>\n<p>While writing this response to this, it occurs to me that the joint velocity is measured relative to the parent, but I think the speed should be computed from the angular velocity of the child link relative to the world frame. I'll have an updated comment soon.</p>", "type": "rendered"}, "created_on": "2018-09-24T23:23:43.329613+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-09-24T23:23:43.337358+00:00", "type": "pullrequest_comment", "id": 76968318}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "02e3da787295", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/02e3da787295.json"}, "html": {"href": "#!/osrf/gazebo/commits/02e3da787295"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "a91a055bd94d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/a91a055bd94d.json"}, "html": {"href": "#!/osrf/gazebo/commits/a91a055bd94d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-09-24T22:55:21.624861+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "824370e3c0b5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/824370e3c0b5.json"}, "html": {"href": "#!/osrf/gazebo/commits/824370e3c0b5"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "b1d70a9d21d7", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b1d70a9d21d7.json"}, "html": {"href": "#!/osrf/gazebo/commits/b1d70a9d21d7"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-08-04T00:12:24.445185+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "824370e3c0b5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/824370e3c0b5.json"}, "html": {"href": "#!/osrf/gazebo/commits/824370e3c0b5"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "35aa216810dd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/35aa216810dd.json"}, "html": {"href": "#!/osrf/gazebo/commits/35aa216810dd"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-08-03T23:54:19.635296+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/70932495.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-70932495"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "@scpeters Could you add a description of what this test does? The description for the TriballDrift is very helpful.", "markup": "markdown", "html": "<p>@scpeters Could you add a description of what this test does? The description for the TriballDrift is very helpful.</p>", "type": "rendered"}, "created_on": "2018-07-25T01:23:24.198322+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {}, "updated_on": "2018-07-25T01:23:24.220033+00:00", "type": "pullrequest_comment", "id": 70932495}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/70362510.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-70362510"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "Could you comment on the use of the same `speed` for both lateral and longitudinal slips?", "markup": "markdown", "html": "<p>Could you comment on the use of the same <code>speed</code> for both lateral and longitudinal slips?</p>", "type": "rendered"}, "created_on": "2018-07-18T18:45:48.605146+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "inline": {}, "updated_on": "2018-07-18T18:45:48.613013+00:00", "type": "pullrequest_comment", "id": 70362510}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "5ea00f7a80bf", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/5ea00f7a80bf.json"}, "html": {"href": "#!/osrf/gazebo/commits/5ea00f7a80bf"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "21a42f49fae8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/21a42f49fae8.json"}, "html": {"href": "#!/osrf/gazebo/commits/21a42f49fae8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-06-27T21:55:22.889428+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "5ea00f7a80bf", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/5ea00f7a80bf.json"}, "html": {"href": "#!/osrf/gazebo/commits/5ea00f7a80bf"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "21a42f49fae8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/21a42f49fae8.json"}, "html": {"href": "#!/osrf/gazebo/commits/21a42f49fae8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-06-27T21:55:12.364962+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "e20236977379", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/e20236977379.json"}, "html": {"href": "#!/osrf/gazebo/commits/e20236977379"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "e94893104088", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/e94893104088.json"}, "html": {"href": "#!/osrf/gazebo/commits/e94893104088"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-06-09T07:34:31.156666+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "e20236977379", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/e20236977379.json"}, "html": {"href": "#!/osrf/gazebo/commits/e20236977379"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "4a8ca1c66b27", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4a8ca1c66b27.json"}, "html": {"href": "#!/osrf/gazebo/commits/4a8ca1c66b27"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-06-09T07:32:27.359832+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "e20236977379", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/e20236977379.json"}, "html": {"href": "#!/osrf/gazebo/commits/e20236977379"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "4a8ca1c66b27", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4a8ca1c66b27.json"}, "html": {"href": "#!/osrf/gazebo/commits/4a8ca1c66b27"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-06-09T07:32:17.800596+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b5a1ea31f988", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b5a1ea31f988.json"}, "html": {"href": "#!/osrf/gazebo/commits/b5a1ea31f988"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "0f04bacd485b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/0f04bacd485b.json"}, "html": {"href": "#!/osrf/gazebo/commits/0f04bacd485b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-31T21:47:07.565928+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b859fe2ecd54", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b859fe2ecd54.json"}, "html": {"href": "#!/osrf/gazebo/commits/b859fe2ecd54"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "3970ed70ea2e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/3970ed70ea2e.json"}, "html": {"href": "#!/osrf/gazebo/commits/3970ed70ea2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-11T22:41:53.010154+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/63976288.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-63976288"}}, "parent": {"id": 63948473, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/63948473.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-63948473"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "b38e659", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo/commits/b38e659\" rel=\"nofollow\" class=\"ap-connect-link\">b38e659</a></p>", "type": "rendered"}, "created_on": "2018-05-11T08:56:16.542400+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-05-11T08:56:16.552015+00:00", "type": "pullrequest_comment", "id": 63976288}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b859fe2ecd54", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b859fe2ecd54.json"}, "html": {"href": "#!/osrf/gazebo/commits/b859fe2ecd54"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "41c0f541bacc", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/41c0f541bacc.json"}, "html": {"href": "#!/osrf/gazebo/commits/41c0f541bacc"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-11T07:44:20.557164+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/63948473.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-63948473"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "\\`std::bind\\`?", "markup": "markdown", "html": "<p>`std::bind`?</p>", "type": "rendered"}, "created_on": "2018-05-11T00:36:25.536846+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {}, "updated_on": "2018-05-11T00:36:25.544055+00:00", "type": "pullrequest_comment", "id": 63948473}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b859fe2ecd54", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b859fe2ecd54.json"}, "html": {"href": "#!/osrf/gazebo/commits/b859fe2ecd54"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "0cea207b3124", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/0cea207b3124.json"}, "html": {"href": "#!/osrf/gazebo/commits/0cea207b3124"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-11T00:03:33.112596+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b859fe2ecd54", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b859fe2ecd54.json"}, "html": {"href": "#!/osrf/gazebo/commits/b859fe2ecd54"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "0cea207b3124", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/0cea207b3124.json"}, "html": {"href": "#!/osrf/gazebo/commits/0cea207b3124"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-11T00:03:30.191565+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/63944502.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-63944502"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "I made some minor style fixes in [b636b9c](#!/osrf/gazebo/commits/b636b9c0a6e4c5d73c32f4d57eaf6feb9cc7ca7e)", "markup": "markdown", "html": "<p>I made some minor style fixes in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/commits/b636b9c0a6e4c5d73c32f4d57eaf6feb9cc7ca7e\" rel=\"nofollow\">b636b9c</a></p>", "type": "rendered"}, "created_on": "2018-05-10T22:55:52.932772+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2018-05-10T22:55:52.939284+00:00", "type": "pullrequest_comment", "id": 63944502}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b859fe2ecd54", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b859fe2ecd54.json"}, "html": {"href": "#!/osrf/gazebo/commits/b859fe2ecd54"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "9281b03b772f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/9281b03b772f.json"}, "html": {"href": "#!/osrf/gazebo/commits/9281b03b772f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "date": "2018-05-10T22:53:26.819227+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/63938968.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-63938968"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "I bumped the gazebo minor version number to help gazebo_ros_pkgs avoid build errors:\n\n* https://github.com/ros-simulation/gazebo_ros_pkgs/commit/11bdeba78aaefd4abdad121b08fbeb15f6541353\n* https://github.com/ros-simulation/gazebo_ros_pkgs/compare/kinetic-devel...scpeters:wheel_slip_plugin", "markup": "markdown", "html": "<p>I bumped the gazebo minor version number to help gazebo_ros_pkgs avoid build errors:</p>\n<ul>\n<li><a href=\"https://github.com/ros-simulation/gazebo_ros_pkgs/commit/11bdeba78aaefd4abdad121b08fbeb15f6541353\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ros-simulation/gazebo_ros_pkgs/commit/11bdeba78aaefd4abdad121b08fbeb15f6541353</a></li>\n<li><a href=\"https://github.com/ros-simulation/gazebo_ros_pkgs/compare/kinetic-devel...scpeters:wheel_slip_plugin\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ros-simulation/gazebo_ros_pkgs/compare/kinetic-devel...scpeters:wheel_slip_plugin</a></li>\n</ul>", "type": "rendered"}, "created_on": "2018-05-10T21:19:46.455911+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-05-10T21:19:46.464914+00:00", "type": "pullrequest_comment", "id": 63938968}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b859fe2ecd54", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b859fe2ecd54.json"}, "html": {"href": "#!/osrf/gazebo/commits/b859fe2ecd54"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "f9663221fd7e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f9663221fd7e.json"}, "html": {"href": "#!/osrf/gazebo/commits/f9663221fd7e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-10T21:17:42.409769+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b859fe2ecd54", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b859fe2ecd54.json"}, "html": {"href": "#!/osrf/gazebo/commits/b859fe2ecd54"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "b413a3e093f7", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b413a3e093f7.json"}, "html": {"href": "#!/osrf/gazebo/commits/b413a3e093f7"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-10T21:03:06.138280+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b859fe2ecd54", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b859fe2ecd54.json"}, "html": {"href": "#!/osrf/gazebo/commits/b859fe2ecd54"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "5b6210a52ace", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/5b6210a52ace.json"}, "html": {"href": "#!/osrf/gazebo/commits/5b6210a52ace"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-10T21:01:41.869507+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "b859fe2ecd54", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b859fe2ecd54.json"}, "html": {"href": "#!/osrf/gazebo/commits/b859fe2ecd54"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "5b6210a52ace", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/5b6210a52ace.json"}, "html": {"href": "#!/osrf/gazebo/commits/5b6210a52ace"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-10T21:01:40.918120+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments/63364723.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950/_/diff#comment-63364723"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}, "content": {"raw": "homebrew build had network problem, so I started a new one:\n\n[![Build Status](https://build.osrfoundation.org/buildStatus/icon?job=gazebo-ci-pr_any-homebrew-amd64&build=1497)](https://build.osrfoundation.org/job/gazebo-ci-pr_any-homebrew-amd64/1497/) https://build.osrfoundation.org/job/gazebo-ci-pr_any-homebrew-amd64/1497/", "markup": "markdown", "html": "<p>homebrew build had network problem, so I started a new one:</p>\n<p><a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/gazebo-ci-pr_any-homebrew-amd64/1497/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://build.osrfoundation.org/buildStatus/icon?job=gazebo-ci-pr_any-homebrew-amd64&amp;build=1497\" /></a> <a href=\"https://build.osrfoundation.org/job/gazebo-ci-pr_any-homebrew-amd64/1497/\" rel=\"nofollow\" class=\"ap-connect-link\">https://build.osrfoundation.org/job/gazebo-ci-pr_any-homebrew-amd64/1497/</a></p>", "type": "rendered"}, "created_on": "2018-05-04T08:53:25.510322+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-05-04T08:53:25.520279+00:00", "type": "pullrequest_comment", "id": 63364723}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "f2727800348f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f2727800348f.json"}, "html": {"href": "#!/osrf/gazebo/commits/f2727800348f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "9051dd0603e6", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/9051dd0603e6.json"}, "html": {"href": "#!/osrf/gazebo/commits/9051dd0603e6"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-04T03:28:29.641388+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}, {"update": {"description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](https://bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "destination": {"commit": {"hash": "f2727800348f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f2727800348f.json"}, "html": {"href": "#!/osrf/gazebo/commits/f2727800348f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "9051dd0603e6", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/9051dd0603e6.json"}, "html": {"href": "#!/osrf/gazebo/commits/9051dd0603e6"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2018-05-04T03:28:29.609048+00:00"}, "pull_request": {"type": "pullrequest", "id": 2950, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters"}}]}