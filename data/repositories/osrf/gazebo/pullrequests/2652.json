{"rendered": {"description": {"raw": "* Added the base for tracked vehicles.\r\n* Added the simple tracked vehicle utilizing Contact Surface Motion method of track simulation.\r\n\r\nI'm gonna publish a paper at IROS 2017 about this method, so I wanted to share it to the community.\r\n\r\nThis is just a first shot at the API. I'll welcome any comments. What I'm most unsure about is:\r\n\r\n* I wanted to create a common interface all tracked vehicle plugins could use. However, I had some problems with linking or dynamic loading when I just dynamically linked the \"bottom\" plugin against the API plugin. Some discussion about rpath has already been there, and the agreement was that for plugins it's gonna stay there. But I'm not sure if it is expected to work \"inside\" Gazebo, or only for external code. For now, I'm building the API library statically, which I know is not ideal, but is the only thing that worked for me.\r\n* Is gazebo8 the right target? I didn't change anything outside the plugins dir \\(\\+ changelog and worlds\\).\r\n* I resorted to writing my own SDF parameter loading helpers, because the way they are read in other plugins seems really cumbersome to me \\(bascially copy&paste 10 lines of code for each parameter\\). Shouldn't that code be moved somewhere \"higher\" in the class hierarchy?\r\n* Is there no 3-valued `signum` function available in standard C/C\\+\\+ library or ignition?\r\n* Should the example model and obstacle be in this repo, or should they be moved to the OSRF model library?\r\n\r\nIf I'll find more time, I'll add the other models suggested in #!/osrf/gazebo/issues/863/tracksdriveplugin \\(I already have the implementations, but they need some cleanup\\). One thing that really stopped me for a long while was programmatic building of the model \\(generating the track pieces\\). I ended up writing SDF in C strings and calling `Link::Load()` or `Joint::Load()`. And removing links/joints seems to be even bigger pain in \\*\\*\\* . Is there some tutorial on programmatic building/destroying of the world? There also seems to be a \\(possibly unresolvable\\) problem that in SDF you can't specify a link connected to a joint that will be auto-generated by a plugin.", "markup": "markdown", "html": "<ul>\n<li>Added the base for tracked vehicles.</li>\n<li>Added the simple tracked vehicle utilizing Contact Surface Motion method of track simulation.</li>\n</ul>\n<p>I'm gonna publish a paper at IROS 2017 about this method, so I wanted to share it to the community.</p>\n<p>This is just a first shot at the API. I'll welcome any comments. What I'm most unsure about is:</p>\n<ul>\n<li>I wanted to create a common interface all tracked vehicle plugins could use. However, I had some problems with linking or dynamic loading when I just dynamically linked the \"bottom\" plugin against the API plugin. Some discussion about rpath has already been there, and the agreement was that for plugins it's gonna stay there. But I'm not sure if it is expected to work \"inside\" Gazebo, or only for external code. For now, I'm building the API library statically, which I know is not ideal, but is the only thing that worked for me.</li>\n<li>Is gazebo8 the right target? I didn't change anything outside the plugins dir (+ changelog and worlds).</li>\n<li>I resorted to writing my own SDF parameter loading helpers, because the way they are read in other plugins seems really cumbersome to me (bascially copy&amp;paste 10 lines of code for each parameter). Shouldn't that code be moved somewhere \"higher\" in the class hierarchy?</li>\n<li>Is there no 3-valued <code>signum</code> function available in standard C/C++ library or ignition?</li>\n<li>Should the example model and obstacle be in this repo, or should they be moved to the OSRF model library?</li>\n</ul>\n<p>If I'll find more time, I'll add the other models suggested in <a href=\"#!/osrf/gazebo/issues/863/tracksdriveplugin\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/issues/863/tracksdriveplugin</a> (I already have the implementations, but they need some cleanup). One thing that really stopped me for a long while was programmatic building of the model (generating the track pieces). I ended up writing SDF in C strings and calling <code>Link::Load()</code> or <code>Joint::Load()</code>. And removing links/joints seems to be even bigger pain in *** . Is there some tutorial on programmatic building/destroying of the world? There also seems to be a (possibly unresolvable) problem that in SDF you can't specify a link connected to a joint that will be auto-generated by a plugin.</p>", "type": "rendered"}, "title": {"raw": "Added support for tracked vehicles", "markup": "markdown", "html": "<p>Added support for tracked vehicles</p>", "type": "rendered"}}, "type": "pullrequest", "description": "* Added the base for tracked vehicles.\r\n* Added the simple tracked vehicle utilizing Contact Surface Motion method of track simulation.\r\n\r\nI'm gonna publish a paper at IROS 2017 about this method, so I wanted to share it to the community.\r\n\r\nThis is just a first shot at the API. I'll welcome any comments. What I'm most unsure about is:\r\n\r\n* I wanted to create a common interface all tracked vehicle plugins could use. However, I had some problems with linking or dynamic loading when I just dynamically linked the \"bottom\" plugin against the API plugin. Some discussion about rpath has already been there, and the agreement was that for plugins it's gonna stay there. But I'm not sure if it is expected to work \"inside\" Gazebo, or only for external code. For now, I'm building the API library statically, which I know is not ideal, but is the only thing that worked for me.\r\n* Is gazebo8 the right target? I didn't change anything outside the plugins dir \\(\\+ changelog and worlds\\).\r\n* I resorted to writing my own SDF parameter loading helpers, because the way they are read in other plugins seems really cumbersome to me \\(bascially copy&paste 10 lines of code for each parameter\\). Shouldn't that code be moved somewhere \"higher\" in the class hierarchy?\r\n* Is there no 3-valued `signum` function available in standard C/C\\+\\+ library or ignition?\r\n* Should the example model and obstacle be in this repo, or should they be moved to the OSRF model library?\r\n\r\nIf I'll find more time, I'll add the other models suggested in #!/osrf/gazebo/issues/863/tracksdriveplugin \\(I already have the implementations, but they need some cleanup\\). One thing that really stopped me for a long while was programmatic building of the model \\(generating the track pieces\\). I ended up writing SDF in C strings and calling `Link::Load()` or `Joint::Load()`. And removing links/joints seems to be even bigger pain in \\*\\*\\* . Is there some tutorial on programmatic building/destroying of the world? There also seems to be a \\(possibly unresolvable\\) problem that in SDF you can't specify a link connected to a joint that will be auto-generated by a plugin.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2652/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:d748dfe15bd1%0D5ee96ab35daa?from_pullrequest_id=2652"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2652/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2652.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2652/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2652/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2652"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2652/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:d748dfe15bd1%0D5ee96ab35daa?from_pullrequest_id=2652"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2652/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2652/statuses_page=1.json"}}, "title": "Added support for tracked vehicles", "close_source_branch": false, "reviewers": [], "id": 2652, "destination": {"commit": {"hash": "5ee96ab35daa", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/5ee96ab35daa.json"}, "html": {"href": "#!/osrf/gazebo/commits/5ee96ab35daa"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "created_on": "2017-03-01T05:01:36.692514+00:00", "summary": {"raw": "* Added the base for tracked vehicles.\r\n* Added the simple tracked vehicle utilizing Contact Surface Motion method of track simulation.\r\n\r\nI'm gonna publish a paper at IROS 2017 about this method, so I wanted to share it to the community.\r\n\r\nThis is just a first shot at the API. I'll welcome any comments. What I'm most unsure about is:\r\n\r\n* I wanted to create a common interface all tracked vehicle plugins could use. However, I had some problems with linking or dynamic loading when I just dynamically linked the \"bottom\" plugin against the API plugin. Some discussion about rpath has already been there, and the agreement was that for plugins it's gonna stay there. But I'm not sure if it is expected to work \"inside\" Gazebo, or only for external code. For now, I'm building the API library statically, which I know is not ideal, but is the only thing that worked for me.\r\n* Is gazebo8 the right target? I didn't change anything outside the plugins dir \\(\\+ changelog and worlds\\).\r\n* I resorted to writing my own SDF parameter loading helpers, because the way they are read in other plugins seems really cumbersome to me \\(bascially copy&paste 10 lines of code for each parameter\\). Shouldn't that code be moved somewhere \"higher\" in the class hierarchy?\r\n* Is there no 3-valued `signum` function available in standard C/C\\+\\+ library or ignition?\r\n* Should the example model and obstacle be in this repo, or should they be moved to the OSRF model library?\r\n\r\nIf I'll find more time, I'll add the other models suggested in #!/osrf/gazebo/issues/863/tracksdriveplugin \\(I already have the implementations, but they need some cleanup\\). One thing that really stopped me for a long while was programmatic building of the model \\(generating the track pieces\\). I ended up writing SDF in C strings and calling `Link::Load()` or `Joint::Load()`. And removing links/joints seems to be even bigger pain in \\*\\*\\* . Is there some tutorial on programmatic building/destroying of the world? There also seems to be a \\(possibly unresolvable\\) problem that in SDF you can't specify a link connected to a joint that will be auto-generated by a plugin.", "markup": "markdown", "html": "<ul>\n<li>Added the base for tracked vehicles.</li>\n<li>Added the simple tracked vehicle utilizing Contact Surface Motion method of track simulation.</li>\n</ul>\n<p>I'm gonna publish a paper at IROS 2017 about this method, so I wanted to share it to the community.</p>\n<p>This is just a first shot at the API. I'll welcome any comments. What I'm most unsure about is:</p>\n<ul>\n<li>I wanted to create a common interface all tracked vehicle plugins could use. However, I had some problems with linking or dynamic loading when I just dynamically linked the \"bottom\" plugin against the API plugin. Some discussion about rpath has already been there, and the agreement was that for plugins it's gonna stay there. But I'm not sure if it is expected to work \"inside\" Gazebo, or only for external code. For now, I'm building the API library statically, which I know is not ideal, but is the only thing that worked for me.</li>\n<li>Is gazebo8 the right target? I didn't change anything outside the plugins dir (+ changelog and worlds).</li>\n<li>I resorted to writing my own SDF parameter loading helpers, because the way they are read in other plugins seems really cumbersome to me (bascially copy&amp;paste 10 lines of code for each parameter). Shouldn't that code be moved somewhere \"higher\" in the class hierarchy?</li>\n<li>Is there no 3-valued <code>signum</code> function available in standard C/C++ library or ignition?</li>\n<li>Should the example model and obstacle be in this repo, or should they be moved to the OSRF model library?</li>\n</ul>\n<p>If I'll find more time, I'll add the other models suggested in <a href=\"#!/osrf/gazebo/issues/863/tracksdriveplugin\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/issues/863/tracksdriveplugin</a> (I already have the implementations, but they need some cleanup). One thing that really stopped me for a long while was programmatic building of the model (generating the track pieces). I ended up writing SDF in C strings and calling <code>Link::Load()</code> or <code>Joint::Load()</code>. And removing links/joints seems to be even bigger pain in *** . Is there some tutorial on programmatic building/destroying of the world? There also seems to be a (possibly unresolvable) problem that in SDF you can't specify a link connected to a joint that will be auto-generated by a plugin.</p>", "type": "rendered"}, "source": {"commit": {"hash": "7e49704008a8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/peci1/gazebo/commit/7e49704008a8"}, "html": {"href": "https://bitbucket.org/peci1/gazebo/commits/7e49704008a8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/peci1/gazebo"}, "html": {"href": "https://bitbucket.org/peci1/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5c0265bf-91e2-463c-bbb1-7fa554f310a0}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "peci1/gazebo", "uuid": "{5c0265bf-91e2-463c-bbb1-7fa554f310a0}"}, "branch": {"name": "tracked_vehicles"}}, "comment_count": 146, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2020-02-05T07:04:27.685115+00:00", "type": "participant", "approved": false, "user": {"display_name": "Dmitriy Vornychev", "uuid": "{7e33f290-570b-4486-ba0f-ef7f4ccd808d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e33f290-570b-4486-ba0f-ef7f4ccd808d%7D"}, "html": {"href": "https://bitbucket.org/%7B7e33f290-570b-4486-ba0f-ef7f4ccd808d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/6ed7bbf03405fe938d05b25dfb7c6f2bd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDV-3.png"}}, "nickname": "deitry", "type": "user", "account_id": "5b2bea758ed0a74e47a94f5a"}}, {"role": "PARTICIPANT", "participated_on": "2019-05-14T17:09:00.084461+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2019-05-07T15:18:19.271284+00:00", "type": "participant", "approved": true, "user": {"display_name": "Javier Iv\u00e1n Choclin", "uuid": "{745acb37-6a3b-4169-8ba9-2c142a7408fb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B745acb37-6a3b-4169-8ba9-2c142a7408fb%7D"}, "html": {"href": "https://bitbucket.org/%7B745acb37-6a3b-4169-8ba9-2c142a7408fb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2279399d-3c75-4e1e-b818-4fb8339b2939/26f5815d-5477-4106-ba9b-ac56ee23e175/128"}}, "nickname": "Javier Choclin", "type": "user", "account_id": "557058:2279399d-3c75-4e1e-b818-4fb8339b2939"}}, {"role": "PARTICIPANT", "participated_on": "2017-07-07T17:31:00.619286+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2019-05-14T10:07:27.423614+00:00", "type": "participant", "approved": false, "user": {"display_name": "Tim Clephas", "uuid": "{35f08669-ecd1-47a0-b412-3e93f1d70017}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B35f08669-ecd1-47a0-b412-3e93f1d70017%7D"}, "html": {"href": "https://bitbucket.org/%7B35f08669-ecd1-47a0-b412-3e93f1d70017%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:98cae2ab-bc88-45c2-b44b-8610647da5ca/fe5ed15f-bebd-4d84-a14a-cd0dde4e9ea6/128"}}, "nickname": "Tim Clephas", "type": "user", "account_id": "557058:98cae2ab-bc88-45c2-b44b-8610647da5ca"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-11T22:27:23.609818+00:00", "type": "participant", "approved": false, "user": {"display_name": "Francisco S\u00e1nchez", "uuid": "{3e1b539e-f4d6-4bd4-90a3-f28934902d42}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3e1b539e-f4d6-4bd4-90a3-f28934902d42%7D"}, "html": {"href": "https://bitbucket.org/%7B3e1b539e-f4d6-4bd4-90a3-f28934902d42%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1d324772854db6fd82463ff2970bc1c2d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsFS-6.png"}}, "nickname": "FJ_Sanchez", "type": "user", "account_id": "557058:6ca29c42-79b3-485b-8aae-733d865ea435"}}, {"role": "PARTICIPANT", "participated_on": "2017-11-17T15:26:14.662126+00:00", "type": "participant", "approved": false, "user": {"display_name": "Philip", "uuid": "{9698d1a6-994f-4bd0-ac88-485da498f1e3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9698d1a6-994f-4bd0-ac88-485da498f1e3%7D"}, "html": {"href": "https://bitbucket.org/%7B9698d1a6-994f-4bd0-ac88-485da498f1e3%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/eff00867f81bd0897d79525a81bc0348d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsP-2.png"}}, "nickname": "Flipse789", "type": "user", "account_id": "557058:abcc4a84-8ee8-413a-adc6-e6c8553b65e1"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-31T17:17:12.403543+00:00", "type": "participant", "approved": false, "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}}, {"role": "PARTICIPANT", "participated_on": "2019-05-10T22:20:36.834000+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2020-03-21T18:15:04.737966+00:00", "author": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "merge_commit": {"hash": "d748dfe15bd1", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/d748dfe15bd1.json"}, "html": {"href": "#!/osrf/gazebo/commits/d748dfe15bd1"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}