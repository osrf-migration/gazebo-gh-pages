{"rendered": {"description": {"raw": "Are you ready for the future?\r\n\r\nUsing the `auto` keyword with range-based for loops can make for loops with iterators much more concise. Also, using `auto &` or `auto const &` simplifies the syntax for using the iterated value, so you don't have to do `(*iter)->Method()`.\r\n\r\nOne caveat is that range-based for loops can't be used when iterators step through in a non-linear fashion, or try to erase iterators from an STL container (several instances in World.cc at the very bottom of this page). For these cases, I used the `auto keyword` in a traditional for loop.\r\n\r\nThis pull request is not urgent, but it's a friendly reminder that the `auto` keyword is awesome.\r\n\r\nFor reviewing, I recommend the side-by-side view of the diff.", "markup": "markdown", "html": "<p>Are you ready for the future?</p>\n<p>Using the <code>auto</code> keyword with range-based for loops can make for loops with iterators much more concise. Also, using <code>auto &amp;</code> or <code>auto const &amp;</code> simplifies the syntax for using the iterated value, so you don't have to do <code>(*iter)-&gt;Method()</code>.</p>\n<p>One caveat is that range-based for loops can't be used when iterators step through in a non-linear fashion, or try to erase iterators from an STL container (several instances in World.cc at the very bottom of this page). For these cases, I used the <code>auto keyword</code> in a traditional for loop.</p>\n<p>This pull request is not urgent, but it's a friendly reminder that the <code>auto</code> keyword is awesome.</p>\n<p>For reviewing, I recommend the side-by-side view of the diff.</p>", "type": "rendered"}, "title": {"raw": "C++11: use auto to shorten for loops with iterators", "markup": "markdown", "html": "<p>C++11: use auto to shorten for loops with iterators</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Are you ready for the future?\r\n\r\nUsing the `auto` keyword with range-based for loops can make for loops with iterators much more concise. Also, using `auto &` or `auto const &` simplifies the syntax for using the iterated value, so you don't have to do `(*iter)->Method()`.\r\n\r\nOne caveat is that range-based for loops can't be used when iterators step through in a non-linear fashion, or try to erase iterators from an STL container (several instances in World.cc at the very bottom of this page). For these cases, I used the `auto keyword` in a traditional for loop.\r\n\r\nThis pull request is not urgent, but it's a friendly reminder that the `auto` keyword is awesome.\r\n\r\nFor reviewing, I recommend the side-by-side view of the diff.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1410/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:24ea03665ae7%0D54d56d8b73b4?from_pullrequest_id=1410"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/1410/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/1410.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/1410/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1410/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1410"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/1410/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:24ea03665ae7%0D54d56d8b73b4?from_pullrequest_id=1410"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1410/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/1410/statuses_page=1.json"}}, "title": "C++11: use auto to shorten for loops with iterators", "close_source_branch": true, "reviewers": [], "id": 1410, "destination": {"commit": {"hash": "54d56d8b73b4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/54d56d8b73b4.json"}, "html": {"href": "#!/osrf/gazebo/commits/54d56d8b73b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo5"}}, "created_on": "2015-02-03T09:55:04.362013+00:00", "summary": {"raw": "Are you ready for the future?\r\n\r\nUsing the `auto` keyword with range-based for loops can make for loops with iterators much more concise. Also, using `auto &` or `auto const &` simplifies the syntax for using the iterated value, so you don't have to do `(*iter)->Method()`.\r\n\r\nOne caveat is that range-based for loops can't be used when iterators step through in a non-linear fashion, or try to erase iterators from an STL container (several instances in World.cc at the very bottom of this page). For these cases, I used the `auto keyword` in a traditional for loop.\r\n\r\nThis pull request is not urgent, but it's a friendly reminder that the `auto` keyword is awesome.\r\n\r\nFor reviewing, I recommend the side-by-side view of the diff.", "markup": "markdown", "html": "<p>Are you ready for the future?</p>\n<p>Using the <code>auto</code> keyword with range-based for loops can make for loops with iterators much more concise. Also, using <code>auto &amp;</code> or <code>auto const &amp;</code> simplifies the syntax for using the iterated value, so you don't have to do <code>(*iter)-&gt;Method()</code>.</p>\n<p>One caveat is that range-based for loops can't be used when iterators step through in a non-linear fashion, or try to erase iterators from an STL container (several instances in World.cc at the very bottom of this page). For these cases, I used the <code>auto keyword</code> in a traditional for loop.</p>\n<p>This pull request is not urgent, but it's a friendly reminder that the <code>auto</code> keyword is awesome.</p>\n<p>For reviewing, I recommend the side-by-side view of the diff.</p>", "type": "rendered"}, "source": {"commit": {"hash": "d0a3dfb63727", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/d0a3dfb63727.json"}, "html": {"href": "#!/osrf/gazebo/commits/d0a3dfb63727"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "cpp11_auto_forloops"}}, "comment_count": 11, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2015-02-06T01:14:09.818857+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2015-02-06T03:31:11.120372+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2015-02-05T19:40:17.845738+00:00", "type": "participant", "approved": true, "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}}, {"role": "PARTICIPANT", "participated_on": "2015-02-07T01:10:02.276161+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2015-02-07T01:22:50.490562+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "24ea03665ae7", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/24ea03665ae7.json"}, "html": {"href": "#!/osrf/gazebo/commits/24ea03665ae7"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}