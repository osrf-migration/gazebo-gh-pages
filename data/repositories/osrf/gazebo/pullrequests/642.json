{"rendered": {"description": {"raw": "cppcheck is [complaining](http://build.osrfoundation.org/view/ubuntu-raring/job/gazebo-any-devel-raring-amd64-no-gpu/4/cppcheckResult/) about a bad use of std::remove in a list. I've never seen that before, but I would say that cppcheck is probably right.\r\n\r\nMy approach was converting it to own list remove method, using the already implemented Filter == operator overload which compares names.", "markup": "markdown", "html": "<p>cppcheck is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/ubuntu-raring/job/gazebo-any-devel-raring-amd64-no-gpu/4/cppcheckResult/\" rel=\"nofollow\">complaining</a> about a bad use of std::remove in a list. I've never seen that before, but I would say that cppcheck is probably right.</p>\n<p>My approach was converting it to own list remove method, using the already implemented Filter == operator overload which compares names.</p>", "type": "rendered"}, "title": {"raw": "cppcheck warn: proper remove in std::list", "markup": "markdown", "html": "<p>cppcheck warn: proper remove in std::list</p>", "type": "rendered"}}, "type": "pullrequest", "description": "cppcheck is [complaining](http://build.osrfoundation.org/view/ubuntu-raring/job/gazebo-any-devel-raring-amd64-no-gpu/4/cppcheckResult/) about a bad use of std::remove in a list. I've never seen that before, but I would say that cppcheck is probably right.\r\n\r\nMy approach was converting it to own list remove method, using the already implemented Filter == operator overload which compares names.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/642/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:4d700a305e4c%0D9944b23bee40?from_pullrequest_id=642"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/642/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/642.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/642/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/642/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/642"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/642/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:4d700a305e4c%0D9944b23bee40?from_pullrequest_id=642"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/642/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/642/statuses_page=1.json"}}, "title": "cppcheck warn: proper remove in std::list", "close_source_branch": true, "reviewers": [], "id": 642, "destination": {"commit": {"hash": "9944b23bee40", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/9944b23bee40.json"}, "html": {"href": "#!/osrf/gazebo/commits/9944b23bee40"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2013-08-05T17:34:15.169659+00:00", "summary": {"raw": "cppcheck is [complaining](http://build.osrfoundation.org/view/ubuntu-raring/job/gazebo-any-devel-raring-amd64-no-gpu/4/cppcheckResult/) about a bad use of std::remove in a list. I've never seen that before, but I would say that cppcheck is probably right.\r\n\r\nMy approach was converting it to own list remove method, using the already implemented Filter == operator overload which compares names.", "markup": "markdown", "html": "<p>cppcheck is <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/ubuntu-raring/job/gazebo-any-devel-raring-amd64-no-gpu/4/cppcheckResult/\" rel=\"nofollow\">complaining</a> about a bad use of std::remove in a list. I've never seen that before, but I would say that cppcheck is probably right.</p>\n<p>My approach was converting it to own list remove method, using the already implemented Filter == operator overload which compares names.</p>", "type": "rendered"}, "source": {"commit": {"hash": "34374008bc5e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/34374008bc5e.json"}, "html": {"href": "#!/osrf/gazebo/commits/34374008bc5e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "fix_cppcheck_stdremove"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2013-08-06T16:25:16.467527+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2013-08-05T17:37:23.504451+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2013-08-06T20:55:12.782201+00:00", "author": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "merge_commit": {"hash": "4d700a305e4c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4d700a305e4c.json"}, "html": {"href": "#!/osrf/gazebo/commits/4d700a305e4c"}}}, "closed_by": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}}