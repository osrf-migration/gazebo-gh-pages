{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2666/comments/33756834.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:350a7cd26646..b99f32c9ffe2?path=gz_ecs%2Finclude%2Fgazebo%2Fecs%2FManager.hh"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2666/_/diff#comment-33756834"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2666, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2666.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2666"}}, "title": "Ecs nate"}, "content": {"raw": "I'm concerned about combining the EntityManager and SystemManager roles into a single class. These are big and very different responsibilities. It sounds like the reasoning for combining the two was to reduce the number of files. I can see how that might look like a good idea because the implementations are still very simple and slow. If combined this source file will be big, and it will be harder to find code among many unrelated functions.\n\nentity/component storage and querying means:\n\n* making sure components that get queried together are tightly packed for cache efficiency\n* returning query results return entities in the same order that components are stored in memory\n* Tracking when components change and including that in the results (If a pose changes, the physics system should move the thing in it's internal world)\n* Offer copy-on-write for components so that each update is deterministic. (The reason for this requires thinking about the system managing responsibility. For example, one system may read a component and another may write to the same component. The system manager will make sure they don't run at the same time, but what if they run on different cores or machines such that sometimes the reader runs first, and sometimes the writer runs first? Simulation behavior becomes dependent on OS scheduling. This becomes deterministic if each update works with a snapshot of the entities/components with the changes being applied after all work is done.)\n\nSystem running means:\n\n* Running systems regularly ever simulation time step\n* Scheduling systems to run in parallel when possible\n\nOther ECS implementations have also made the design choice to split these responsibilities into EntityManager and SystemManager classes. See [artemis-cPP](https://github.com/vinova/Artemis-Cpp) and [EntityX](https://github.com/alecthomas/entityx). Though, both of them also have a convenience class that has an instance of an EntityManager and a SystemManager ( [class World](https://github.com/vinova/Artemis-Cpp/blob/master/include/Artemis/World.h) in Artemis and [class EntityX](https://github.com/alecthomas/entityx/blob/master/entityx/quick.h) in EntityX.", "markup": "markdown", "html": "<p>I'm concerned about combining the EntityManager and SystemManager roles into a single class. These are big and very different responsibilities. It sounds like the reasoning for combining the two was to reduce the number of files. I can see how that might look like a good idea because the implementations are still very simple and slow. If combined this source file will be big, and it will be harder to find code among many unrelated functions.</p>\n<p>entity/component storage and querying means:</p>\n<ul>\n<li>making sure components that get queried together are tightly packed for cache efficiency</li>\n<li>returning query results return entities in the same order that components are stored in memory</li>\n<li>Tracking when components change and including that in the results (If a pose changes, the physics system should move the thing in it's internal world)</li>\n<li>Offer copy-on-write for components so that each update is deterministic. (The reason for this requires thinking about the system managing responsibility. For example, one system may read a component and another may write to the same component. The system manager will make sure they don't run at the same time, but what if they run on different cores or machines such that sometimes the reader runs first, and sometimes the writer runs first? Simulation behavior becomes dependent on OS scheduling. This becomes deterministic if each update works with a snapshot of the entities/components with the changes being applied after all work is done.)</li>\n</ul>\n<p>System running means:</p>\n<ul>\n<li>Running systems regularly ever simulation time step</li>\n<li>Scheduling systems to run in parallel when possible</li>\n</ul>\n<p>Other ECS implementations have also made the design choice to split these responsibilities into EntityManager and SystemManager classes. See <a data-is-external-link=\"true\" href=\"https://github.com/vinova/Artemis-Cpp\" rel=\"nofollow\">artemis-cPP</a> and <a data-is-external-link=\"true\" href=\"https://github.com/alecthomas/entityx\" rel=\"nofollow\">EntityX</a>. Though, both of them also have a convenience class that has an instance of an EntityManager and a SystemManager ( <a data-is-external-link=\"true\" href=\"https://github.com/vinova/Artemis-Cpp/blob/master/include/Artemis/World.h\" rel=\"nofollow\">class World</a> in Artemis and <a data-is-external-link=\"true\" href=\"https://github.com/alecthomas/entityx/blob/master/entityx/quick.h\" rel=\"nofollow\">class EntityX</a> in EntityX.</p>", "type": "rendered"}, "created_on": "2017-03-23T18:09:41.574036+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {"to": 36, "from": null, "outdated": false, "path": "gz_ecs/include/gazebo/ecs/Manager.hh"}, "updated_on": "2017-03-23T18:09:41.576777+00:00", "type": "pullrequest_comment", "id": 33756834}