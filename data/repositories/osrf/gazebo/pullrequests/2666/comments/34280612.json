{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2666/comments/34280612.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:350a7cd26646..b99f32c9ffe2?path=gz_ecs%2Finclude%2Fgazebo%2Fecs%2FComponentFactory.hh"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2666/_/diff#comment-34280612"}}, "parent": {"id": 34037583, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2666/comments/34037583.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2666/_/diff#comment-34037583"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2666, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2666.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2666"}}, "title": "Ecs nate"}, "content": {"raw": "In 64c54e4 I changed `ComponentFactory` to store 3 lambdas:\n\n1. One that constructs the object\n1. One that destructs the object\n1. One that moves the object from one location to another\n\nThe first two do so without allocating/freeing memory to allow components to be constructed/destructed adjacent to each other in a large continuous block of already allocated memory. The movement lambda is a premature optimization. I'm thinking it should be eliminated until the performance of moving an object becomes a bottle neck. Alternatively it could call the type's move constructor.\n\nI want to keep the commits I make small so each change is reviewable; however in this case the change to the factory affected nearly every file.", "markup": "markdown", "html": "<p>In <a href=\"#!/osrf/gazebo/commits/64c54e4\" rel=\"nofollow\" class=\"ap-connect-link\">64c54e4</a> I changed <code>ComponentFactory</code> to store 3 lambdas:</p>\n<ol>\n<li>One that constructs the object</li>\n<li>One that destructs the object</li>\n<li>One that moves the object from one location to another</li>\n</ol>\n<p>The first two do so without allocating/freeing memory to allow components to be constructed/destructed adjacent to each other in a large continuous block of already allocated memory. The movement lambda is a premature optimization. I'm thinking it should be eliminated until the performance of moving an object becomes a bottle neck. Alternatively it could call the type's move constructor.</p>\n<p>I want to keep the commits I make small so each change is reviewable; however in this case the change to the factory affected nearly every file.</p>", "type": "rendered"}, "created_on": "2017-03-31T22:12:14.208997+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {"to": null, "from": null, "outdated": false, "path": "gz_ecs/include/gazebo/ecs/ComponentFactory.hh"}, "updated_on": "2017-03-31T22:12:14.211610+00:00", "type": "pullrequest_comment", "id": 34280612}