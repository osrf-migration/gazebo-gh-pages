{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2666/comments/34281456.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:350a7cd26646..b99f32c9ffe2?path=gz_ecs%2Fsystems%2FAddAndPrintResult.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2666/_/diff#comment-34281456"}}, "parent": {"id": 34037749, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2666/comments/34037749.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2666/_/diff#comment-34037749"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2666, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2666.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2666"}}, "title": "Ecs nate"}, "content": {"raw": "In 64c54e4 an entity's component can be gotten without using the name as an argument. Example `entityInstance.Component<::my_ns::MyType>()`. I did this by removing `ComponentId`. Where `ComponentId` was used as a function argument I replaced it with an `EntityId` and `ComponentType`. Where `ComponetId` was used as a key I replaced it with `std::make_pair<EntityId, ComponentType>`. Then I had the `ComponentFactory` store a `typeid(T).hash_code()` of the original type when the type is registered. This  allows the `ComponentFactory` to turn a template type into a `ComponentType`, which allows the API for getting a component to be simplified to not need the component name.\n\nA weak reason for removing ComponentId is that it can become stale when a component is removed from an entity. However, EntityId also becomes stale when an Entity is deleted, and I don't expect that to cause any problems.\n\nI also removed `Component` and `ComponentBase`. They became unnecessary after eliminating `ComponentId`, and removing them freed the symbol `Component`.", "markup": "markdown", "html": "<p>In <a href=\"#!/osrf/gazebo/commits/64c54e4\" rel=\"nofollow\" class=\"ap-connect-link\">64c54e4</a> an entity's component can be gotten without using the name as an argument. Example <code>entityInstance.Component&lt;::my_ns::MyType&gt;()</code>. I did this by removing <code>ComponentId</code>. Where <code>ComponentId</code> was used as a function argument I replaced it with an <code>EntityId</code> and <code>ComponentType</code>. Where <code>ComponetId</code> was used as a key I replaced it with <code>std::make_pair&lt;EntityId, ComponentType&gt;</code>. Then I had the <code>ComponentFactory</code> store a <code>typeid(T).hash_code()</code> of the original type when the type is registered. This  allows the <code>ComponentFactory</code> to turn a template type into a <code>ComponentType</code>, which allows the API for getting a component to be simplified to not need the component name.</p>\n<p>A weak reason for removing ComponentId is that it can become stale when a component is removed from an entity. However, EntityId also becomes stale when an Entity is deleted, and I don't expect that to cause any problems.</p>\n<p>I also removed <code>Component</code> and <code>ComponentBase</code>. They became unnecessary after eliminating <code>ComponentId</code>, and removing them freed the symbol <code>Component</code>.</p>", "type": "rendered"}, "created_on": "2017-03-31T22:42:20.785675+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {"to": null, "from": null, "outdated": false, "path": "gz_ecs/systems/AddAndPrintResult.cc"}, "updated_on": "2017-03-31T22:42:20.787925+00:00", "type": "pullrequest_comment", "id": 34281456}