{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1506/comments/6063740.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:None..None?path=gazebo%2Fgui%2FApplyWrenchDialog.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1506/_/diff#comment-6063740"}}, "parent": {"id": 6063397, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1506/comments/6063397.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1506/_/diff#comment-6063397"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1506, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1506.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1506"}}, "title": "Apply Force/Torque GUI"}, "content": {"raw": "right... the backtrace does say it's a double free, but the stack frame is not very helpful about where the segfault originated. I think this is a plausible scenario:\n\n1. Thread 1 enters `OnResponse`. gets to line 620 (deletes `requestMsg` pointer but does not get to set it to NULL)\n2. Thread 2 enters `OnResponse`, gets pass initial check because `requestMsg` is not NULL\n3. Thread 2 deletes `requestMsg` again, leading to memory corruption\n4. Thread 1 sets `requestMsg` to NULL\n5. Thread 2 sets `requestMsg to NULL\n4. Thread 3 tries to access corrupted memory location while cleaning up memory allocated for Qt, segfaults", "markup": "markdown", "html": "<p>right... the backtrace does say it's a double free, but the stack frame is not very helpful about where the segfault originated. I think this is a plausible scenario:</p>\n<ol>\n<li>Thread 1 enters <code>OnResponse</code>. gets to line 620 (deletes <code>requestMsg</code> pointer but does not get to set it to NULL)</li>\n<li>Thread 2 enters <code>OnResponse</code>, gets pass initial check because <code>requestMsg</code> is not NULL</li>\n<li>Thread 2 deletes <code>requestMsg</code> again, leading to memory corruption</li>\n<li>Thread 1 sets <code>requestMsg</code> to NULL</li>\n<li>Thread 2 sets `requestMsg to NULL</li>\n<li>Thread 3 tries to access corrupted memory location while cleaning up memory allocated for Qt, segfaults</li>\n</ol>", "type": "rendered"}, "created_on": "2015-04-03T18:24:38.742602+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": null, "from": null, "outdated": false, "path": "gazebo/gui/ApplyWrenchDialog.cc"}, "updated_on": "2015-04-03T18:24:38.752750+00:00", "type": "pullrequest_comment", "id": 6063740}