{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2840/comments/52849973.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2840/_/diff#comment-52849973"}}, "parent": {"id": 52848243, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2840/comments/52848243.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2840/_/diff#comment-52848243"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2840, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2840.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2840"}}, "title": "Move BUILD_TYPE_* macros to test_config.h (#2343)"}, "content": {"raw": "Changing the name to `GAZEBO_BUILD_TYPE_*` won't tic-toc either. Users' code will just behave as if none of the build type macros have been specified. Unless their code is specifically designed to fail compilation in the absence of a build type macro (which is very unlikely), they won't realize that this change has occurred.\n\nIf we only deprecate the macros, the build issue with DART will still persist. I wouldn't be shocked if there are other libraries out there who are also defining a `BUILD_TYPE_*` macro, unaware of the conflicts that it may cause.\n\nIt seems to me that if we *really* want to tic-toc this, the best we can do would be something like\n\n```\n// In gazebo_config.h.in\n\n#define GZ_STRINGIFY(x) #x\n\n#if defined __GNUC__\n\n#define GZ_COMPILE_WARNING_HELPER(x) \\\n  GZ_STRINGIFY(GCC warning x)\n\n#define GZ_COMPILE_WARNING(x) \\\n  _Pragma(GZ_COMPILE_WARNING_HELPER(#x))\n\n#elif defined _MSC_VER\n\n#define GZ_COMPILE_WARNING(x) \\\n  __pragma(message(x))\n\n#endif\n\n\n#ifndef BUILD_TYPE_PROFILE\n#cmakedefine BUILD_TYPE_PROFILE 1 GZ_COMPILE_WARNING(BUILD_TYPE_PROFILE is deprecated)\n#endif\n\n#ifndef BUILD_TYPE_DEBUG\n#cmakedefine BUILD_TYPE_DEBUG 1 GZ_COMPILE_WARNING(BUILD_TYPE_DEBUG is deprecated)\n#endif\n\n#ifndef BUILD_TYPE_RELEASE\n#cmakedefine BUILD_TYPE_RELEASE 1 GZ_COMPILE_WARNING(BUILD_TYPE_RELEASE is deprecated)\n#endif\n\n#ifndef BUILD_TYPE_COVERAGE\n#cmakedefine BUILD_TYPE_COVERAGE 1 GZ_COMPILE_WARNING(BUILD_TYPE_COVERAGE is deprecated)\n#endif\n```\n\nThe first half of that is just boilerplate to get cross-platform macro deprecation (which it turns out is not a trivial thing). For Visual Studio users, these will only appear as compile-time messages, not as warnings, but as far as I can tell, that's the best that can be offered for deprecating a macro in Visual Studio.", "markup": "markdown", "html": "<p>Changing the name to <code>GAZEBO_BUILD_TYPE_*</code> won't tic-toc either. Users' code will just behave as if none of the build type macros have been specified. Unless their code is specifically designed to fail compilation in the absence of a build type macro (which is very unlikely), they won't realize that this change has occurred.</p>\n<p>If we only deprecate the macros, the build issue with DART will still persist. I wouldn't be shocked if there are other libraries out there who are also defining a <code>BUILD_TYPE_*</code> macro, unaware of the conflicts that it may cause.</p>\n<p>It seems to me that if we <em>really</em> want to tic-toc this, the best we can do would be something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// In gazebo_config.h.in</span>\n\n<span class=\"cp\">#define GZ_STRINGIFY(x) #x</span>\n\n<span class=\"cp\">#if defined __GNUC__</span>\n\n<span class=\"cp\">#define GZ_COMPILE_WARNING_HELPER(x) \\</span>\n<span class=\"cp\">  GZ_STRINGIFY(GCC warning x)</span>\n\n<span class=\"cp\">#define GZ_COMPILE_WARNING(x) \\</span>\n<span class=\"cp\">  _Pragma(GZ_COMPILE_WARNING_HELPER(#x))</span>\n\n<span class=\"cp\">#elif defined _MSC_VER</span>\n\n<span class=\"cp\">#define GZ_COMPILE_WARNING(x) \\</span>\n<span class=\"cp\">  __pragma(message(x))</span>\n\n<span class=\"cp\">#endif</span>\n\n\n<span class=\"cp\">#ifndef BUILD_TYPE_PROFILE</span>\n<span class=\"cp\">#cmakedefine BUILD_TYPE_PROFILE 1 GZ_COMPILE_WARNING(BUILD_TYPE_PROFILE is deprecated)</span>\n<span class=\"cp\">#endif</span>\n\n<span class=\"cp\">#ifndef BUILD_TYPE_DEBUG</span>\n<span class=\"cp\">#cmakedefine BUILD_TYPE_DEBUG 1 GZ_COMPILE_WARNING(BUILD_TYPE_DEBUG is deprecated)</span>\n<span class=\"cp\">#endif</span>\n\n<span class=\"cp\">#ifndef BUILD_TYPE_RELEASE</span>\n<span class=\"cp\">#cmakedefine BUILD_TYPE_RELEASE 1 GZ_COMPILE_WARNING(BUILD_TYPE_RELEASE is deprecated)</span>\n<span class=\"cp\">#endif</span>\n\n<span class=\"cp\">#ifndef BUILD_TYPE_COVERAGE</span>\n<span class=\"cp\">#cmakedefine BUILD_TYPE_COVERAGE 1 GZ_COMPILE_WARNING(BUILD_TYPE_COVERAGE is deprecated)</span>\n<span class=\"cp\">#endif</span>\n</pre></div>\n\n\n<p>The first half of that is just boilerplate to get cross-platform macro deprecation (which it turns out is not a trivial thing). For Visual Studio users, these will only appear as compile-time messages, not as warnings, but as far as I can tell, that's the best that can be offered for deprecating a macro in Visual Studio.</p>", "type": "rendered"}, "created_on": "2018-01-02T22:44:17.712280+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-02T22:52:15.527099+00:00", "type": "pullrequest_comment", "id": 52849973}