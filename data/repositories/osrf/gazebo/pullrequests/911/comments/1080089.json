{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/911/comments/1080089.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/911/_/diff#comment-1080089"}}, "parent": {"id": 1078916, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/911/comments/1078916.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/911/_/diff#comment-1078916"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 911, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/911.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/911"}}, "title": "Fixes to compile gazebo in the ARM platform"}, "content": {"raw": "You are right, it was introduced in 2.8.9. However it is not failing on my precise machine (cmake 2.8.7).\n\nWhat was weird to me is that ```-fPIC``` was present on the default precise compilation (even without this patch):\n\n```\n[100%] Building CXX object gazebo/gui/qtpropertybrowser/CMakeFiles/gzqtpropertybrowser.dir/qrc_qtpropertybrowser.cxx.o\ncd /home/jrivero/code/gazebo/build/gazebo/gui/qtpropertybrowser && /usr/bin/c++   -DLIBBULLET_VERSION=2.82 -DQT_GUI_LIB -DQT_CORE_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_NO_DEBUG -DQT_NO_DEBUG -g -O2 -mfpmath=sse -msse -msse2  -Wall -Wextra -Wno-long-long -Wno-unused-value -Wno-unused-value -Wno-unused-value -Wno-unused-value -Wfloat-equal -Wshadow -Winit-self -Wswitch-default -Wmissing-include-dirs -pedantic  -g -O2 -mfpmath=sse -msse -msse2  -I/home/jrivero/code/gazebo/test/gtest/include -I/home/jrivero/code/gazebo -I/home/jrivero/code/gazebo/build -I/home/jrivero/code/gazebo/deps -I/home/jrivero/code/gazebo/build/gazebo/gui/qtpropertybrowser -isystem /usr/include/OGRE/RTShaderSystem -isystem /usr/include/OGRE -isystem /usr/include/OGRE/Terrain -isystem /usr/include/OGRE/Paging -isystem /usr/local/include/sdformat-1.4 -I/usr/include/qt4 -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtCore    -fPIC -o CMakeFiles/gzqtpropertybrowser.dir/qrc_qtpropertybrowser.cxx.o -c /home/jrivero/code/gazebo/build/gazebo/gui/qtpropertybrowser/qrc_qtpropertybrowser.cxx\nLinking CXX static library libgzqtpropertybrowser.a\n```\n\nAfter some research, I found that it is being added unconditionally in the [CMakeLists.txt](#!/osrf/gazebo/src/52a7eeb5cee7f060a7401a84739cd67aaec3f654/CMakeLists.txt?at=default#cl-72) for the amd64 platform only.\n\nI believe that is safe to apply this patch, at least safe for the precise platform, and I believe that won't change anything in the amd64 platform anyway. We won't use cmake lower than 2.8.9 in new releases or releases that implies going downstream (debian, ubuntu of fedora), so we won't be affected by this limitation.\n\nRegarding to change and stop generating static libraries and just add the object code to the shared library, definitely is an option (probably the most logical one), but I don't see many (or important) advantages over using a static file ... a part from solving this -fPIC problem automatically :) ", "markup": "markdown", "html": "<p>You are right, it was introduced in 2.8.9. However it is not failing on my precise machine (cmake 2.8.7).</p>\n<p>What was weird to me is that <code>-fPIC</code> was present on the default precise compilation (even without this patch):</p>\n<div class=\"codehilite\"><pre><span></span>[100%] Building CXX object gazebo/gui/qtpropertybrowser/CMakeFiles/gzqtpropertybrowser.dir/qrc_qtpropertybrowser.cxx.o\ncd /home/jrivero/code/gazebo/build/gazebo/gui/qtpropertybrowser &amp;&amp; /usr/bin/c++   -DLIBBULLET_VERSION=2.82 -DQT_GUI_LIB -DQT_CORE_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_NO_DEBUG -DQT_NO_DEBUG -g -O2 -mfpmath=sse -msse -msse2  -Wall -Wextra -Wno-long-long -Wno-unused-value -Wno-unused-value -Wno-unused-value -Wno-unused-value -Wfloat-equal -Wshadow -Winit-self -Wswitch-default -Wmissing-include-dirs -pedantic  -g -O2 -mfpmath=sse -msse -msse2  -I/home/jrivero/code/gazebo/test/gtest/include -I/home/jrivero/code/gazebo -I/home/jrivero/code/gazebo/build -I/home/jrivero/code/gazebo/deps -I/home/jrivero/code/gazebo/build/gazebo/gui/qtpropertybrowser -isystem /usr/include/OGRE/RTShaderSystem -isystem /usr/include/OGRE -isystem /usr/include/OGRE/Terrain -isystem /usr/include/OGRE/Paging -isystem /usr/local/include/sdformat-1.4 -I/usr/include/qt4 -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtCore    -fPIC -o CMakeFiles/gzqtpropertybrowser.dir/qrc_qtpropertybrowser.cxx.o -c /home/jrivero/code/gazebo/build/gazebo/gui/qtpropertybrowser/qrc_qtpropertybrowser.cxx\nLinking CXX static library libgzqtpropertybrowser.a\n</pre></div>\n\n\n<p>After some research, I found that it is being added unconditionally in the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/52a7eeb5cee7f060a7401a84739cd67aaec3f654/CMakeLists.txt?at=default#cl-72\" rel=\"nofollow\">CMakeLists.txt</a> for the amd64 platform only.</p>\n<p>I believe that is safe to apply this patch, at least safe for the precise platform, and I believe that won't change anything in the amd64 platform anyway. We won't use cmake lower than 2.8.9 in new releases or releases that implies going downstream (debian, ubuntu of fedora), so we won't be affected by this limitation.</p>\n<p>Regarding to change and stop generating static libraries and just add the object code to the shared library, definitely is an option (probably the most logical one), but I don't see many (or important) advantages over using a static file ... a part from solving this -fPIC problem automatically :) </p>", "type": "rendered"}, "created_on": "2014-01-18T02:12:12.353096+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": "2014-01-18T02:12:12.363737+00:00", "type": "pullrequest_comment", "id": 1080089}