{"rendered": {"description": {"raw": "In #!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/Entity.cc?at=default&fileviewer=file-view-default#Entity.cc-514 , the `IsStatic` method for light objects is called. \r\n\r\nUnfortunately the static attribute in Light is inherited from the `rootElement` attribute of the World class in #!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/World.cc?at=default&fileviewer=file-view-default#World.cc-965 , but in the `rootElement` the `static` attribute is not initialized. \r\n\r\nGiven that `static` apparently means \"not managed by the physics engine\", I think it could make sense to just have the light to be always static, at least based on #!/osrf/gazebo/pull-requests/1920 and #!/osrf/gazebo/issues/900/allow-attachment-of-lights-to-links , but perhaps there are better solutions. \r\n\r\nAs in https://bitbucket.org/osrf/sdformat/pull-requests/249/fix-memory-leaks/diff#comment-13074157 , I also added a `GAZEBO_RUN_VALGRIND_TESTS` CMake option to debug memory related issues (I found this problem while using this option) . Unfortunately for most of the tests memory issues are detected by Valgrind, but I think the option could be anyway useful to progressively remove this memory issues. ", "markup": "markdown", "html": "<p>In <a href=\"#!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/Entity.cc?at=default&amp;fileviewer=file-view-default#Entity.cc-514\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/Entity.cc?at=default&amp;fileviewer=file-view-default#Entity.cc-514</a> , the <code>IsStatic</code> method for light objects is called. </p>\n<p>Unfortunately the static attribute in Light is inherited from the <code>rootElement</code> attribute of the World class in <a href=\"#!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/World.cc?at=default&amp;fileviewer=file-view-default#World.cc-965\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/World.cc?at=default&amp;fileviewer=file-view-default#World.cc-965</a> , but in the <code>rootElement</code> the <code>static</code> attribute is not initialized. </p>\n<p>Given that <code>static</code> apparently means \"not managed by the physics engine\", I think it could make sense to just have the light to be always static, at least based on <a href=\"#!/osrf/gazebo/pull-requests/1920\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/pull-requests/1920</a> and <a href=\"#!/osrf/gazebo/issues/900/allow-attachment-of-lights-to-links\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/issues/900/allow-attachment-of-lights-to-links</a> , but perhaps there are better solutions. </p>\n<p>As in <a href=\"https://bitbucket.org/osrf/sdformat/pull-requests/249/fix-memory-leaks/diff#comment-13074157\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/sdformat/pull-requests/249/fix-memory-leaks/diff#comment-13074157</a> , I also added a <code>GAZEBO_RUN_VALGRIND_TESTS</code> CMake option to debug memory related issues (I found this problem while using this option) . Unfortunately for most of the tests memory issues are detected by Valgrind, but I think the option could be anyway useful to progressively remove this memory issues. </p>", "type": "rendered"}, "title": {"raw": "Fix use of not initialized static attribute in Light class", "markup": "markdown", "html": "<p>Fix use of not initialized static attribute in Light class</p>", "type": "rendered"}}, "type": "pullrequest", "description": "In #!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/Entity.cc?at=default&fileviewer=file-view-default#Entity.cc-514 , the `IsStatic` method for light objects is called. \r\n\r\nUnfortunately the static attribute in Light is inherited from the `rootElement` attribute of the World class in #!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/World.cc?at=default&fileviewer=file-view-default#World.cc-965 , but in the `rootElement` the `static` attribute is not initialized. \r\n\r\nGiven that `static` apparently means \"not managed by the physics engine\", I think it could make sense to just have the light to be always static, at least based on #!/osrf/gazebo/pull-requests/1920 and #!/osrf/gazebo/issues/900/allow-attachment-of-lights-to-links , but perhaps there are better solutions. \r\n\r\nAs in https://bitbucket.org/osrf/sdformat/pull-requests/249/fix-memory-leaks/diff#comment-13074157 , I also added a `GAZEBO_RUN_VALGRIND_TESTS` CMake option to debug memory related issues (I found this problem while using this option) . Unfortunately for most of the tests memory issues are detected by Valgrind, but I think the option could be anyway useful to progressively remove this memory issues. ", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2075/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:a2f0190671ee%0Db064e316d0fc?from_pullrequest_id=2075"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2075/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2075.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2075/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2075/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2075"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2075/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:a2f0190671ee%0Db064e316d0fc?from_pullrequest_id=2075"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2075/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2075/statuses_page=1.json"}}, "title": "Fix use of not initialized static attribute in Light class", "close_source_branch": true, "reviewers": [{"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}], "id": 2075, "destination": {"commit": {"hash": "b064e316d0fc", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b064e316d0fc.json"}, "html": {"href": "#!/osrf/gazebo/commits/b064e316d0fc"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "created_on": "2015-12-29T10:38:16.586451+00:00", "summary": {"raw": "In #!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/Entity.cc?at=default&fileviewer=file-view-default#Entity.cc-514 , the `IsStatic` method for light objects is called. \r\n\r\nUnfortunately the static attribute in Light is inherited from the `rootElement` attribute of the World class in #!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/World.cc?at=default&fileviewer=file-view-default#World.cc-965 , but in the `rootElement` the `static` attribute is not initialized. \r\n\r\nGiven that `static` apparently means \"not managed by the physics engine\", I think it could make sense to just have the light to be always static, at least based on #!/osrf/gazebo/pull-requests/1920 and #!/osrf/gazebo/issues/900/allow-attachment-of-lights-to-links , but perhaps there are better solutions. \r\n\r\nAs in https://bitbucket.org/osrf/sdformat/pull-requests/249/fix-memory-leaks/diff#comment-13074157 , I also added a `GAZEBO_RUN_VALGRIND_TESTS` CMake option to debug memory related issues (I found this problem while using this option) . Unfortunately for most of the tests memory issues are detected by Valgrind, but I think the option could be anyway useful to progressively remove this memory issues. ", "markup": "markdown", "html": "<p>In <a href=\"#!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/Entity.cc?at=default&amp;fileviewer=file-view-default#Entity.cc-514\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/Entity.cc?at=default&amp;fileviewer=file-view-default#Entity.cc-514</a> , the <code>IsStatic</code> method for light objects is called. </p>\n<p>Unfortunately the static attribute in Light is inherited from the <code>rootElement</code> attribute of the World class in <a href=\"#!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/World.cc?at=default&amp;fileviewer=file-view-default#World.cc-965\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/abb3930b78f2eae44965211145a911fe140e22c1/gazebo/physics/World.cc?at=default&amp;fileviewer=file-view-default#World.cc-965</a> , but in the <code>rootElement</code> the <code>static</code> attribute is not initialized. </p>\n<p>Given that <code>static</code> apparently means \"not managed by the physics engine\", I think it could make sense to just have the light to be always static, at least based on <a href=\"#!/osrf/gazebo/pull-requests/1920\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/pull-requests/1920</a> and <a href=\"#!/osrf/gazebo/issues/900/allow-attachment-of-lights-to-links\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/issues/900/allow-attachment-of-lights-to-links</a> , but perhaps there are better solutions. </p>\n<p>As in <a href=\"https://bitbucket.org/osrf/sdformat/pull-requests/249/fix-memory-leaks/diff#comment-13074157\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/sdformat/pull-requests/249/fix-memory-leaks/diff#comment-13074157</a> , I also added a <code>GAZEBO_RUN_VALGRIND_TESTS</code> CMake option to debug memory related issues (I found this problem while using this option) . Unfortunately for most of the tests memory issues are detected by Valgrind, but I think the option could be anyway useful to progressively remove this memory issues. </p>", "type": "rendered"}, "source": {"commit": {"hash": "f367db59cf22", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/traversaro/gazebo-fork/commit/f367db59cf22"}, "html": {"href": "https://bitbucket.org/traversaro/gazebo-fork/commits/f367db59cf22"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/traversaro/gazebo-fork"}, "html": {"href": "https://bitbucket.org/traversaro/gazebo-fork"}, "avatar": {"href": "data/bytebucket.org/ravatar/{13b4c977-066b-4e7d-8c36-10c0c290bb51}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo-fork", "full_name": "traversaro/gazebo-fork", "uuid": "{13b4c977-066b-4e7d-8c36-10c0c290bb51}"}, "branch": {"name": "fix_not_initialized_static_flag"}}, "comment_count": 10, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2016-02-03T00:51:02.045480+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2016-02-02T22:32:19.098308+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2016-01-31T23:12:46.608331+00:00", "type": "participant", "approved": false, "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}}], "reason": "", "updated_on": "2016-02-03T18:43:28.436726+00:00", "author": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "merge_commit": {"hash": "a2f0190671ee", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/a2f0190671ee.json"}, "html": {"href": "#!/osrf/gazebo/commits/a2f0190671ee"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}