{"rendered": {"description": {"raw": "Issue [#295](#!/osrf/gazebo/issues/295/read-controller-joint-values-in-joint) notes that Gazebo's joint control widget does not always show the current values for the corresponding joint controllers. Specifically, if you set control parameters for a model, select a different model, and then select the original model again, the joint control widget will display the default control parameters instead of the actual parameters.\r\n\r\nMy pull request fixes the issue by allowing the `JointControlWidget` to query the `JointController` for the current control parameters. I implemented this behavior with a new service `joint_cmd_req` using `ignition::transport`. I added a node to the private data containers for both the joint controller and joint control widget in order to support the service.\r\n\r\nThe joint control widget requests the current control parameters from the joint controller when the selected model changes and then updates the display accordingly, namely the Qt spin boxes. To facilitate this I added setter functions to the classes that keep track of the spin boxes: `JointForceControl`, `JointPIDPosControl`, and `JointPIDVelControl`. These are all managed by the joint control widget. The code that calls the service and then the setter functions is in `JointControlWidget::SetModelName` because it is called when a new model is selected.\r\n\r\nI added three tests:\r\n\r\n1. The joint controller unit test now checks that the (new) service `joint_cmd_req` returns the correct control parameters.\r\n\r\n2. The joint controller integration test now checks that the control parameters can be set with the `joint_cmd` topic.\r\n\r\n3. The (new) joint control widget integration test checks that the widget reloads the correct control parameters after switching to a different model and back.", "markup": "markdown", "html": "<p>Issue <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issues/295/read-controller-joint-values-in-joint\" rel=\"nofollow\">#295</a> notes that Gazebo's joint control widget does not always show the current values for the corresponding joint controllers. Specifically, if you set control parameters for a model, select a different model, and then select the original model again, the joint control widget will display the default control parameters instead of the actual parameters.</p>\n<p>My pull request fixes the issue by allowing the <code>JointControlWidget</code> to query the <code>JointController</code> for the current control parameters. I implemented this behavior with a new service <code>joint_cmd_req</code> using <code>ignition::transport</code>. I added a node to the private data containers for both the joint controller and joint control widget in order to support the service.</p>\n<p>The joint control widget requests the current control parameters from the joint controller when the selected model changes and then updates the display accordingly, namely the Qt spin boxes. To facilitate this I added setter functions to the classes that keep track of the spin boxes: <code>JointForceControl</code>, <code>JointPIDPosControl</code>, and <code>JointPIDVelControl</code>. These are all managed by the joint control widget. The code that calls the service and then the setter functions is in <code>JointControlWidget::SetModelName</code> because it is called when a new model is selected.</p>\n<p>I added three tests:</p>\n<ol>\n<li>\n<p>The joint controller unit test now checks that the (new) service <code>joint_cmd_req</code> returns the correct control parameters.</p>\n</li>\n<li>\n<p>The joint controller integration test now checks that the control parameters can be set with the <code>joint_cmd</code> topic.</p>\n</li>\n<li>\n<p>The (new) joint control widget integration test checks that the widget reloads the correct control parameters after switching to a different model and back.</p>\n</li>\n</ol>", "type": "rendered"}, "title": {"raw": "Joint control menu read current values", "markup": "markdown", "html": "<p>Joint control menu read current values</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Issue [#295](#!/osrf/gazebo/issues/295/read-controller-joint-values-in-joint) notes that Gazebo's joint control widget does not always show the current values for the corresponding joint controllers. Specifically, if you set control parameters for a model, select a different model, and then select the original model again, the joint control widget will display the default control parameters instead of the actual parameters.\r\n\r\nMy pull request fixes the issue by allowing the `JointControlWidget` to query the `JointController` for the current control parameters. I implemented this behavior with a new service `joint_cmd_req` using `ignition::transport`. I added a node to the private data containers for both the joint controller and joint control widget in order to support the service.\r\n\r\nThe joint control widget requests the current control parameters from the joint controller when the selected model changes and then updates the display accordingly, namely the Qt spin boxes. To facilitate this I added setter functions to the classes that keep track of the spin boxes: `JointForceControl`, `JointPIDPosControl`, and `JointPIDVelControl`. These are all managed by the joint control widget. The code that calls the service and then the setter functions is in `JointControlWidget::SetModelName` because it is called when a new model is selected.\r\n\r\nI added three tests:\r\n\r\n1. The joint controller unit test now checks that the (new) service `joint_cmd_req` returns the correct control parameters.\r\n\r\n2. The joint controller integration test now checks that the control parameters can be set with the `joint_cmd` topic.\r\n\r\n3. The (new) joint control widget integration test checks that the widget reloads the correct control parameters after switching to a different model and back.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2730/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:26197752f98d%0D8508eb685cb5?from_pullrequest_id=2730"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2730/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2730.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2730/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2730/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2730"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2730/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:26197752f98d%0D8508eb685cb5?from_pullrequest_id=2730"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2730/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2730/statuses_page=1.json"}}, "title": "Joint control menu read current values", "close_source_branch": false, "reviewers": [], "id": 2730, "destination": {"commit": {"hash": "8508eb685cb5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/8508eb685cb5.json"}, "html": {"href": "#!/osrf/gazebo/commits/8508eb685cb5"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo8"}}, "created_on": "2017-06-09T01:10:42.514311+00:00", "summary": {"raw": "Issue [#295](#!/osrf/gazebo/issues/295/read-controller-joint-values-in-joint) notes that Gazebo's joint control widget does not always show the current values for the corresponding joint controllers. Specifically, if you set control parameters for a model, select a different model, and then select the original model again, the joint control widget will display the default control parameters instead of the actual parameters.\r\n\r\nMy pull request fixes the issue by allowing the `JointControlWidget` to query the `JointController` for the current control parameters. I implemented this behavior with a new service `joint_cmd_req` using `ignition::transport`. I added a node to the private data containers for both the joint controller and joint control widget in order to support the service.\r\n\r\nThe joint control widget requests the current control parameters from the joint controller when the selected model changes and then updates the display accordingly, namely the Qt spin boxes. To facilitate this I added setter functions to the classes that keep track of the spin boxes: `JointForceControl`, `JointPIDPosControl`, and `JointPIDVelControl`. These are all managed by the joint control widget. The code that calls the service and then the setter functions is in `JointControlWidget::SetModelName` because it is called when a new model is selected.\r\n\r\nI added three tests:\r\n\r\n1. The joint controller unit test now checks that the (new) service `joint_cmd_req` returns the correct control parameters.\r\n\r\n2. The joint controller integration test now checks that the control parameters can be set with the `joint_cmd` topic.\r\n\r\n3. The (new) joint control widget integration test checks that the widget reloads the correct control parameters after switching to a different model and back.", "markup": "markdown", "html": "<p>Issue <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issues/295/read-controller-joint-values-in-joint\" rel=\"nofollow\">#295</a> notes that Gazebo's joint control widget does not always show the current values for the corresponding joint controllers. Specifically, if you set control parameters for a model, select a different model, and then select the original model again, the joint control widget will display the default control parameters instead of the actual parameters.</p>\n<p>My pull request fixes the issue by allowing the <code>JointControlWidget</code> to query the <code>JointController</code> for the current control parameters. I implemented this behavior with a new service <code>joint_cmd_req</code> using <code>ignition::transport</code>. I added a node to the private data containers for both the joint controller and joint control widget in order to support the service.</p>\n<p>The joint control widget requests the current control parameters from the joint controller when the selected model changes and then updates the display accordingly, namely the Qt spin boxes. To facilitate this I added setter functions to the classes that keep track of the spin boxes: <code>JointForceControl</code>, <code>JointPIDPosControl</code>, and <code>JointPIDVelControl</code>. These are all managed by the joint control widget. The code that calls the service and then the setter functions is in <code>JointControlWidget::SetModelName</code> because it is called when a new model is selected.</p>\n<p>I added three tests:</p>\n<ol>\n<li>\n<p>The joint controller unit test now checks that the (new) service <code>joint_cmd_req</code> returns the correct control parameters.</p>\n</li>\n<li>\n<p>The joint controller integration test now checks that the control parameters can be set with the <code>joint_cmd</code> topic.</p>\n</li>\n<li>\n<p>The (new) joint control widget integration test checks that the widget reloads the correct control parameters after switching to a different model and back.</p>\n</li>\n</ol>", "type": "rendered"}, "source": {"commit": {"hash": "435dbf6c0264", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pchorak/gazebo/commit/435dbf6c0264"}, "html": {"href": "https://bitbucket.org/pchorak/gazebo/commits/435dbf6c0264"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pchorak/gazebo"}, "html": {"href": "https://bitbucket.org/pchorak/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{7130b41e-0983-4752-9e3b-9e2c12cf1268}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "pchorak/gazebo", "uuid": "{7130b41e-0983-4752-9e3b-9e2c12cf1268}"}, "branch": {"name": "joint_control_menu_read_current_values"}}, "comment_count": 53, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-07-14T21:25:24.107171+00:00", "type": "participant", "approved": false, "user": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}}, {"role": "PARTICIPANT", "participated_on": "2017-06-23T19:08:27.216235+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2017-07-11T00:56:49.436014+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2017-06-30T23:13:33.148234+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2017-07-13T00:56:54.561270+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2017-07-14T21:25:25.129205+00:00", "author": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}, "merge_commit": {"hash": "26197752f98d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/26197752f98d.json"}, "html": {"href": "#!/osrf/gazebo/commits/26197752f98d"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}