{"rendered": {"reason": {"raw": "Moved to #!/osrf/gazebo_experimental", "markup": "markdown", "html": "<p>Moved to <a href=\"#!/osrf/gazebo_experimental\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo_experimental</a></p>", "type": "rendered"}, "description": {"raw": "PR to start a discussion on an ECS prototype.\r\n\r\nTo make it easier to review, this PR is from one throw-away branch to another throw-away branch (no gtest). The working prototype is on branch `entity_component_system_prototype`\r\n\r\nAreas I'm hoping to get feedback in:\r\n\r\n**All APIs, especially**\r\n\r\n* **main.cc** shows how to interact with the ECS. Thoughts?\r\n* **DivideAndPrintResult.hh** Shows how someone would change gazebo's behavior by adding a system. Thoughts?\r\n* **Triplet.hh**  Components are POD structs. Is there a case where this won't be good enough?\r\n* **EntityQueryResult** is clunky. Ideas?\r\n\r\n**Plugins**\r\n\r\n**PluginLoader** is different from the current Gazebo plugin loader. The benefit is it queries the name and type of plugin when the library is loaded. For example, it could be used to load all libraries in a folder and display a list of available plugins to the user.\r\n\r\n* Are there fundamental flaws with the approach of having a method in a shared library populate a struct?\r\n* will this approach work on all platforms?\r\n* How important is it to support multiple plugins in the same shared library?\r\n\r\n**Misc**\r\n\r\n* I made the System headers \"private\" thinking there is no case where someone would instantiate or inherit from a system, but is there a case? If they are private it's easier to change released versions of gazebo.\r\n\r\nKnown Issues\r\n\r\n* Not integrated with existing gazebo cmake; it was faster to write and test a separate cmake project\r\n* No componentizer - the thing that will turn SDF into components\r\n* SystemManager and EntityManager implementations are very basic and slow\r\n* Coding style\r\n\r\nTo run the prototype\r\n\r\n```\r\nhg update entity_component_system_prototype\r\nmkdir build_ecs && cd build_ecs\r\ncmake ../gz_ecs\r\nmake\r\n# Run unit tests\r\nmake test\r\n# Run without plugins (Division system only)\r\n./gz_ecs\r\n# Run with plugins (adds Addition system)\r\nGAZEBO_PLUGIN_PATH=systems/ ./gz_ecs\r\n```", "markup": "markdown", "html": "<p>PR to start a discussion on an ECS prototype.</p>\n<p>To make it easier to review, this PR is from one throw-away branch to another throw-away branch (no gtest). The working prototype is on branch <code>entity_component_system_prototype</code></p>\n<p>Areas I'm hoping to get feedback in:</p>\n<p><strong>All APIs, especially</strong></p>\n<ul>\n<li><strong>main.cc</strong> shows how to interact with the ECS. Thoughts?</li>\n<li><strong>DivideAndPrintResult.hh</strong> Shows how someone would change gazebo's behavior by adding a system. Thoughts?</li>\n<li><strong>Triplet.hh</strong>  Components are POD structs. Is there a case where this won't be good enough?</li>\n<li><strong>EntityQueryResult</strong> is clunky. Ideas?</li>\n</ul>\n<p><strong>Plugins</strong></p>\n<p><strong>PluginLoader</strong> is different from the current Gazebo plugin loader. The benefit is it queries the name and type of plugin when the library is loaded. For example, it could be used to load all libraries in a folder and display a list of available plugins to the user.</p>\n<ul>\n<li>Are there fundamental flaws with the approach of having a method in a shared library populate a struct?</li>\n<li>will this approach work on all platforms?</li>\n<li>How important is it to support multiple plugins in the same shared library?</li>\n</ul>\n<p><strong>Misc</strong></p>\n<ul>\n<li>I made the System headers \"private\" thinking there is no case where someone would instantiate or inherit from a system, but is there a case? If they are private it's easier to change released versions of gazebo.</li>\n</ul>\n<p>Known Issues</p>\n<ul>\n<li>Not integrated with existing gazebo cmake; it was faster to write and test a separate cmake project</li>\n<li>No componentizer - the thing that will turn SDF into components</li>\n<li>SystemManager and EntityManager implementations are very basic and slow</li>\n<li>Coding style</li>\n</ul>\n<p>To run the prototype</p>\n<div class=\"codehilite\"><pre><span></span>hg update entity_component_system_prototype\nmkdir build_ecs &amp;&amp; cd build_ecs\ncmake ../gz_ecs\nmake\n# Run unit tests\nmake test\n# Run without plugins (Division system only)\n./gz_ecs\n# Run with plugins (adds Addition system)\nGAZEBO_PLUGIN_PATH=systems/ ./gz_ecs\n</pre></div>", "type": "rendered"}, "title": {"raw": "ECS Prototype Feedback", "markup": "markdown", "html": "<p>ECS Prototype Feedback</p>", "type": "rendered"}}, "type": "pullrequest", "description": "PR to start a discussion on an ECS prototype.\r\n\r\nTo make it easier to review, this PR is from one throw-away branch to another throw-away branch (no gtest). The working prototype is on branch `entity_component_system_prototype`\r\n\r\nAreas I'm hoping to get feedback in:\r\n\r\n**All APIs, especially**\r\n\r\n* **main.cc** shows how to interact with the ECS. Thoughts?\r\n* **DivideAndPrintResult.hh** Shows how someone would change gazebo's behavior by adding a system. Thoughts?\r\n* **Triplet.hh**  Components are POD structs. Is there a case where this won't be good enough?\r\n* **EntityQueryResult** is clunky. Ideas?\r\n\r\n**Plugins**\r\n\r\n**PluginLoader** is different from the current Gazebo plugin loader. The benefit is it queries the name and type of plugin when the library is loaded. For example, it could be used to load all libraries in a folder and display a list of available plugins to the user.\r\n\r\n* Are there fundamental flaws with the approach of having a method in a shared library populate a struct?\r\n* will this approach work on all platforms?\r\n* How important is it to support multiple plugins in the same shared library?\r\n\r\n**Misc**\r\n\r\n* I made the System headers \"private\" thinking there is no case where someone would instantiate or inherit from a system, but is there a case? If they are private it's easier to change released versions of gazebo.\r\n\r\nKnown Issues\r\n\r\n* Not integrated with existing gazebo cmake; it was faster to write and test a separate cmake project\r\n* No componentizer - the thing that will turn SDF into components\r\n* SystemManager and EntityManager implementations are very basic and slow\r\n* Coding style\r\n\r\nTo run the prototype\r\n\r\n```\r\nhg update entity_component_system_prototype\r\nmkdir build_ecs && cd build_ecs\r\ncmake ../gz_ecs\r\nmake\r\n# Run unit tests\r\nmake test\r\n# Run without plugins (Division system only)\r\n./gz_ecs\r\n# Run with plugins (adds Addition system)\r\nGAZEBO_PLUGIN_PATH=systems/ ./gz_ecs\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2659/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:b99f32c9ffe2%0D74f72bd8982d?from_pullrequest_id=2659"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2659/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2659.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2659/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2659/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2659"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2659/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:b99f32c9ffe2%0D74f72bd8982d?from_pullrequest_id=2659"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2659/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2659/statuses_page=1.json"}}, "title": "ECS Prototype Feedback", "close_source_branch": false, "reviewers": [], "id": 2659, "destination": {"commit": {"hash": "74f72bd8982d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/74f72bd8982d.json"}, "html": {"href": "#!/osrf/gazebo/commits/74f72bd8982d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "ecs_deadend_dontmerge"}}, "created_on": "2017-03-16T22:16:50.946021+00:00", "summary": {"raw": "PR to start a discussion on an ECS prototype.\r\n\r\nTo make it easier to review, this PR is from one throw-away branch to another throw-away branch (no gtest). The working prototype is on branch `entity_component_system_prototype`\r\n\r\nAreas I'm hoping to get feedback in:\r\n\r\n**All APIs, especially**\r\n\r\n* **main.cc** shows how to interact with the ECS. Thoughts?\r\n* **DivideAndPrintResult.hh** Shows how someone would change gazebo's behavior by adding a system. Thoughts?\r\n* **Triplet.hh**  Components are POD structs. Is there a case where this won't be good enough?\r\n* **EntityQueryResult** is clunky. Ideas?\r\n\r\n**Plugins**\r\n\r\n**PluginLoader** is different from the current Gazebo plugin loader. The benefit is it queries the name and type of plugin when the library is loaded. For example, it could be used to load all libraries in a folder and display a list of available plugins to the user.\r\n\r\n* Are there fundamental flaws with the approach of having a method in a shared library populate a struct?\r\n* will this approach work on all platforms?\r\n* How important is it to support multiple plugins in the same shared library?\r\n\r\n**Misc**\r\n\r\n* I made the System headers \"private\" thinking there is no case where someone would instantiate or inherit from a system, but is there a case? If they are private it's easier to change released versions of gazebo.\r\n\r\nKnown Issues\r\n\r\n* Not integrated with existing gazebo cmake; it was faster to write and test a separate cmake project\r\n* No componentizer - the thing that will turn SDF into components\r\n* SystemManager and EntityManager implementations are very basic and slow\r\n* Coding style\r\n\r\nTo run the prototype\r\n\r\n```\r\nhg update entity_component_system_prototype\r\nmkdir build_ecs && cd build_ecs\r\ncmake ../gz_ecs\r\nmake\r\n# Run unit tests\r\nmake test\r\n# Run without plugins (Division system only)\r\n./gz_ecs\r\n# Run with plugins (adds Addition system)\r\nGAZEBO_PLUGIN_PATH=systems/ ./gz_ecs\r\n```", "markup": "markdown", "html": "<p>PR to start a discussion on an ECS prototype.</p>\n<p>To make it easier to review, this PR is from one throw-away branch to another throw-away branch (no gtest). The working prototype is on branch <code>entity_component_system_prototype</code></p>\n<p>Areas I'm hoping to get feedback in:</p>\n<p><strong>All APIs, especially</strong></p>\n<ul>\n<li><strong>main.cc</strong> shows how to interact with the ECS. Thoughts?</li>\n<li><strong>DivideAndPrintResult.hh</strong> Shows how someone would change gazebo's behavior by adding a system. Thoughts?</li>\n<li><strong>Triplet.hh</strong>  Components are POD structs. Is there a case where this won't be good enough?</li>\n<li><strong>EntityQueryResult</strong> is clunky. Ideas?</li>\n</ul>\n<p><strong>Plugins</strong></p>\n<p><strong>PluginLoader</strong> is different from the current Gazebo plugin loader. The benefit is it queries the name and type of plugin when the library is loaded. For example, it could be used to load all libraries in a folder and display a list of available plugins to the user.</p>\n<ul>\n<li>Are there fundamental flaws with the approach of having a method in a shared library populate a struct?</li>\n<li>will this approach work on all platforms?</li>\n<li>How important is it to support multiple plugins in the same shared library?</li>\n</ul>\n<p><strong>Misc</strong></p>\n<ul>\n<li>I made the System headers \"private\" thinking there is no case where someone would instantiate or inherit from a system, but is there a case? If they are private it's easier to change released versions of gazebo.</li>\n</ul>\n<p>Known Issues</p>\n<ul>\n<li>Not integrated with existing gazebo cmake; it was faster to write and test a separate cmake project</li>\n<li>No componentizer - the thing that will turn SDF into components</li>\n<li>SystemManager and EntityManager implementations are very basic and slow</li>\n<li>Coding style</li>\n</ul>\n<p>To run the prototype</p>\n<div class=\"codehilite\"><pre><span></span>hg update entity_component_system_prototype\nmkdir build_ecs &amp;&amp; cd build_ecs\ncmake ../gz_ecs\nmake\n# Run unit tests\nmake test\n# Run without plugins (Division system only)\n./gz_ecs\n# Run with plugins (adds Addition system)\nGAZEBO_PLUGIN_PATH=systems/ ./gz_ecs\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "b99f32c9ffe2", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b99f32c9ffe2.json"}, "html": {"href": "#!/osrf/gazebo/commits/b99f32c9ffe2"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "ecs_nogtest_broken_dontmerge"}}, "comment_count": 16, "state": "DECLINED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-04-03T21:39:50.606736+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2017-03-23T15:27:12.551771+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2017-03-20T19:46:56.705127+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "Moved to #!/osrf/gazebo_experimental", "updated_on": "2017-04-03T21:40:07.634411+00:00", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "merge_commit": null, "closed_by": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}