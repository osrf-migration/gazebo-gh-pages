{"rendered": {"description": {"raw": "Fixes issue #553 and issue #1108\r\n\r\n# API change summary\r\n\r\nOld | New\r\n--- | ---\r\n*Get number of degrees of freedom* |\r\n`virtual unsigned int GetAngleCount() const = 0` | `virtual unsigned int DOF() const = 0`\r\n*Get joint position* |\r\n`math::Angle GetAngle(unsigned int _index) const` | `virtual double Position(const unsigned int _index = 0) const final`\r\n`virtual math::Angle GetAngleImpl(unsigned int _index) const = 0` | `virtual double PositionImpl(const unsigned int _index = 0) const = 0`\r\n*Set upper joint limit* | \r\n`bool SetHighStop(unsigned int _index, const math::Angle &_angle)` | `virtual void SetUpperLimit(const unsigned int _index, const double _limit)`\r\n`void SetUpperLimit(unsigned int _index, math::Angle _limit)` |\r\n*Set lower joint limit* | \r\n`bool SetLowStop(unsigned int _index, const math::Angle &_angle)` | `virtual oid SetLowerLimit(const unsigned int _index, const double _limit)`\r\n`void SetLowerLimit(unsigned int _index, math::Angle _limit)` |\r\n*Get upper joint limit* |\r\n`virtual math::Angle GetHighStop(unsigned int _index) = 0` | `virtual double UpperLimit(const unsigned int _index = 0) const`\r\n`math::Angle GetUpperLimit(unsigned int _index) const` |\r\n*Get lower joint limit* |\r\n`virtual math::Angle GetLowStop(unsigned int _index) = 0` | `virtual double LowerLimit(const unsigned int _index = 0) const`\r\n`math::Angle GetLowerLimit(unsigned int _index) const` |\r\n*Lower joint limit, as determined by the base class* |\r\n`math::Angle lowerLimit[MAX_JOINT_AXIS]` | `double lowerLimit[MAX_JOINT_AXIS]`\r\n*Upper joint limit, as determined by the base class* |\r\n`math::Angle upperLimit[MAX_JOINT_AXIS]` | `double upperLimit[MAX_JOINT_AXIS]`\r\n\r\nThe API changes in several ways:\r\n\r\n* `math::Angle` -> `double` \r\n\r\n* No more returning `bool`\r\n\r\n* \"get\"s are const\r\n\r\n* All input params are const\r\n\r\n* When \"getting\", the default index is zero\r\n\r\n* All functions are virtual\r\n\r\n* Only `PositionImpl` is pure virtual\r\n\r\n# Commits\r\n\r\nThere are many changes, but they are mostly repeated. I recommend reviewing one commit at a time:\r\n\r\n* 06b7dcc: GetAngleCount -> DOF\r\n\r\n* e0294c0: upperLimit, lowerLimit and staticAngle to double\r\n\r\n* 98ac226: Deprecate SetUpper/LowerLimit which take angle in favor of double\r\n\r\n* 92d4573: Deprecate GetUpper/LowerLimit which return angle in favor of double\r\n\r\n* 9ce869e: Deprecate GetAngle() in favor of Position()\r\n\r\n* 03b7ba1: Deprecate GetAngleImpl() in favor of PositionImpl()\r\n\r\n* 90fa193: Deprecate GetHigh/LowStop in favor of Upper/LowerLimit, also make it not pure virtual\r\n\r\n* 202b5cd: Make Upper/LowerLimit const functions\r\n\r\n* 67ba648: Deprecate SetHigh/LowStop in favor of SetUpper/LowerLimit\r\n\r\n* d4b5dec: Make Set* virtual, remove using, fix switches and returns\r\n\r\nObs: If this is taking too long to review, I'll break this PR into smaller PRs, mostly following the commits above.", "markup": "markdown", "html": "<p>Fixes issue <a href=\"#!/osrf/gazebo/issues/553/joint-getangle-returns-angle-which-is\" rel=\"nofollow\" title=\"Joint::GetAngle returns Angle, which is confusing for non-angular joints\" class=\"ap-connect-link\"><s>#553</s></a> and issue <a href=\"#!/osrf/gazebo/issues/1108/deprecate-get-set-high-low-stop-functions\" rel=\"nofollow\" title=\"Deprecate Get/Set High/Low Stop functions in Joint.\" class=\"ap-connect-link\"><s>#1108</s></a></p>\n<h1 id=\"markdown-header-api-change-summary\">API change summary</h1>\n<table>\n<thead>\n<tr>\n<th>Old</th>\n<th>New</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>Get number of degrees of freedom</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>virtual unsigned int GetAngleCount() const = 0</code></td>\n<td><code>virtual unsigned int DOF() const = 0</code></td>\n</tr>\n<tr>\n<td><em>Get joint position</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>math::Angle GetAngle(unsigned int _index) const</code></td>\n<td><code>virtual double Position(const unsigned int _index = 0) const final</code></td>\n</tr>\n<tr>\n<td><code>virtual math::Angle GetAngleImpl(unsigned int _index) const = 0</code></td>\n<td><code>virtual double PositionImpl(const unsigned int _index = 0) const = 0</code></td>\n</tr>\n<tr>\n<td><em>Set upper joint limit</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>bool SetHighStop(unsigned int _index, const math::Angle &amp;_angle)</code></td>\n<td><code>virtual void SetUpperLimit(const unsigned int _index, const double _limit)</code></td>\n</tr>\n<tr>\n<td><code>void SetUpperLimit(unsigned int _index, math::Angle _limit)</code></td>\n<td></td>\n</tr>\n<tr>\n<td><em>Set lower joint limit</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>bool SetLowStop(unsigned int _index, const math::Angle &amp;_angle)</code></td>\n<td><code>virtual oid SetLowerLimit(const unsigned int _index, const double _limit)</code></td>\n</tr>\n<tr>\n<td><code>void SetLowerLimit(unsigned int _index, math::Angle _limit)</code></td>\n<td></td>\n</tr>\n<tr>\n<td><em>Get upper joint limit</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>virtual math::Angle GetHighStop(unsigned int _index) = 0</code></td>\n<td><code>virtual double UpperLimit(const unsigned int _index = 0) const</code></td>\n</tr>\n<tr>\n<td><code>math::Angle GetUpperLimit(unsigned int _index) const</code></td>\n<td></td>\n</tr>\n<tr>\n<td><em>Get lower joint limit</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>virtual math::Angle GetLowStop(unsigned int _index) = 0</code></td>\n<td><code>virtual double LowerLimit(const unsigned int _index = 0) const</code></td>\n</tr>\n<tr>\n<td><code>math::Angle GetLowerLimit(unsigned int _index) const</code></td>\n<td></td>\n</tr>\n<tr>\n<td><em>Lower joint limit, as determined by the base class</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>math::Angle lowerLimit[MAX_JOINT_AXIS]</code></td>\n<td><code>double lowerLimit[MAX_JOINT_AXIS]</code></td>\n</tr>\n<tr>\n<td><em>Upper joint limit, as determined by the base class</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>math::Angle upperLimit[MAX_JOINT_AXIS]</code></td>\n<td><code>double upperLimit[MAX_JOINT_AXIS]</code></td>\n</tr>\n</tbody>\n</table>\n<p>The API changes in several ways:</p>\n<ul>\n<li>\n<p><code>math::Angle</code> -&gt; <code>double</code> </p>\n</li>\n<li>\n<p>No more returning <code>bool</code></p>\n</li>\n<li>\n<p>\"get\"s are const</p>\n</li>\n<li>\n<p>All input params are const</p>\n</li>\n<li>\n<p>When \"getting\", the default index is zero</p>\n</li>\n<li>\n<p>All functions are virtual</p>\n</li>\n<li>\n<p>Only <code>PositionImpl</code> is pure virtual</p>\n</li>\n</ul>\n<h1 id=\"markdown-header-commits\">Commits</h1>\n<p>There are many changes, but they are mostly repeated. I recommend reviewing one commit at a time:</p>\n<ul>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/06b7dcc\" rel=\"nofollow\" class=\"ap-connect-link\">06b7dcc</a>: GetAngleCount -&gt; DOF</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/e0294c0\" rel=\"nofollow\" class=\"ap-connect-link\">e0294c0</a>: upperLimit, lowerLimit and staticAngle to double</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/98ac226\" rel=\"nofollow\" class=\"ap-connect-link\">98ac226</a>: Deprecate SetUpper/LowerLimit which take angle in favor of double</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/92d4573\" rel=\"nofollow\" class=\"ap-connect-link\">92d4573</a>: Deprecate GetUpper/LowerLimit which return angle in favor of double</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/9ce869e\" rel=\"nofollow\" class=\"ap-connect-link\">9ce869e</a>: Deprecate GetAngle() in favor of Position()</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/03b7ba1\" rel=\"nofollow\" class=\"ap-connect-link\">03b7ba1</a>: Deprecate GetAngleImpl() in favor of PositionImpl()</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/90fa193\" rel=\"nofollow\" class=\"ap-connect-link\">90fa193</a>: Deprecate GetHigh/LowStop in favor of Upper/LowerLimit, also make it not pure virtual</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/202b5cd\" rel=\"nofollow\" class=\"ap-connect-link\">202b5cd</a>: Make Upper/LowerLimit const functions</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/67ba648\" rel=\"nofollow\" class=\"ap-connect-link\">67ba648</a>: Deprecate SetHigh/LowStop in favor of SetUpper/LowerLimit</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/d4b5dec\" rel=\"nofollow\" class=\"ap-connect-link\">d4b5dec</a>: Make Set* virtual, remove using, fix switches and returns</p>\n</li>\n</ul>\n<p>Obs: If this is taking too long to review, I'll break this PR into smaller PRs, mostly following the commits above.</p>", "type": "rendered"}, "title": {"raw": "Deprecate angle API from physics::Joint, in favor of using doubles", "markup": "markdown", "html": "<p>Deprecate angle API from physics::Joint, in favor of using doubles</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Fixes issue #553 and issue #1108\r\n\r\n# API change summary\r\n\r\nOld | New\r\n--- | ---\r\n*Get number of degrees of freedom* |\r\n`virtual unsigned int GetAngleCount() const = 0` | `virtual unsigned int DOF() const = 0`\r\n*Get joint position* |\r\n`math::Angle GetAngle(unsigned int _index) const` | `virtual double Position(const unsigned int _index = 0) const final`\r\n`virtual math::Angle GetAngleImpl(unsigned int _index) const = 0` | `virtual double PositionImpl(const unsigned int _index = 0) const = 0`\r\n*Set upper joint limit* | \r\n`bool SetHighStop(unsigned int _index, const math::Angle &_angle)` | `virtual void SetUpperLimit(const unsigned int _index, const double _limit)`\r\n`void SetUpperLimit(unsigned int _index, math::Angle _limit)` |\r\n*Set lower joint limit* | \r\n`bool SetLowStop(unsigned int _index, const math::Angle &_angle)` | `virtual oid SetLowerLimit(const unsigned int _index, const double _limit)`\r\n`void SetLowerLimit(unsigned int _index, math::Angle _limit)` |\r\n*Get upper joint limit* |\r\n`virtual math::Angle GetHighStop(unsigned int _index) = 0` | `virtual double UpperLimit(const unsigned int _index = 0) const`\r\n`math::Angle GetUpperLimit(unsigned int _index) const` |\r\n*Get lower joint limit* |\r\n`virtual math::Angle GetLowStop(unsigned int _index) = 0` | `virtual double LowerLimit(const unsigned int _index = 0) const`\r\n`math::Angle GetLowerLimit(unsigned int _index) const` |\r\n*Lower joint limit, as determined by the base class* |\r\n`math::Angle lowerLimit[MAX_JOINT_AXIS]` | `double lowerLimit[MAX_JOINT_AXIS]`\r\n*Upper joint limit, as determined by the base class* |\r\n`math::Angle upperLimit[MAX_JOINT_AXIS]` | `double upperLimit[MAX_JOINT_AXIS]`\r\n\r\nThe API changes in several ways:\r\n\r\n* `math::Angle` -> `double` \r\n\r\n* No more returning `bool`\r\n\r\n* \"get\"s are const\r\n\r\n* All input params are const\r\n\r\n* When \"getting\", the default index is zero\r\n\r\n* All functions are virtual\r\n\r\n* Only `PositionImpl` is pure virtual\r\n\r\n# Commits\r\n\r\nThere are many changes, but they are mostly repeated. I recommend reviewing one commit at a time:\r\n\r\n* 06b7dcc: GetAngleCount -> DOF\r\n\r\n* e0294c0: upperLimit, lowerLimit and staticAngle to double\r\n\r\n* 98ac226: Deprecate SetUpper/LowerLimit which take angle in favor of double\r\n\r\n* 92d4573: Deprecate GetUpper/LowerLimit which return angle in favor of double\r\n\r\n* 9ce869e: Deprecate GetAngle() in favor of Position()\r\n\r\n* 03b7ba1: Deprecate GetAngleImpl() in favor of PositionImpl()\r\n\r\n* 90fa193: Deprecate GetHigh/LowStop in favor of Upper/LowerLimit, also make it not pure virtual\r\n\r\n* 202b5cd: Make Upper/LowerLimit const functions\r\n\r\n* 67ba648: Deprecate SetHigh/LowStop in favor of SetUpper/LowerLimit\r\n\r\n* d4b5dec: Make Set* virtual, remove using, fix switches and returns\r\n\r\nObs: If this is taking too long to review, I'll break this PR into smaller PRs, mostly following the commits above.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2568/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:a479740c0795%0D002bb28c50f0?from_pullrequest_id=2568"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2568/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2568.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2568/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2568/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2568"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2568/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:a479740c0795%0D002bb28c50f0?from_pullrequest_id=2568"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2568/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2568/statuses_page=1.json"}}, "title": "Deprecate angle API from physics::Joint, in favor of using doubles", "close_source_branch": true, "reviewers": [], "id": 2568, "destination": {"commit": {"hash": "002bb28c50f0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/002bb28c50f0.json"}, "html": {"href": "#!/osrf/gazebo/commits/002bb28c50f0"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2016-12-30T01:40:28.439029+00:00", "summary": {"raw": "Fixes issue #553 and issue #1108\r\n\r\n# API change summary\r\n\r\nOld | New\r\n--- | ---\r\n*Get number of degrees of freedom* |\r\n`virtual unsigned int GetAngleCount() const = 0` | `virtual unsigned int DOF() const = 0`\r\n*Get joint position* |\r\n`math::Angle GetAngle(unsigned int _index) const` | `virtual double Position(const unsigned int _index = 0) const final`\r\n`virtual math::Angle GetAngleImpl(unsigned int _index) const = 0` | `virtual double PositionImpl(const unsigned int _index = 0) const = 0`\r\n*Set upper joint limit* | \r\n`bool SetHighStop(unsigned int _index, const math::Angle &_angle)` | `virtual void SetUpperLimit(const unsigned int _index, const double _limit)`\r\n`void SetUpperLimit(unsigned int _index, math::Angle _limit)` |\r\n*Set lower joint limit* | \r\n`bool SetLowStop(unsigned int _index, const math::Angle &_angle)` | `virtual oid SetLowerLimit(const unsigned int _index, const double _limit)`\r\n`void SetLowerLimit(unsigned int _index, math::Angle _limit)` |\r\n*Get upper joint limit* |\r\n`virtual math::Angle GetHighStop(unsigned int _index) = 0` | `virtual double UpperLimit(const unsigned int _index = 0) const`\r\n`math::Angle GetUpperLimit(unsigned int _index) const` |\r\n*Get lower joint limit* |\r\n`virtual math::Angle GetLowStop(unsigned int _index) = 0` | `virtual double LowerLimit(const unsigned int _index = 0) const`\r\n`math::Angle GetLowerLimit(unsigned int _index) const` |\r\n*Lower joint limit, as determined by the base class* |\r\n`math::Angle lowerLimit[MAX_JOINT_AXIS]` | `double lowerLimit[MAX_JOINT_AXIS]`\r\n*Upper joint limit, as determined by the base class* |\r\n`math::Angle upperLimit[MAX_JOINT_AXIS]` | `double upperLimit[MAX_JOINT_AXIS]`\r\n\r\nThe API changes in several ways:\r\n\r\n* `math::Angle` -> `double` \r\n\r\n* No more returning `bool`\r\n\r\n* \"get\"s are const\r\n\r\n* All input params are const\r\n\r\n* When \"getting\", the default index is zero\r\n\r\n* All functions are virtual\r\n\r\n* Only `PositionImpl` is pure virtual\r\n\r\n# Commits\r\n\r\nThere are many changes, but they are mostly repeated. I recommend reviewing one commit at a time:\r\n\r\n* 06b7dcc: GetAngleCount -> DOF\r\n\r\n* e0294c0: upperLimit, lowerLimit and staticAngle to double\r\n\r\n* 98ac226: Deprecate SetUpper/LowerLimit which take angle in favor of double\r\n\r\n* 92d4573: Deprecate GetUpper/LowerLimit which return angle in favor of double\r\n\r\n* 9ce869e: Deprecate GetAngle() in favor of Position()\r\n\r\n* 03b7ba1: Deprecate GetAngleImpl() in favor of PositionImpl()\r\n\r\n* 90fa193: Deprecate GetHigh/LowStop in favor of Upper/LowerLimit, also make it not pure virtual\r\n\r\n* 202b5cd: Make Upper/LowerLimit const functions\r\n\r\n* 67ba648: Deprecate SetHigh/LowStop in favor of SetUpper/LowerLimit\r\n\r\n* d4b5dec: Make Set* virtual, remove using, fix switches and returns\r\n\r\nObs: If this is taking too long to review, I'll break this PR into smaller PRs, mostly following the commits above.", "markup": "markdown", "html": "<p>Fixes issue <a href=\"#!/osrf/gazebo/issues/553/joint-getangle-returns-angle-which-is\" rel=\"nofollow\" title=\"Joint::GetAngle returns Angle, which is confusing for non-angular joints\" class=\"ap-connect-link\"><s>#553</s></a> and issue <a href=\"#!/osrf/gazebo/issues/1108/deprecate-get-set-high-low-stop-functions\" rel=\"nofollow\" title=\"Deprecate Get/Set High/Low Stop functions in Joint.\" class=\"ap-connect-link\"><s>#1108</s></a></p>\n<h1 id=\"markdown-header-api-change-summary\">API change summary</h1>\n<table>\n<thead>\n<tr>\n<th>Old</th>\n<th>New</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>Get number of degrees of freedom</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>virtual unsigned int GetAngleCount() const = 0</code></td>\n<td><code>virtual unsigned int DOF() const = 0</code></td>\n</tr>\n<tr>\n<td><em>Get joint position</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>math::Angle GetAngle(unsigned int _index) const</code></td>\n<td><code>virtual double Position(const unsigned int _index = 0) const final</code></td>\n</tr>\n<tr>\n<td><code>virtual math::Angle GetAngleImpl(unsigned int _index) const = 0</code></td>\n<td><code>virtual double PositionImpl(const unsigned int _index = 0) const = 0</code></td>\n</tr>\n<tr>\n<td><em>Set upper joint limit</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>bool SetHighStop(unsigned int _index, const math::Angle &amp;_angle)</code></td>\n<td><code>virtual void SetUpperLimit(const unsigned int _index, const double _limit)</code></td>\n</tr>\n<tr>\n<td><code>void SetUpperLimit(unsigned int _index, math::Angle _limit)</code></td>\n<td></td>\n</tr>\n<tr>\n<td><em>Set lower joint limit</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>bool SetLowStop(unsigned int _index, const math::Angle &amp;_angle)</code></td>\n<td><code>virtual oid SetLowerLimit(const unsigned int _index, const double _limit)</code></td>\n</tr>\n<tr>\n<td><code>void SetLowerLimit(unsigned int _index, math::Angle _limit)</code></td>\n<td></td>\n</tr>\n<tr>\n<td><em>Get upper joint limit</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>virtual math::Angle GetHighStop(unsigned int _index) = 0</code></td>\n<td><code>virtual double UpperLimit(const unsigned int _index = 0) const</code></td>\n</tr>\n<tr>\n<td><code>math::Angle GetUpperLimit(unsigned int _index) const</code></td>\n<td></td>\n</tr>\n<tr>\n<td><em>Get lower joint limit</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>virtual math::Angle GetLowStop(unsigned int _index) = 0</code></td>\n<td><code>virtual double LowerLimit(const unsigned int _index = 0) const</code></td>\n</tr>\n<tr>\n<td><code>math::Angle GetLowerLimit(unsigned int _index) const</code></td>\n<td></td>\n</tr>\n<tr>\n<td><em>Lower joint limit, as determined by the base class</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>math::Angle lowerLimit[MAX_JOINT_AXIS]</code></td>\n<td><code>double lowerLimit[MAX_JOINT_AXIS]</code></td>\n</tr>\n<tr>\n<td><em>Upper joint limit, as determined by the base class</em></td>\n<td></td>\n</tr>\n<tr>\n<td><code>math::Angle upperLimit[MAX_JOINT_AXIS]</code></td>\n<td><code>double upperLimit[MAX_JOINT_AXIS]</code></td>\n</tr>\n</tbody>\n</table>\n<p>The API changes in several ways:</p>\n<ul>\n<li>\n<p><code>math::Angle</code> -&gt; <code>double</code> </p>\n</li>\n<li>\n<p>No more returning <code>bool</code></p>\n</li>\n<li>\n<p>\"get\"s are const</p>\n</li>\n<li>\n<p>All input params are const</p>\n</li>\n<li>\n<p>When \"getting\", the default index is zero</p>\n</li>\n<li>\n<p>All functions are virtual</p>\n</li>\n<li>\n<p>Only <code>PositionImpl</code> is pure virtual</p>\n</li>\n</ul>\n<h1 id=\"markdown-header-commits\">Commits</h1>\n<p>There are many changes, but they are mostly repeated. I recommend reviewing one commit at a time:</p>\n<ul>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/06b7dcc\" rel=\"nofollow\" class=\"ap-connect-link\">06b7dcc</a>: GetAngleCount -&gt; DOF</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/e0294c0\" rel=\"nofollow\" class=\"ap-connect-link\">e0294c0</a>: upperLimit, lowerLimit and staticAngle to double</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/98ac226\" rel=\"nofollow\" class=\"ap-connect-link\">98ac226</a>: Deprecate SetUpper/LowerLimit which take angle in favor of double</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/92d4573\" rel=\"nofollow\" class=\"ap-connect-link\">92d4573</a>: Deprecate GetUpper/LowerLimit which return angle in favor of double</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/9ce869e\" rel=\"nofollow\" class=\"ap-connect-link\">9ce869e</a>: Deprecate GetAngle() in favor of Position()</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/03b7ba1\" rel=\"nofollow\" class=\"ap-connect-link\">03b7ba1</a>: Deprecate GetAngleImpl() in favor of PositionImpl()</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/90fa193\" rel=\"nofollow\" class=\"ap-connect-link\">90fa193</a>: Deprecate GetHigh/LowStop in favor of Upper/LowerLimit, also make it not pure virtual</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/202b5cd\" rel=\"nofollow\" class=\"ap-connect-link\">202b5cd</a>: Make Upper/LowerLimit const functions</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/67ba648\" rel=\"nofollow\" class=\"ap-connect-link\">67ba648</a>: Deprecate SetHigh/LowStop in favor of SetUpper/LowerLimit</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/d4b5dec\" rel=\"nofollow\" class=\"ap-connect-link\">d4b5dec</a>: Make Set* virtual, remove using, fix switches and returns</p>\n</li>\n</ul>\n<p>Obs: If this is taking too long to review, I'll break this PR into smaller PRs, mostly following the commits above.</p>", "type": "rendered"}, "source": {"commit": {"hash": "e4a7b2644c2d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/e4a7b2644c2d.json"}, "html": {"href": "#!/osrf/gazebo/commits/e4a7b2644c2d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "ignmath_joint_angle"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-12-30T20:57:11.555597+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2016-12-31T15:18:09.569171+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2016-12-30T17:43:54.003756+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2016-12-31T15:18:37.754577+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "a479740c0795", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/a479740c0795.json"}, "html": {"href": "#!/osrf/gazebo/commits/a479740c0795"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}