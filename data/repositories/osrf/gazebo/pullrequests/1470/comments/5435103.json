{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1470/comments/5435103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1470/_/diff#comment-5435103"}}, "parent": {"id": 5426502, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1470/comments/5426502.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1470/_/diff#comment-5426502"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1470, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1470.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1470"}}, "title": "Use collide_bitmask to filter collisions"}, "content": {"raw": "This implementation should be the most general purpose, but also the most verbose. You may have to specify a bitmask on each collision element to achieve the desired behavior, but it is possible to get any (within the range of integer values) combination of collisions. ", "markup": "markdown", "html": "<p>This implementation should be the most general purpose, but also the most verbose. You may have to specify a bitmask on each collision element to achieve the desired behavior, but it is possible to get any (within the range of integer values) combination of collisions. </p>", "type": "rendered"}, "created_on": "2015-03-03T05:10:02.630222+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2015-03-03T05:10:02.641891+00:00", "type": "pullrequest_comment", "id": 5435103}