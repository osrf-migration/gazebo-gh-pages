{"rendered": {"description": {"raw": "This PR makes it possible to load models containing kinematic loops while using DART physics. The approach is loosely inspired by Simbody's `MultibodyGraphMaker`. The main changes are to `DARTModel.cc` and `DARTModelPrivate.hh`. `DARTModel::Init` creates the DART joints and body nodes (links) corresponding to the loaded model. It breaks the model into trees using breadth-first-search starting from links with the world as their parent or no parents, although it may start from arbitrary links (with parents) if they are the only uninitialized links remaining. In a second step, it loops through any remaining uninitialized (loop) joints and creates them. Since DART does not support multiple parent joints for one body node, the loop joints are  paired with slave body nodes, which are attached to the child body nodes with weld constraints. To avoid issues with massless body nodes, the mass of the link is split across the slave body nodes (80364e6).\r\n\r\n`kinematic_loop.cc` tests two types of kinematic loops. One is a 3-link loop anchored to the world so that one link has two parents (world and preceding link). The other is a 4-link free loop where every link has one child and one parent. The tests let the loops move under gravity and make sure they end up in reasonable configurations.\r\n\r\nThe kinematic loops tested caused DART's Dantzig LCP solver to fail. This PR has changes from pull request #2755 (e.g. 6a4c6f9), which make it possible to specify different LCP solvers for DART (Dantzig or PGS).\r\n\r\nI am aware of at least one issue with this PR (see below) that would be good to address before considering merging it.", "markup": "markdown", "html": "<p>This PR makes it possible to load models containing kinematic loops while using DART physics. The approach is loosely inspired by Simbody's <code>MultibodyGraphMaker</code>. The main changes are to <code>DARTModel.cc</code> and <code>DARTModelPrivate.hh</code>. <code>DARTModel::Init</code> creates the DART joints and body nodes (links) corresponding to the loaded model. It breaks the model into trees using breadth-first-search starting from links with the world as their parent or no parents, although it may start from arbitrary links (with parents) if they are the only uninitialized links remaining. In a second step, it loops through any remaining uninitialized (loop) joints and creates them. Since DART does not support multiple parent joints for one body node, the loop joints are  paired with slave body nodes, which are attached to the child body nodes with weld constraints. To avoid issues with massless body nodes, the mass of the link is split across the slave body nodes (<a href=\"#!/osrf/gazebo/commits/80364e6\" rel=\"nofollow\" class=\"ap-connect-link\">80364e6</a>).</p>\n<p><code>kinematic_loop.cc</code> tests two types of kinematic loops. One is a 3-link loop anchored to the world so that one link has two parents (world and preceding link). The other is a 4-link free loop where every link has one child and one parent. The tests let the loops move under gravity and make sure they end up in reasonable configurations.</p>\n<p>The kinematic loops tested caused DART's Dantzig LCP solver to fail. This PR has changes from <a href=\"#!/osrf/gazebo/pull-requests/2755/dart-lcp-solver\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2755</a> (e.g. <a href=\"#!/osrf/gazebo/commits/6a4c6f9\" rel=\"nofollow\" class=\"ap-connect-link\">6a4c6f9</a>), which make it possible to specify different LCP solvers for DART (Dantzig or PGS).</p>\n<p>I am aware of at least one issue with this PR (see below) that would be good to address before considering merging it.</p>", "type": "rendered"}, "title": {"raw": "Dart kinematic loops", "markup": "markdown", "html": "<p>Dart kinematic loops</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR makes it possible to load models containing kinematic loops while using DART physics. The approach is loosely inspired by Simbody's `MultibodyGraphMaker`. The main changes are to `DARTModel.cc` and `DARTModelPrivate.hh`. `DARTModel::Init` creates the DART joints and body nodes (links) corresponding to the loaded model. It breaks the model into trees using breadth-first-search starting from links with the world as their parent or no parents, although it may start from arbitrary links (with parents) if they are the only uninitialized links remaining. In a second step, it loops through any remaining uninitialized (loop) joints and creates them. Since DART does not support multiple parent joints for one body node, the loop joints are  paired with slave body nodes, which are attached to the child body nodes with weld constraints. To avoid issues with massless body nodes, the mass of the link is split across the slave body nodes (80364e6).\r\n\r\n`kinematic_loop.cc` tests two types of kinematic loops. One is a 3-link loop anchored to the world so that one link has two parents (world and preceding link). The other is a 4-link free loop where every link has one child and one parent. The tests let the loops move under gravity and make sure they end up in reasonable configurations.\r\n\r\nThe kinematic loops tested caused DART's Dantzig LCP solver to fail. This PR has changes from pull request #2755 (e.g. 6a4c6f9), which make it possible to specify different LCP solvers for DART (Dantzig or PGS).\r\n\r\nI am aware of at least one issue with this PR (see below) that would be good to address before considering merging it.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2756/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:6dd3ea7938b7%0D2c58f1f33766?from_pullrequest_id=2756"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2756/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2756.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2756/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2756/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2756"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2756/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:6dd3ea7938b7%0D2c58f1f33766?from_pullrequest_id=2756"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2756/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2756/statuses_page=1.json"}}, "title": "Dart kinematic loops", "close_source_branch": false, "reviewers": [], "id": 2756, "destination": {"commit": {"hash": "2c58f1f33766", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/2c58f1f33766.json"}, "html": {"href": "#!/osrf/gazebo/commits/2c58f1f33766"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2017-07-21T23:48:13.716154+00:00", "summary": {"raw": "This PR makes it possible to load models containing kinematic loops while using DART physics. The approach is loosely inspired by Simbody's `MultibodyGraphMaker`. The main changes are to `DARTModel.cc` and `DARTModelPrivate.hh`. `DARTModel::Init` creates the DART joints and body nodes (links) corresponding to the loaded model. It breaks the model into trees using breadth-first-search starting from links with the world as their parent or no parents, although it may start from arbitrary links (with parents) if they are the only uninitialized links remaining. In a second step, it loops through any remaining uninitialized (loop) joints and creates them. Since DART does not support multiple parent joints for one body node, the loop joints are  paired with slave body nodes, which are attached to the child body nodes with weld constraints. To avoid issues with massless body nodes, the mass of the link is split across the slave body nodes (80364e6).\r\n\r\n`kinematic_loop.cc` tests two types of kinematic loops. One is a 3-link loop anchored to the world so that one link has two parents (world and preceding link). The other is a 4-link free loop where every link has one child and one parent. The tests let the loops move under gravity and make sure they end up in reasonable configurations.\r\n\r\nThe kinematic loops tested caused DART's Dantzig LCP solver to fail. This PR has changes from pull request #2755 (e.g. 6a4c6f9), which make it possible to specify different LCP solvers for DART (Dantzig or PGS).\r\n\r\nI am aware of at least one issue with this PR (see below) that would be good to address before considering merging it.", "markup": "markdown", "html": "<p>This PR makes it possible to load models containing kinematic loops while using DART physics. The approach is loosely inspired by Simbody's <code>MultibodyGraphMaker</code>. The main changes are to <code>DARTModel.cc</code> and <code>DARTModelPrivate.hh</code>. <code>DARTModel::Init</code> creates the DART joints and body nodes (links) corresponding to the loaded model. It breaks the model into trees using breadth-first-search starting from links with the world as their parent or no parents, although it may start from arbitrary links (with parents) if they are the only uninitialized links remaining. In a second step, it loops through any remaining uninitialized (loop) joints and creates them. Since DART does not support multiple parent joints for one body node, the loop joints are  paired with slave body nodes, which are attached to the child body nodes with weld constraints. To avoid issues with massless body nodes, the mass of the link is split across the slave body nodes (<a href=\"#!/osrf/gazebo/commits/80364e6\" rel=\"nofollow\" class=\"ap-connect-link\">80364e6</a>).</p>\n<p><code>kinematic_loop.cc</code> tests two types of kinematic loops. One is a 3-link loop anchored to the world so that one link has two parents (world and preceding link). The other is a 4-link free loop where every link has one child and one parent. The tests let the loops move under gravity and make sure they end up in reasonable configurations.</p>\n<p>The kinematic loops tested caused DART's Dantzig LCP solver to fail. This PR has changes from <a href=\"#!/osrf/gazebo/pull-requests/2755/dart-lcp-solver\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2755</a> (e.g. <a href=\"#!/osrf/gazebo/commits/6a4c6f9\" rel=\"nofollow\" class=\"ap-connect-link\">6a4c6f9</a>), which make it possible to specify different LCP solvers for DART (Dantzig or PGS).</p>\n<p>I am aware of at least one issue with this PR (see below) that would be good to address before considering merging it.</p>", "type": "rendered"}, "source": {"commit": {"hash": "1a204f00ed16", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pchorak/gazebo/commit/1a204f00ed16"}, "html": {"href": "https://bitbucket.org/pchorak/gazebo/commits/1a204f00ed16"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pchorak/gazebo"}, "html": {"href": "https://bitbucket.org/pchorak/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{7130b41e-0983-4752-9e3b-9e2c12cf1268}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "pchorak/gazebo", "uuid": "{7130b41e-0983-4752-9e3b-9e2c12cf1268}"}, "branch": {"name": "dart_kinematic_loops"}}, "comment_count": 52, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-08-16T22:59:33.677384+00:00", "type": "participant", "approved": false, "user": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}}, {"role": "PARTICIPANT", "participated_on": "2017-08-18T00:50:11.325173+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2017-08-07T22:33:41.143949+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-08-07T22:18:52.896474+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "", "updated_on": "2017-08-18T00:53:46.934457+00:00", "author": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}, "merge_commit": {"hash": "6dd3ea7938b7", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/6dd3ea7938b7.json"}, "html": {"href": "#!/osrf/gazebo/commits/6dd3ea7938b7"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}