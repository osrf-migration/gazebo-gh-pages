{"pagelen": 50, "values": [{"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete", "destination": {"commit": {"hash": "4067f42ca38a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4067f42ca38a.json"}, "html": {"href": "#!/osrf/gazebo/commits/4067f42ca38a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "4d22b30c29cd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4d22b30c29cd.json"}, "html": {"href": "#!/osrf/gazebo/commits/4d22b30c29cd"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "MERGED", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-06-26T00:47:10.062135+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete", "destination": {"commit": {"hash": "4067f42ca38a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4067f42ca38a.json"}, "html": {"href": "#!/osrf/gazebo/commits/4067f42ca38a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "4d22b30c29cd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4d22b30c29cd.json"}, "html": {"href": "#!/osrf/gazebo/commits/4d22b30c29cd"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-06-26T00:43:13.228630+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete", "destination": {"commit": {"hash": "4067f42ca38a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4067f42ca38a.json"}, "html": {"href": "#!/osrf/gazebo/commits/4067f42ca38a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "4d22b30c29cd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4d22b30c29cd.json"}, "html": {"href": "#!/osrf/gazebo/commits/4d22b30c29cd"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-06-26T00:43:08.243964+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete", "destination": {"commit": {"hash": "4067f42ca38a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4067f42ca38a.json"}, "html": {"href": "#!/osrf/gazebo/commits/4067f42ca38a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "aa779b1d0020", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/aa779b1d0020.json"}, "html": {"href": "#!/osrf/gazebo/commits/aa779b1d0020"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-06-26T00:42:17.598124+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/107051495.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-107051495"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}, "content": {"raw": "I'll update the pull request title and changelog to reflect the change to `Publisher::OnPublishComplete`", "markup": "markdown", "html": "<p>I'll update the pull request title and changelog to reflect the change to <code>Publisher::OnPublishComplete</code></p>", "type": "rendered"}, "created_on": "2019-06-26T00:41:56.180414+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2019-06-26T00:41:56.187844+00:00", "type": "pullrequest_comment", "id": 107051495}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"approval": {"date": "2019-06-26T00:34:20.902833+00:00", "pullrequest": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/107051171.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-107051171"}}, "parent": {"id": 107050295, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/107050295.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-107050295"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}, "content": {"raw": "nice, thanks for testing it!", "markup": "markdown", "html": "<p>nice, thanks for testing it!</p>", "type": "rendered"}, "created_on": "2019-06-26T00:34:06.672933+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2019-06-26T00:34:06.682767+00:00", "type": "pullrequest_comment", "id": 107051171}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "title": "Master::ProcessMessage: fix race condition in accessing connection", "destination": {"commit": {"hash": "4067f42ca38a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4067f42ca38a.json"}, "html": {"href": "#!/osrf/gazebo/commits/4067f42ca38a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "aa779b1d0020", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/aa779b1d0020.json"}, "html": {"href": "#!/osrf/gazebo/commits/aa779b1d0020"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-06-26T00:17:32.374711+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/107050295.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-107050295"}}, "parent": {"id": 107049362, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/107049362.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-107049362"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}, "content": {"raw": "ok, I've tested your branch 7 times in a row without failures, so I'm going to merge it in here", "markup": "markdown", "html": "<p>ok, I've tested your branch 7 times in a row without failures, so I'm going to merge it in here</p>", "type": "rendered"}, "created_on": "2019-06-26T00:14:44.279490+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2019-06-26T00:14:44.291728+00:00", "type": "pullrequest_comment", "id": 107050295}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/107049362.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-107049362"}}, "parent": {"id": 105826619, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/105826619.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-105826619"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}, "content": {"raw": "I just did some testing against the 9.9.0 debs with your script, and I've seen a few backtraces at the following places in `Publisher::OnPublishComplete`:\n\n* [Publisher.cc:243](#!/osrf/gazebo/src/gazebo9_9.9.0/gazebo/transport/Publisher.cc#lines-243)\n* [Publisher.cc:252](#!/osrf/gazebo/src/gazebo9_9.9.0/gazebo/transport/Publisher.cc#lines-252)\n\nWith this branch, I only tend to see backtraces in [~Publisher](#!/osrf/gazebo/src/87af797edfef683ee2e5b20e267e446fb3b514ea/gazebo/transport/Publisher.cc#lines-55), with the following console message:\n\n~~~\ngzserver: /usr/include/boost/thread/pthread/mutex.hpp:111: boost::mutex::~mutex(): Assertion `!res' failed.\n~~~\n\nI'm about to start testing with your branch.", "markup": "markdown", "html": "<p>I just did some testing against the 9.9.0 debs with your script, and I've seen a few backtraces at the following places in <code>Publisher::OnPublishComplete</code>:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/gazebo9_9.9.0/gazebo/transport/Publisher.cc#lines-243\" rel=\"nofollow\">Publisher.cc:243</a></li>\n<li><a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/gazebo9_9.9.0/gazebo/transport/Publisher.cc#lines-252\" rel=\"nofollow\">Publisher.cc:252</a></li>\n</ul>\n<p>With this branch, I only tend to see backtraces in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/87af797edfef683ee2e5b20e267e446fb3b514ea/gazebo/transport/Publisher.cc#lines-55\" rel=\"nofollow\">~Publisher</a>, with the following console message:</p>\n<div class=\"codehilite\"><pre><span></span>gzserver: /usr/include/boost/thread/pthread/mutex.hpp:111: boost::mutex::~mutex(): Assertion `!res&#39; failed.\n</pre></div>\n\n\n<p>I'm about to start testing with your branch.</p>", "type": "rendered"}, "created_on": "2019-06-25T23:56:40.444127+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2019-06-25T23:56:40.457732+00:00", "type": "pullrequest_comment", "id": 107049362}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/105826619.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-105826619"}}, "parent": {"id": 100189059, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/100189059.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-100189059"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}, "content": {"raw": "we got a report that gzserver crashes with the same backtrace when objects are deleted. \n\nI have been testing this branch but I was still seeing the crash. I added a simple check in [master\\_ProcessMessage\\_race\\_ian](#!/osrf/gazebo/branch/master_ProcessMessage_race_ian?dest=master_ProcessMessage_race#diff) branch which seems to help and I have not been able to reproduce the crash now \\(or maybe it\u2019s just harder to reproduce\\). \n\nI have a script and a test world to help me reproduce the crash [here](https://bitbucket.org/snippets/iche033/Ke6og7).  \n\n1. launch boxes.world. Note that gzclient must be started. Having gzserver alone does not cause the crash for me\n\n    1. `gazebo --verbose boxes.world`\n    \n2. Run delete.sh to delete models in the world\n\n    1. `sh delete.sh`\n    \n\n", "markup": "markdown", "html": "<p>we got a report that gzserver crashes with the same backtrace when objects are deleted. </p>\n<p>I have been testing this branch but I was still seeing the crash. I added a simple check in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/branch/master_ProcessMessage_race_ian?dest=master_ProcessMessage_race#diff\" rel=\"nofollow\">master_ProcessMessage_race_ian</a> branch which seems to help and I have not been able to reproduce the crash now (or maybe it\u2019s just harder to reproduce). </p>\n<p>I have a script and a test world to help me reproduce the crash <a data-is-external-link=\"true\" href=\"https://bitbucket.org/snippets/iche033/Ke6og7\" rel=\"nofollow\">here</a>.  </p>\n<ol>\n<li>\n<p>launch boxes.world. Note that gzclient must be started. Having gzserver alone does not cause the crash for me</p>\n<ol>\n<li><code>gazebo --verbose boxes.world</code></li>\n</ol>\n</li>\n<li>\n<p>Run delete.sh to delete models in the world</p>\n<ol>\n<li><code>sh delete.sh</code></li>\n</ol>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2019-06-14T19:47:58.601675+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2019-06-14T19:47:58.610841+00:00", "type": "pullrequest_comment", "id": 105826619}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "title": "Master::ProcessMessage: fix race condition in accessing connection", "destination": {"commit": {"hash": "4067f42ca38a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4067f42ca38a.json"}, "html": {"href": "#!/osrf/gazebo/commits/4067f42ca38a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "87af797edfef", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/87af797edfef.json"}, "html": {"href": "#!/osrf/gazebo/commits/87af797edfef"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-05-24T17:49:47.007013+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"approval": {"date": "2019-05-14T20:17:42.020181+00:00", "pullrequest": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "title": "Master::ProcessMessage: fix race condition in accessing connection", "destination": {"commit": {"hash": "7e5f4b84705f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/7e5f4b84705f.json"}, "html": {"href": "#!/osrf/gazebo/commits/7e5f4b84705f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "2ba260a4bbc8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/2ba260a4bbc8.json"}, "html": {"href": "#!/osrf/gazebo/commits/2ba260a4bbc8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-04-29T06:58:21.741327+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.", "title": "Master::ProcessMessage: fix race condition in accessing connection", "destination": {"commit": {"hash": "7e5f4b84705f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/7e5f4b84705f.json"}, "html": {"href": "#!/osrf/gazebo/commits/7e5f4b84705f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "2ba260a4bbc8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/2ba260a4bbc8.json"}, "html": {"href": "#!/osrf/gazebo/commits/2ba260a4bbc8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-04-27T01:33:57.899693+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.", "title": "Master::ProcessMessage: fix race condition in accessing connection", "destination": {"commit": {"hash": "7e5f4b84705f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/7e5f4b84705f.json"}, "html": {"href": "#!/osrf/gazebo/commits/7e5f4b84705f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "2ba260a4bbc8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/2ba260a4bbc8.json"}, "html": {"href": "#!/osrf/gazebo/commits/2ba260a4bbc8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-04-27T01:33:41.203186+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.", "title": "Master::ProcessMessage: fix race condition in accessing connection", "destination": {"commit": {"hash": "7e5f4b84705f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/7e5f4b84705f.json"}, "html": {"href": "#!/osrf/gazebo/commits/7e5f4b84705f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "1e0702ac5e2e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/1e0702ac5e2e.json"}, "html": {"href": "#!/osrf/gazebo/commits/1e0702ac5e2e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-04-26T21:57:46.272009+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/100189059.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-100189059"}}, "parent": {"id": 100187922, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/100187922.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-100187922"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}, "content": {"raw": "I made a relevant comment on pull request #3014\n\n* #!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015", "markup": "markdown", "html": "<p>I made a relevant comment on <a href=\"#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #3014</a></p>\n<ul>\n<li><a href=\"#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015</a></li>\n</ul>", "type": "rendered"}, "created_on": "2019-04-26T18:06:41.232279+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2019-04-26T18:06:41.244430+00:00", "type": "pullrequest_comment", "id": 100189059}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments/100187922.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103/_/diff#comment-100187922"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}, "content": {"raw": "One of the jenkins builds now has a different backtrace in `gzTest.Model` that implicates `gazebo::transport::Publisher::OnPublishComplete`:\n\n* https://build.osrfoundation.org/job/gazebo-ci-pr_any-xenial-amd64-gpu-nvidia/834/testReport/junit/(root)/gzTest/Model/\n\n~~~\n327: [ RUN      ] gzTest.Model\n327: [Msg] Waiting for master.\n327: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\n327: [Msg] Publicized address: 172.17.0.2\n327: tools/gz_TEST.cc:439: Failure\n327: Value of: \"Unable to get info on model[my_box_0] in the world[default]\\n\"\n327: Expected: modelInfo\n327: Which is: \"gz: /usr/include/boost/thread/pthread/mutex.hpp:111: boost::mutex::~mutex(): Assertion `!res' failed.\\nUnable to get info on model[my_box_0] in the world[default]\\nAborted (core dumped)\\n\"\n*** Error in `gzserver': double free or corruption (fasttop): 0x00007f9d4c639900 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f9df7ae87e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7f9df7af137a]\n/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7f9df7af553c]\nbuild/gazebo/transport/libgazebo_transport.so.9(_ZN6gazebo9transport9Publisher17OnPublishCompleteEj+0xb6)[0x7f9df68f8c06]\nbuild/gazebo/transport/libgazebo_transport.so.9(_ZN6gazebo9transport10Connection9PostWriteEv+0x46)[0x7f9df68caaa6]\nbuild/gazebo/transport/libgazebo_transport.so.9(_ZN6gazebo9transport10Connection7OnWriteERKN5boost6system10error_codeE+0x3c)[0x7f9df68cbe2c]\n~~~\n\nI'm looking into it", "markup": "markdown", "html": "<p>One of the jenkins builds now has a different backtrace in <code>gzTest.Model</code> that implicates <code>gazebo::transport::Publisher::OnPublishComplete</code>:</p>\n<ul>\n<li><a href=\"https://build.osrfoundation.org/job/gazebo-ci-pr_any-xenial-amd64-gpu-nvidia/834/testReport/junit/(root)/gzTest/Model/\" rel=\"nofollow\" class=\"ap-connect-link\">https://build.osrfoundation.org/job/gazebo-ci-pr_any-xenial-amd64-gpu-nvidia/834/testReport/junit/(root)/gzTest/Model/</a></li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>327: [ RUN      ] gzTest.Model\n327: [Msg] Waiting for master.\n327: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\n327: [Msg] Publicized address: 172.17.0.2\n327: tools/gz_TEST.cc:439: Failure\n327: Value of: &quot;Unable to get info on model[my_box_0] in the world[default]\\n&quot;\n327: Expected: modelInfo\n327: Which is: &quot;gz: /usr/include/boost/thread/pthread/mutex.hpp:111: boost::mutex::~mutex(): Assertion `!res&#39; failed.\\nUnable to get info on model[my_box_0] in the world[default]\\nAborted (core dumped)\\n&quot;\n*** Error in `gzserver&#39;: double free or corruption (fasttop): 0x00007f9d4c639900 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f9df7ae87e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7f9df7af137a]\n/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7f9df7af553c]\nbuild/gazebo/transport/libgazebo_transport.so.9(_ZN6gazebo9transport9Publisher17OnPublishCompleteEj+0xb6)[0x7f9df68f8c06]\nbuild/gazebo/transport/libgazebo_transport.so.9(_ZN6gazebo9transport10Connection9PostWriteEv+0x46)[0x7f9df68caaa6]\nbuild/gazebo/transport/libgazebo_transport.so.9(_ZN6gazebo9transport10Connection7OnWriteERKN5boost6system10error_codeE+0x3c)[0x7f9df68cbe2c]\n</pre></div>\n\n\n<p>I'm looking into it</p>", "type": "rendered"}, "created_on": "2019-04-26T17:54:25.801918+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2019-04-26T17:54:25.816088+00:00", "type": "pullrequest_comment", "id": 100187922}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.", "title": "Master::ProcessMessage: fix race condition in accessing connection", "destination": {"commit": {"hash": "f0d9dbe74406", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f0d9dbe74406.json"}, "html": {"href": "#!/osrf/gazebo/commits/f0d9dbe74406"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "0dc2cd19871f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/0dc2cd19871f.json"}, "html": {"href": "#!/osrf/gazebo/commits/0dc2cd19871f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-04-25T00:13:47.003806+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}, {"update": {"description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.", "title": "Master::ProcessMessage: fix race condition in accessing connection", "destination": {"commit": {"hash": "f0d9dbe74406", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f0d9dbe74406.json"}, "html": {"href": "#!/osrf/gazebo/commits/f0d9dbe74406"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "reason": "", "source": {"commit": {"hash": "0dc2cd19871f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/0dc2cd19871f.json"}, "html": {"href": "#!/osrf/gazebo/commits/0dc2cd19871f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "state": "OPEN", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "date": "2019-04-25T00:13:46.971555+00:00"}, "pull_request": {"type": "pullrequest", "id": 3103, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete"}}]}