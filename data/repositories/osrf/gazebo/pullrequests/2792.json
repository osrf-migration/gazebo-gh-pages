{"rendered": {"description": {"raw": "Similar to pull request #2790. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked the ones in the physics classes explicit in this pull request, with one exception. I've suppressed the warning for `gazebo::physics::Inertial(const ignition::math::Inertiald &)` since I think it could be useful to convert easily between these types.\r\n\r\nThis is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes `explicit` and the first character (`-` or `+`), then counts unique adjacent lines. Everything that starts with a `2` was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of `explicit`, except for `GearboxJoint.hh`, `BulletBoxShape.hh`, `BulletPlaneShape.hh`, `BulletSphereShape.hh`, `SimbodyBoxShape.hh`, and `SimbodySphereShape.hh`, which needed some lines to be wrapped to stay under 80 characters, the cppcheck suppression added to `Inertial.hh`, and `DARTJointPrivate.hh` in which I renamed a parameter to meet the 80 character limit without wrapping any lines.\r\n\r\n~~~\r\n$ hg up explicit_constructors_physics\r\n$ hg diff -r default \\\r\n  | grep '^[-+] ' \\\r\n  | sed -e 's@explicit @@' -e 's@^.@@' \\\r\n  | uniq -c\r\n      2       public: AdiabaticAtmosphere(physics::World &_world);\r\n      2       public: AtmospherePrivate(physics::World &_world)\r\n      2       public: FixedJoint(BasePtr _parent) : T(_parent)\r\n      1       public: GearboxJoint(BasePtr _parent) : T(_parent), gearRatio(1.0)\r\n      1       public: GearboxJoint(BasePtr _parent)\r\n      1               : T(_parent), gearRatio(1.0)\r\n      2       public: HingeJoint(BasePtr _parent) : T(_parent)\r\n      1       // cppcheck-suppress noExplicitConstructor\r\n      2   public: FakeJoint(physics::ModelPtr _model) : physics::Joint(_model)\r\n      2       public: Light(BasePtr _parent);\r\n      2       public: QuadNode(QuadNode *_parent)\r\n      2       public: Preset(const std::string & _name);\r\n      2       public: PresetPrivate(const std::string &_name = \"default name\")\r\n      2       public: UserCmdManager(const WorldPtr _world);\r\n      2       public: WindPrivate(physics::World &_world)\r\n      1       public: BulletBoxShape(CollisionPtr _parent) : BoxShape(_parent) {}\r\n      1       public: BulletBoxShape(CollisionPtr _parent)\r\n      1               : BoxShape(_parent) {}\r\n      2       public: BulletCollision(LinkPtr _parent);\r\n      2       public: BulletCylinderShape(CollisionPtr _parent)\r\n      2       public: BulletHeightmapShape(CollisionPtr _parent);\r\n      2       public: BulletJoint(BasePtr _parent);\r\n      2       public: BulletLink(EntityPtr _parent);\r\n      2       public: BulletMeshShape(CollisionPtr _parent);\r\n      2       public: BulletMotionState(LinkPtr _link);\r\n      2       public: BulletMultiRayShape(CollisionPtr parent);\r\n      2       public: BulletPhysics(WorldPtr _world);\r\n      1       public: BulletPlaneShape(CollisionPtr _parent) : PlaneShape(_parent) {}\r\n      1       public: BulletPlaneShape(CollisionPtr _parent)\r\n      1               : PlaneShape(_parent) {}\r\n      2       public: BulletRayShape(PhysicsEnginePtr _physicsEngine);\r\n      2       public: BulletRayShape(CollisionPtr _collision);\r\n      1       public: BulletSphereShape(CollisionPtr _parent) : SphereShape(_parent) {}\r\n      1       public: BulletSphereShape(CollisionPtr _parent)\r\n      1               : SphereShape(_parent) {}\r\n      2       public: DARTBallJoint(BasePtr _parent);\r\n      2       public: DARTFixedJoint(BasePtr _parent);\r\n      2       public: DARTHeightmapShape(DARTCollisionPtr _parent);\r\n      2       public: DARTHinge2Joint(BasePtr _parent);\r\n      2       public: DARTHingeJoint(BasePtr _parent);\r\n      2       public: DARTJoint(BasePtr _parent);\r\n      1       public: DARTJointPrivate(const DARTPhysicsPtr &_dartPhysicsEngine)\r\n      1       public: DARTJointPrivate(const DARTPhysicsPtr &_engine)\r\n      1           dartPhysicsEngine(_dartPhysicsEngine),\r\n      1           dartPhysicsEngine(_engine),\r\n      2       public: DARTPhysics(WorldPtr _world);\r\n      2       public: DARTScrewJoint(BasePtr _parent);\r\n      2       public: DARTSliderJoint(BasePtr _parent);\r\n      2       public: DARTUniversalJoint(BasePtr _parent);\r\n      2       public: ODEHeightmapShape(CollisionPtr _parent);\r\n      2       public: ODEJoint(BasePtr _parent);\r\n      2       public: ODEPhysics(WorldPtr _world);\r\n      1       public: SimbodyBoxShape(CollisionPtr _parent) : BoxShape(_parent) {}\r\n      1       public: SimbodyBoxShape(CollisionPtr _parent)\r\n      1               : BoxShape(_parent) {}\r\n      2       public: SimbodyCollision(LinkPtr _parent);\r\n      2       public: SimbodyCylinderShape(CollisionPtr _parent)\r\n      2       public: SimbodyHeightmapShape(CollisionPtr _parent);\r\n      2       public: SimbodyJoint(BasePtr _parent);\r\n      2       public: SimbodyLink(EntityPtr _parent);\r\n      2       public: SimbodyMeshShape(CollisionPtr _parent);\r\n      2       public: SimbodyMultiRayShape(CollisionPtr parent);\r\n      2       public: SimbodyPhysics(WorldPtr _world);\r\n      2       public: SimbodyPlaneShape(CollisionPtr _parent);\r\n      2       public: SimbodyRayShape(PhysicsEnginePtr _physicsEngine);\r\n      2       public: SimbodyRayShape(CollisionPtr _collision);\r\n      1       public: SimbodySphereShape(CollisionPtr _parent) : SphereShape(_parent) {}\r\n      1       public: SimbodySphereShape(CollisionPtr _parent)\r\n      1               : SphereShape(_parent) {}\r\n~~~\r\n\r\nUPDATE: all the jenkins builds failed to compile, so reverted the `explicit` keyword for the `Preset(string)` constructor and suppressed the warning instead in 6ea1844.", "markup": "markdown", "html": "<p>Similar to <a href=\"#!/osrf/gazebo/pull-requests/2790/mark-many-gui-constructors-as-explicit\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2790</a>. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked the ones in the physics classes explicit in this pull request, with one exception. I've suppressed the warning for <code>gazebo::physics::Inertial(const ignition::math::Inertiald &amp;)</code> since I think it could be useful to convert easily between these types.</p>\n<p>This is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes <code>explicit</code> and the first character (<code>-</code> or <code>+</code>), then counts unique adjacent lines. Everything that starts with a <code>2</code> was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of <code>explicit</code>, except for <code>GearboxJoint.hh</code>, <code>BulletBoxShape.hh</code>, <code>BulletPlaneShape.hh</code>, <code>BulletSphereShape.hh</code>, <code>SimbodyBoxShape.hh</code>, and <code>SimbodySphereShape.hh</code>, which needed some lines to be wrapped to stay under 80 characters, the cppcheck suppression added to <code>Inertial.hh</code>, and <code>DARTJointPrivate.hh</code> in which I renamed a parameter to meet the 80 character limit without wrapping any lines.</p>\n<div class=\"codehilite\"><pre><span></span>$ hg up explicit_constructors_physics\n$ hg diff -r default <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> grep <span class=\"s1\">&#39;^[-+] &#39;</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s@explicit @@&#39;</span> -e <span class=\"s1\">&#39;s@^.@@&#39;</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> uniq -c\n      <span class=\"m\">2</span>       public: AdiabaticAtmosphere<span class=\"o\">(</span>physics::World <span class=\"p\">&amp;</span>_world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: AtmospherePrivate<span class=\"o\">(</span>physics::World <span class=\"p\">&amp;</span>_world<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: FixedJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span> : T<span class=\"o\">(</span>_parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       public: GearboxJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span> : T<span class=\"o\">(</span>_parent<span class=\"o\">)</span>, gearRatio<span class=\"o\">(</span><span class=\"m\">1</span>.0<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       public: GearboxJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : T<span class=\"o\">(</span>_parent<span class=\"o\">)</span>, gearRatio<span class=\"o\">(</span><span class=\"m\">1</span>.0<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: HingeJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span> : T<span class=\"o\">(</span>_parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       // cppcheck-suppress noExplicitConstructor\n      <span class=\"m\">2</span>   public: FakeJoint<span class=\"o\">(</span>physics::ModelPtr _model<span class=\"o\">)</span> : physics::Joint<span class=\"o\">(</span>_model<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: Light<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: QuadNode<span class=\"o\">(</span>QuadNode *_parent<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: Preset<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span> _name<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: PresetPrivate<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span><span class=\"nv\">_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;default name&quot;</span><span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: UserCmdManager<span class=\"o\">(</span>const WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: WindPrivate<span class=\"o\">(</span>physics::World <span class=\"p\">&amp;</span>_world<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       public: BulletBoxShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : BoxShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: BulletBoxShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : BoxShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: BulletCollision<span class=\"o\">(</span>LinkPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletCylinderShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: BulletHeightmapShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletLink<span class=\"o\">(</span>EntityPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletMeshShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletMotionState<span class=\"o\">(</span>LinkPtr _link<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletMultiRayShape<span class=\"o\">(</span>CollisionPtr parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletPhysics<span class=\"o\">(</span>WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: BulletPlaneShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : PlaneShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: BulletPlaneShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : PlaneShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: BulletRayShape<span class=\"o\">(</span>PhysicsEnginePtr _physicsEngine<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletRayShape<span class=\"o\">(</span>CollisionPtr _collision<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: BulletSphereShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : SphereShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: BulletSphereShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : SphereShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: DARTBallJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTFixedJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTHeightmapShape<span class=\"o\">(</span>DARTCollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTHinge2Joint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTHingeJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: DARTJointPrivate<span class=\"o\">(</span>const DARTPhysicsPtr <span class=\"p\">&amp;</span>_dartPhysicsEngine<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       public: DARTJointPrivate<span class=\"o\">(</span>const DARTPhysicsPtr <span class=\"p\">&amp;</span>_engine<span class=\"o\">)</span>\n      <span class=\"m\">1</span>           dartPhysicsEngine<span class=\"o\">(</span>_dartPhysicsEngine<span class=\"o\">)</span>,\n      <span class=\"m\">1</span>           dartPhysicsEngine<span class=\"o\">(</span>_engine<span class=\"o\">)</span>,\n      <span class=\"m\">2</span>       public: DARTPhysics<span class=\"o\">(</span>WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTScrewJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTSliderJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTUniversalJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: ODEHeightmapShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: ODEJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: ODEPhysics<span class=\"o\">(</span>WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: SimbodyBoxShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : BoxShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: SimbodyBoxShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : BoxShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: SimbodyCollision<span class=\"o\">(</span>LinkPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyCylinderShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: SimbodyHeightmapShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyLink<span class=\"o\">(</span>EntityPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyMeshShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyMultiRayShape<span class=\"o\">(</span>CollisionPtr parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyPhysics<span class=\"o\">(</span>WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyPlaneShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyRayShape<span class=\"o\">(</span>PhysicsEnginePtr _physicsEngine<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyRayShape<span class=\"o\">(</span>CollisionPtr _collision<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: SimbodySphereShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : SphereShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: SimbodySphereShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : SphereShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n</pre></div>\n\n\n<p>UPDATE: all the jenkins builds failed to compile, so reverted the <code>explicit</code> keyword for the <code>Preset(string)</code> constructor and suppressed the warning instead in <a href=\"#!/osrf/gazebo/commits/6ea1844\" rel=\"nofollow\" class=\"ap-connect-link\">6ea1844</a>.</p>", "type": "rendered"}, "title": {"raw": "Mark many physics constructors as explicit, suppress one cppcheck warning", "markup": "markdown", "html": "<p>Mark many physics constructors as explicit, suppress one cppcheck warning</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Similar to pull request #2790. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked the ones in the physics classes explicit in this pull request, with one exception. I've suppressed the warning for `gazebo::physics::Inertial(const ignition::math::Inertiald &)` since I think it could be useful to convert easily between these types.\r\n\r\nThis is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes `explicit` and the first character (`-` or `+`), then counts unique adjacent lines. Everything that starts with a `2` was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of `explicit`, except for `GearboxJoint.hh`, `BulletBoxShape.hh`, `BulletPlaneShape.hh`, `BulletSphereShape.hh`, `SimbodyBoxShape.hh`, and `SimbodySphereShape.hh`, which needed some lines to be wrapped to stay under 80 characters, the cppcheck suppression added to `Inertial.hh`, and `DARTJointPrivate.hh` in which I renamed a parameter to meet the 80 character limit without wrapping any lines.\r\n\r\n~~~\r\n$ hg up explicit_constructors_physics\r\n$ hg diff -r default \\\r\n  | grep '^[-+] ' \\\r\n  | sed -e 's@explicit @@' -e 's@^.@@' \\\r\n  | uniq -c\r\n      2       public: AdiabaticAtmosphere(physics::World &_world);\r\n      2       public: AtmospherePrivate(physics::World &_world)\r\n      2       public: FixedJoint(BasePtr _parent) : T(_parent)\r\n      1       public: GearboxJoint(BasePtr _parent) : T(_parent), gearRatio(1.0)\r\n      1       public: GearboxJoint(BasePtr _parent)\r\n      1               : T(_parent), gearRatio(1.0)\r\n      2       public: HingeJoint(BasePtr _parent) : T(_parent)\r\n      1       // cppcheck-suppress noExplicitConstructor\r\n      2   public: FakeJoint(physics::ModelPtr _model) : physics::Joint(_model)\r\n      2       public: Light(BasePtr _parent);\r\n      2       public: QuadNode(QuadNode *_parent)\r\n      2       public: Preset(const std::string & _name);\r\n      2       public: PresetPrivate(const std::string &_name = \"default name\")\r\n      2       public: UserCmdManager(const WorldPtr _world);\r\n      2       public: WindPrivate(physics::World &_world)\r\n      1       public: BulletBoxShape(CollisionPtr _parent) : BoxShape(_parent) {}\r\n      1       public: BulletBoxShape(CollisionPtr _parent)\r\n      1               : BoxShape(_parent) {}\r\n      2       public: BulletCollision(LinkPtr _parent);\r\n      2       public: BulletCylinderShape(CollisionPtr _parent)\r\n      2       public: BulletHeightmapShape(CollisionPtr _parent);\r\n      2       public: BulletJoint(BasePtr _parent);\r\n      2       public: BulletLink(EntityPtr _parent);\r\n      2       public: BulletMeshShape(CollisionPtr _parent);\r\n      2       public: BulletMotionState(LinkPtr _link);\r\n      2       public: BulletMultiRayShape(CollisionPtr parent);\r\n      2       public: BulletPhysics(WorldPtr _world);\r\n      1       public: BulletPlaneShape(CollisionPtr _parent) : PlaneShape(_parent) {}\r\n      1       public: BulletPlaneShape(CollisionPtr _parent)\r\n      1               : PlaneShape(_parent) {}\r\n      2       public: BulletRayShape(PhysicsEnginePtr _physicsEngine);\r\n      2       public: BulletRayShape(CollisionPtr _collision);\r\n      1       public: BulletSphereShape(CollisionPtr _parent) : SphereShape(_parent) {}\r\n      1       public: BulletSphereShape(CollisionPtr _parent)\r\n      1               : SphereShape(_parent) {}\r\n      2       public: DARTBallJoint(BasePtr _parent);\r\n      2       public: DARTFixedJoint(BasePtr _parent);\r\n      2       public: DARTHeightmapShape(DARTCollisionPtr _parent);\r\n      2       public: DARTHinge2Joint(BasePtr _parent);\r\n      2       public: DARTHingeJoint(BasePtr _parent);\r\n      2       public: DARTJoint(BasePtr _parent);\r\n      1       public: DARTJointPrivate(const DARTPhysicsPtr &_dartPhysicsEngine)\r\n      1       public: DARTJointPrivate(const DARTPhysicsPtr &_engine)\r\n      1           dartPhysicsEngine(_dartPhysicsEngine),\r\n      1           dartPhysicsEngine(_engine),\r\n      2       public: DARTPhysics(WorldPtr _world);\r\n      2       public: DARTScrewJoint(BasePtr _parent);\r\n      2       public: DARTSliderJoint(BasePtr _parent);\r\n      2       public: DARTUniversalJoint(BasePtr _parent);\r\n      2       public: ODEHeightmapShape(CollisionPtr _parent);\r\n      2       public: ODEJoint(BasePtr _parent);\r\n      2       public: ODEPhysics(WorldPtr _world);\r\n      1       public: SimbodyBoxShape(CollisionPtr _parent) : BoxShape(_parent) {}\r\n      1       public: SimbodyBoxShape(CollisionPtr _parent)\r\n      1               : BoxShape(_parent) {}\r\n      2       public: SimbodyCollision(LinkPtr _parent);\r\n      2       public: SimbodyCylinderShape(CollisionPtr _parent)\r\n      2       public: SimbodyHeightmapShape(CollisionPtr _parent);\r\n      2       public: SimbodyJoint(BasePtr _parent);\r\n      2       public: SimbodyLink(EntityPtr _parent);\r\n      2       public: SimbodyMeshShape(CollisionPtr _parent);\r\n      2       public: SimbodyMultiRayShape(CollisionPtr parent);\r\n      2       public: SimbodyPhysics(WorldPtr _world);\r\n      2       public: SimbodyPlaneShape(CollisionPtr _parent);\r\n      2       public: SimbodyRayShape(PhysicsEnginePtr _physicsEngine);\r\n      2       public: SimbodyRayShape(CollisionPtr _collision);\r\n      1       public: SimbodySphereShape(CollisionPtr _parent) : SphereShape(_parent) {}\r\n      1       public: SimbodySphereShape(CollisionPtr _parent)\r\n      1               : SphereShape(_parent) {}\r\n~~~\r\n\r\nUPDATE: all the jenkins builds failed to compile, so reverted the `explicit` keyword for the `Preset(string)` constructor and suppressed the warning instead in 6ea1844.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2792/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:9840e93de641%0De7b5cde33db1?from_pullrequest_id=2792"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2792/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2792.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2792/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2792/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2792"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2792/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:9840e93de641%0De7b5cde33db1?from_pullrequest_id=2792"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2792/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2792/statuses_page=1.json"}}, "title": "Mark many physics constructors as explicit, suppress one cppcheck warning", "close_source_branch": true, "reviewers": [], "id": 2792, "destination": {"commit": {"hash": "e7b5cde33db1", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/e7b5cde33db1.json"}, "html": {"href": "#!/osrf/gazebo/commits/e7b5cde33db1"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2017-10-24T20:06:49.057988+00:00", "summary": {"raw": "Similar to pull request #2790. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked the ones in the physics classes explicit in this pull request, with one exception. I've suppressed the warning for `gazebo::physics::Inertial(const ignition::math::Inertiald &)` since I think it could be useful to convert easily between these types.\r\n\r\nThis is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes `explicit` and the first character (`-` or `+`), then counts unique adjacent lines. Everything that starts with a `2` was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of `explicit`, except for `GearboxJoint.hh`, `BulletBoxShape.hh`, `BulletPlaneShape.hh`, `BulletSphereShape.hh`, `SimbodyBoxShape.hh`, and `SimbodySphereShape.hh`, which needed some lines to be wrapped to stay under 80 characters, the cppcheck suppression added to `Inertial.hh`, and `DARTJointPrivate.hh` in which I renamed a parameter to meet the 80 character limit without wrapping any lines.\r\n\r\n~~~\r\n$ hg up explicit_constructors_physics\r\n$ hg diff -r default \\\r\n  | grep '^[-+] ' \\\r\n  | sed -e 's@explicit @@' -e 's@^.@@' \\\r\n  | uniq -c\r\n      2       public: AdiabaticAtmosphere(physics::World &_world);\r\n      2       public: AtmospherePrivate(physics::World &_world)\r\n      2       public: FixedJoint(BasePtr _parent) : T(_parent)\r\n      1       public: GearboxJoint(BasePtr _parent) : T(_parent), gearRatio(1.0)\r\n      1       public: GearboxJoint(BasePtr _parent)\r\n      1               : T(_parent), gearRatio(1.0)\r\n      2       public: HingeJoint(BasePtr _parent) : T(_parent)\r\n      1       // cppcheck-suppress noExplicitConstructor\r\n      2   public: FakeJoint(physics::ModelPtr _model) : physics::Joint(_model)\r\n      2       public: Light(BasePtr _parent);\r\n      2       public: QuadNode(QuadNode *_parent)\r\n      2       public: Preset(const std::string & _name);\r\n      2       public: PresetPrivate(const std::string &_name = \"default name\")\r\n      2       public: UserCmdManager(const WorldPtr _world);\r\n      2       public: WindPrivate(physics::World &_world)\r\n      1       public: BulletBoxShape(CollisionPtr _parent) : BoxShape(_parent) {}\r\n      1       public: BulletBoxShape(CollisionPtr _parent)\r\n      1               : BoxShape(_parent) {}\r\n      2       public: BulletCollision(LinkPtr _parent);\r\n      2       public: BulletCylinderShape(CollisionPtr _parent)\r\n      2       public: BulletHeightmapShape(CollisionPtr _parent);\r\n      2       public: BulletJoint(BasePtr _parent);\r\n      2       public: BulletLink(EntityPtr _parent);\r\n      2       public: BulletMeshShape(CollisionPtr _parent);\r\n      2       public: BulletMotionState(LinkPtr _link);\r\n      2       public: BulletMultiRayShape(CollisionPtr parent);\r\n      2       public: BulletPhysics(WorldPtr _world);\r\n      1       public: BulletPlaneShape(CollisionPtr _parent) : PlaneShape(_parent) {}\r\n      1       public: BulletPlaneShape(CollisionPtr _parent)\r\n      1               : PlaneShape(_parent) {}\r\n      2       public: BulletRayShape(PhysicsEnginePtr _physicsEngine);\r\n      2       public: BulletRayShape(CollisionPtr _collision);\r\n      1       public: BulletSphereShape(CollisionPtr _parent) : SphereShape(_parent) {}\r\n      1       public: BulletSphereShape(CollisionPtr _parent)\r\n      1               : SphereShape(_parent) {}\r\n      2       public: DARTBallJoint(BasePtr _parent);\r\n      2       public: DARTFixedJoint(BasePtr _parent);\r\n      2       public: DARTHeightmapShape(DARTCollisionPtr _parent);\r\n      2       public: DARTHinge2Joint(BasePtr _parent);\r\n      2       public: DARTHingeJoint(BasePtr _parent);\r\n      2       public: DARTJoint(BasePtr _parent);\r\n      1       public: DARTJointPrivate(const DARTPhysicsPtr &_dartPhysicsEngine)\r\n      1       public: DARTJointPrivate(const DARTPhysicsPtr &_engine)\r\n      1           dartPhysicsEngine(_dartPhysicsEngine),\r\n      1           dartPhysicsEngine(_engine),\r\n      2       public: DARTPhysics(WorldPtr _world);\r\n      2       public: DARTScrewJoint(BasePtr _parent);\r\n      2       public: DARTSliderJoint(BasePtr _parent);\r\n      2       public: DARTUniversalJoint(BasePtr _parent);\r\n      2       public: ODEHeightmapShape(CollisionPtr _parent);\r\n      2       public: ODEJoint(BasePtr _parent);\r\n      2       public: ODEPhysics(WorldPtr _world);\r\n      1       public: SimbodyBoxShape(CollisionPtr _parent) : BoxShape(_parent) {}\r\n      1       public: SimbodyBoxShape(CollisionPtr _parent)\r\n      1               : BoxShape(_parent) {}\r\n      2       public: SimbodyCollision(LinkPtr _parent);\r\n      2       public: SimbodyCylinderShape(CollisionPtr _parent)\r\n      2       public: SimbodyHeightmapShape(CollisionPtr _parent);\r\n      2       public: SimbodyJoint(BasePtr _parent);\r\n      2       public: SimbodyLink(EntityPtr _parent);\r\n      2       public: SimbodyMeshShape(CollisionPtr _parent);\r\n      2       public: SimbodyMultiRayShape(CollisionPtr parent);\r\n      2       public: SimbodyPhysics(WorldPtr _world);\r\n      2       public: SimbodyPlaneShape(CollisionPtr _parent);\r\n      2       public: SimbodyRayShape(PhysicsEnginePtr _physicsEngine);\r\n      2       public: SimbodyRayShape(CollisionPtr _collision);\r\n      1       public: SimbodySphereShape(CollisionPtr _parent) : SphereShape(_parent) {}\r\n      1       public: SimbodySphereShape(CollisionPtr _parent)\r\n      1               : SphereShape(_parent) {}\r\n~~~\r\n\r\nUPDATE: all the jenkins builds failed to compile, so reverted the `explicit` keyword for the `Preset(string)` constructor and suppressed the warning instead in 6ea1844.", "markup": "markdown", "html": "<p>Similar to <a href=\"#!/osrf/gazebo/pull-requests/2790/mark-many-gui-constructors-as-explicit\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2790</a>. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked the ones in the physics classes explicit in this pull request, with one exception. I've suppressed the warning for <code>gazebo::physics::Inertial(const ignition::math::Inertiald &amp;)</code> since I think it could be useful to convert easily between these types.</p>\n<p>This is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes <code>explicit</code> and the first character (<code>-</code> or <code>+</code>), then counts unique adjacent lines. Everything that starts with a <code>2</code> was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of <code>explicit</code>, except for <code>GearboxJoint.hh</code>, <code>BulletBoxShape.hh</code>, <code>BulletPlaneShape.hh</code>, <code>BulletSphereShape.hh</code>, <code>SimbodyBoxShape.hh</code>, and <code>SimbodySphereShape.hh</code>, which needed some lines to be wrapped to stay under 80 characters, the cppcheck suppression added to <code>Inertial.hh</code>, and <code>DARTJointPrivate.hh</code> in which I renamed a parameter to meet the 80 character limit without wrapping any lines.</p>\n<div class=\"codehilite\"><pre><span></span>$ hg up explicit_constructors_physics\n$ hg diff -r default <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> grep <span class=\"s1\">&#39;^[-+] &#39;</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s@explicit @@&#39;</span> -e <span class=\"s1\">&#39;s@^.@@&#39;</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> uniq -c\n      <span class=\"m\">2</span>       public: AdiabaticAtmosphere<span class=\"o\">(</span>physics::World <span class=\"p\">&amp;</span>_world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: AtmospherePrivate<span class=\"o\">(</span>physics::World <span class=\"p\">&amp;</span>_world<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: FixedJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span> : T<span class=\"o\">(</span>_parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       public: GearboxJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span> : T<span class=\"o\">(</span>_parent<span class=\"o\">)</span>, gearRatio<span class=\"o\">(</span><span class=\"m\">1</span>.0<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       public: GearboxJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : T<span class=\"o\">(</span>_parent<span class=\"o\">)</span>, gearRatio<span class=\"o\">(</span><span class=\"m\">1</span>.0<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: HingeJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span> : T<span class=\"o\">(</span>_parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       // cppcheck-suppress noExplicitConstructor\n      <span class=\"m\">2</span>   public: FakeJoint<span class=\"o\">(</span>physics::ModelPtr _model<span class=\"o\">)</span> : physics::Joint<span class=\"o\">(</span>_model<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: Light<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: QuadNode<span class=\"o\">(</span>QuadNode *_parent<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: Preset<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span> _name<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: PresetPrivate<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span><span class=\"nv\">_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;default name&quot;</span><span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: UserCmdManager<span class=\"o\">(</span>const WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: WindPrivate<span class=\"o\">(</span>physics::World <span class=\"p\">&amp;</span>_world<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       public: BulletBoxShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : BoxShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: BulletBoxShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : BoxShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: BulletCollision<span class=\"o\">(</span>LinkPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletCylinderShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: BulletHeightmapShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletLink<span class=\"o\">(</span>EntityPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletMeshShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletMotionState<span class=\"o\">(</span>LinkPtr _link<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletMultiRayShape<span class=\"o\">(</span>CollisionPtr parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletPhysics<span class=\"o\">(</span>WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: BulletPlaneShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : PlaneShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: BulletPlaneShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : PlaneShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: BulletRayShape<span class=\"o\">(</span>PhysicsEnginePtr _physicsEngine<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: BulletRayShape<span class=\"o\">(</span>CollisionPtr _collision<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: BulletSphereShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : SphereShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: BulletSphereShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : SphereShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: DARTBallJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTFixedJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTHeightmapShape<span class=\"o\">(</span>DARTCollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTHinge2Joint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTHingeJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: DARTJointPrivate<span class=\"o\">(</span>const DARTPhysicsPtr <span class=\"p\">&amp;</span>_dartPhysicsEngine<span class=\"o\">)</span>\n      <span class=\"m\">1</span>       public: DARTJointPrivate<span class=\"o\">(</span>const DARTPhysicsPtr <span class=\"p\">&amp;</span>_engine<span class=\"o\">)</span>\n      <span class=\"m\">1</span>           dartPhysicsEngine<span class=\"o\">(</span>_dartPhysicsEngine<span class=\"o\">)</span>,\n      <span class=\"m\">1</span>           dartPhysicsEngine<span class=\"o\">(</span>_engine<span class=\"o\">)</span>,\n      <span class=\"m\">2</span>       public: DARTPhysics<span class=\"o\">(</span>WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTScrewJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTSliderJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DARTUniversalJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: ODEHeightmapShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: ODEJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: ODEPhysics<span class=\"o\">(</span>WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: SimbodyBoxShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : BoxShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: SimbodyBoxShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : BoxShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: SimbodyCollision<span class=\"o\">(</span>LinkPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyCylinderShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">2</span>       public: SimbodyHeightmapShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyJoint<span class=\"o\">(</span>BasePtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyLink<span class=\"o\">(</span>EntityPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyMeshShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyMultiRayShape<span class=\"o\">(</span>CollisionPtr parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyPhysics<span class=\"o\">(</span>WorldPtr _world<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyPlaneShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyRayShape<span class=\"o\">(</span>PhysicsEnginePtr _physicsEngine<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: SimbodyRayShape<span class=\"o\">(</span>CollisionPtr _collision<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>       public: SimbodySphereShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span> : SphereShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>       public: SimbodySphereShape<span class=\"o\">(</span>CollisionPtr _parent<span class=\"o\">)</span>\n      <span class=\"m\">1</span>               : SphereShape<span class=\"o\">(</span>_parent<span class=\"o\">)</span> <span class=\"o\">{}</span>\n</pre></div>\n\n\n<p>UPDATE: all the jenkins builds failed to compile, so reverted the <code>explicit</code> keyword for the <code>Preset(string)</code> constructor and suppressed the warning instead in <a href=\"#!/osrf/gazebo/commits/6ea1844\" rel=\"nofollow\" class=\"ap-connect-link\">6ea1844</a>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "dc4dd1ab6368", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/dc4dd1ab6368.json"}, "html": {"href": "#!/osrf/gazebo/commits/dc4dd1ab6368"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "explicit_constructors_physics"}}, "comment_count": 22, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-12-09T01:05:39.743913+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2017-11-17T04:14:29.669438+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2017-12-09T00:26:58.118160+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-12-09T00:53:29.915301+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2017-12-09T01:06:19.509091+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "9840e93de641", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/9840e93de641.json"}, "html": {"href": "#!/osrf/gazebo/commits/9840e93de641"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}