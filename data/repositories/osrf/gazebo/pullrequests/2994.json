{"rendered": {"description": {"raw": "# Overview\r\n\r\n`LedPlugin` to blink a visual object, synchronizing the `FlashLightPlugin`.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/1622346296-led.gif)\r\n\u200c\r\n\r\nAnd an updated version of the `FlashLightPlugin` so it can switch colors of the light.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/4260459456-color_blocks.gif)\r\n\u200c\r\n\r\nIt accepts `<block>` element as a plugin parameter to define a light pattern. The example below defines that the light element \\(`link1/light_source` \\) casts red light for 0.6 sec, followed by 0.2 sec of green light and 0.5 sec of dim, and it repeats this pattern.\r\n\r\n    <plugin ... >\r\n      <light>\r\n        <id>link1/light_source</id>\r\n        <block>\r\n          <duration>0.6</duration>\r\n          <interval>0</interval>\r\n          <color>1 0 0</color>\r\n        </block>\r\n        <block>\r\n          <duration>0.2</duration>\r\n          <interval>0.5</interval>\r\n          <color>0 1 0</color>\r\n        </block>\r\n      </light>\r\n    </plugin>\r\n\r\n# Implementation of LedPlugin\r\n\r\nHere are details about the structure and implementation of `LedPlugin`.\r\n\r\n`LedPlugin` inherits the `FlashLightPlugin`. The following diagram shows the internal components.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/1335009940-LED.png)\r\n`FlashLightPlugin` has a list of `FlashLightSetting` objects, each of which takes care of an individual light object. They call `Flash` and `Dim` functions which send a message to `~/light/modify` topic at a specified timing, i.e., duration and interval time.\r\n\r\n`LedPlugin` extends this structure and has a list of `LedSetting` objects which are descendants of `FlashLightSetting`. They override `Flash` and `Dim` functions to send a message to `~/visual` topic so a corresponding visual object can be updated synchronously.\r\n\r\n## Initialization of extended setting objects\r\n\r\nThe data inside `LedPlugin` and `FlashLightPlugin` are implemented in PIMPL, and they are invisible to each other. This causes a problem when a `FlashLightSetting` is extended. It needs to be instantiated in `LedPlugin` while the objects are stored inside `FlashLightPlugin`. Also an object needs to be initialized by data in each level.\r\n\r\nTo have `LedPlugin` hold an extension class of `FlashLightSetting`, it overrides two functions: `CreateSetting` and `InitSettingBySpecificData`.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/1601523865-initLED.png)\r\nThe `Load` function of the plugin reads SDF data and creates a setting object for each light. \\(1. Call and 2. Instantiate in the diagram\\) It first calls `CreateSetting` function. This function is overridden and instantiates the corresponding class. That is,\r\n\r\n```c++\r\nstd::shared_ptr<FlashLightSetting> LedPlugin::CreateSetting(\r\n  const sdf::ElementPtr &_sdf,\r\n  const physics::ModelPtr &_model,\r\n  const common::Time &_currentTime)\r\n{\r\n  return std::make_shared<LedSetting>(_sdf, _model, _currentTime);\r\n}\r\n```\r\n\r\nAfter that, it calls `InitSettingBySpecificData` function, which initializes variables in `LedSetting`. It also calls the parent's function so those in `FlashLightSetting` are also initialized. \\(4. Call 5. Initialize 6. Initialize in the diagram\\)\r\n\r\nP.S. I am sorry for this complicated structure. I appreciate any comments and suggestions!", "markup": "markdown", "html": "<h1 id=\"markdown-header-overview\">Overview</h1>\n<p><code>LedPlugin</code> to blink a visual object, synchronizing the <code>FlashLightPlugin</code>.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/oLe6g9a/images/1622346296-led.gif\" />\n\u200c</p>\n<p>And an updated version of the <code>FlashLightPlugin</code> so it can switch colors of the light.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/oLe6g9a/images/4260459456-color_blocks.gif\" />\n\u200c</p>\n<p>It accepts <code>&lt;block&gt;</code> element as a plugin parameter to define a light pattern. The example below defines that the light element (<code>link1/light_source</code> ) casts red light for 0.6 sec, followed by 0.2 sec of green light and 0.5 sec of dim, and it repeats this pattern.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;plugin</span> <span class=\"err\">...</span> <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;light&gt;</span>\n    <span class=\"nt\">&lt;id&gt;</span>link1/light_source<span class=\"nt\">&lt;/id&gt;</span>\n    <span class=\"nt\">&lt;block&gt;</span>\n      <span class=\"nt\">&lt;duration&gt;</span>0.6<span class=\"nt\">&lt;/duration&gt;</span>\n      <span class=\"nt\">&lt;interval&gt;</span>0<span class=\"nt\">&lt;/interval&gt;</span>\n      <span class=\"nt\">&lt;color&gt;</span>1 0 0<span class=\"nt\">&lt;/color&gt;</span>\n    <span class=\"nt\">&lt;/block&gt;</span>\n    <span class=\"nt\">&lt;block&gt;</span>\n      <span class=\"nt\">&lt;duration&gt;</span>0.2<span class=\"nt\">&lt;/duration&gt;</span>\n      <span class=\"nt\">&lt;interval&gt;</span>0.5<span class=\"nt\">&lt;/interval&gt;</span>\n      <span class=\"nt\">&lt;color&gt;</span>0 1 0<span class=\"nt\">&lt;/color&gt;</span>\n    <span class=\"nt\">&lt;/block&gt;</span>\n  <span class=\"nt\">&lt;/light&gt;</span>\n<span class=\"nt\">&lt;/plugin&gt;</span>\n</pre></div>\n\n\n<h1 id=\"markdown-header-implementation-of-ledplugin\">Implementation of LedPlugin</h1>\n<p>Here are details about the structure and implementation of <code>LedPlugin</code>.</p>\n<p><code>LedPlugin</code> inherits the <code>FlashLightPlugin</code>. The following diagram shows the internal components.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/oLe6g9a/images/1335009940-LED.png\" />\n<code>FlashLightPlugin</code> has a list of <code>FlashLightSetting</code> objects, each of which takes care of an individual light object. They call <code>Flash</code> and <code>Dim</code> functions which send a message to <code>~/light/modify</code> topic at a specified timing, i.e., duration and interval time.</p>\n<p><code>LedPlugin</code> extends this structure and has a list of <code>LedSetting</code> objects which are descendants of <code>FlashLightSetting</code>. They override <code>Flash</code> and <code>Dim</code> functions to send a message to <code>~/visual</code> topic so a corresponding visual object can be updated synchronously.</p>\n<h2 id=\"markdown-header-initialization-of-extended-setting-objects\">Initialization of extended setting objects</h2>\n<p>The data inside <code>LedPlugin</code> and <code>FlashLightPlugin</code> are implemented in PIMPL, and they are invisible to each other. This causes a problem when a <code>FlashLightSetting</code> is extended. It needs to be instantiated in <code>LedPlugin</code> while the objects are stored inside <code>FlashLightPlugin</code>. Also an object needs to be initialized by data in each level.</p>\n<p>To have <code>LedPlugin</code> hold an extension class of <code>FlashLightSetting</code>, it overrides two functions: <code>CreateSetting</code> and <code>InitSettingBySpecificData</code>.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/oLe6g9a/images/1601523865-initLED.png\" />\nThe <code>Load</code> function of the plugin reads SDF data and creates a setting object for each light. (1. Call and 2. Instantiate in the diagram) It first calls <code>CreateSetting</code> function. This function is overridden and instantiates the corresponding class. That is,</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">FlashLightSetting</span><span class=\"o\">&gt;</span> <span class=\"n\">LedPlugin</span><span class=\"o\">::</span><span class=\"n\">CreateSetting</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">_sdf</span><span class=\"p\">,</span>\n  <span class=\"k\">const</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">ModelPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">_model</span><span class=\"p\">,</span>\n  <span class=\"k\">const</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"o\">&amp;</span><span class=\"n\">_currentTime</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">LedSetting</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_sdf</span><span class=\"p\">,</span> <span class=\"n\">_model</span><span class=\"p\">,</span> <span class=\"n\">_currentTime</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>After that, it calls <code>InitSettingBySpecificData</code> function, which initializes variables in <code>LedSetting</code>. It also calls the parent's function so those in <code>FlashLightSetting</code> are also initialized. (4. Call 5. Initialize 6. Initialize in the diagram)</p>\n<p>P.S. I am sorry for this complicated structure. I appreciate any comments and suggestions!</p>", "type": "rendered"}, "title": {"raw": "LED plugin and color blocks to FlashLight Plugin", "markup": "markdown", "html": "<p>LED plugin and color blocks to FlashLight Plugin</p>", "type": "rendered"}}, "type": "pullrequest", "description": "# Overview\r\n\r\n`LedPlugin` to blink a visual object, synchronizing the `FlashLightPlugin`.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/1622346296-led.gif)\r\n\u200c\r\n\r\nAnd an updated version of the `FlashLightPlugin` so it can switch colors of the light.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/4260459456-color_blocks.gif)\r\n\u200c\r\n\r\nIt accepts `<block>` element as a plugin parameter to define a light pattern. The example below defines that the light element \\(`link1/light_source` \\) casts red light for 0.6 sec, followed by 0.2 sec of green light and 0.5 sec of dim, and it repeats this pattern.\r\n\r\n    <plugin ... >\r\n      <light>\r\n        <id>link1/light_source</id>\r\n        <block>\r\n          <duration>0.6</duration>\r\n          <interval>0</interval>\r\n          <color>1 0 0</color>\r\n        </block>\r\n        <block>\r\n          <duration>0.2</duration>\r\n          <interval>0.5</interval>\r\n          <color>0 1 0</color>\r\n        </block>\r\n      </light>\r\n    </plugin>\r\n\r\n# Implementation of LedPlugin\r\n\r\nHere are details about the structure and implementation of `LedPlugin`.\r\n\r\n`LedPlugin` inherits the `FlashLightPlugin`. The following diagram shows the internal components.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/1335009940-LED.png)\r\n`FlashLightPlugin` has a list of `FlashLightSetting` objects, each of which takes care of an individual light object. They call `Flash` and `Dim` functions which send a message to `~/light/modify` topic at a specified timing, i.e., duration and interval time.\r\n\r\n`LedPlugin` extends this structure and has a list of `LedSetting` objects which are descendants of `FlashLightSetting`. They override `Flash` and `Dim` functions to send a message to `~/visual` topic so a corresponding visual object can be updated synchronously.\r\n\r\n## Initialization of extended setting objects\r\n\r\nThe data inside `LedPlugin` and `FlashLightPlugin` are implemented in PIMPL, and they are invisible to each other. This causes a problem when a `FlashLightSetting` is extended. It needs to be instantiated in `LedPlugin` while the objects are stored inside `FlashLightPlugin`. Also an object needs to be initialized by data in each level.\r\n\r\nTo have `LedPlugin` hold an extension class of `FlashLightSetting`, it overrides two functions: `CreateSetting` and `InitSettingBySpecificData`.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/1601523865-initLED.png)\r\nThe `Load` function of the plugin reads SDF data and creates a setting object for each light. \\(1. Call and 2. Instantiate in the diagram\\) It first calls `CreateSetting` function. This function is overridden and instantiates the corresponding class. That is,\r\n\r\n```c++\r\nstd::shared_ptr<FlashLightSetting> LedPlugin::CreateSetting(\r\n  const sdf::ElementPtr &_sdf,\r\n  const physics::ModelPtr &_model,\r\n  const common::Time &_currentTime)\r\n{\r\n  return std::make_shared<LedSetting>(_sdf, _model, _currentTime);\r\n}\r\n```\r\n\r\nAfter that, it calls `InitSettingBySpecificData` function, which initializes variables in `LedSetting`. It also calls the parent's function so those in `FlashLightSetting` are also initialized. \\(4. Call 5. Initialize 6. Initialize in the diagram\\)\r\n\r\nP.S. I am sorry for this complicated structure. I appreciate any comments and suggestions!", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2994/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:f415cd73d0d0%0D72786dfbd2cf?from_pullrequest_id=2994"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2994/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2994.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2994/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2994/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2994"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2994/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:f415cd73d0d0%0D72786dfbd2cf?from_pullrequest_id=2994"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2994/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2994/statuses_page=1.json"}}, "title": "LED plugin and color blocks to FlashLight Plugin", "close_source_branch": false, "reviewers": [], "id": 2994, "destination": {"commit": {"hash": "72786dfbd2cf", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/72786dfbd2cf.json"}, "html": {"href": "#!/osrf/gazebo/commits/72786dfbd2cf"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "created_on": "2018-07-17T01:25:32.032440+00:00", "summary": {"raw": "# Overview\r\n\r\n`LedPlugin` to blink a visual object, synchronizing the `FlashLightPlugin`.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/1622346296-led.gif)\r\n\u200c\r\n\r\nAnd an updated version of the `FlashLightPlugin` so it can switch colors of the light.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/4260459456-color_blocks.gif)\r\n\u200c\r\n\r\nIt accepts `<block>` element as a plugin parameter to define a light pattern. The example below defines that the light element \\(`link1/light_source` \\) casts red light for 0.6 sec, followed by 0.2 sec of green light and 0.5 sec of dim, and it repeats this pattern.\r\n\r\n    <plugin ... >\r\n      <light>\r\n        <id>link1/light_source</id>\r\n        <block>\r\n          <duration>0.6</duration>\r\n          <interval>0</interval>\r\n          <color>1 0 0</color>\r\n        </block>\r\n        <block>\r\n          <duration>0.2</duration>\r\n          <interval>0.5</interval>\r\n          <color>0 1 0</color>\r\n        </block>\r\n      </light>\r\n    </plugin>\r\n\r\n# Implementation of LedPlugin\r\n\r\nHere are details about the structure and implementation of `LedPlugin`.\r\n\r\n`LedPlugin` inherits the `FlashLightPlugin`. The following diagram shows the internal components.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/1335009940-LED.png)\r\n`FlashLightPlugin` has a list of `FlashLightSetting` objects, each of which takes care of an individual light object. They call `Flash` and `Dim` functions which send a message to `~/light/modify` topic at a specified timing, i.e., duration and interval time.\r\n\r\n`LedPlugin` extends this structure and has a list of `LedSetting` objects which are descendants of `FlashLightSetting`. They override `Flash` and `Dim` functions to send a message to `~/visual` topic so a corresponding visual object can be updated synchronously.\r\n\r\n## Initialization of extended setting objects\r\n\r\nThe data inside `LedPlugin` and `FlashLightPlugin` are implemented in PIMPL, and they are invisible to each other. This causes a problem when a `FlashLightSetting` is extended. It needs to be instantiated in `LedPlugin` while the objects are stored inside `FlashLightPlugin`. Also an object needs to be initialized by data in each level.\r\n\r\nTo have `LedPlugin` hold an extension class of `FlashLightSetting`, it overrides two functions: `CreateSetting` and `InitSettingBySpecificData`.\r\n\r\n![](data/bitbucket.org/repo/oLe6g9a/images/1601523865-initLED.png)\r\nThe `Load` function of the plugin reads SDF data and creates a setting object for each light. \\(1. Call and 2. Instantiate in the diagram\\) It first calls `CreateSetting` function. This function is overridden and instantiates the corresponding class. That is,\r\n\r\n```c++\r\nstd::shared_ptr<FlashLightSetting> LedPlugin::CreateSetting(\r\n  const sdf::ElementPtr &_sdf,\r\n  const physics::ModelPtr &_model,\r\n  const common::Time &_currentTime)\r\n{\r\n  return std::make_shared<LedSetting>(_sdf, _model, _currentTime);\r\n}\r\n```\r\n\r\nAfter that, it calls `InitSettingBySpecificData` function, which initializes variables in `LedSetting`. It also calls the parent's function so those in `FlashLightSetting` are also initialized. \\(4. Call 5. Initialize 6. Initialize in the diagram\\)\r\n\r\nP.S. I am sorry for this complicated structure. I appreciate any comments and suggestions!", "markup": "markdown", "html": "<h1 id=\"markdown-header-overview\">Overview</h1>\n<p><code>LedPlugin</code> to blink a visual object, synchronizing the <code>FlashLightPlugin</code>.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/oLe6g9a/images/1622346296-led.gif\" />\n\u200c</p>\n<p>And an updated version of the <code>FlashLightPlugin</code> so it can switch colors of the light.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/oLe6g9a/images/4260459456-color_blocks.gif\" />\n\u200c</p>\n<p>It accepts <code>&lt;block&gt;</code> element as a plugin parameter to define a light pattern. The example below defines that the light element (<code>link1/light_source</code> ) casts red light for 0.6 sec, followed by 0.2 sec of green light and 0.5 sec of dim, and it repeats this pattern.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;plugin</span> <span class=\"err\">...</span> <span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;light&gt;</span>\n    <span class=\"nt\">&lt;id&gt;</span>link1/light_source<span class=\"nt\">&lt;/id&gt;</span>\n    <span class=\"nt\">&lt;block&gt;</span>\n      <span class=\"nt\">&lt;duration&gt;</span>0.6<span class=\"nt\">&lt;/duration&gt;</span>\n      <span class=\"nt\">&lt;interval&gt;</span>0<span class=\"nt\">&lt;/interval&gt;</span>\n      <span class=\"nt\">&lt;color&gt;</span>1 0 0<span class=\"nt\">&lt;/color&gt;</span>\n    <span class=\"nt\">&lt;/block&gt;</span>\n    <span class=\"nt\">&lt;block&gt;</span>\n      <span class=\"nt\">&lt;duration&gt;</span>0.2<span class=\"nt\">&lt;/duration&gt;</span>\n      <span class=\"nt\">&lt;interval&gt;</span>0.5<span class=\"nt\">&lt;/interval&gt;</span>\n      <span class=\"nt\">&lt;color&gt;</span>0 1 0<span class=\"nt\">&lt;/color&gt;</span>\n    <span class=\"nt\">&lt;/block&gt;</span>\n  <span class=\"nt\">&lt;/light&gt;</span>\n<span class=\"nt\">&lt;/plugin&gt;</span>\n</pre></div>\n\n\n<h1 id=\"markdown-header-implementation-of-ledplugin\">Implementation of LedPlugin</h1>\n<p>Here are details about the structure and implementation of <code>LedPlugin</code>.</p>\n<p><code>LedPlugin</code> inherits the <code>FlashLightPlugin</code>. The following diagram shows the internal components.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/oLe6g9a/images/1335009940-LED.png\" />\n<code>FlashLightPlugin</code> has a list of <code>FlashLightSetting</code> objects, each of which takes care of an individual light object. They call <code>Flash</code> and <code>Dim</code> functions which send a message to <code>~/light/modify</code> topic at a specified timing, i.e., duration and interval time.</p>\n<p><code>LedPlugin</code> extends this structure and has a list of <code>LedSetting</code> objects which are descendants of <code>FlashLightSetting</code>. They override <code>Flash</code> and <code>Dim</code> functions to send a message to <code>~/visual</code> topic so a corresponding visual object can be updated synchronously.</p>\n<h2 id=\"markdown-header-initialization-of-extended-setting-objects\">Initialization of extended setting objects</h2>\n<p>The data inside <code>LedPlugin</code> and <code>FlashLightPlugin</code> are implemented in PIMPL, and they are invisible to each other. This causes a problem when a <code>FlashLightSetting</code> is extended. It needs to be instantiated in <code>LedPlugin</code> while the objects are stored inside <code>FlashLightPlugin</code>. Also an object needs to be initialized by data in each level.</p>\n<p>To have <code>LedPlugin</code> hold an extension class of <code>FlashLightSetting</code>, it overrides two functions: <code>CreateSetting</code> and <code>InitSettingBySpecificData</code>.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/oLe6g9a/images/1601523865-initLED.png\" />\nThe <code>Load</code> function of the plugin reads SDF data and creates a setting object for each light. (1. Call and 2. Instantiate in the diagram) It first calls <code>CreateSetting</code> function. This function is overridden and instantiates the corresponding class. That is,</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">FlashLightSetting</span><span class=\"o\">&gt;</span> <span class=\"n\">LedPlugin</span><span class=\"o\">::</span><span class=\"n\">CreateSetting</span><span class=\"p\">(</span>\n  <span class=\"k\">const</span> <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">_sdf</span><span class=\"p\">,</span>\n  <span class=\"k\">const</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">ModelPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">_model</span><span class=\"p\">,</span>\n  <span class=\"k\">const</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"o\">&amp;</span><span class=\"n\">_currentTime</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_shared</span><span class=\"o\">&lt;</span><span class=\"n\">LedSetting</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_sdf</span><span class=\"p\">,</span> <span class=\"n\">_model</span><span class=\"p\">,</span> <span class=\"n\">_currentTime</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>After that, it calls <code>InitSettingBySpecificData</code> function, which initializes variables in <code>LedSetting</code>. It also calls the parent's function so those in <code>FlashLightSetting</code> are also initialized. (4. Call 5. Initialize 6. Initialize in the diagram)</p>\n<p>P.S. I am sorry for this complicated structure. I appreciate any comments and suggestions!</p>", "type": "rendered"}, "source": {"commit": {"hash": "ad9f28617ef0", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/tidota/gazebo/commit/ad9f28617ef0"}, "html": {"href": "https://bitbucket.org/tidota/gazebo/commits/ad9f28617ef0"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/tidota/gazebo"}, "html": {"href": "https://bitbucket.org/tidota/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b232d84-6bca-45a4-84c7-bfa140709a88}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "tidota/gazebo", "uuid": "{9b232d84-6bca-45a4-84c7-bfa140709a88}"}, "branch": {"name": "led_plugin"}}, "comment_count": 47, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-07-21T00:49:03.576459+00:00", "type": "participant", "approved": false, "user": {"display_name": "Tetsuya Idota", "uuid": "{e3645666-978a-455a-85c4-dcc342a8d822}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3645666-978a-455a-85c4-dcc342a8d822%7D"}, "html": {"href": "https://bitbucket.org/%7Be3645666-978a-455a-85c4-dcc342a8d822%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8cb890d7583a1f6b8a01419ebed6ac26d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsTI-1.png"}}, "nickname": "tidota", "type": "user", "account_id": "5aa97fa8e78b8c2a7c886fd3"}}, {"role": "PARTICIPANT", "participated_on": "2018-07-17T18:48:23.748443+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2018-07-20T20:00:56.999207+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2018-07-21T00:58:36.040476+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2018-07-24T18:16:13.042932+00:00", "author": {"display_name": "Tetsuya Idota", "uuid": "{e3645666-978a-455a-85c4-dcc342a8d822}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3645666-978a-455a-85c4-dcc342a8d822%7D"}, "html": {"href": "https://bitbucket.org/%7Be3645666-978a-455a-85c4-dcc342a8d822%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8cb890d7583a1f6b8a01419ebed6ac26d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsTI-1.png"}}, "nickname": "tidota", "type": "user", "account_id": "5aa97fa8e78b8c2a7c886fd3"}, "merge_commit": {"hash": "f415cd73d0d0", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f415cd73d0d0.json"}, "html": {"href": "#!/osrf/gazebo/commits/f415cd73d0d0"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}