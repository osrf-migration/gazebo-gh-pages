{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2775/comments/45341250.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2775/_/diff#comment-45341250"}}, "parent": {"id": 45339866, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2775/comments/45339866.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2775/_/diff#comment-45339866"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2775, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2775.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2775"}}, "title": "Parallelize ODE physics with threaded islands parameter"}, "content": {"raw": "I ran the tests for 10 consecutive times in a row and did that for 3 times, which are 30 consecutive times and I didn't catch a failure. I am currently running it for 100 times and I will see how it works out. \nBtw, would you mind adding this following changes to the tests by adding one more case for thread island = 4, at least from the printed out information, this definitely won't hurt.  \n\n```\n#!c++\n  // Turn on island threads (4)\n  {\n    int threads;\n    physics->SetParam(\"island_threads\", 4);\n    EXPECT_NO_THROW(\n      threads = boost::any_cast<int>(physics->GetParam(\"island_threads\")));\n    EXPECT_EQ(4, threads);\n  }\n\n  // Take 500 steps to warm up.\n  world->Step(500);\n\n  // Collect threaded statistics\n  common::Time thread4AvgTime, thread4MaxTime, thread4MinTime;\n  stats(world, thread4AvgTime, thread4MaxTime, thread4MinTime);\n\n  std::cout << \"Thread Time (4)\\n\";\n  std::cout << \"\\t Avg[\" << thread4AvgTime << \"]\\n\"\n            << \"\\t Max[\" << thread4MaxTime << \"]\\n\"\n            << \"\\t Min[\" << thread4MinTime << \"]\\n\";\n\n  // Expect computational time to decrease\n  EXPECT_LT(thread4MinTime, baseMinTime);\n    \n```\n", "markup": "markdown", "html": "<p>I ran the tests for 10 consecutive times in a row and did that for 3 times, which are 30 consecutive times and I didn't catch a failure. I am currently running it for 100 times and I will see how it works out. \nBtw, would you mind adding this following changes to the tests by adding one more case for thread island = 4, at least from the printed out information, this definitely won't hurt.  </p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"c1\">// Turn on island threads (4)</span>\n  <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">threads</span><span class=\"p\">;</span>\n    <span class=\"n\">physics</span><span class=\"o\">-&gt;</span><span class=\"n\">SetParam</span><span class=\"p\">(</span><span class=\"s\">&quot;island_threads&quot;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n    <span class=\"n\">EXPECT_NO_THROW</span><span class=\"p\">(</span>\n      <span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">any_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">physics</span><span class=\"o\">-&gt;</span><span class=\"n\">GetParam</span><span class=\"p\">(</span><span class=\"s\">&quot;island_threads&quot;</span><span class=\"p\">)));</span>\n    <span class=\"n\">EXPECT_EQ</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">threads</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Take 500 steps to warm up.</span>\n  <span class=\"n\">world</span><span class=\"o\">-&gt;</span><span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Collect threaded statistics</span>\n  <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"n\">thread4AvgTime</span><span class=\"p\">,</span> <span class=\"n\">thread4MaxTime</span><span class=\"p\">,</span> <span class=\"n\">thread4MinTime</span><span class=\"p\">;</span>\n  <span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">,</span> <span class=\"n\">thread4AvgTime</span><span class=\"p\">,</span> <span class=\"n\">thread4MaxTime</span><span class=\"p\">,</span> <span class=\"n\">thread4MinTime</span><span class=\"p\">);</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Thread Time (4)</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\t</span><span class=\"s\"> Avg[&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">thread4AvgTime</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span>\n            <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\t</span><span class=\"s\"> Max[&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">thread4MaxTime</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span>\n            <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\t</span><span class=\"s\"> Min[&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">thread4MinTime</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Expect computational time to decrease</span>\n  <span class=\"n\">EXPECT_LT</span><span class=\"p\">(</span><span class=\"n\">thread4MinTime</span><span class=\"p\">,</span> <span class=\"n\">baseMinTime</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-09-19T21:28:11.135880+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "updated_on": "2017-09-19T23:02:12.527495+00:00", "type": "pullrequest_comment", "id": 45341250}