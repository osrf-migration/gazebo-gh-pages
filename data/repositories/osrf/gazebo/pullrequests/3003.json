{"rendered": {"description": {"raw": "There is an issue that a light is not rendered when a model which holds the light is spawned. It was found that a message being published to `~/model/info` does not have the light information.\r\n\r\nThanks to the help by @iche033 , this PR fixes this issue by publishing a correct message.\r\n\r\nThe testing code `LightFactoryTest.SpawnModelWithLight` in `INTEGRATION_factory` spawns a simple model with a light, and compares a message for `~/model/info`, which is listened by the rendering engine, and the entity information, which the physics engine actually has.\r\n\r\n\u200c\r\n\r\n---\r\n\r\nHere are some details.\r\n\r\nWhen a model is being spawned, the process goes in the following order:\r\n\r\n1. Load\r\n2. FillMsg\r\n3. Publish ->`` `~/model/info``\r\n4. Init\r\n\r\nFillMsg \\(# 2\\) looks up the list of light objects in a link object. However, the light objects are added to the list at # 4. So the message sent to `~/model/info` does not contain the light information.\r\n\r\nThis PR moves the line of adding the lights from # 4 to # 1, so the FillMsg can see the light objects to include in a message.", "markup": "markdown", "html": "<p>There is an issue that a light is not rendered when a model which holds the light is spawned. It was found that a message being published to <code>~/model/info</code> does not have the light information.</p>\n<p>Thanks to the help by @iche033 , this PR fixes this issue by publishing a correct message.</p>\n<p>The testing code <code>LightFactoryTest.SpawnModelWithLight</code> in <code>INTEGRATION_factory</code> spawns a simple model with a light, and compares a message for <code>~/model/info</code>, which is listened by the rendering engine, and the entity information, which the physics engine actually has.</p>\n<p>\u200c</p>\n<hr />\n<p>Here are some details.</p>\n<p>When a model is being spawned, the process goes in the following order:</p>\n<ol>\n<li>Load</li>\n<li>FillMsg</li>\n<li>Publish -&gt;<code>`~/model/info</code></li>\n<li>Init</li>\n</ol>\n<p>FillMsg (# 2) looks up the list of light objects in a link object. However, the light objects are added to the list at # 4. So the message sent to <code>~/model/info</code> does not contain the light information.</p>\n<p>This PR moves the line of adding the lights from # 4 to # 1, so the FillMsg can see the light objects to include in a message.</p>", "type": "rendered"}, "title": {"raw": "Fix for the spawning light issue", "markup": "markdown", "html": "<p>Fix for the spawning light issue</p>", "type": "rendered"}}, "type": "pullrequest", "description": "There is an issue that a light is not rendered when a model which holds the light is spawned. It was found that a message being published to `~/model/info` does not have the light information.\r\n\r\nThanks to the help by @iche033 , this PR fixes this issue by publishing a correct message.\r\n\r\nThe testing code `LightFactoryTest.SpawnModelWithLight` in `INTEGRATION_factory` spawns a simple model with a light, and compares a message for `~/model/info`, which is listened by the rendering engine, and the entity information, which the physics engine actually has.\r\n\r\n\u200c\r\n\r\n---\r\n\r\nHere are some details.\r\n\r\nWhen a model is being spawned, the process goes in the following order:\r\n\r\n1. Load\r\n2. FillMsg\r\n3. Publish ->`` `~/model/info``\r\n4. Init\r\n\r\nFillMsg \\(# 2\\) looks up the list of light objects in a link object. However, the light objects are added to the list at # 4. So the message sent to `~/model/info` does not contain the light information.\r\n\r\nThis PR moves the line of adding the lights from # 4 to # 1, so the FillMsg can see the light objects to include in a message.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3003/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:ea7fdb7f7746%0D1561a52d5a7c?from_pullrequest_id=3003"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/3003/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/3003.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/3003/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3003/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3003"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/3003/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:ea7fdb7f7746%0D1561a52d5a7c?from_pullrequest_id=3003"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3003/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/3003/statuses_page=1.json"}}, "title": "Fix for the spawning light issue", "close_source_branch": false, "reviewers": [], "id": 3003, "destination": {"commit": {"hash": "1561a52d5a7c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/1561a52d5a7c.json"}, "html": {"href": "#!/osrf/gazebo/commits/1561a52d5a7c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "created_on": "2018-08-03T22:38:51.540721+00:00", "summary": {"raw": "There is an issue that a light is not rendered when a model which holds the light is spawned. It was found that a message being published to `~/model/info` does not have the light information.\r\n\r\nThanks to the help by @iche033 , this PR fixes this issue by publishing a correct message.\r\n\r\nThe testing code `LightFactoryTest.SpawnModelWithLight` in `INTEGRATION_factory` spawns a simple model with a light, and compares a message for `~/model/info`, which is listened by the rendering engine, and the entity information, which the physics engine actually has.\r\n\r\n\u200c\r\n\r\n---\r\n\r\nHere are some details.\r\n\r\nWhen a model is being spawned, the process goes in the following order:\r\n\r\n1. Load\r\n2. FillMsg\r\n3. Publish ->`` `~/model/info``\r\n4. Init\r\n\r\nFillMsg \\(# 2\\) looks up the list of light objects in a link object. However, the light objects are added to the list at # 4. So the message sent to `~/model/info` does not contain the light information.\r\n\r\nThis PR moves the line of adding the lights from # 4 to # 1, so the FillMsg can see the light objects to include in a message.", "markup": "markdown", "html": "<p>There is an issue that a light is not rendered when a model which holds the light is spawned. It was found that a message being published to <code>~/model/info</code> does not have the light information.</p>\n<p>Thanks to the help by @iche033 , this PR fixes this issue by publishing a correct message.</p>\n<p>The testing code <code>LightFactoryTest.SpawnModelWithLight</code> in <code>INTEGRATION_factory</code> spawns a simple model with a light, and compares a message for <code>~/model/info</code>, which is listened by the rendering engine, and the entity information, which the physics engine actually has.</p>\n<p>\u200c</p>\n<hr />\n<p>Here are some details.</p>\n<p>When a model is being spawned, the process goes in the following order:</p>\n<ol>\n<li>Load</li>\n<li>FillMsg</li>\n<li>Publish -&gt;<code>`~/model/info</code></li>\n<li>Init</li>\n</ol>\n<p>FillMsg (# 2) looks up the list of light objects in a link object. However, the light objects are added to the list at # 4. So the message sent to <code>~/model/info</code> does not contain the light information.</p>\n<p>This PR moves the line of adding the lights from # 4 to # 1, so the FillMsg can see the light objects to include in a message.</p>", "type": "rendered"}, "source": {"commit": {"hash": "9831bf6a0ea9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/tidota/gazebo/commit/9831bf6a0ea9"}, "html": {"href": "https://bitbucket.org/tidota/gazebo/commits/9831bf6a0ea9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/tidota/gazebo"}, "html": {"href": "https://bitbucket.org/tidota/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b232d84-6bca-45a4-84c7-bfa140709a88}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "tidota/gazebo", "uuid": "{9b232d84-6bca-45a4-84c7-bfa140709a88}"}, "branch": {"name": "spawning_lights"}}, "comment_count": 17, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-08-06T23:39:38.006198+00:00", "type": "participant", "approved": false, "user": {"display_name": "Tetsuya Idota", "uuid": "{e3645666-978a-455a-85c4-dcc342a8d822}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3645666-978a-455a-85c4-dcc342a8d822%7D"}, "html": {"href": "https://bitbucket.org/%7Be3645666-978a-455a-85c4-dcc342a8d822%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8cb890d7583a1f6b8a01419ebed6ac26d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsTI-1.png"}}, "nickname": "tidota", "type": "user", "account_id": "5aa97fa8e78b8c2a7c886fd3"}}, {"role": "PARTICIPANT", "participated_on": "2018-08-07T23:46:57.609080+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2018-08-07T00:59:44.542014+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2018-08-07T23:47:29.718634+00:00", "author": {"display_name": "Tetsuya Idota", "uuid": "{e3645666-978a-455a-85c4-dcc342a8d822}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3645666-978a-455a-85c4-dcc342a8d822%7D"}, "html": {"href": "https://bitbucket.org/%7Be3645666-978a-455a-85c4-dcc342a8d822%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8cb890d7583a1f6b8a01419ebed6ac26d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsTI-1.png"}}, "nickname": "tidota", "type": "user", "account_id": "5aa97fa8e78b8c2a7c886fd3"}, "merge_commit": {"hash": "ea7fdb7f7746", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/ea7fdb7f7746.json"}, "html": {"href": "#!/osrf/gazebo/commits/ea7fdb7f7746"}}}, "closed_by": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}