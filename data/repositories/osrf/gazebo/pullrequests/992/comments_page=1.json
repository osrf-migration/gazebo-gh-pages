{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1324216.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:b8047dd78a9f..3424af5bd7c5?path=gazebo%2Fphysics%2Fode%2FODEPhysics.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1324216"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 992, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992"}}, "title": "Fix clang warnings (partial fix for #1044)"}, "content": {"raw": "should we keep it `unsigned int` but just convert it to `int` when setting the value in sdf? Maybe we should change the sdf `max_contacts` type to `unsigned int` instead?", "markup": "markdown", "html": "<p>should we keep it <code>unsigned int</code> but just convert it to <code>int</code> when setting the value in sdf? Maybe we should change the sdf <code>max_contacts</code> type to <code>unsigned int</code> instead?</p>", "type": "rendered"}, "created_on": "2014-02-27T23:17:08.708786+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "inline": {"to": 595, "from": null, "path": "gazebo/physics/ode/ODEPhysics.cc"}, "updated_on": "2014-02-27T23:17:08.721768+00:00", "type": "pullrequest_comment", "id": 1324216}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1324248.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:None..None?path=gazebo%2Fphysics%2Fode%2FODEPhysics.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1324248"}}, "parent": {"id": 1324216, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1324216.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1324216"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 992, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992"}}, "title": "Fix clang warnings (partial fix for #1044)"}, "content": {"raw": "The Set and Get versions of this function have been implemented with a combination of `int`, `unsigned int`, and `double` types. I agree that `unsigned int` is probably the right type, but it seemed easiest to match the sdf type definition.\n\nIt's not a big deal; we can use `unsigned int` instead.", "markup": "markdown", "html": "<p>The Set and Get versions of this function have been implemented with a combination of <code>int</code>, <code>unsigned int</code>, and <code>double</code> types. I agree that <code>unsigned int</code> is probably the right type, but it seemed easiest to match the sdf type definition.</p>\n<p>It's not a big deal; we can use <code>unsigned int</code> instead.</p>", "type": "rendered"}, "created_on": "2014-02-27T23:30:58.524304+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {"to": null, "from": null, "path": "gazebo/physics/ode/ODEPhysics.cc"}, "updated_on": "2014-02-27T23:30:58.537104+00:00", "type": "pullrequest_comment", "id": 1324248}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1324349.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:None..None?path=gazebo%2Fphysics%2Fode%2FODEPhysics.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1324349"}}, "parent": {"id": 1324248, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1324248.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1324248"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 992, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992"}}, "title": "Fix clang warnings (partial fix for #1044)"}, "content": {"raw": "Updated in df84f31358c8; there's a few changes to get rid of compiler warnings.", "markup": "markdown", "html": "<p>Updated in <a href=\"#!/osrf/gazebo/commits/df84f31358c8\" rel=\"nofollow\" class=\"ap-connect-link\">df84f31358c8</a>; there's a few changes to get rid of compiler warnings.</p>", "type": "rendered"}, "created_on": "2014-02-27T23:59:56.798791+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {"to": null, "from": null, "path": "gazebo/physics/ode/ODEPhysics.cc"}, "updated_on": "2014-02-27T23:59:56.807347+00:00", "type": "pullrequest_comment", "id": 1324349}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1350167.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:ad89f6812ac5..177f7384c29e?path=gazebo%2Fphysics%2FModel.hh"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1350167"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 992, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992"}}, "title": "Fix clang warnings (partial fix for #1044)"}, "content": {"raw": "I saw your notes above. What warning is produced? \n\nI'd like to prevent the use of \"using\" in header files.", "markup": "markdown", "html": "<p>I saw your notes above. What warning is produced? </p>\n<p>I'd like to prevent the use of \"using\" in header files.</p>", "type": "rendered"}, "created_on": "2014-03-04T19:24:34.166638+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": 87, "from": null, "path": "gazebo/physics/Model.hh"}, "updated_on": "2014-03-04T19:24:34.174806+00:00", "type": "pullrequest_comment", "id": 1350167}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1350259.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:None..None?path=gazebo%2Fphysics%2FModel.hh"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1350259"}}, "parent": {"id": 1350167, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1350167.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1350167"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 992, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992"}}, "title": "Fix clang warnings (partial fix for #1044)"}, "content": {"raw": "An example from [jenkins](http://build.osrfoundation.org/view/gazebo/job/gazebo-default-devel-homebrew-amd64/54/consoleFull):\n~~~\nIn file included from /Users/jenkins/workspace/gazebo-default-devel-homebrew-amd64/gazebo/gazebo/physics/ode/ODEGearboxJoint.cc:23:\n/Users/jenkins/workspace/gazebo-default-devel-homebrew-amd64/gazebo/gazebo/physics/Model.hh:86:28: warning: 'gazebo::physics::Model::RemoveChild' hides overloaded virtual function [-Woverloaded-virtual]\n      public: virtual void RemoveChild(EntityPtr _child);\n                           ^\n/Users/jenkins/workspace/gazebo-default-devel-homebrew-amd64/gazebo/gazebo/physics/Base.hh:208:28: note: hidden overloaded virtual function 'gazebo::physics::Base::RemoveChild' declared here\n      public: virtual void RemoveChild(unsigned int _id);\n                           ^\n~~~\nThe Base class declares a RemoveChild function with `unsigned int` argument, while the Model class declares it with an `EntityPtr` argument. The `Model::RemoveChild` blocks `Base::RemoveChild` from being called. We could implement a `Model::RemoveChild(unsigned int)` function that just calls `Base::RemoveChild(unsigned int)`, but I thought the `using` keyword was a concise way of doing that. Are there other consequences?\n\nI think this is different than having `using namespace X;` in a header file, which is definitely bad practice.", "markup": "markdown", "html": "<p>An example from <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/gazebo/job/gazebo-default-devel-homebrew-amd64/54/consoleFull\" rel=\"nofollow\">jenkins</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">In</span> <span class=\"nt\">file</span> <span class=\"nt\">included</span> <span class=\"nt\">from</span> <span class=\"o\">/</span><span class=\"nt\">Users</span><span class=\"o\">/</span><span class=\"nt\">jenkins</span><span class=\"o\">/</span><span class=\"nt\">workspace</span><span class=\"o\">/</span><span class=\"nt\">gazebo-default-devel-homebrew-amd64</span><span class=\"o\">/</span><span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">physics</span><span class=\"o\">/</span><span class=\"nt\">ode</span><span class=\"o\">/</span><span class=\"nt\">ODEGearboxJoint</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">23</span><span class=\"o\">:</span>\n<span class=\"o\">/</span><span class=\"nt\">Users</span><span class=\"o\">/</span><span class=\"nt\">jenkins</span><span class=\"o\">/</span><span class=\"nt\">workspace</span><span class=\"o\">/</span><span class=\"nt\">gazebo-default-devel-homebrew-amd64</span><span class=\"o\">/</span><span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">physics</span><span class=\"o\">/</span><span class=\"nt\">Model</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"p\">:</span><span class=\"nd\">86</span><span class=\"p\">:</span><span class=\"nd\">28</span><span class=\"o\">:</span> <span class=\"nt\">warning</span><span class=\"o\">:</span> <span class=\"s1\">&#39;gazebo::physics::Model::RemoveChild&#39;</span> <span class=\"nt\">hides</span> <span class=\"nt\">overloaded</span> <span class=\"nt\">virtual</span> <span class=\"nt\">function</span> <span class=\"cp\">[</span><span class=\"na\">-Woverloaded-virtual</span><span class=\"cp\">]</span>\n      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">virtual</span> <span class=\"nt\">void</span> <span class=\"nt\">RemoveChild</span><span class=\"o\">(</span><span class=\"nt\">EntityPtr</span> <span class=\"nt\">_child</span><span class=\"o\">);</span>\n                           <span class=\"o\">^</span>\n<span class=\"o\">/</span><span class=\"nt\">Users</span><span class=\"o\">/</span><span class=\"nt\">jenkins</span><span class=\"o\">/</span><span class=\"nt\">workspace</span><span class=\"o\">/</span><span class=\"nt\">gazebo-default-devel-homebrew-amd64</span><span class=\"o\">/</span><span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">physics</span><span class=\"o\">/</span><span class=\"nt\">Base</span><span class=\"p\">.</span><span class=\"nc\">hh</span><span class=\"p\">:</span><span class=\"nd\">208</span><span class=\"p\">:</span><span class=\"nd\">28</span><span class=\"o\">:</span> <span class=\"nt\">note</span><span class=\"o\">:</span> <span class=\"nt\">hidden</span> <span class=\"nt\">overloaded</span> <span class=\"nt\">virtual</span> <span class=\"nt\">function</span> <span class=\"s1\">&#39;gazebo::physics::Base::RemoveChild&#39;</span> <span class=\"nt\">declared</span> <span class=\"nt\">here</span>\n      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">virtual</span> <span class=\"nt\">void</span> <span class=\"nt\">RemoveChild</span><span class=\"o\">(</span><span class=\"nt\">unsigned</span> <span class=\"nt\">int</span> <span class=\"nt\">_id</span><span class=\"o\">);</span>\n                           <span class=\"o\">^</span>\n</pre></div>\n\n\n<p>The Base class declares a RemoveChild function with <code>unsigned int</code> argument, while the Model class declares it with an <code>EntityPtr</code> argument. The <code>Model::RemoveChild</code> blocks <code>Base::RemoveChild</code> from being called. We could implement a <code>Model::RemoveChild(unsigned int)</code> function that just calls <code>Base::RemoveChild(unsigned int)</code>, but I thought the <code>using</code> keyword was a concise way of doing that. Are there other consequences?</p>\n<p>I think this is different than having <code>using namespace X;</code> in a header file, which is definitely bad practice.</p>", "type": "rendered"}, "created_on": "2014-03-04T19:35:12.494589+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {"to": null, "from": null, "path": "gazebo/physics/Model.hh"}, "updated_on": "2014-03-04T19:35:12.502869+00:00", "type": "pullrequest_comment", "id": 1350259}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1351435.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:None..None?path=gazebo%2Fphysics%2FModel.hh"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1351435"}}, "parent": {"id": 1350259, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992/comments/1350259.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992/_/diff#comment-1350259"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 992, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/992.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/992"}}, "title": "Fix clang warnings (partial fix for #1044)"}, "content": {"raw": "Right. I have a knee-jerk reaction to `using`. But it looks correct in this case.", "markup": "markdown", "html": "<p>Right. I have a knee-jerk reaction to <code>using</code>. But it looks correct in this case.</p>", "type": "rendered"}, "created_on": "2014-03-04T22:23:03.778267+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "inline": {"to": null, "from": null, "path": "gazebo/physics/Model.hh"}, "updated_on": "2014-03-04T22:23:03.795331+00:00", "type": "pullrequest_comment", "id": 1351435}], "page": 1, "size": 6}