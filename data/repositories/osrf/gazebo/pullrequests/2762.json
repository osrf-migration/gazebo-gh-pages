{"rendered": {"description": {"raw": "This pull request adds the ability to create joints with `Model::CreateJoint` while using DART physics (see issue #903). It implements joint creation using \"loop\" joints since DART does not support multiple parent joints for a single BodyNode. More specifically, when `CreateJoint` is called a new DART joint *and* BodyNode are added to the skeleton and the BodyNode is then welded to the child link as a slave body. Thus the child link behaves as if it were attached to the new joint. The pull request also supports removing loop joints though not other joints.\r\n\r\nThe added functionality is sufficient to use the harness plugin with DART, so the `harness.cc` integration tests are enabled for DART. Some of the tests in `joint_test.cc` are also enabled although `JointCreationDestructionTest` tends to fail.\r\n\r\n* b3ebe59 makes `Model::CreateJoint` and `Model::RemoveJoint` virtual and overrides them in the `DARTModel` class. 578f1ea actually adds the logic for the `DARTModel` versions of the functions and modifies the `DARTLink` class to keep track of the weld constraints for loop joints as well as slave BodyNodes so that they can be removed later if desired. The code to create loop joints already exists from pull request #2756. However, since `CreateJoint` may be called after the model, joints, etc. have been initialized, it may need to redistribute the mass of the child link with the new slave BodyNode (5496129) and initialize the new joint to achieve the correct weld pose (926045c).\r\n\r\n* 9241cb6 changes how DART joint positions are reset to handle changing numbers of joints after model initialization. Formerly `DARTModel` assumed a fixed number of DOF. Now the joint positions are reset individually within `DARTJoint::Reset`.\r\n\r\n* 8e89ccb moves the allocations of DART joint properties to the joint class constructors since `DARTJoint::Load` is not called if `CreateJoint(name, type, parent, child)` is used to create a joint instead of `CreateJoint(sdf_elem)`. The former call caused segfaults without this change.\r\n\r\n* bb2147b and fd8e271 basically cancel each other out.\r\n\r\nNote: I tested this pull request with pull request #2697, which supports harness re-attaching, and the harness integration tests worked.", "markup": "markdown", "html": "<p>This pull request adds the ability to create joints with <code>Model::CreateJoint</code> while using DART physics (see issue <a href=\"#!/osrf/gazebo/issues/903/dart-doesnt-support-dynamic-creation\" rel=\"nofollow\" title=\"DART doesn&#39;t support dynamic creation/destruction of joints\" class=\"ap-connect-link\">#903</a>). It implements joint creation using \"loop\" joints since DART does not support multiple parent joints for a single BodyNode. More specifically, when <code>CreateJoint</code> is called a new DART joint <em>and</em> BodyNode are added to the skeleton and the BodyNode is then welded to the child link as a slave body. Thus the child link behaves as if it were attached to the new joint. The pull request also supports removing loop joints though not other joints.</p>\n<p>The added functionality is sufficient to use the harness plugin with DART, so the <code>harness.cc</code> integration tests are enabled for DART. Some of the tests in <code>joint_test.cc</code> are also enabled although <code>JointCreationDestructionTest</code> tends to fail.</p>\n<ul>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/b3ebe59\" rel=\"nofollow\" class=\"ap-connect-link\">b3ebe59</a> makes <code>Model::CreateJoint</code> and <code>Model::RemoveJoint</code> virtual and overrides them in the <code>DARTModel</code> class. <a href=\"#!/osrf/gazebo/commits/578f1ea\" rel=\"nofollow\" class=\"ap-connect-link\">578f1ea</a> actually adds the logic for the <code>DARTModel</code> versions of the functions and modifies the <code>DARTLink</code> class to keep track of the weld constraints for loop joints as well as slave BodyNodes so that they can be removed later if desired. The code to create loop joints already exists from <a href=\"#!/osrf/gazebo/pull-requests/2756/dart-kinematic-loops\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2756</a>. However, since <code>CreateJoint</code> may be called after the model, joints, etc. have been initialized, it may need to redistribute the mass of the child link with the new slave BodyNode (<a href=\"#!/osrf/gazebo/commits/5496129\" rel=\"nofollow\" class=\"ap-connect-link\">5496129</a>) and initialize the new joint to achieve the correct weld pose (<a href=\"#!/osrf/gazebo/commits/926045c\" rel=\"nofollow\" class=\"ap-connect-link\">926045c</a>).</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/9241cb6\" rel=\"nofollow\" class=\"ap-connect-link\">9241cb6</a> changes how DART joint positions are reset to handle changing numbers of joints after model initialization. Formerly <code>DARTModel</code> assumed a fixed number of DOF. Now the joint positions are reset individually within <code>DARTJoint::Reset</code>.</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/8e89ccb\" rel=\"nofollow\" class=\"ap-connect-link\">8e89ccb</a> moves the allocations of DART joint properties to the joint class constructors since <code>DARTJoint::Load</code> is not called if <code>CreateJoint(name, type, parent, child)</code> is used to create a joint instead of <code>CreateJoint(sdf_elem)</code>. The former call caused segfaults without this change.</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/bb2147b\" rel=\"nofollow\" class=\"ap-connect-link\">bb2147b</a> and <a href=\"#!/osrf/gazebo/commits/fd8e271\" rel=\"nofollow\" class=\"ap-connect-link\">fd8e271</a> basically cancel each other out.</p>\n</li>\n</ul>\n<p>Note: I tested this pull request with <a href=\"#!/osrf/gazebo/pull-requests/2697/harnessplugin-pimpl-and-allow-re-attaching\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2697</a>, which supports harness re-attaching, and the harness integration tests worked.</p>", "type": "rendered"}, "title": {"raw": "Dart harness", "markup": "markdown", "html": "<p>Dart harness</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request adds the ability to create joints with `Model::CreateJoint` while using DART physics (see issue #903). It implements joint creation using \"loop\" joints since DART does not support multiple parent joints for a single BodyNode. More specifically, when `CreateJoint` is called a new DART joint *and* BodyNode are added to the skeleton and the BodyNode is then welded to the child link as a slave body. Thus the child link behaves as if it were attached to the new joint. The pull request also supports removing loop joints though not other joints.\r\n\r\nThe added functionality is sufficient to use the harness plugin with DART, so the `harness.cc` integration tests are enabled for DART. Some of the tests in `joint_test.cc` are also enabled although `JointCreationDestructionTest` tends to fail.\r\n\r\n* b3ebe59 makes `Model::CreateJoint` and `Model::RemoveJoint` virtual and overrides them in the `DARTModel` class. 578f1ea actually adds the logic for the `DARTModel` versions of the functions and modifies the `DARTLink` class to keep track of the weld constraints for loop joints as well as slave BodyNodes so that they can be removed later if desired. The code to create loop joints already exists from pull request #2756. However, since `CreateJoint` may be called after the model, joints, etc. have been initialized, it may need to redistribute the mass of the child link with the new slave BodyNode (5496129) and initialize the new joint to achieve the correct weld pose (926045c).\r\n\r\n* 9241cb6 changes how DART joint positions are reset to handle changing numbers of joints after model initialization. Formerly `DARTModel` assumed a fixed number of DOF. Now the joint positions are reset individually within `DARTJoint::Reset`.\r\n\r\n* 8e89ccb moves the allocations of DART joint properties to the joint class constructors since `DARTJoint::Load` is not called if `CreateJoint(name, type, parent, child)` is used to create a joint instead of `CreateJoint(sdf_elem)`. The former call caused segfaults without this change.\r\n\r\n* bb2147b and fd8e271 basically cancel each other out.\r\n\r\nNote: I tested this pull request with pull request #2697, which supports harness re-attaching, and the harness integration tests worked.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2762/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:8234fc47cfbd%0D562cf6ef3995?from_pullrequest_id=2762"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2762/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2762.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2762/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2762/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2762"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2762/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:8234fc47cfbd%0D562cf6ef3995?from_pullrequest_id=2762"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2762/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2762/statuses_page=1.json"}}, "title": "Dart harness", "close_source_branch": true, "reviewers": [{"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}], "id": 2762, "destination": {"commit": {"hash": "562cf6ef3995", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/562cf6ef3995.json"}, "html": {"href": "#!/osrf/gazebo/commits/562cf6ef3995"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2017-08-08T21:04:58.305608+00:00", "summary": {"raw": "This pull request adds the ability to create joints with `Model::CreateJoint` while using DART physics (see issue #903). It implements joint creation using \"loop\" joints since DART does not support multiple parent joints for a single BodyNode. More specifically, when `CreateJoint` is called a new DART joint *and* BodyNode are added to the skeleton and the BodyNode is then welded to the child link as a slave body. Thus the child link behaves as if it were attached to the new joint. The pull request also supports removing loop joints though not other joints.\r\n\r\nThe added functionality is sufficient to use the harness plugin with DART, so the `harness.cc` integration tests are enabled for DART. Some of the tests in `joint_test.cc` are also enabled although `JointCreationDestructionTest` tends to fail.\r\n\r\n* b3ebe59 makes `Model::CreateJoint` and `Model::RemoveJoint` virtual and overrides them in the `DARTModel` class. 578f1ea actually adds the logic for the `DARTModel` versions of the functions and modifies the `DARTLink` class to keep track of the weld constraints for loop joints as well as slave BodyNodes so that they can be removed later if desired. The code to create loop joints already exists from pull request #2756. However, since `CreateJoint` may be called after the model, joints, etc. have been initialized, it may need to redistribute the mass of the child link with the new slave BodyNode (5496129) and initialize the new joint to achieve the correct weld pose (926045c).\r\n\r\n* 9241cb6 changes how DART joint positions are reset to handle changing numbers of joints after model initialization. Formerly `DARTModel` assumed a fixed number of DOF. Now the joint positions are reset individually within `DARTJoint::Reset`.\r\n\r\n* 8e89ccb moves the allocations of DART joint properties to the joint class constructors since `DARTJoint::Load` is not called if `CreateJoint(name, type, parent, child)` is used to create a joint instead of `CreateJoint(sdf_elem)`. The former call caused segfaults without this change.\r\n\r\n* bb2147b and fd8e271 basically cancel each other out.\r\n\r\nNote: I tested this pull request with pull request #2697, which supports harness re-attaching, and the harness integration tests worked.", "markup": "markdown", "html": "<p>This pull request adds the ability to create joints with <code>Model::CreateJoint</code> while using DART physics (see issue <a href=\"#!/osrf/gazebo/issues/903/dart-doesnt-support-dynamic-creation\" rel=\"nofollow\" title=\"DART doesn&#39;t support dynamic creation/destruction of joints\" class=\"ap-connect-link\">#903</a>). It implements joint creation using \"loop\" joints since DART does not support multiple parent joints for a single BodyNode. More specifically, when <code>CreateJoint</code> is called a new DART joint <em>and</em> BodyNode are added to the skeleton and the BodyNode is then welded to the child link as a slave body. Thus the child link behaves as if it were attached to the new joint. The pull request also supports removing loop joints though not other joints.</p>\n<p>The added functionality is sufficient to use the harness plugin with DART, so the <code>harness.cc</code> integration tests are enabled for DART. Some of the tests in <code>joint_test.cc</code> are also enabled although <code>JointCreationDestructionTest</code> tends to fail.</p>\n<ul>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/b3ebe59\" rel=\"nofollow\" class=\"ap-connect-link\">b3ebe59</a> makes <code>Model::CreateJoint</code> and <code>Model::RemoveJoint</code> virtual and overrides them in the <code>DARTModel</code> class. <a href=\"#!/osrf/gazebo/commits/578f1ea\" rel=\"nofollow\" class=\"ap-connect-link\">578f1ea</a> actually adds the logic for the <code>DARTModel</code> versions of the functions and modifies the <code>DARTLink</code> class to keep track of the weld constraints for loop joints as well as slave BodyNodes so that they can be removed later if desired. The code to create loop joints already exists from <a href=\"#!/osrf/gazebo/pull-requests/2756/dart-kinematic-loops\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2756</a>. However, since <code>CreateJoint</code> may be called after the model, joints, etc. have been initialized, it may need to redistribute the mass of the child link with the new slave BodyNode (<a href=\"#!/osrf/gazebo/commits/5496129\" rel=\"nofollow\" class=\"ap-connect-link\">5496129</a>) and initialize the new joint to achieve the correct weld pose (<a href=\"#!/osrf/gazebo/commits/926045c\" rel=\"nofollow\" class=\"ap-connect-link\">926045c</a>).</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/9241cb6\" rel=\"nofollow\" class=\"ap-connect-link\">9241cb6</a> changes how DART joint positions are reset to handle changing numbers of joints after model initialization. Formerly <code>DARTModel</code> assumed a fixed number of DOF. Now the joint positions are reset individually within <code>DARTJoint::Reset</code>.</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/8e89ccb\" rel=\"nofollow\" class=\"ap-connect-link\">8e89ccb</a> moves the allocations of DART joint properties to the joint class constructors since <code>DARTJoint::Load</code> is not called if <code>CreateJoint(name, type, parent, child)</code> is used to create a joint instead of <code>CreateJoint(sdf_elem)</code>. The former call caused segfaults without this change.</p>\n</li>\n<li>\n<p><a href=\"#!/osrf/gazebo/commits/bb2147b\" rel=\"nofollow\" class=\"ap-connect-link\">bb2147b</a> and <a href=\"#!/osrf/gazebo/commits/fd8e271\" rel=\"nofollow\" class=\"ap-connect-link\">fd8e271</a> basically cancel each other out.</p>\n</li>\n</ul>\n<p>Note: I tested this pull request with <a href=\"#!/osrf/gazebo/pull-requests/2697/harnessplugin-pimpl-and-allow-re-attaching\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2697</a>, which supports harness re-attaching, and the harness integration tests worked.</p>", "type": "rendered"}, "source": {"commit": {"hash": "5ff7641e9fef", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/5ff7641e9fef.json"}, "html": {"href": "#!/osrf/gazebo/commits/5ff7641e9fef"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "dart_harness"}}, "comment_count": 46, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-08-22T23:22:26.727120+00:00", "type": "participant", "approved": false, "user": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}}, {"role": "REVIEWER", "participated_on": "2018-05-06T22:28:27.050811+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": "2018-05-05T00:45:33.477908+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "", "updated_on": "2018-05-07T07:55:38.858995+00:00", "author": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}, "merge_commit": {"hash": "8234fc47cfbd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/8234fc47cfbd.json"}, "html": {"href": "#!/osrf/gazebo/commits/8234fc47cfbd"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}