{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1232/comments/3599560.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1232/_/diff#comment-3599560"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1232, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1232.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1232"}}, "title": "Kill rogue gzservers left over from failed INTEGRATION_world_clone tests (#1299)"}, "content": {"raw": "In 5f8f92cd1258, I made some changes that will make `UNIT_gz_TEST` a little more robust. Currently, many of its subtests spawn `gzserver` processes during an `init` function call, and then tear them down during `fini`. One of the tests, however, was aborting under certain conditions, which caused the gzserver processes to persist. In 5f8f92cd1258, I replace an `ASSERT_EQ` with `EXPECT_EQ` and companion `if` block, and also use `EXPECT_NO_THROW` around `boost::lexical_cast`.\n\nTo test this, add the following to `gz_TEST.cc` to cause a failure:\n~~~\ndiff -r 10d0f2dc6899 tools/gz_TEST.cc\n--- a/tools/gz_TEST.cc\tThu Oct 23 11:47:37 2014 -0700\n+++ b/tools/gz_TEST.cc\tFri Oct 24 12:21:09 2014 -0700\n@@ -361,7 +361,7 @@\n         != std::string::npos);\n \n     // Get the pose of the model.\n-    modelInfo = custom_exec_str(\"gz model -m my_box -p\");\n+    modelInfo = custom_exec_str(\"ls\");\n     boost::algorithm::trim(modelInfo);\n \n     // Split the string into parts.\n~~~", "markup": "markdown", "html": "<p>In <a href=\"#!/osrf/gazebo/commits/5f8f92cd1258\" rel=\"nofollow\" class=\"ap-connect-link\">5f8f92cd1258</a>, I made some changes that will make <code>UNIT_gz_TEST</code> a little more robust. Currently, many of its subtests spawn <code>gzserver</code> processes during an <code>init</code> function call, and then tear them down during <code>fini</code>. One of the tests, however, was aborting under certain conditions, which caused the gzserver processes to persist. In <a href=\"#!/osrf/gazebo/commits/5f8f92cd1258\" rel=\"nofollow\" class=\"ap-connect-link\">5f8f92cd1258</a>, I replace an <code>ASSERT_EQ</code> with <code>EXPECT_EQ</code> and companion <code>if</code> block, and also use <code>EXPECT_NO_THROW</code> around <code>boost::lexical_cast</code>.</p>\n<p>To test this, add the following to <code>gz_TEST.cc</code> to cause a failure:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 10d0f2dc6899 tools/gz_TEST.cc</span>\n<span class=\"gd\">--- a/tools/gz_TEST.cc  Thu Oct 23 11:47:37 2014 -0700</span>\n<span class=\"gi\">+++ b/tools/gz_TEST.cc  Fri Oct 24 12:21:09 2014 -0700</span>\n<span class=\"gu\">@@ -361,7 +361,7 @@</span>\n         != std::string::npos);\n\n     // Get the pose of the model.\n<span class=\"gd\">-    modelInfo = custom_exec_str(&quot;gz model -m my_box -p&quot;);</span>\n<span class=\"gi\">+    modelInfo = custom_exec_str(&quot;ls&quot;);</span>\n     boost::algorithm::trim(modelInfo);\n\n     // Split the string into parts.\n</pre></div>", "type": "rendered"}, "created_on": "2014-10-24T19:21:36.725083+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2014-10-24T19:21:36.736975+00:00", "type": "pullrequest_comment", "id": 3599560}