{"rendered": {"description": {"raw": "This could be either a misunderstanding on my behalf or an inconsistency in `physics::World` in regards to how `physics::Actor` instances are treated.\r\n\r\nThe `Actor` derives from `Model` and as far as I can see, is otherwise treated like a model too. The difference is that it is not added to the `WorldPrivate::models` list in the `World::LoadActor() `method, as it is done in `World::LoadModel()` for the \"normal\" models.\r\n\r\nOften this would actually go unnoticed because in many places, it is not the `models` vector which is used to iterate through the models, but instead the general element pointers, in this form:\r\n\r\n```C++\r\n  // Load the plugins for all the models                                        \r\n  for (unsigned int i = 0; i < this->dataPtr->rootElement->GetChildCount(); ++i)\r\n  {                                                                             \r\n    if (this->dataPtr->rootElement->GetChild(i)->HasType(Base::MODEL))          \r\n    {\r\n       ...\r\n```\r\n\r\nThe `Actor` models are caught with this. Crucially, this approach is also used for `World::BuildSceneMsg`, so that when a new gzclient connects to the world, it will get the model, and everything will run nicely.\r\n\r\nHowever the actors are not returned with `World::Models()`. So if we're using `World`  interface directly (not via messages connection like gzclient), then we miss out on the `Actor` models.\r\n\r\nIs there any particular reason this was done like this for the actors?  \r\nIf not, I suggest treating them as the models and adding the changes of this PR to make the behaviour of `World::LoadActor()` the same as `World::LoadModel()`.\r\n\r\nBy the way: The `Road` is treated as entity only as well, and not registered separately in a similar fashion (see `World::LoadRoad`). But this would have to be treated separately because it's not technically a model (or should it be?). It would be nice to have a method which returns all entities which are no model then, e.g. `Entity_M World::Entities().` It would be good to have a getter which allows to get *all* the objects in the world incl. roads (lights could still be treated separately as it is).\r\n\r\nWhat's your thoughts on this?", "markup": "markdown", "html": "<p>This could be either a misunderstanding on my behalf or an inconsistency in <code>physics::World</code> in regards to how <code>physics::Actor</code> instances are treated.</p>\n<p>The <code>Actor</code> derives from <code>Model</code> and as far as I can see, is otherwise treated like a model too. The difference is that it is not added to the <code>WorldPrivate::models</code> list in the <code>World::LoadActor()</code>method, as it is done in <code>World::LoadModel()</code> for the \"normal\" models.</p>\n<p>Often this would actually go unnoticed because in many places, it is not the <code>models</code> vector which is used to iterate through the models, but instead the general element pointers, in this form:</p>\n<div class=\"codehilite language-C++\"><pre><span></span>  <span class=\"c1\">// Load the plugins for all the models                                        </span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">rootElement</span><span class=\"o\">-&gt;</span><span class=\"n\">GetChildCount</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>                                                                             \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">rootElement</span><span class=\"o\">-&gt;</span><span class=\"n\">GetChild</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">HasType</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">::</span><span class=\"n\">MODEL</span><span class=\"p\">))</span>          \n    <span class=\"p\">{</span>\n       <span class=\"p\">...</span>\n</pre></div>\n\n\n<p>The <code>Actor</code> models are caught with this. Crucially, this approach is also used for <code>World::BuildSceneMsg</code>, so that when a new gzclient connects to the world, it will get the model, and everything will run nicely.</p>\n<p>However the actors are not returned with <code>World::Models()</code>. So if we're using <code>World</code>  interface directly (not via messages connection like gzclient), then we miss out on the <code>Actor</code> models.</p>\n<p>Is there any particular reason this was done like this for the actors?<br />\nIf not, I suggest treating them as the models and adding the changes of this PR to make the behaviour of <code>World::LoadActor()</code> the same as <code>World::LoadModel()</code>.</p>\n<p>By the way: The <code>Road</code> is treated as entity only as well, and not registered separately in a similar fashion (see <code>World::LoadRoad</code>). But this would have to be treated separately because it's not technically a model (or should it be?). It would be nice to have a method which returns all entities which are no model then, e.g. <code>Entity_M World::Entities().</code> It would be good to have a getter which allows to get <em>all</em> the objects in the world incl. roads (lights could still be treated separately as it is).</p>\n<p>What's your thoughts on this?</p>", "type": "rendered"}, "title": {"raw": "Added actors in World as models so they get returned with Models()", "markup": "markdown", "html": "<p>Added actors in World as models so they get returned with Models()</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This could be either a misunderstanding on my behalf or an inconsistency in `physics::World` in regards to how `physics::Actor` instances are treated.\r\n\r\nThe `Actor` derives from `Model` and as far as I can see, is otherwise treated like a model too. The difference is that it is not added to the `WorldPrivate::models` list in the `World::LoadActor() `method, as it is done in `World::LoadModel()` for the \"normal\" models.\r\n\r\nOften this would actually go unnoticed because in many places, it is not the `models` vector which is used to iterate through the models, but instead the general element pointers, in this form:\r\n\r\n```C++\r\n  // Load the plugins for all the models                                        \r\n  for (unsigned int i = 0; i < this->dataPtr->rootElement->GetChildCount(); ++i)\r\n  {                                                                             \r\n    if (this->dataPtr->rootElement->GetChild(i)->HasType(Base::MODEL))          \r\n    {\r\n       ...\r\n```\r\n\r\nThe `Actor` models are caught with this. Crucially, this approach is also used for `World::BuildSceneMsg`, so that when a new gzclient connects to the world, it will get the model, and everything will run nicely.\r\n\r\nHowever the actors are not returned with `World::Models()`. So if we're using `World`  interface directly (not via messages connection like gzclient), then we miss out on the `Actor` models.\r\n\r\nIs there any particular reason this was done like this for the actors?  \r\nIf not, I suggest treating them as the models and adding the changes of this PR to make the behaviour of `World::LoadActor()` the same as `World::LoadModel()`.\r\n\r\nBy the way: The `Road` is treated as entity only as well, and not registered separately in a similar fashion (see `World::LoadRoad`). But this would have to be treated separately because it's not technically a model (or should it be?). It would be nice to have a method which returns all entities which are no model then, e.g. `Entity_M World::Entities().` It would be good to have a getter which allows to get *all* the objects in the world incl. roads (lights could still be treated separately as it is).\r\n\r\nWhat's your thoughts on this?", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2661/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:7522abe66705%0D14b76c61006c?from_pullrequest_id=2661"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2661/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2661.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2661/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2661/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2661"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2661/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:7522abe66705%0D14b76c61006c?from_pullrequest_id=2661"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2661/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2661/statuses_page=1.json"}}, "title": "Added actors in World as models so they get returned with Models()", "close_source_branch": false, "reviewers": [], "id": 2661, "destination": {"commit": {"hash": "14b76c61006c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/14b76c61006c.json"}, "html": {"href": "#!/osrf/gazebo/commits/14b76c61006c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2017-03-18T04:02:28.001115+00:00", "summary": {"raw": "This could be either a misunderstanding on my behalf or an inconsistency in `physics::World` in regards to how `physics::Actor` instances are treated.\r\n\r\nThe `Actor` derives from `Model` and as far as I can see, is otherwise treated like a model too. The difference is that it is not added to the `WorldPrivate::models` list in the `World::LoadActor() `method, as it is done in `World::LoadModel()` for the \"normal\" models.\r\n\r\nOften this would actually go unnoticed because in many places, it is not the `models` vector which is used to iterate through the models, but instead the general element pointers, in this form:\r\n\r\n```C++\r\n  // Load the plugins for all the models                                        \r\n  for (unsigned int i = 0; i < this->dataPtr->rootElement->GetChildCount(); ++i)\r\n  {                                                                             \r\n    if (this->dataPtr->rootElement->GetChild(i)->HasType(Base::MODEL))          \r\n    {\r\n       ...\r\n```\r\n\r\nThe `Actor` models are caught with this. Crucially, this approach is also used for `World::BuildSceneMsg`, so that when a new gzclient connects to the world, it will get the model, and everything will run nicely.\r\n\r\nHowever the actors are not returned with `World::Models()`. So if we're using `World`  interface directly (not via messages connection like gzclient), then we miss out on the `Actor` models.\r\n\r\nIs there any particular reason this was done like this for the actors?  \r\nIf not, I suggest treating them as the models and adding the changes of this PR to make the behaviour of `World::LoadActor()` the same as `World::LoadModel()`.\r\n\r\nBy the way: The `Road` is treated as entity only as well, and not registered separately in a similar fashion (see `World::LoadRoad`). But this would have to be treated separately because it's not technically a model (or should it be?). It would be nice to have a method which returns all entities which are no model then, e.g. `Entity_M World::Entities().` It would be good to have a getter which allows to get *all* the objects in the world incl. roads (lights could still be treated separately as it is).\r\n\r\nWhat's your thoughts on this?", "markup": "markdown", "html": "<p>This could be either a misunderstanding on my behalf or an inconsistency in <code>physics::World</code> in regards to how <code>physics::Actor</code> instances are treated.</p>\n<p>The <code>Actor</code> derives from <code>Model</code> and as far as I can see, is otherwise treated like a model too. The difference is that it is not added to the <code>WorldPrivate::models</code> list in the <code>World::LoadActor()</code>method, as it is done in <code>World::LoadModel()</code> for the \"normal\" models.</p>\n<p>Often this would actually go unnoticed because in many places, it is not the <code>models</code> vector which is used to iterate through the models, but instead the general element pointers, in this form:</p>\n<div class=\"codehilite language-C++\"><pre><span></span>  <span class=\"c1\">// Load the plugins for all the models                                        </span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">rootElement</span><span class=\"o\">-&gt;</span><span class=\"n\">GetChildCount</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>                                                                             \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">rootElement</span><span class=\"o\">-&gt;</span><span class=\"n\">GetChild</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">HasType</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">::</span><span class=\"n\">MODEL</span><span class=\"p\">))</span>          \n    <span class=\"p\">{</span>\n       <span class=\"p\">...</span>\n</pre></div>\n\n\n<p>The <code>Actor</code> models are caught with this. Crucially, this approach is also used for <code>World::BuildSceneMsg</code>, so that when a new gzclient connects to the world, it will get the model, and everything will run nicely.</p>\n<p>However the actors are not returned with <code>World::Models()</code>. So if we're using <code>World</code>  interface directly (not via messages connection like gzclient), then we miss out on the <code>Actor</code> models.</p>\n<p>Is there any particular reason this was done like this for the actors?<br />\nIf not, I suggest treating them as the models and adding the changes of this PR to make the behaviour of <code>World::LoadActor()</code> the same as <code>World::LoadModel()</code>.</p>\n<p>By the way: The <code>Road</code> is treated as entity only as well, and not registered separately in a similar fashion (see <code>World::LoadRoad</code>). But this would have to be treated separately because it's not technically a model (or should it be?). It would be nice to have a method which returns all entities which are no model then, e.g. <code>Entity_M World::Entities().</code> It would be good to have a getter which allows to get <em>all</em> the objects in the world incl. roads (lights could still be treated separately as it is).</p>\n<p>What's your thoughts on this?</p>", "type": "rendered"}, "source": {"commit": {"hash": "611ea2a06834", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/JenniferBuehler/gazebo/commit/611ea2a06834"}, "html": {"href": "https://bitbucket.org/JenniferBuehler/gazebo/commits/611ea2a06834"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/JenniferBuehler/gazebo"}, "html": {"href": "https://bitbucket.org/JenniferBuehler/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{11522dd5-648b-4e9e-b908-d3e1170ba728}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "JenniferBuehler/gazebo", "uuid": "{11522dd5-648b-4e9e-b908-d3e1170ba728}"}, "branch": {"name": "actor_loaded_as_model"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-03-28T16:32:38.104206+00:00", "type": "participant", "approved": true, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2017-03-27T16:35:06.757988+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-03-27T06:26:57.344463+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jennifer Buehler", "uuid": "{5949baad-8c43-4d52-9a82-bb8c3511fed8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D"}, "html": {"href": "https://bitbucket.org/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/b28ae0e95eada6ee16f0860c1fa59fdcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJB-4.png"}}, "nickname": "JenniferBuehler", "type": "user", "account_id": "557058:96bd489a-ec14-4a06-8d31-7bb6d46d1209"}}], "reason": "", "updated_on": "2017-03-28T17:20:54.866699+00:00", "author": {"display_name": "Jennifer Buehler", "uuid": "{5949baad-8c43-4d52-9a82-bb8c3511fed8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D"}, "html": {"href": "https://bitbucket.org/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/b28ae0e95eada6ee16f0860c1fa59fdcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJB-4.png"}}, "nickname": "JenniferBuehler", "type": "user", "account_id": "557058:96bd489a-ec14-4a06-8d31-7bb6d46d1209"}, "merge_commit": {"hash": "7522abe66705", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/7522abe66705.json"}, "html": {"href": "#!/osrf/gazebo/commits/7522abe66705"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}