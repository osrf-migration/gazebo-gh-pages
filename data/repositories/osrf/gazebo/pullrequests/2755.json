{"rendered": {"description": {"raw": "By default DART uses ODE's Dantzig LCP solver to handle constraints. However, the solver returns nan values in some situations ([DART issue #892](https://github.com/dartsim/dart/issues/892)). Kinematic loops with revolute joints are one of the problematic situations.\r\n\r\n~~b3cc07d has DART use a Projected Gauss-Seidel (PGS) solver instead. Doing so makes it possible to simulate kinematic loops with revolute joints among other things. There is some precedence for choosing the PGS solver since , when using ODE, Gazebo [defaults](https://bitbucket.org/osrf/sdformat/src/654ab4c930e1abe28208df47d4a49d8cf7515e08/sdf/1.6/physics.sdf?at=default&fileviewer=file-view-default#physics.sdf-165) to [ its PGS solver](http://wiki.ros.org/physics_ode/ODE#SOR_PGS_LCP). However, switching to DART's PGS solver causes some tests to fail.~~\r\n\r\n~~Failing tests:~~\r\n\r\nINTEGRATION_joint_force_torque\r\n\r\n* In `GetForceTorqueWithAppliedForce` and `GetForceTorqueWithAppliedForceReset` the base jitters a little bit, which causes some of the elements of the joint wrench that should be `0.0` to deviate (e.g. wrench_01.body1Force.Y()). The test failure can be eliminated by adding a fixed joint between the world and the first link.\r\n\r\nINTEGRATION_physics\r\n\r\n* In the `SpawnDrop` test, one of the objects is sliding just a little bit too much after the drop.\r\n~~~\r\n/home/osrf/default/test/integration/physics.cc:285: Failure\r\nThe difference between vel1.Y() and 0 is 0.021639389744573603, which exceeds 1e-2, where\r\nvel1.Y() evaluates to 0.021639389744573603,\r\n0 evaluates to 0, and\r\n1e-2 evaluates to 0.01.\r\n~~~\r\n\r\nINTEGRATION_factory\r\n\r\n* In the `Box` test (but not the `Sphere` test), the program has  a segmentation fault while cleaning up. It may have to do with the comment [here](#!/osrf/gazebo/src/801eaafce237e0858670e9354ff9113fe2527f32/gazebo/physics/dart/DARTModel.cc?at=default&fileviewer=file-view-default#DARTModel.cc-297).\r\n\r\nUpdate: 6a4c6f9 in conjunction with [PR #369](https://bitbucket.org/osrf/sdformat/pull-requests/369) makes the DART LCP solver a parameter that can be set as suggested by @scpeters. So, the tests should now pass.", "markup": "markdown", "html": "<p>By default DART uses ODE's Dantzig LCP solver to handle constraints. However, the solver returns nan values in some situations (<a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/issues/892\" rel=\"nofollow\">DART issue #892</a>). Kinematic loops with revolute joints are one of the problematic situations.</p>\n<p><del><a href=\"#!/osrf/gazebo/commits/b3cc07d\" rel=\"nofollow\" class=\"ap-connect-link\">b3cc07d</a> has DART use a Projected Gauss-Seidel (PGS) solver instead. Doing so makes it possible to simulate kinematic loops with revolute joints among other things. There is some precedence for choosing the PGS solver since , when using ODE, Gazebo <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/src/654ab4c930e1abe28208df47d4a49d8cf7515e08/sdf/1.6/physics.sdf?at=default&amp;fileviewer=file-view-default#physics.sdf-165\" rel=\"nofollow\">defaults</a> to <a data-is-external-link=\"true\" href=\"http://wiki.ros.org/physics_ode/ODE#SOR_PGS_LCP\" rel=\"nofollow\"> its PGS solver</a>. However, switching to DART's PGS solver causes some tests to fail.</del></p>\n<p><del>Failing tests:</del></p>\n<p>INTEGRATION_joint_force_torque</p>\n<ul>\n<li>In <code>GetForceTorqueWithAppliedForce</code> and <code>GetForceTorqueWithAppliedForceReset</code> the base jitters a little bit, which causes some of the elements of the joint wrench that should be <code>0.0</code> to deviate (e.g. wrench_01.body1Force.Y()). The test failure can be eliminated by adding a fixed joint between the world and the first link.</li>\n</ul>\n<p>INTEGRATION_physics</p>\n<ul>\n<li>In the <code>SpawnDrop</code> test, one of the objects is sliding just a little bit too much after the drop.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>/home/osrf/default/test/integration/physics.cc:285: Failure\nThe difference between vel1.Y() and 0 is 0.021639389744573603, which exceeds 1e-2, where\nvel1.Y() evaluates to 0.021639389744573603,\n0 evaluates to 0, and\n1e-2 evaluates to 0.01.\n</pre></div>\n\n\n<p>INTEGRATION_factory</p>\n<ul>\n<li>In the <code>Box</code> test (but not the <code>Sphere</code> test), the program has  a segmentation fault while cleaning up. It may have to do with the comment <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/801eaafce237e0858670e9354ff9113fe2527f32/gazebo/physics/dart/DARTModel.cc?at=default&amp;fileviewer=file-view-default#DARTModel.cc-297\" rel=\"nofollow\">here</a>.</li>\n</ul>\n<p>Update: <a href=\"#!/osrf/gazebo/commits/6a4c6f9\" rel=\"nofollow\" class=\"ap-connect-link\">6a4c6f9</a> in conjunction with <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/369\" rel=\"nofollow\">PR #369</a> makes the DART LCP solver a parameter that can be set as suggested by @scpeters. So, the tests should now pass.</p>", "type": "rendered"}, "title": {"raw": "DART LCP Solver", "markup": "markdown", "html": "<p>DART LCP Solver</p>", "type": "rendered"}}, "type": "pullrequest", "description": "By default DART uses ODE's Dantzig LCP solver to handle constraints. However, the solver returns nan values in some situations ([DART issue #892](https://github.com/dartsim/dart/issues/892)). Kinematic loops with revolute joints are one of the problematic situations.\r\n\r\n~~b3cc07d has DART use a Projected Gauss-Seidel (PGS) solver instead. Doing so makes it possible to simulate kinematic loops with revolute joints among other things. There is some precedence for choosing the PGS solver since , when using ODE, Gazebo [defaults](https://bitbucket.org/osrf/sdformat/src/654ab4c930e1abe28208df47d4a49d8cf7515e08/sdf/1.6/physics.sdf?at=default&fileviewer=file-view-default#physics.sdf-165) to [ its PGS solver](http://wiki.ros.org/physics_ode/ODE#SOR_PGS_LCP). However, switching to DART's PGS solver causes some tests to fail.~~\r\n\r\n~~Failing tests:~~\r\n\r\nINTEGRATION_joint_force_torque\r\n\r\n* In `GetForceTorqueWithAppliedForce` and `GetForceTorqueWithAppliedForceReset` the base jitters a little bit, which causes some of the elements of the joint wrench that should be `0.0` to deviate (e.g. wrench_01.body1Force.Y()). The test failure can be eliminated by adding a fixed joint between the world and the first link.\r\n\r\nINTEGRATION_physics\r\n\r\n* In the `SpawnDrop` test, one of the objects is sliding just a little bit too much after the drop.\r\n~~~\r\n/home/osrf/default/test/integration/physics.cc:285: Failure\r\nThe difference between vel1.Y() and 0 is 0.021639389744573603, which exceeds 1e-2, where\r\nvel1.Y() evaluates to 0.021639389744573603,\r\n0 evaluates to 0, and\r\n1e-2 evaluates to 0.01.\r\n~~~\r\n\r\nINTEGRATION_factory\r\n\r\n* In the `Box` test (but not the `Sphere` test), the program has  a segmentation fault while cleaning up. It may have to do with the comment [here](#!/osrf/gazebo/src/801eaafce237e0858670e9354ff9113fe2527f32/gazebo/physics/dart/DARTModel.cc?at=default&fileviewer=file-view-default#DARTModel.cc-297).\r\n\r\nUpdate: 6a4c6f9 in conjunction with [PR #369](https://bitbucket.org/osrf/sdformat/pull-requests/369) makes the DART LCP solver a parameter that can be set as suggested by @scpeters. So, the tests should now pass.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2755/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:70ba305ea96b%0Dc1c50dc2390e?from_pullrequest_id=2755"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2755/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2755.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2755/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2755/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2755"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2755/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:70ba305ea96b%0Dc1c50dc2390e?from_pullrequest_id=2755"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2755/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2755/statuses_page=1.json"}}, "title": "DART LCP Solver", "close_source_branch": false, "reviewers": [{"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}], "id": 2755, "destination": {"commit": {"hash": "c1c50dc2390e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c1c50dc2390e.json"}, "html": {"href": "#!/osrf/gazebo/commits/c1c50dc2390e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2017-07-21T01:41:35.854848+00:00", "summary": {"raw": "By default DART uses ODE's Dantzig LCP solver to handle constraints. However, the solver returns nan values in some situations ([DART issue #892](https://github.com/dartsim/dart/issues/892)). Kinematic loops with revolute joints are one of the problematic situations.\r\n\r\n~~b3cc07d has DART use a Projected Gauss-Seidel (PGS) solver instead. Doing so makes it possible to simulate kinematic loops with revolute joints among other things. There is some precedence for choosing the PGS solver since , when using ODE, Gazebo [defaults](https://bitbucket.org/osrf/sdformat/src/654ab4c930e1abe28208df47d4a49d8cf7515e08/sdf/1.6/physics.sdf?at=default&fileviewer=file-view-default#physics.sdf-165) to [ its PGS solver](http://wiki.ros.org/physics_ode/ODE#SOR_PGS_LCP). However, switching to DART's PGS solver causes some tests to fail.~~\r\n\r\n~~Failing tests:~~\r\n\r\nINTEGRATION_joint_force_torque\r\n\r\n* In `GetForceTorqueWithAppliedForce` and `GetForceTorqueWithAppliedForceReset` the base jitters a little bit, which causes some of the elements of the joint wrench that should be `0.0` to deviate (e.g. wrench_01.body1Force.Y()). The test failure can be eliminated by adding a fixed joint between the world and the first link.\r\n\r\nINTEGRATION_physics\r\n\r\n* In the `SpawnDrop` test, one of the objects is sliding just a little bit too much after the drop.\r\n~~~\r\n/home/osrf/default/test/integration/physics.cc:285: Failure\r\nThe difference between vel1.Y() and 0 is 0.021639389744573603, which exceeds 1e-2, where\r\nvel1.Y() evaluates to 0.021639389744573603,\r\n0 evaluates to 0, and\r\n1e-2 evaluates to 0.01.\r\n~~~\r\n\r\nINTEGRATION_factory\r\n\r\n* In the `Box` test (but not the `Sphere` test), the program has  a segmentation fault while cleaning up. It may have to do with the comment [here](#!/osrf/gazebo/src/801eaafce237e0858670e9354ff9113fe2527f32/gazebo/physics/dart/DARTModel.cc?at=default&fileviewer=file-view-default#DARTModel.cc-297).\r\n\r\nUpdate: 6a4c6f9 in conjunction with [PR #369](https://bitbucket.org/osrf/sdformat/pull-requests/369) makes the DART LCP solver a parameter that can be set as suggested by @scpeters. So, the tests should now pass.", "markup": "markdown", "html": "<p>By default DART uses ODE's Dantzig LCP solver to handle constraints. However, the solver returns nan values in some situations (<a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/issues/892\" rel=\"nofollow\">DART issue #892</a>). Kinematic loops with revolute joints are one of the problematic situations.</p>\n<p><del><a href=\"#!/osrf/gazebo/commits/b3cc07d\" rel=\"nofollow\" class=\"ap-connect-link\">b3cc07d</a> has DART use a Projected Gauss-Seidel (PGS) solver instead. Doing so makes it possible to simulate kinematic loops with revolute joints among other things. There is some precedence for choosing the PGS solver since , when using ODE, Gazebo <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/src/654ab4c930e1abe28208df47d4a49d8cf7515e08/sdf/1.6/physics.sdf?at=default&amp;fileviewer=file-view-default#physics.sdf-165\" rel=\"nofollow\">defaults</a> to <a data-is-external-link=\"true\" href=\"http://wiki.ros.org/physics_ode/ODE#SOR_PGS_LCP\" rel=\"nofollow\"> its PGS solver</a>. However, switching to DART's PGS solver causes some tests to fail.</del></p>\n<p><del>Failing tests:</del></p>\n<p>INTEGRATION_joint_force_torque</p>\n<ul>\n<li>In <code>GetForceTorqueWithAppliedForce</code> and <code>GetForceTorqueWithAppliedForceReset</code> the base jitters a little bit, which causes some of the elements of the joint wrench that should be <code>0.0</code> to deviate (e.g. wrench_01.body1Force.Y()). The test failure can be eliminated by adding a fixed joint between the world and the first link.</li>\n</ul>\n<p>INTEGRATION_physics</p>\n<ul>\n<li>In the <code>SpawnDrop</code> test, one of the objects is sliding just a little bit too much after the drop.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>/home/osrf/default/test/integration/physics.cc:285: Failure\nThe difference between vel1.Y() and 0 is 0.021639389744573603, which exceeds 1e-2, where\nvel1.Y() evaluates to 0.021639389744573603,\n0 evaluates to 0, and\n1e-2 evaluates to 0.01.\n</pre></div>\n\n\n<p>INTEGRATION_factory</p>\n<ul>\n<li>In the <code>Box</code> test (but not the <code>Sphere</code> test), the program has  a segmentation fault while cleaning up. It may have to do with the comment <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/801eaafce237e0858670e9354ff9113fe2527f32/gazebo/physics/dart/DARTModel.cc?at=default&amp;fileviewer=file-view-default#DARTModel.cc-297\" rel=\"nofollow\">here</a>.</li>\n</ul>\n<p>Update: <a href=\"#!/osrf/gazebo/commits/6a4c6f9\" rel=\"nofollow\" class=\"ap-connect-link\">6a4c6f9</a> in conjunction with <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/369\" rel=\"nofollow\">PR #369</a> makes the DART LCP solver a parameter that can be set as suggested by @scpeters. So, the tests should now pass.</p>", "type": "rendered"}, "source": {"commit": {"hash": "478d5d3fae76", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pchorak/gazebo/commit/478d5d3fae76"}, "html": {"href": "https://bitbucket.org/pchorak/gazebo/commits/478d5d3fae76"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pchorak/gazebo"}, "html": {"href": "https://bitbucket.org/pchorak/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{7130b41e-0983-4752-9e3b-9e2c12cf1268}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "pchorak/gazebo", "uuid": "{7130b41e-0983-4752-9e3b-9e2c12cf1268}"}, "branch": {"name": "dart_use_pgs_solver"}}, "comment_count": 21, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-08-12T00:17:54.981574+00:00", "type": "participant", "approved": false, "user": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}}, {"role": "REVIEWER", "participated_on": "2017-08-16T01:09:54.147008+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": "2017-08-08T18:33:16.037545+00:00", "type": "participant", "approved": true, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "", "updated_on": "2017-08-16T01:10:10.901617+00:00", "author": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}, "merge_commit": {"hash": "70ba305ea96b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/70ba305ea96b.json"}, "html": {"href": "#!/osrf/gazebo/commits/70ba305ea96b"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}