{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1726/comments/7411504.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1726/_/diff#comment-7411504"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1726, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1726.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1726"}}, "title": "Switch to six independent GPS sensor noise models"}, "content": {"raw": "I realise that this comment may be better suited to an issue rather than a pull request...\n\nIs there any reason why ```Sensor::noises``` is of type ```std::vector<NoisePtr>```, as it makes it rather difficult to manage multiple noise streams per sensor? For example, I had to use ```this->noises[x]->Apply(...);``` throughout the code, where ```x``` is the some integer ID referencing an ordered noise stream that I've pushed onto the data structure. Given that sensor plugins may wish to override the noise callbacks, would it not be simpler to use a ```std::map<int,NoisePtr>``` and declare an enum in each sensor header file containing the streams. For example:\n\n\n```\n#!c++\n\nnamespace gazebo\n{\n  namespace sensors\n  {\n    /// \\addtogroup gazebo_sensors\n    /// \\{\n\n    enum GpsSensorNoise {PosLatNoiseMeters, PosLonNoiseMeters, PosAltNoiseMeters,\n        VelLatNoiseMeters, VelLonNoiseMeters, VelAltNoiseMeters};\n\n    /// \\class GpsSensor GpsSensor.hh sensors/sensors.hh\n    /// \\brief GpsSensor to provide position measurement.\n    class GAZEBO_VISIBLE GpsSensor: public Sensor\n    {\n        ...\n    };\n}\n\n```\n\nThen, from a plugin one can call something along the following lines:\n\n\n```\n#!c++\nparentSensor->GetNoise(PosLatNoiseMeters)->SetCustomNoiseCallback(boost::bind(&GpsPlugin::Perturb,this,i,_1));\n```\n\nAnd within the actual sensor code noise management becomes a little more intuitive, ie.\n\n```\n#!c++\nnoises[PosLatNoiseMeters] = NoiseFactory::NewNoiseModel(\n       posElem->GetElement(\"horizontal\")->GetElement(\"noise\"));\n```\n\nNot essential, but may be nice for developers :)", "markup": "markdown", "html": "<p>I realise that this comment may be better suited to an issue rather than a pull request...</p>\n<p>Is there any reason why <code>Sensor::noises</code> is of type <code>std::vector&lt;NoisePtr&gt;</code>, as it makes it rather difficult to manage multiple noise streams per sensor? For example, I had to use <code>this-&gt;noises[x]-&gt;Apply(...);</code> throughout the code, where <code>x</code> is the some integer ID referencing an ordered noise stream that I've pushed onto the data structure. Given that sensor plugins may wish to override the noise callbacks, would it not be simpler to use a <code>std::map&lt;int,NoisePtr&gt;</code> and declare an enum in each sensor header file containing the streams. For example:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">namespace</span> <span class=\"n\">gazebo</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">namespace</span> <span class=\"n\">sensors</span>\n  <span class=\"p\">{</span>\n    <span class=\"c1\">/// \\addtogroup gazebo_sensors</span>\n    <span class=\"c1\">/// \\{</span>\n\n    <span class=\"k\">enum</span> <span class=\"n\">GpsSensorNoise</span> <span class=\"p\">{</span><span class=\"n\">PosLatNoiseMeters</span><span class=\"p\">,</span> <span class=\"n\">PosLonNoiseMeters</span><span class=\"p\">,</span> <span class=\"n\">PosAltNoiseMeters</span><span class=\"p\">,</span>\n        <span class=\"n\">VelLatNoiseMeters</span><span class=\"p\">,</span> <span class=\"n\">VelLonNoiseMeters</span><span class=\"p\">,</span> <span class=\"n\">VelAltNoiseMeters</span><span class=\"p\">};</span>\n\n    <span class=\"c1\">/// \\class GpsSensor GpsSensor.hh sensors/sensors.hh</span>\n    <span class=\"c1\">/// \\brief GpsSensor to provide position measurement.</span>\n    <span class=\"k\">class</span> <span class=\"nc\">GAZEBO_VISIBLE</span> <span class=\"nl\">GpsSensor</span><span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"n\">Sensor</span>\n    <span class=\"p\">{</span>\n        <span class=\"p\">...</span>\n    <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Then, from a plugin one can call something along the following lines:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">parentSensor</span><span class=\"o\">-&gt;</span><span class=\"n\">GetNoise</span><span class=\"p\">(</span><span class=\"n\">PosLatNoiseMeters</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">SetCustomNoiseCallback</span><span class=\"p\">(</span><span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GpsPlugin</span><span class=\"o\">::</span><span class=\"n\">Perturb</span><span class=\"p\">,</span><span class=\"k\">this</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">_1</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>And within the actual sensor code noise management becomes a little more intuitive, ie.</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">noises</span><span class=\"p\">[</span><span class=\"n\">PosLatNoiseMeters</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">NoiseFactory</span><span class=\"o\">::</span><span class=\"n\">NewNoiseModel</span><span class=\"p\">(</span>\n       <span class=\"n\">posElem</span><span class=\"o\">-&gt;</span><span class=\"n\">GetElement</span><span class=\"p\">(</span><span class=\"s\">&quot;horizontal&quot;</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">GetElement</span><span class=\"p\">(</span><span class=\"s\">&quot;noise&quot;</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>Not essential, but may be nice for developers :)</p>", "type": "rendered"}, "created_on": "2015-06-10T01:04:06.296991+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2015-06-10T01:07:40.011278+00:00", "type": "pullrequest_comment", "id": 7411504}