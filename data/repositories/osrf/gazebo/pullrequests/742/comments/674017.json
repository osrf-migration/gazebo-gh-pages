{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/742/comments/674017.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/742/_/diff#comment-674017"}}, "parent": {"id": 669686, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/742/comments/669686.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/742/_/diff#comment-669686"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 742, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/742.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/742"}}, "title": "Added fixnan functions"}, "content": {"raw": "In general NaN's should be prevented or handled immediately. A NaN should never come out of a library. This is especially true when using accessor functions that involve no input from the user. NaN's have unexpected behavior when propagated through a system. We also cannot fix all the other libraries that Gazebo depends on in order to handle NaNs.\n\nNan's say that some mathematical operation was invalid. This is fine, but ODE should do something useful with that information when a NaN first appears. It's at that point when ODE can generate a meaningful error. In this case, a NaN from an a joint accessor tells us nothing about what went wrong.\n\nA crash is worse than silently fixing a NaN. Gazebo has a bad reputation of crashing, we should actively fix that reputation. Since we have no information about what caused the NaN, there is nothing much we can do expect fix it as best we can to prevent a crash. \n\nI would also like to track down NaN sources. I believe joint accessor functions is not the correct location to put `if` checks. A better approach is to write a centralized physics checker. This approach will be more efficient, less duplicate code, and much easier to enable/disable. To this end, I have created a issue #891 to add this feature to Gazebo.\n", "markup": "markdown", "html": "<p>In general NaN's should be prevented or handled immediately. A NaN should never come out of a library. This is especially true when using accessor functions that involve no input from the user. NaN's have unexpected behavior when propagated through a system. We also cannot fix all the other libraries that Gazebo depends on in order to handle NaNs.</p>\n<p>Nan's say that some mathematical operation was invalid. This is fine, but ODE should do something useful with that information when a NaN first appears. It's at that point when ODE can generate a meaningful error. In this case, a NaN from an a joint accessor tells us nothing about what went wrong.</p>\n<p>A crash is worse than silently fixing a NaN. Gazebo has a bad reputation of crashing, we should actively fix that reputation. Since we have no information about what caused the NaN, there is nothing much we can do expect fix it as best we can to prevent a crash. </p>\n<p>I would also like to track down NaN sources. I believe joint accessor functions is not the correct location to put <code>if</code> checks. A better approach is to write a centralized physics checker. This approach will be more efficient, less duplicate code, and much easier to enable/disable. To this end, I have created a issue <a href=\"#!/osrf/gazebo/issues/891/physics-solution-checker-ie-nans\" rel=\"nofollow\" title=\"Physics Solution Checker (ie. NaN&#39;s)\" class=\"ap-connect-link\">#891</a> to add this feature to Gazebo.</p>", "type": "rendered"}, "created_on": "2013-10-12T20:16:16.245876+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2013-10-12T20:16:16.258093+00:00", "type": "pullrequest_comment", "id": 674017}