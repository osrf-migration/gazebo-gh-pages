{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/742/comments/669686.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/742/_/diff#comment-669686"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 742, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/742.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/742"}}, "title": "Added fixnan functions"}, "content": {"raw": "I am under the impression that In general NaN's should not cause codes to crash. NaN's normally simply propagate and fill simulation state data with useless NaN's. If code is crashing due to NaN states (e.g. NaN pose, velocity, etc), if possible we should try to identify and fix codes that crashes from NaN's instead.  Is there an example of a Gazebo crash caused by NaN?\n\nSecondly, replacing NaN's silently with 0's will make it hard to debug actual errors in simulation, and may cause strange simulation results.  0 might not always be the \"right fix\" for NaN.  For example, if a NaN was caused by overflow, maybe we should replace it with the largest float or double representation per architecture.  On the other hand, if a NaN was caused by improper trigonometric function domain (e.g. asin(1.00001)), then fixnan should return something close to pi/2.\n\nLastly, to help track down sources of NaN's, I really like the idea of having NaN detectors around that stops simulation when NaN's happen, and gives user option to restart or reset simulation states after modifying simulation parameters (e.g. time step size, stiffness, etc.).  Given NaN's are not only caused by bugs, but can also be caused by poorly constructed simulation model or systems, often times the \"fix\" is user model parameter adjustment.", "markup": "markdown", "html": "<p>I am under the impression that In general NaN's should not cause codes to crash. NaN's normally simply propagate and fill simulation state data with useless NaN's. If code is crashing due to NaN states (e.g. NaN pose, velocity, etc), if possible we should try to identify and fix codes that crashes from NaN's instead.  Is there an example of a Gazebo crash caused by NaN?</p>\n<p>Secondly, replacing NaN's silently with 0's will make it hard to debug actual errors in simulation, and may cause strange simulation results.  0 might not always be the \"right fix\" for NaN.  For example, if a NaN was caused by overflow, maybe we should replace it with the largest float or double representation per architecture.  On the other hand, if a NaN was caused by improper trigonometric function domain (e.g. asin(1.00001)), then fixnan should return something close to pi/2.</p>\n<p>Lastly, to help track down sources of NaN's, I really like the idea of having NaN detectors around that stops simulation when NaN's happen, and gives user option to restart or reset simulation states after modifying simulation parameters (e.g. time step size, stiffness, etc.).  Given NaN's are not only caused by bugs, but can also be caused by poorly constructed simulation model or systems, often times the \"fix\" is user model parameter adjustment.</p>", "type": "rendered"}, "created_on": "2013-10-11T08:10:32.682012+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2013-10-11T08:10:32.689961+00:00", "type": "pullrequest_comment", "id": 669686}