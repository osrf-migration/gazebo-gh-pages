{"rendered": {"description": {"raw": "I recently attempted to extend the ODE Gearbox joint to allow the gear ratio to be adjusted dynamically, but the gearbox joint implementation wasn't behaving the way I expected. I was expecting it to behave like the [ODE hinge joint implementation](#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/hinge.cpp?at=default&fileviewer=file-view-default#hinge.cpp-67:73), which calls the [helper function getHingeAngle](#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/joint.cpp?at=default&fileviewer=file-view-default#joint.cpp-433:443) with arguments: (child body, parent body, joint axis in body-fixed frame, initial relative rotation between \r\nbodies). By contrast, the gearbox joint had reversed the order of the bodies (reference body then child body), computed the joint axis in a global frame, and re-computed the relative body rotation (by calling `dJointSetGearboxReferenceBody[12]`) at each time step.\r\n\r\nSo this refactoring does the following:\r\n\r\n* Don't update relative rotations `qrel[12]` by calling `dJointSetGearboxReferenceBody[12]` at each timestep\r\n* Use body-fixed axis, not global\r\n* Reverse angle direction by switching relative bodies. This required reversing some arguments in other rotation calculations elsewhere in the file.\r\n\r\nThis should be a pure refactoring that doesn't change any behavior, but it will set the stage for an extension to this joint that I'd like to make. There is a gearbox joint test, and I've verified locally that it passes; hopefully CI agrees.", "markup": "markdown", "html": "<p>I recently attempted to extend the ODE Gearbox joint to allow the gear ratio to be adjusted dynamically, but the gearbox joint implementation wasn't behaving the way I expected. I was expecting it to behave like the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/hinge.cpp?at=default&amp;fileviewer=file-view-default#hinge.cpp-67:73\" rel=\"nofollow\">ODE hinge joint implementation</a>, which calls the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/joint.cpp?at=default&amp;fileviewer=file-view-default#joint.cpp-433:443\" rel=\"nofollow\">helper function getHingeAngle</a> with arguments: (child body, parent body, joint axis in body-fixed frame, initial relative rotation between \nbodies). By contrast, the gearbox joint had reversed the order of the bodies (reference body then child body), computed the joint axis in a global frame, and re-computed the relative body rotation (by calling <code>dJointSetGearboxReferenceBody[12]</code>) at each time step.</p>\n<p>So this refactoring does the following:</p>\n<ul>\n<li>Don't update relative rotations <code>qrel[12]</code> by calling <code>dJointSetGearboxReferenceBody[12]</code> at each timestep</li>\n<li>Use body-fixed axis, not global</li>\n<li>Reverse angle direction by switching relative bodies. This required reversing some arguments in other rotation calculations elsewhere in the file.</li>\n</ul>\n<p>This should be a pure refactoring that doesn't change any behavior, but it will set the stage for an extension to this joint that I'd like to make. There is a gearbox joint test, and I've verified locally that it passes; hopefully CI agrees.</p>", "type": "rendered"}, "title": {"raw": "Refactor ode gearbox math to more closely match ode hinge math", "markup": "markdown", "html": "<p>Refactor ode gearbox math to more closely match ode hinge math</p>", "type": "rendered"}}, "type": "pullrequest", "description": "I recently attempted to extend the ODE Gearbox joint to allow the gear ratio to be adjusted dynamically, but the gearbox joint implementation wasn't behaving the way I expected. I was expecting it to behave like the [ODE hinge joint implementation](#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/hinge.cpp?at=default&fileviewer=file-view-default#hinge.cpp-67:73), which calls the [helper function getHingeAngle](#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/joint.cpp?at=default&fileviewer=file-view-default#joint.cpp-433:443) with arguments: (child body, parent body, joint axis in body-fixed frame, initial relative rotation between \r\nbodies). By contrast, the gearbox joint had reversed the order of the bodies (reference body then child body), computed the joint axis in a global frame, and re-computed the relative body rotation (by calling `dJointSetGearboxReferenceBody[12]`) at each time step.\r\n\r\nSo this refactoring does the following:\r\n\r\n* Don't update relative rotations `qrel[12]` by calling `dJointSetGearboxReferenceBody[12]` at each timestep\r\n* Use body-fixed axis, not global\r\n* Reverse angle direction by switching relative bodies. This required reversing some arguments in other rotation calculations elsewhere in the file.\r\n\r\nThis should be a pure refactoring that doesn't change any behavior, but it will set the stage for an extension to this joint that I'd like to make. There is a gearbox joint test, and I've verified locally that it passes; hopefully CI agrees.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3048/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:050049dcb2bb%0Dd3165fd7143d?from_pullrequest_id=3048"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/3048/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/3048.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/3048/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3048/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3048"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/3048/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:050049dcb2bb%0Dd3165fd7143d?from_pullrequest_id=3048"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3048/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/3048/statuses_page=1.json"}}, "title": "Refactor ode gearbox math to more closely match ode hinge math", "close_source_branch": true, "reviewers": [{"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}], "id": 3048, "destination": {"commit": {"hash": "d3165fd7143d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/d3165fd7143d.json"}, "html": {"href": "#!/osrf/gazebo/commits/d3165fd7143d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "created_on": "2018-12-08T11:37:12.862191+00:00", "summary": {"raw": "I recently attempted to extend the ODE Gearbox joint to allow the gear ratio to be adjusted dynamically, but the gearbox joint implementation wasn't behaving the way I expected. I was expecting it to behave like the [ODE hinge joint implementation](#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/hinge.cpp?at=default&fileviewer=file-view-default#hinge.cpp-67:73), which calls the [helper function getHingeAngle](#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/joint.cpp?at=default&fileviewer=file-view-default#joint.cpp-433:443) with arguments: (child body, parent body, joint axis in body-fixed frame, initial relative rotation between \r\nbodies). By contrast, the gearbox joint had reversed the order of the bodies (reference body then child body), computed the joint axis in a global frame, and re-computed the relative body rotation (by calling `dJointSetGearboxReferenceBody[12]`) at each time step.\r\n\r\nSo this refactoring does the following:\r\n\r\n* Don't update relative rotations `qrel[12]` by calling `dJointSetGearboxReferenceBody[12]` at each timestep\r\n* Use body-fixed axis, not global\r\n* Reverse angle direction by switching relative bodies. This required reversing some arguments in other rotation calculations elsewhere in the file.\r\n\r\nThis should be a pure refactoring that doesn't change any behavior, but it will set the stage for an extension to this joint that I'd like to make. There is a gearbox joint test, and I've verified locally that it passes; hopefully CI agrees.", "markup": "markdown", "html": "<p>I recently attempted to extend the ODE Gearbox joint to allow the gear ratio to be adjusted dynamically, but the gearbox joint implementation wasn't behaving the way I expected. I was expecting it to behave like the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/hinge.cpp?at=default&amp;fileviewer=file-view-default#hinge.cpp-67:73\" rel=\"nofollow\">ODE hinge joint implementation</a>, which calls the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/0110572a49ba08936c9ac1972771db391b5ab721/deps/opende/src/joints/joint.cpp?at=default&amp;fileviewer=file-view-default#joint.cpp-433:443\" rel=\"nofollow\">helper function getHingeAngle</a> with arguments: (child body, parent body, joint axis in body-fixed frame, initial relative rotation between \nbodies). By contrast, the gearbox joint had reversed the order of the bodies (reference body then child body), computed the joint axis in a global frame, and re-computed the relative body rotation (by calling <code>dJointSetGearboxReferenceBody[12]</code>) at each time step.</p>\n<p>So this refactoring does the following:</p>\n<ul>\n<li>Don't update relative rotations <code>qrel[12]</code> by calling <code>dJointSetGearboxReferenceBody[12]</code> at each timestep</li>\n<li>Use body-fixed axis, not global</li>\n<li>Reverse angle direction by switching relative bodies. This required reversing some arguments in other rotation calculations elsewhere in the file.</li>\n</ul>\n<p>This should be a pure refactoring that doesn't change any behavior, but it will set the stage for an extension to this joint that I'd like to make. There is a gearbox joint test, and I've verified locally that it passes; hopefully CI agrees.</p>", "type": "rendered"}, "source": {"commit": {"hash": "69ebf26d1637", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/69ebf26d1637.json"}, "html": {"href": "#!/osrf/gazebo/commits/69ebf26d1637"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gearbox_math_7"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-01-25T16:10:37.588023+00:00", "type": "participant", "approved": true, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "PARTICIPANT", "participated_on": "2018-12-11T20:41:07.893668+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": "2018-12-11T20:16:52.500184+00:00", "type": "participant", "approved": true, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}], "reason": "", "updated_on": "2019-01-25T18:43:05.320116+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "050049dcb2bb", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/050049dcb2bb.json"}, "html": {"href": "#!/osrf/gazebo/commits/050049dcb2bb"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}