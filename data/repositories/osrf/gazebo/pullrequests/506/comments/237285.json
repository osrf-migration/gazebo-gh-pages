{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/506/comments/237285.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/506/_/diff#comment-237285"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 506, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/506.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/506"}}, "title": "Fix gzlog stop command line"}, "content": {"raw": "Rest of my manual testing could not break the log and I wasn't able to appreciate any problem with rest of simulation. You win. :)\n\nFor the testing error, not a very elegant solution but wait for cleanup 5 seconds should be enough for 99% of gazebo computers:\n\n```\ndiff -r 861857e74d38 gazebo/util/LogRecord_TEST.cc\n--- a/gazebo/util/LogRecord_TEST.cc\tThu Apr 25 09:11:19 2013 -0700\n+++ b/gazebo/util/LogRecord_TEST.cc\tTue May 07 02:42:42 2013 +0200\n@@ -94,10 +94,18 @@\n   // Run time should be zero since no update has been triggered.\n   EXPECT_EQ(recorder->GetRunTime(), gazebo::common::Time());\n \n-  // Stop recording.\n+  // Stop recording. It will take some time to cleanup.\n   recorder->Stop();\n \n-  // Make sure everything has reset.\n+  // Make sure everything has reset. Give 5 seconds to max time for cleanup\n+  int timeout = 0;\n+  while (recorder->GetRunning() && timeout < 5)\n+  {\n+    sleep(0.1);\n+    timeout = timeout + 0.1;\n+  }\n+  ASSERT_LT(timeout, 5);\n+\n   EXPECT_FALSE(recorder->GetRunning());\n   EXPECT_FALSE(recorder->GetPaused());\n   EXPECT_EQ(recorder->GetRunTime(), gazebo::common::Time());\n```", "markup": "markdown", "html": "<p>Rest of my manual testing could not break the log and I wasn't able to appreciate any problem with rest of simulation. You win. :)</p>\n<p>For the testing error, not a very elegant solution but wait for cleanup 5 seconds should be enough for 99% of gazebo computers:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 861857e74d38 gazebo/util/LogRecord_TEST.cc</span>\n<span class=\"gd\">--- a/gazebo/util/LogRecord_TEST.cc Thu Apr 25 09:11:19 2013 -0700</span>\n<span class=\"gi\">+++ b/gazebo/util/LogRecord_TEST.cc Tue May 07 02:42:42 2013 +0200</span>\n<span class=\"gu\">@@ -94,10 +94,18 @@</span>\n   // Run time should be zero since no update has been triggered.\n   EXPECT_EQ(recorder-&gt;GetRunTime(), gazebo::common::Time());\n\n<span class=\"gd\">-  // Stop recording.</span>\n<span class=\"gi\">+  // Stop recording. It will take some time to cleanup.</span>\n   recorder-&gt;Stop();\n\n<span class=\"gd\">-  // Make sure everything has reset.</span>\n<span class=\"gi\">+  // Make sure everything has reset. Give 5 seconds to max time for cleanup</span>\n<span class=\"gi\">+  int timeout = 0;</span>\n<span class=\"gi\">+  while (recorder-&gt;GetRunning() &amp;&amp; timeout &lt; 5)</span>\n<span class=\"gi\">+  {</span>\n<span class=\"gi\">+    sleep(0.1);</span>\n<span class=\"gi\">+    timeout = timeout + 0.1;</span>\n<span class=\"gi\">+  }</span>\n<span class=\"gi\">+  ASSERT_LT(timeout, 5);</span>\n<span class=\"gi\">+</span>\n   EXPECT_FALSE(recorder-&gt;GetRunning());\n   EXPECT_FALSE(recorder-&gt;GetPaused());\n   EXPECT_EQ(recorder-&gt;GetRunTime(), gazebo::common::Time());\n</pre></div>", "type": "rendered"}, "created_on": "2013-05-07T00:45:04.352991+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": "2013-05-07T00:45:04.368055+00:00", "type": "pullrequest_comment", "id": 237285}