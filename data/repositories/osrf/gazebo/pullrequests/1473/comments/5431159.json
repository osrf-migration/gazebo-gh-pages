{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1473/comments/5431159.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1473/_/diff#comment-5431159"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1473, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1473.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1473"}}, "title": "Implemented SimbodyPhysics::SetParam and slimmed down physics engines"}, "content": {"raw": "I'm having doubts about the usefulness of the abstract any cast functions. The difference in code will be minimal. \n\nWithout the custom any cast functions:\n\n\n```\n#!c++\n\nif (!AnyCast(x,x,x))\n{\n  Handle the error\n}\n\n```\n\ncompared with:\n\n\n```\n#!c++\n\ntry\n{\n  boost::any_cast ...\n}\ncatch(boost::bad_any &_e)\n{\n  Handle error\n}\n```\n\nWith the abstract class we'd have to output two error messages. One for the catch inside `AnyCast` that outputs `e.what()` and one for the `if` around the `AnyCast` that captures the context for the error.\n\n \n\n", "markup": "markdown", "html": "<p>I'm having doubts about the usefulness of the abstract any cast functions. The difference in code will be minimal. </p>\n<p>Without the custom any cast functions:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">AnyCast</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Handle</span> <span class=\"n\">the</span> <span class=\"n\">error</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>compared with:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">try</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">any_cast</span> <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n<span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bad_any</span> <span class=\"o\">&amp;</span><span class=\"n\">_e</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Handle</span> <span class=\"n\">error</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>With the abstract class we'd have to output two error messages. One for the catch inside <code>AnyCast</code> that outputs <code>e.what()</code> and one for the <code>if</code> around the <code>AnyCast</code> that captures the context for the error.</p>", "type": "rendered"}, "created_on": "2015-03-02T23:08:13.815759+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2015-03-02T23:09:34.244638+00:00", "type": "pullrequest_comment", "id": 5431159}