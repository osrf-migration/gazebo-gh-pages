{"rendered": {"reason": {"raw": "We need to do more research before committing to C++11 to make sure that we won't have problems in the future. ", "markup": "markdown", "html": "<p>We need to do more research before committing to C++11 to make sure that we won't have problems in the future. </p>", "type": "rendered"}, "description": {"raw": "This pull request enables the C++11 support. There is an issue with GTEST when using `EXPECT_TRUE` or `ASSERT_TRUE` and we pass a shared pointer as an argument. The boost::shared_ptr bool operator is explicit and the compiler does not make an implicit conversion for us when we're using these GTEST macros. \r\n\r\nI would say that the cleanest solution would be to use the bool operator in the form of a `static_cast<bool>(mysharedPtr)` or `bool(mysharedPtr)`. However we have lots of lines where we are comparing the shared pointer with NULL. So, for consistency this is the way I chose here to fix the problem.\r\n\r\nThere are other ways as redeclare `ASSERT_TRUE` with a different name and wrap it with a new ASSERT_TRUE but not sure if it's worth it.\r\n\r\nAnswering @_jrivero_ here: This will force the users in Ubuntu Precise to download a modern version of gcc in order to compile Gazebo. We were discussing this issue a few days ago in person but we can follow up here.\r\n\r\n", "markup": "markdown", "html": "<p>This pull request enables the C++11 support. There is an issue with GTEST when using <code>EXPECT_TRUE</code> or <code>ASSERT_TRUE</code> and we pass a shared pointer as an argument. The boost::shared_ptr bool operator is explicit and the compiler does not make an implicit conversion for us when we're using these GTEST macros. </p>\n<p>I would say that the cleanest solution would be to use the bool operator in the form of a <code>static_cast&lt;bool&gt;(mysharedPtr)</code> or <code>bool(mysharedPtr)</code>. However we have lots of lines where we are comparing the shared pointer with NULL. So, for consistency this is the way I chose here to fix the problem.</p>\n<p>There are other ways as redeclare <code>ASSERT_TRUE</code> with a different name and wrap it with a new ASSERT_TRUE but not sure if it's worth it.</p>\n<p>Answering @<em>jrivero</em> here: This will force the users in Ubuntu Precise to download a modern version of gcc in order to compile Gazebo. We were discussing this issue a few days ago in person but we can follow up here.</p>", "type": "rendered"}, "title": {"raw": "C++11 support", "markup": "markdown", "html": "<p>C++11 support</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request enables the C++11 support. There is an issue with GTEST when using `EXPECT_TRUE` or `ASSERT_TRUE` and we pass a shared pointer as an argument. The boost::shared_ptr bool operator is explicit and the compiler does not make an implicit conversion for us when we're using these GTEST macros. \r\n\r\nI would say that the cleanest solution would be to use the bool operator in the form of a `static_cast<bool>(mysharedPtr)` or `bool(mysharedPtr)`. However we have lots of lines where we are comparing the shared pointer with NULL. So, for consistency this is the way I chose here to fix the problem.\r\n\r\nThere are other ways as redeclare `ASSERT_TRUE` with a different name and wrap it with a new ASSERT_TRUE but not sure if it's worth it.\r\n\r\nAnswering @_jrivero_ here: This will force the users in Ubuntu Precise to download a modern version of gcc in order to compile Gazebo. We were discussing this issue a few days ago in person but we can follow up here.\r\n\r\n", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1297/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:e594ac5a353f%0Da929e28fed25?from_pullrequest_id=1297"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/1297/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/1297.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/1297/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1297/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1297"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/1297/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:e594ac5a353f%0Da929e28fed25?from_pullrequest_id=1297"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1297/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/1297/statuses_page=1.json"}}, "title": "C++11 support", "close_source_branch": false, "reviewers": [{"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}], "id": 1297, "destination": {"commit": {"hash": "a929e28fed25", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/a929e28fed25.json"}, "html": {"href": "#!/osrf/gazebo/commits/a929e28fed25"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2014-11-20T02:39:21.886166+00:00", "summary": {"raw": "This pull request enables the C++11 support. There is an issue with GTEST when using `EXPECT_TRUE` or `ASSERT_TRUE` and we pass a shared pointer as an argument. The boost::shared_ptr bool operator is explicit and the compiler does not make an implicit conversion for us when we're using these GTEST macros. \r\n\r\nI would say that the cleanest solution would be to use the bool operator in the form of a `static_cast<bool>(mysharedPtr)` or `bool(mysharedPtr)`. However we have lots of lines where we are comparing the shared pointer with NULL. So, for consistency this is the way I chose here to fix the problem.\r\n\r\nThere are other ways as redeclare `ASSERT_TRUE` with a different name and wrap it with a new ASSERT_TRUE but not sure if it's worth it.\r\n\r\nAnswering @_jrivero_ here: This will force the users in Ubuntu Precise to download a modern version of gcc in order to compile Gazebo. We were discussing this issue a few days ago in person but we can follow up here.\r\n\r\n", "markup": "markdown", "html": "<p>This pull request enables the C++11 support. There is an issue with GTEST when using <code>EXPECT_TRUE</code> or <code>ASSERT_TRUE</code> and we pass a shared pointer as an argument. The boost::shared_ptr bool operator is explicit and the compiler does not make an implicit conversion for us when we're using these GTEST macros. </p>\n<p>I would say that the cleanest solution would be to use the bool operator in the form of a <code>static_cast&lt;bool&gt;(mysharedPtr)</code> or <code>bool(mysharedPtr)</code>. However we have lots of lines where we are comparing the shared pointer with NULL. So, for consistency this is the way I chose here to fix the problem.</p>\n<p>There are other ways as redeclare <code>ASSERT_TRUE</code> with a different name and wrap it with a new ASSERT_TRUE but not sure if it's worth it.</p>\n<p>Answering @<em>jrivero</em> here: This will force the users in Ubuntu Precise to download a modern version of gcc in order to compile Gazebo. We were discussing this issue a few days ago in person but we can follow up here.</p>", "type": "rendered"}, "source": {"commit": {"hash": "e594ac5a353f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/e594ac5a353f.json"}, "html": {"href": "#!/osrf/gazebo/commits/e594ac5a353f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "cpp11_default"}}, "comment_count": 5, "state": "DECLINED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2014-11-21T00:11:28.067166+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}}, {"role": "PARTICIPANT", "participated_on": "2014-11-20T03:40:11.356505+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2014-11-20T17:45:23.557104+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "We need to do more research before committing to C++11 to make sure that we won't have problems in the future. ", "updated_on": "2014-11-24T21:12:46.280334+00:00", "author": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "merge_commit": null, "closed_by": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}