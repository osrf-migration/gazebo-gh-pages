{"rendered": {"reason": {"raw": "Will be re-opened later.", "markup": "markdown", "html": "<p>Will be re-opened later.</p>", "type": "rendered"}, "description": {"raw": "This pull request updates the DART interface for DART 5.0. Major code changes were made in the part of Model assembling.\r\n\r\nIn DART 5.0, links (dart::BodyNode) and joints cannot be created individually. [It should be created through its Model (dart::Skeleton) in the order of tree spanning like BFS or DFS](https://github.com/dartsim/dart/pull/369). Gazebo however allows to create links and joints individually by parsing a SDF file in serial order using Model::Load(), and it doesn't guarantee that links and joints are parsed in the tree spanning order. That being said, the complete list of links and joints are required to build a dart::Skeleton. \r\n\r\n[It seems Model::Load() doesn't parse the joints under some condition](#!/osrf/gazebo/src/04c8460a5b855f9719c0cc306adf43f79064ed6a/gazebo/physics/Model.cc?at=default#Model.cc-92) so I put the model assembling code in DARTModel::Init(). After that, I found an issue that some code attempts to access member functions of Link and Joint in Model::Load() when DART objects are not created because Model::Init() is not called yet. I think they shouldn't be called before Joint and Link are initialized but I leave it since it looks out of scope of this PR.\r\n\r\nI used caching method to resolve this issue. If a setter function is called before it's ready to be called then it caches the value or the function call itself (to avoid copy-and-paste the logic that used in the setter function), and returns when the corresponding getter function is called. This caching method doesn't work well for all the kind of setter/getter functions because many of them doesn't have one-to-one relationship (e.g., Joint::setAxis() and Joint::setGlobalAxis()), but this is the best solution I can think as of now. Please let me know if there is better idea.\r\n\r\nAlso, this PR partially fixes [DARTScrewJoint issue](#!/osrf/gazebo/issues/1096/dartscrewjoint-has-some-test-failures) by converting different definitions of thread pitch between Gazebo and DART.\r\n\r\nI'm targeting this PR to gazebo6 since I believe this doesn't break API/ABI compatibility, but please let me know this should target to default.", "markup": "markdown", "html": "<p>This pull request updates the DART interface for DART 5.0. Major code changes were made in the part of Model assembling.</p>\n<p>In DART 5.0, links (dart::BodyNode) and joints cannot be created individually. <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/pull/369\" rel=\"nofollow\">It should be created through its Model (dart::Skeleton) in the order of tree spanning like BFS or DFS</a>. Gazebo however allows to create links and joints individually by parsing a SDF file in serial order using Model::Load(), and it doesn't guarantee that links and joints are parsed in the tree spanning order. That being said, the complete list of links and joints are required to build a dart::Skeleton. </p>\n<p><a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/04c8460a5b855f9719c0cc306adf43f79064ed6a/gazebo/physics/Model.cc?at=default#Model.cc-92\" rel=\"nofollow\">It seems Model::Load() doesn't parse the joints under some condition</a> so I put the model assembling code in DARTModel::Init(). After that, I found an issue that some code attempts to access member functions of Link and Joint in Model::Load() when DART objects are not created because Model::Init() is not called yet. I think they shouldn't be called before Joint and Link are initialized but I leave it since it looks out of scope of this PR.</p>\n<p>I used caching method to resolve this issue. If a setter function is called before it's ready to be called then it caches the value or the function call itself (to avoid copy-and-paste the logic that used in the setter function), and returns when the corresponding getter function is called. This caching method doesn't work well for all the kind of setter/getter functions because many of them doesn't have one-to-one relationship (e.g., Joint::setAxis() and Joint::setGlobalAxis()), but this is the best solution I can think as of now. Please let me know if there is better idea.</p>\n<p>Also, this PR partially fixes <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issues/1096/dartscrewjoint-has-some-test-failures\" rel=\"nofollow\">DARTScrewJoint issue</a> by converting different definitions of thread pitch between Gazebo and DART.</p>\n<p>I'm targeting this PR to gazebo6 since I believe this doesn't break API/ABI compatibility, but please let me know this should target to default.</p>", "type": "rendered"}, "title": {"raw": "DART interface update for DART 5.0", "markup": "markdown", "html": "<p>DART interface update for DART 5.0</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request updates the DART interface for DART 5.0. Major code changes were made in the part of Model assembling.\r\n\r\nIn DART 5.0, links (dart::BodyNode) and joints cannot be created individually. [It should be created through its Model (dart::Skeleton) in the order of tree spanning like BFS or DFS](https://github.com/dartsim/dart/pull/369). Gazebo however allows to create links and joints individually by parsing a SDF file in serial order using Model::Load(), and it doesn't guarantee that links and joints are parsed in the tree spanning order. That being said, the complete list of links and joints are required to build a dart::Skeleton. \r\n\r\n[It seems Model::Load() doesn't parse the joints under some condition](#!/osrf/gazebo/src/04c8460a5b855f9719c0cc306adf43f79064ed6a/gazebo/physics/Model.cc?at=default#Model.cc-92) so I put the model assembling code in DARTModel::Init(). After that, I found an issue that some code attempts to access member functions of Link and Joint in Model::Load() when DART objects are not created because Model::Init() is not called yet. I think they shouldn't be called before Joint and Link are initialized but I leave it since it looks out of scope of this PR.\r\n\r\nI used caching method to resolve this issue. If a setter function is called before it's ready to be called then it caches the value or the function call itself (to avoid copy-and-paste the logic that used in the setter function), and returns when the corresponding getter function is called. This caching method doesn't work well for all the kind of setter/getter functions because many of them doesn't have one-to-one relationship (e.g., Joint::setAxis() and Joint::setGlobalAxis()), but this is the best solution I can think as of now. Please let me know if there is better idea.\r\n\r\nAlso, this PR partially fixes [DARTScrewJoint issue](#!/osrf/gazebo/issues/1096/dartscrewjoint-has-some-test-failures) by converting different definitions of thread pitch between Gazebo and DART.\r\n\r\nI'm targeting this PR to gazebo6 since I believe this doesn't break API/ABI compatibility, but please let me know this should target to default.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1825/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/jlee02/gazebo_dart:4ed9b4ee3d3a%0D208f4dbe7eff?from_pullrequest_id=1825"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/1825/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/1825.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/1825/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1825/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1825"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/1825/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/jlee02/gazebo_dart:4ed9b4ee3d3a%0D208f4dbe7eff?from_pullrequest_id=1825"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1825/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/1825/statuses_page=1.json"}}, "title": "DART interface update for DART 5.0", "close_source_branch": false, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}], "id": 1825, "destination": {"commit": {"hash": "208f4dbe7eff", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/208f4dbe7eff.json"}, "html": {"href": "#!/osrf/gazebo/commits/208f4dbe7eff"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2015-07-24T14:47:05.787474+00:00", "summary": {"raw": "This pull request updates the DART interface for DART 5.0. Major code changes were made in the part of Model assembling.\r\n\r\nIn DART 5.0, links (dart::BodyNode) and joints cannot be created individually. [It should be created through its Model (dart::Skeleton) in the order of tree spanning like BFS or DFS](https://github.com/dartsim/dart/pull/369). Gazebo however allows to create links and joints individually by parsing a SDF file in serial order using Model::Load(), and it doesn't guarantee that links and joints are parsed in the tree spanning order. That being said, the complete list of links and joints are required to build a dart::Skeleton. \r\n\r\n[It seems Model::Load() doesn't parse the joints under some condition](#!/osrf/gazebo/src/04c8460a5b855f9719c0cc306adf43f79064ed6a/gazebo/physics/Model.cc?at=default#Model.cc-92) so I put the model assembling code in DARTModel::Init(). After that, I found an issue that some code attempts to access member functions of Link and Joint in Model::Load() when DART objects are not created because Model::Init() is not called yet. I think they shouldn't be called before Joint and Link are initialized but I leave it since it looks out of scope of this PR.\r\n\r\nI used caching method to resolve this issue. If a setter function is called before it's ready to be called then it caches the value or the function call itself (to avoid copy-and-paste the logic that used in the setter function), and returns when the corresponding getter function is called. This caching method doesn't work well for all the kind of setter/getter functions because many of them doesn't have one-to-one relationship (e.g., Joint::setAxis() and Joint::setGlobalAxis()), but this is the best solution I can think as of now. Please let me know if there is better idea.\r\n\r\nAlso, this PR partially fixes [DARTScrewJoint issue](#!/osrf/gazebo/issues/1096/dartscrewjoint-has-some-test-failures) by converting different definitions of thread pitch between Gazebo and DART.\r\n\r\nI'm targeting this PR to gazebo6 since I believe this doesn't break API/ABI compatibility, but please let me know this should target to default.", "markup": "markdown", "html": "<p>This pull request updates the DART interface for DART 5.0. Major code changes were made in the part of Model assembling.</p>\n<p>In DART 5.0, links (dart::BodyNode) and joints cannot be created individually. <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/pull/369\" rel=\"nofollow\">It should be created through its Model (dart::Skeleton) in the order of tree spanning like BFS or DFS</a>. Gazebo however allows to create links and joints individually by parsing a SDF file in serial order using Model::Load(), and it doesn't guarantee that links and joints are parsed in the tree spanning order. That being said, the complete list of links and joints are required to build a dart::Skeleton. </p>\n<p><a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/04c8460a5b855f9719c0cc306adf43f79064ed6a/gazebo/physics/Model.cc?at=default#Model.cc-92\" rel=\"nofollow\">It seems Model::Load() doesn't parse the joints under some condition</a> so I put the model assembling code in DARTModel::Init(). After that, I found an issue that some code attempts to access member functions of Link and Joint in Model::Load() when DART objects are not created because Model::Init() is not called yet. I think they shouldn't be called before Joint and Link are initialized but I leave it since it looks out of scope of this PR.</p>\n<p>I used caching method to resolve this issue. If a setter function is called before it's ready to be called then it caches the value or the function call itself (to avoid copy-and-paste the logic that used in the setter function), and returns when the corresponding getter function is called. This caching method doesn't work well for all the kind of setter/getter functions because many of them doesn't have one-to-one relationship (e.g., Joint::setAxis() and Joint::setGlobalAxis()), but this is the best solution I can think as of now. Please let me know if there is better idea.</p>\n<p>Also, this PR partially fixes <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issues/1096/dartscrewjoint-has-some-test-failures\" rel=\"nofollow\">DARTScrewJoint issue</a> by converting different definitions of thread pitch between Gazebo and DART.</p>\n<p>I'm targeting this PR to gazebo6 since I believe this doesn't break API/ABI compatibility, but please let me know this should target to default.</p>", "type": "rendered"}, "source": {"commit": {"hash": "4ed9b4ee3d3a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jlee02/gazebo_dart/commit/4ed9b4ee3d3a"}, "html": {"href": "https://bitbucket.org/jlee02/gazebo_dart/commits/4ed9b4ee3d3a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/jlee02/gazebo_dart"}, "html": {"href": "https://bitbucket.org/jlee02/gazebo_dart"}, "avatar": {"href": "data/bytebucket.org/ravatar/{3c031c73-40f7-4d2a-aecf-c6876e22ed39}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_dart", "full_name": "jlee02/gazebo_dart", "uuid": "{3c031c73-40f7-4d2a-aecf-c6876e22ed39}"}, "branch": {"name": "dart5"}}, "comment_count": 27, "state": "DECLINED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2015-07-29T01:33:23.988792+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}}, {"role": "PARTICIPANT", "participated_on": "2016-03-14T16:35:15.067551+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jeongseok Lee", "uuid": "{3907b560-aed7-43bd-bfa9-fd9873322291}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D"}, "html": {"href": "https://bitbucket.org/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/242819b368397b2b4cddf273b2ba9bf8d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJL-0.png"}}, "nickname": "jlee02", "type": "user", "account_id": "557058:e3fbdece-a1d8-4fb6-a9f1-236ecb09bd9d"}}, {"role": "PARTICIPANT", "participated_on": "2016-03-11T23:01:16.903879+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nicolae Rosia", "uuid": "{47441263-bb15-495f-b324-58a1e3c7b35f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B47441263-bb15-495f-b324-58a1e3c7b35f%7D"}, "html": {"href": "https://bitbucket.org/%7B47441263-bb15-495f-b324-58a1e3c7b35f%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1b61ff7ec618b3e8743b8ab9743e4108d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsNR-6.png"}}, "nickname": "nicolaerosia", "type": "user", "account_id": "557058:2ea02a3a-4b8d-4620-8154-81f2eb2f71af"}}, {"role": "REVIEWER", "participated_on": "2016-03-14T16:31:58.289719+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": "2016-01-10T03:00:57.050983+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2015-08-27T18:30:41.288255+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2015-09-15T15:15:13.550979+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "Will be re-opened later.", "updated_on": "2016-03-14T16:38:07.082562+00:00", "author": {"display_name": "Jeongseok Lee", "uuid": "{3907b560-aed7-43bd-bfa9-fd9873322291}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D"}, "html": {"href": "https://bitbucket.org/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/242819b368397b2b4cddf273b2ba9bf8d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJL-0.png"}}, "nickname": "jlee02", "type": "user", "account_id": "557058:e3fbdece-a1d8-4fb6-a9f1-236ecb09bd9d"}, "merge_commit": null, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}