{"rendered": {"description": {"raw": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "markup": "markdown", "html": "<p>I noticed a race condition in some of my overnight testing. It usually occurs with <code>UNIT_gz_TEST</code> and gives the following console output:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span><span class=\"o\">----------</span><span class=\"cp\">]</span> <span class=\"nt\">9</span> <span class=\"nt\">tests</span> <span class=\"nt\">from</span> <span class=\"nt\">gzTest</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span> <span class=\"nx\">RUN</span>      <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Alive</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span>       <span class=\"nx\">OK</span> <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Alive</span> <span class=\"o\">(</span><span class=\"nt\">1094</span> <span class=\"nt\">ms</span><span class=\"o\">)</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span> <span class=\"nx\">RUN</span>      <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Joint</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"nt\">AL</span> <span class=\"nt\">lib</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"nt\">WW</span><span class=\"o\">)</span> <span class=\"nt\">alc_initconfig</span><span class=\"o\">:</span> <span class=\"nt\">Failed</span> <span class=\"nt\">to</span> <span class=\"nt\">initialize</span> <span class=\"nt\">backend</span> <span class=\"s2\">&quot;pulse&quot;</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span><span class=\"nx\">Msg</span><span class=\"cp\">]</span> <span class=\"nt\">Waiting</span> <span class=\"nt\">for</span> <span class=\"nt\">master</span><span class=\"o\">.</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span><span class=\"nx\">Msg</span><span class=\"cp\">]</span> <span class=\"nt\">Connected</span> <span class=\"nt\">to</span> <span class=\"nt\">gazebo</span> <span class=\"nt\">master</span> <span class=\"o\">@</span> <span class=\"nt\">http</span><span class=\"o\">://</span><span class=\"nt\">127</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"p\">.</span><span class=\"nc\">1</span><span class=\"p\">:</span><span class=\"nd\">11345</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span><span class=\"nx\">Msg</span><span class=\"cp\">]</span> <span class=\"nt\">Publicized</span> <span class=\"nt\">address</span><span class=\"o\">:</span> <span class=\"nt\">172</span><span class=\"p\">.</span><span class=\"nc\">23</span><span class=\"p\">.</span><span class=\"nc\">2</span><span class=\"p\">.</span><span class=\"nc\">93</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span>       <span class=\"nx\">OK</span> <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Joint</span> <span class=\"o\">(</span><span class=\"nt\">3913</span> <span class=\"nt\">ms</span><span class=\"o\">)</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span> <span class=\"nx\">RUN</span>      <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Model</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"nt\">AL</span> <span class=\"nt\">lib</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"nt\">WW</span><span class=\"o\">)</span> <span class=\"nt\">alc_initconfig</span><span class=\"o\">:</span> <span class=\"nt\">Failed</span> <span class=\"nt\">to</span> <span class=\"nt\">initialize</span> <span class=\"nt\">backend</span> <span class=\"s2\">&quot;pulse&quot;</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"nt\">gzserver</span><span class=\"o\">:</span> <span class=\"o\">/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">include</span><span class=\"o\">/</span><span class=\"nt\">boost</span><span class=\"o\">/</span><span class=\"nt\">smart_ptr</span><span class=\"o\">/</span><span class=\"nt\">shared_ptr</span><span class=\"p\">.</span><span class=\"nc\">hpp</span><span class=\"p\">:</span><span class=\"nd\">648</span><span class=\"o\">:</span>\n <span class=\"nt\">typename</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">detail</span><span class=\"p\">::</span><span class=\"nd\">sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">type</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">operator-</span><span class=\"o\">&gt;()</span> <span class=\"nt\">const</span>\n <span class=\"cp\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Connection</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span>\n <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Connection</span><span class=\"o\">*</span><span class=\"cp\">]</span><span class=\"o\">:</span> <span class=\"nt\">Assertion</span> <span class=\"err\">`</span><span class=\"nt\">px</span> <span class=\"o\">!=</span> <span class=\"nt\">0</span><span class=\"err\">&#39;</span> <span class=\"nt\">failed</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>The <code>gzserver</code> instance started by that test generates a coredump with a backtrace containing the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">Core</span> <span class=\"nt\">was</span> <span class=\"nt\">generated</span> <span class=\"nt\">by</span> <span class=\"err\">`</span><span class=\"nt\">gzserver</span> <span class=\"nt\">test</span><span class=\"o\">/</span><span class=\"nt\">worlds</span><span class=\"o\">/</span><span class=\"nt\">simple_</span><span class=\"err\">&#39;</span><span class=\"o\">.</span>\n<span class=\"nt\">Program</span> <span class=\"nt\">terminated</span> <span class=\"nt\">with</span> <span class=\"nt\">signal</span> <span class=\"nt\">SIGABRT</span><span class=\"o\">,</span> <span class=\"nt\">Aborted</span><span class=\"o\">.</span>\n<span class=\"p\">#</span><span class=\"nn\">0</span>  <span class=\"nt\">0x00007f3509c33428</span> <span class=\"nt\">in</span> <span class=\"nt\">__GI_raise</span> <span class=\"o\">(</span><span class=\"nt\">sig</span><span class=\"o\">=</span><span class=\"nt\">sig</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">6</span><span class=\"o\">)</span> <span class=\"nt\">at</span> <span class=\"o\">../</span><span class=\"nt\">sysdeps</span><span class=\"o\">/</span><span class=\"nt\">unix</span><span class=\"o\">/</span><span class=\"nt\">sysv</span><span class=\"o\">/</span><span class=\"nt\">linux</span><span class=\"o\">/</span><span class=\"nt\">raise</span><span class=\"p\">.</span><span class=\"nc\">c</span><span class=\"p\">:</span><span class=\"nd\">54</span>\n<span class=\"cp\">[</span><span class=\"nx\">Current</span> <span class=\"k\">thread</span> <span class=\"nx\">is</span> <span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"k\">Thread</span> <span class=\"mh\">0x7f34d410e700</span> <span class=\"p\">(</span><span class=\"nx\">LWP</span> <span class=\"mi\">14322</span><span class=\"p\">))</span><span class=\"cp\">]</span>\n<span class=\"p\">#</span><span class=\"nn\">0</span>  <span class=\"nt\">0x00007f3509c33428</span> <span class=\"nt\">in</span> <span class=\"nt\">__GI_raise</span> <span class=\"o\">(</span><span class=\"nt\">sig</span><span class=\"o\">=</span><span class=\"nt\">sig</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">6</span><span class=\"o\">)</span> <span class=\"nt\">at</span> <span class=\"o\">../</span><span class=\"nt\">sysdeps</span><span class=\"o\">/</span><span class=\"nt\">unix</span><span class=\"o\">/</span><span class=\"nt\">sysv</span><span class=\"o\">/</span><span class=\"nt\">linux</span><span class=\"o\">/</span><span class=\"nt\">raise</span><span class=\"p\">.</span><span class=\"nc\">c</span><span class=\"p\">:</span><span class=\"nd\">54</span>\n<span class=\"p\">#</span><span class=\"nn\">1</span>  <span class=\"nt\">0x00007f3509c3502a</span> <span class=\"nt\">in</span> <span class=\"nt\">__GI_abort</span> <span class=\"o\">()</span> <span class=\"nt\">at</span> <span class=\"nt\">abort</span><span class=\"p\">.</span><span class=\"nc\">c</span><span class=\"p\">:</span><span class=\"nd\">89</span>\n<span class=\"p\">#</span><span class=\"nn\">2</span>  <span class=\"nt\">0x00007f3509c2bbd7</span> <span class=\"nt\">in</span> <span class=\"nt\">__assert_fail_base</span> <span class=\"o\">(</span><span class=\"nt\">fmt</span><span class=\"o\">=&lt;</span><span class=\"nt\">optimized</span> <span class=\"nt\">out</span><span class=\"o\">&gt;,</span> <span class=\"nt\">assertion</span><span class=\"o\">=</span><span class=\"nt\">assertion</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">0x7f350b501395</span> <span class=\"s2\">&quot;px != 0&quot;</span><span class=\"o\">,</span> <span class=\"nt\">file</span><span class=\"o\">=</span><span class=\"nt\">file</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">0x7f350b501bc8</span> <span class=\"s2\">&quot;/usr/include/boost/smart_ptr/shared_ptr.hpp&quot;</span><span class=\"o\">,</span> <span class=\"nt\">line</span><span class=\"o\">=</span><span class=\"nt\">line</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">648</span><span class=\"o\">,</span> <span class=\"nt\">function</span><span class=\"o\">=</span><span class=\"nt\">function</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">0x7f350b505040</span> <span class=\"o\">&lt;</span><span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">transport</span><span class=\"p\">::</span><span class=\"nd\">Connection</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">operator-</span><span class=\"o\">&gt;()</span> <span class=\"nt\">const</span><span class=\"p\">::</span><span class=\"nd\">__PRETTY_FUNCTION__</span><span class=\"o\">&gt;</span> <span class=\"err\">&quot;</span><span class=\"nt\">typename</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">detail</span><span class=\"p\">::</span><span class=\"nd\">sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">type</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">operator-</span><span class=\"o\">&gt;()</span> <span class=\"nt\">const</span> <span class=\"cp\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Connection</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transpor</span><span class=\"s2\">&quot;...) at assert.c:92</span>\n<span class=\"s2\">#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 &quot;</span><span class=\"nx\">px</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"s2\">&quot;, file=file@entry=0x7f350b501bc8 &quot;</span><span class=\"p\">/</span><span class=\"nx\">usr</span><span class=\"p\">/</span><span class=\"nb\">include</span><span class=\"p\">/</span><span class=\"nx\">boost</span><span class=\"p\">/</span><span class=\"nx\">smart_ptr</span><span class=\"p\">/</span><span class=\"nx\">shared_ptr.hpp</span><span class=\"s2\">&quot;, line=line@entry=648, function=function@entry=0x7f350b505040 &lt;boost::shared_ptr&lt;gazebo::transport::Connection&gt;::operator-&gt;() const::__PRETTY_FUNCTION__&gt; &quot;</span><span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"nx\">boost</span><span class=\"nl\">::shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::operator</span><span class=\"o\">-&gt;</span><span class=\"p\">()</span> <span class=\"nx\">const</span> <span class=\"err\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Connection</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transpor</span><span class=\"s2\">&quot;...) at assert.c:101</span>\n<span class=\"s2\">#4  0x00007f350b4f5903 in boost::shared_ptr&lt;gazebo::transport::Connection&gt;::operator-&gt; (this=&lt;optimized out&gt;) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648</span>\n<span class=\"s2\">#5  0x00007f350b4f904f in boost::shared_ptr&lt;gazebo::transport::Connection&gt;::operator-&gt; (this=&lt;optimized out&gt;) at gazebo/Master.cc:339</span>\n<span class=\"s2\">#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196</span>\n<span class=\"s2\">#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409</span>\n<span class=\"s2\">#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387</span>\n<span class=\"s2\">#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6</span>\n<span class=\"s2\">#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333</span>\n<span class=\"s2\">#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109</span>\n</pre></div>\n\n\n<p>I believe this happens when a connection is deleted between the two map index calls into <code>this-&gt;dataPtr-&gt;connections</code> in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.</p>\n<p>It's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.</p>\n<p>Update: I've added fixes for some compiler warnings on bionic in <a href=\"#!/osrf/gazebo/commits/1e0702a\" rel=\"nofollow\" class=\"ap-connect-link\">1e0702a</a> and a fix for <code>Publisher::OnPublishComplete</code> that moves the logic into the try block so it will be protected by the mutex (see <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015\" rel=\"nofollow\">discussion</a> on <a href=\"#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #3014</a>).</p>", "type": "rendered"}, "title": {"raw": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete", "markup": "markdown", "html": "<p>Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete</p>", "type": "rendered"}}, "type": "pullrequest", "description": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3103/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:85c8c84608b4%0D4067f42ca38a?from_pullrequest_id=3103"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/3103.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3103/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3103"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:85c8c84608b4%0D4067f42ca38a?from_pullrequest_id=3103"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3103/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/3103/statuses_page=1.json"}}, "title": "Fix race conditions in Master::ProcessMessage and Publisher::OnPublishComplete", "close_source_branch": true, "reviewers": [{"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}], "id": 3103, "destination": {"commit": {"hash": "4067f42ca38a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4067f42ca38a.json"}, "html": {"href": "#!/osrf/gazebo/commits/4067f42ca38a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "created_on": "2019-04-25T00:13:46.960075+00:00", "summary": {"raw": "I noticed a race condition in some of my overnight testing. It usually occurs with `UNIT_gz_TEST` and gives the following console output:\r\n\r\n~~~\r\n341: [----------] 9 tests from gzTest\r\n341: [ RUN      ] gzTest.Alive\r\n341: [       OK ] gzTest.Alive (1094 ms)\r\n341: [ RUN      ] gzTest.Joint\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: [Msg] Waiting for master.\r\n341: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\r\n341: [Msg] Publicized address: 172.23.2.93\r\n341: [       OK ] gzTest.Joint (3913 ms)\r\n341: [ RUN      ] gzTest.Model\r\n341: AL lib: (WW) alc_initconfig: Failed to initialize backend \"pulse\"\r\n341: gzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648:\r\n typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const\r\n [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type\r\n = gazebo::transport::Connection*]: Assertion `px != 0' failed.\r\n~~~\r\n\r\nThe `gzserver` instance started by that test generates a coredump with a backtrace containing the following:\r\n\r\n~~~\r\nCore was generated by `gzserver test/worlds/simple_'.\r\nProgram terminated with signal SIGABRT, Aborted.\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n[Current thread is 1 (Thread 0x7f34d410e700 (LWP 14322))]\r\n#0  0x00007f3509c33428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007f3509c3502a in __GI_abort () at abort.c:89\r\n#2  0x00007f3509c2bbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:92\r\n#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 \"px != 0\", file=file@entry=0x7f350b501bc8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=648, function=function@entry=0x7f350b505040 <boost::shared_ptr<gazebo::transport::Connection>::operator->() const::__PRETTY_FUNCTION__> \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Connection; typename boost::detail::sp_member_access<T>::type = gazebo::transpor\"...) at assert.c:101\r\n#4  0x00007f350b4f5903 in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648\r\n#5  0x00007f350b4f904f in boost::shared_ptr<gazebo::transport::Connection>::operator-> (this=<optimized out>) at gazebo/Master.cc:339\r\n#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196\r\n#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409\r\n#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387\r\n#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333\r\n#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109\r\n~~~\r\n\r\nI believe this happens when a connection is deleted between the two map index calls into `this->dataPtr->connections` in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.\r\n\r\nIt's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.\r\n\r\nUpdate: I've added fixes for some compiler warnings on bionic in 1e0702a and a fix for `Publisher::OnPublishComplete` that moves the logic into the try block so it will be protected by the mutex (see [discussion](#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015) on pull request #3014).", "markup": "markdown", "html": "<p>I noticed a race condition in some of my overnight testing. It usually occurs with <code>UNIT_gz_TEST</code> and gives the following console output:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span><span class=\"o\">----------</span><span class=\"cp\">]</span> <span class=\"nt\">9</span> <span class=\"nt\">tests</span> <span class=\"nt\">from</span> <span class=\"nt\">gzTest</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span> <span class=\"nx\">RUN</span>      <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Alive</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span>       <span class=\"nx\">OK</span> <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Alive</span> <span class=\"o\">(</span><span class=\"nt\">1094</span> <span class=\"nt\">ms</span><span class=\"o\">)</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span> <span class=\"nx\">RUN</span>      <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Joint</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"nt\">AL</span> <span class=\"nt\">lib</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"nt\">WW</span><span class=\"o\">)</span> <span class=\"nt\">alc_initconfig</span><span class=\"o\">:</span> <span class=\"nt\">Failed</span> <span class=\"nt\">to</span> <span class=\"nt\">initialize</span> <span class=\"nt\">backend</span> <span class=\"s2\">&quot;pulse&quot;</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span><span class=\"nx\">Msg</span><span class=\"cp\">]</span> <span class=\"nt\">Waiting</span> <span class=\"nt\">for</span> <span class=\"nt\">master</span><span class=\"o\">.</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span><span class=\"nx\">Msg</span><span class=\"cp\">]</span> <span class=\"nt\">Connected</span> <span class=\"nt\">to</span> <span class=\"nt\">gazebo</span> <span class=\"nt\">master</span> <span class=\"o\">@</span> <span class=\"nt\">http</span><span class=\"o\">://</span><span class=\"nt\">127</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"p\">.</span><span class=\"nc\">1</span><span class=\"p\">:</span><span class=\"nd\">11345</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span><span class=\"nx\">Msg</span><span class=\"cp\">]</span> <span class=\"nt\">Publicized</span> <span class=\"nt\">address</span><span class=\"o\">:</span> <span class=\"nt\">172</span><span class=\"p\">.</span><span class=\"nc\">23</span><span class=\"p\">.</span><span class=\"nc\">2</span><span class=\"p\">.</span><span class=\"nc\">93</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span>       <span class=\"nx\">OK</span> <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Joint</span> <span class=\"o\">(</span><span class=\"nt\">3913</span> <span class=\"nt\">ms</span><span class=\"o\">)</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"cp\">[</span> <span class=\"nx\">RUN</span>      <span class=\"cp\">]</span> <span class=\"nt\">gzTest</span><span class=\"p\">.</span><span class=\"nc\">Model</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"nt\">AL</span> <span class=\"nt\">lib</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"nt\">WW</span><span class=\"o\">)</span> <span class=\"nt\">alc_initconfig</span><span class=\"o\">:</span> <span class=\"nt\">Failed</span> <span class=\"nt\">to</span> <span class=\"nt\">initialize</span> <span class=\"nt\">backend</span> <span class=\"s2\">&quot;pulse&quot;</span>\n<span class=\"nt\">341</span><span class=\"o\">:</span> <span class=\"nt\">gzserver</span><span class=\"o\">:</span> <span class=\"o\">/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">include</span><span class=\"o\">/</span><span class=\"nt\">boost</span><span class=\"o\">/</span><span class=\"nt\">smart_ptr</span><span class=\"o\">/</span><span class=\"nt\">shared_ptr</span><span class=\"p\">.</span><span class=\"nc\">hpp</span><span class=\"p\">:</span><span class=\"nd\">648</span><span class=\"o\">:</span>\n <span class=\"nt\">typename</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">detail</span><span class=\"p\">::</span><span class=\"nd\">sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">type</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">operator-</span><span class=\"o\">&gt;()</span> <span class=\"nt\">const</span>\n <span class=\"cp\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Connection</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span>\n <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Connection</span><span class=\"o\">*</span><span class=\"cp\">]</span><span class=\"o\">:</span> <span class=\"nt\">Assertion</span> <span class=\"err\">`</span><span class=\"nt\">px</span> <span class=\"o\">!=</span> <span class=\"nt\">0</span><span class=\"err\">&#39;</span> <span class=\"nt\">failed</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>The <code>gzserver</code> instance started by that test generates a coredump with a backtrace containing the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">Core</span> <span class=\"nt\">was</span> <span class=\"nt\">generated</span> <span class=\"nt\">by</span> <span class=\"err\">`</span><span class=\"nt\">gzserver</span> <span class=\"nt\">test</span><span class=\"o\">/</span><span class=\"nt\">worlds</span><span class=\"o\">/</span><span class=\"nt\">simple_</span><span class=\"err\">&#39;</span><span class=\"o\">.</span>\n<span class=\"nt\">Program</span> <span class=\"nt\">terminated</span> <span class=\"nt\">with</span> <span class=\"nt\">signal</span> <span class=\"nt\">SIGABRT</span><span class=\"o\">,</span> <span class=\"nt\">Aborted</span><span class=\"o\">.</span>\n<span class=\"p\">#</span><span class=\"nn\">0</span>  <span class=\"nt\">0x00007f3509c33428</span> <span class=\"nt\">in</span> <span class=\"nt\">__GI_raise</span> <span class=\"o\">(</span><span class=\"nt\">sig</span><span class=\"o\">=</span><span class=\"nt\">sig</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">6</span><span class=\"o\">)</span> <span class=\"nt\">at</span> <span class=\"o\">../</span><span class=\"nt\">sysdeps</span><span class=\"o\">/</span><span class=\"nt\">unix</span><span class=\"o\">/</span><span class=\"nt\">sysv</span><span class=\"o\">/</span><span class=\"nt\">linux</span><span class=\"o\">/</span><span class=\"nt\">raise</span><span class=\"p\">.</span><span class=\"nc\">c</span><span class=\"p\">:</span><span class=\"nd\">54</span>\n<span class=\"cp\">[</span><span class=\"nx\">Current</span> <span class=\"k\">thread</span> <span class=\"nx\">is</span> <span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"k\">Thread</span> <span class=\"mh\">0x7f34d410e700</span> <span class=\"p\">(</span><span class=\"nx\">LWP</span> <span class=\"mi\">14322</span><span class=\"p\">))</span><span class=\"cp\">]</span>\n<span class=\"p\">#</span><span class=\"nn\">0</span>  <span class=\"nt\">0x00007f3509c33428</span> <span class=\"nt\">in</span> <span class=\"nt\">__GI_raise</span> <span class=\"o\">(</span><span class=\"nt\">sig</span><span class=\"o\">=</span><span class=\"nt\">sig</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">6</span><span class=\"o\">)</span> <span class=\"nt\">at</span> <span class=\"o\">../</span><span class=\"nt\">sysdeps</span><span class=\"o\">/</span><span class=\"nt\">unix</span><span class=\"o\">/</span><span class=\"nt\">sysv</span><span class=\"o\">/</span><span class=\"nt\">linux</span><span class=\"o\">/</span><span class=\"nt\">raise</span><span class=\"p\">.</span><span class=\"nc\">c</span><span class=\"p\">:</span><span class=\"nd\">54</span>\n<span class=\"p\">#</span><span class=\"nn\">1</span>  <span class=\"nt\">0x00007f3509c3502a</span> <span class=\"nt\">in</span> <span class=\"nt\">__GI_abort</span> <span class=\"o\">()</span> <span class=\"nt\">at</span> <span class=\"nt\">abort</span><span class=\"p\">.</span><span class=\"nc\">c</span><span class=\"p\">:</span><span class=\"nd\">89</span>\n<span class=\"p\">#</span><span class=\"nn\">2</span>  <span class=\"nt\">0x00007f3509c2bbd7</span> <span class=\"nt\">in</span> <span class=\"nt\">__assert_fail_base</span> <span class=\"o\">(</span><span class=\"nt\">fmt</span><span class=\"o\">=&lt;</span><span class=\"nt\">optimized</span> <span class=\"nt\">out</span><span class=\"o\">&gt;,</span> <span class=\"nt\">assertion</span><span class=\"o\">=</span><span class=\"nt\">assertion</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">0x7f350b501395</span> <span class=\"s2\">&quot;px != 0&quot;</span><span class=\"o\">,</span> <span class=\"nt\">file</span><span class=\"o\">=</span><span class=\"nt\">file</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">0x7f350b501bc8</span> <span class=\"s2\">&quot;/usr/include/boost/smart_ptr/shared_ptr.hpp&quot;</span><span class=\"o\">,</span> <span class=\"nt\">line</span><span class=\"o\">=</span><span class=\"nt\">line</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">648</span><span class=\"o\">,</span> <span class=\"nt\">function</span><span class=\"o\">=</span><span class=\"nt\">function</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">0x7f350b505040</span> <span class=\"o\">&lt;</span><span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">transport</span><span class=\"p\">::</span><span class=\"nd\">Connection</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">operator-</span><span class=\"o\">&gt;()</span> <span class=\"nt\">const</span><span class=\"p\">::</span><span class=\"nd\">__PRETTY_FUNCTION__</span><span class=\"o\">&gt;</span> <span class=\"err\">&quot;</span><span class=\"nt\">typename</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">detail</span><span class=\"p\">::</span><span class=\"nd\">sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">type</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">operator-</span><span class=\"o\">&gt;()</span> <span class=\"nt\">const</span> <span class=\"cp\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Connection</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transpor</span><span class=\"s2\">&quot;...) at assert.c:92</span>\n<span class=\"s2\">#3  0x00007f3509c2bc82 in __GI___assert_fail (assertion=assertion@entry=0x7f350b501395 &quot;</span><span class=\"nx\">px</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"s2\">&quot;, file=file@entry=0x7f350b501bc8 &quot;</span><span class=\"p\">/</span><span class=\"nx\">usr</span><span class=\"p\">/</span><span class=\"nb\">include</span><span class=\"p\">/</span><span class=\"nx\">boost</span><span class=\"p\">/</span><span class=\"nx\">smart_ptr</span><span class=\"p\">/</span><span class=\"nx\">shared_ptr.hpp</span><span class=\"s2\">&quot;, line=line@entry=648, function=function@entry=0x7f350b505040 &lt;boost::shared_ptr&lt;gazebo::transport::Connection&gt;::operator-&gt;() const::__PRETTY_FUNCTION__&gt; &quot;</span><span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"nx\">boost</span><span class=\"nl\">::shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::operator</span><span class=\"o\">-&gt;</span><span class=\"p\">()</span> <span class=\"nx\">const</span> <span class=\"err\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Connection</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transpor</span><span class=\"s2\">&quot;...) at assert.c:101</span>\n<span class=\"s2\">#4  0x00007f350b4f5903 in boost::shared_ptr&lt;gazebo::transport::Connection&gt;::operator-&gt; (this=&lt;optimized out&gt;) at /usr/include/boost/smart_ptr/shared_ptr.hpp:648</span>\n<span class=\"s2\">#5  0x00007f350b4f904f in boost::shared_ptr&lt;gazebo::transport::Connection&gt;::operator-&gt; (this=&lt;optimized out&gt;) at gazebo/Master.cc:339</span>\n<span class=\"s2\">#6  gazebo::Master::ProcessMessage (this=this@entry=0xdd8860, _connectionIndex=3, _data=...) at gazebo/Master.cc:196</span>\n<span class=\"s2\">#7  0x00007f350b4f980f in gazebo::Master::RunOnce (this=0xdd8860) at gazebo/Master.cc:409</span>\n<span class=\"s2\">#8  0x00007f350b4f99a8 in gazebo::Master::Run (this=0xdd8860) at gazebo/Master.cc:387</span>\n<span class=\"s2\">#9  0x00007f350a296c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6</span>\n<span class=\"s2\">#10 0x00007f35097026ba in start_thread (arg=0x7f34d410e700) at pthread_create.c:333</span>\n<span class=\"s2\">#11 0x00007f3509d0541d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109</span>\n</pre></div>\n\n\n<p>I believe this happens when a connection is deleted between the two map index calls into <code>this-&gt;dataPtr-&gt;connections</code> in the if statement. My proposed workaround is to move the shared pointer local variable first so it will keep the memory consistent.</p>\n<p>It's a race condition, so it can be hard to reproduce this error to confirm this fix, but I think the code change makes sense.</p>\n<p>Update: I've added fixes for some compiler warnings on bionic in <a href=\"#!/osrf/gazebo/commits/1e0702a\" rel=\"nofollow\" class=\"ap-connect-link\">1e0702a</a> and a fix for <code>Publisher::OnPublishComplete</code> that moves the logic into the try block so it will be protected by the mutex (see <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed/diff#comment-100189015\" rel=\"nofollow\">discussion</a> on <a href=\"#!/osrf/gazebo/pull-requests/3014/wip-address-gzserver-shutdown-speed\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #3014</a>).</p>", "type": "rendered"}, "source": {"commit": {"hash": "4d22b30c29cd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4d22b30c29cd.json"}, "html": {"href": "#!/osrf/gazebo/commits/4d22b30c29cd"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "master_ProcessMessage_race"}}, "comment_count": 7, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-06-26T00:41:56.187844+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": "2019-05-14T20:17:42.020181+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "REVIEWER", "participated_on": "2019-06-26T00:34:20.902833+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2019-06-26T00:47:10.045813+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "85c8c84608b4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/85c8c84608b4.json"}, "html": {"href": "#!/osrf/gazebo/commits/85c8c84608b4"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}