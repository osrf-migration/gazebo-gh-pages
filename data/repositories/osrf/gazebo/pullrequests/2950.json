{"rendered": {"description": {"raw": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](data/bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "markup": "markdown", "html": "<p>This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE <code>slip1</code> and <code>slip2</code> parameters (see Force-dependent slip parameters in <a data-is-external-link=\"true\" href=\"http://ode.org/ode-latest-userguide.html#sec_7_3_7\" rel=\"nofollow\">ODE user guide</a>). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless <code>longitudinal_slip_compliance</code> and <code>lateral_slip_compliance</code> parameters. The <code>slip1</code> and <code>slip2</code> parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a <code>wheel_normal_force</code> parameter supplied to the plugin.</p>\n<p>Here's some ASCII art and documentation pasted from the plugin header file:</p>\n<p>A graphical interpretation of these parameters is provided below\nfor a positive value of slip compliance.\nThe horizontal axis corresponds to the slip ratio at the wheel,\nand the vertical axis corresponds to the tangential force ratio\n(tangential / normal force).\nAs wheel slip increases, the tangential force increases until\nit reaches the maximum set by the friction coefficient.\nThe slip compliance corresponds to the inverse of the slope\nof the force before it reaches the maximum value.\nA slip compliance of 0 corresponds to a completely vertical\nportion of the plot below.\nAs slip compliance increases, the slope decreases.</p>\n<div class=\"codehilite\"><pre><span></span>+        |                                            .\n+        |      _________ friction coefficient        .\n+        |     /                                      .\n+        |    /|                                      .\n+        |   /-\u2518 slope is inverse of                  .\n+        |  /    slip compliance                      .\n+        | /                                          .\n+        |/                                           .\n+      --+-------------------------- slipRatio\n+        |\n</pre></div>\n\n\n<p>I've added two different tests for this plugin:</p>\n<ul>\n<li>a wheel on a test rig rolling on a spinning drum (<code>tire_drum_test.world</code>)</li>\n<li>a bunch of variations of a <code>triball</code> models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:<ul>\n<li>lumped: one lumped rigid body with 3 spherical collisions</li>\n<li>fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints</li>\n<li>revolute: like fixed but with revolute joints and joint friction</li>\n<li>wheel_slip: like revolute but with the <code>WheelSlipPlugin</code> acting on each sphere.</li>\n</ul>\n</li>\n</ul>\n<p><img alt=\"triball.png\" src=\"data/bitbucket.org/repo/jgXqbo/images/2960193225-triball.png\" /></p>\n<p>If you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude <code>10^-4</code> vs <code>10^-7</code>) that accumulate over time.</p>\n<p>There is also a <code>gazebo_ros_wheel_slip</code> plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.</p>", "type": "rendered"}, "title": {"raw": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "markup": "markdown", "html": "<p>Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](data/bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2950/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:b2dc798d0d4a%0D132a395ad2a2?from_pullrequest_id=2950"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2950.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2950/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2950"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:b2dc798d0d4a%0D132a395ad2a2?from_pullrequest_id=2950"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2950/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2950/statuses_page=1.json"}}, "title": "Adding WheelSlipPlugin: for adding wheel slip using ODE's contact parameters", "close_source_branch": true, "reviewers": [], "id": 2950, "destination": {"commit": {"hash": "132a395ad2a2", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/132a395ad2a2.json"}, "html": {"href": "#!/osrf/gazebo/commits/132a395ad2a2"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "created_on": "2018-05-04T03:28:29.594568+00:00", "summary": {"raw": "This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE `slip1` and `slip2` parameters (see Force-dependent slip parameters in [ODE user guide](http://ode.org/ode-latest-userguide.html#sec_7_3_7)). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless `longitudinal_slip_compliance` and `lateral_slip_compliance` parameters. The `slip1` and `slip2` parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a `wheel_normal_force` parameter supplied to the plugin.\r\n\r\nHere's some ASCII art and documentation pasted from the plugin header file:\r\n\r\nA graphical interpretation of these parameters is provided below\r\nfor a positive value of slip compliance.\r\nThe horizontal axis corresponds to the slip ratio at the wheel,\r\nand the vertical axis corresponds to the tangential force ratio\r\n(tangential / normal force).\r\nAs wheel slip increases, the tangential force increases until\r\nit reaches the maximum set by the friction coefficient.\r\nThe slip compliance corresponds to the inverse of the slope\r\nof the force before it reaches the maximum value.\r\nA slip compliance of 0 corresponds to a completely vertical\r\nportion of the plot below.\r\nAs slip compliance increases, the slope decreases.\r\n\r\n\r\n~~~\r\n+        |                                            .\r\n+        |      _________ friction coefficient        .\r\n+        |     /                                      .\r\n+        |    /|                                      .\r\n+        |   /-\u2518 slope is inverse of                  .\r\n+        |  /    slip compliance                      .\r\n+        | /                                          .\r\n+        |/                                           .\r\n+      --+-------------------------- slipRatio\r\n+        |\r\n~~~\r\n\r\nI've added two different tests for this plugin:\r\n\r\n* a wheel on a test rig rolling on a spinning drum (`tire_drum_test.world`)\r\n* a bunch of variations of a `triball` models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:\r\n    * lumped: one lumped rigid body with 3 spherical collisions\r\n    * fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints\r\n    * revolute: like fixed but with revolute joints and joint friction\r\n    * wheel_slip: like revolute but with the `WheelSlipPlugin` acting on each sphere.\r\n\r\n![triball.png](data/bitbucket.org/repo/jgXqbo/images/2960193225-triball.png)\r\n\r\nIf you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude `10^-4` vs `10^-7`) that accumulate over time.\r\n\r\nThere is also a `gazebo_ros_wheel_slip` plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.", "markup": "markdown", "html": "<p>This adds a new plugin for tuning the amount of wheel slip experienced by a wheeled robot. It dynamically adjusts the ODE <code>slip1</code> and <code>slip2</code> parameters (see Force-dependent slip parameters in <a data-is-external-link=\"true\" href=\"http://ode.org/ode-latest-userguide.html#sec_7_3_7\" rel=\"nofollow\">ODE user guide</a>). This parameter has units like an inverse damper (velocity / effort). It is often preferred to use normalized parameters, so this plugin accepts unitless <code>longitudinal_slip_compliance</code> and <code>lateral_slip_compliance</code> parameters. The <code>slip1</code> and <code>slip2</code> parameters are then dynamically updated by multiplying the normalized slip compliance by the linear wheel spin velocity (radius * angular spin rate) and dividing by a <code>wheel_normal_force</code> parameter supplied to the plugin.</p>\n<p>Here's some ASCII art and documentation pasted from the plugin header file:</p>\n<p>A graphical interpretation of these parameters is provided below\nfor a positive value of slip compliance.\nThe horizontal axis corresponds to the slip ratio at the wheel,\nand the vertical axis corresponds to the tangential force ratio\n(tangential / normal force).\nAs wheel slip increases, the tangential force increases until\nit reaches the maximum set by the friction coefficient.\nThe slip compliance corresponds to the inverse of the slope\nof the force before it reaches the maximum value.\nA slip compliance of 0 corresponds to a completely vertical\nportion of the plot below.\nAs slip compliance increases, the slope decreases.</p>\n<div class=\"codehilite\"><pre><span></span>+        |                                            .\n+        |      _________ friction coefficient        .\n+        |     /                                      .\n+        |    /|                                      .\n+        |   /-\u2518 slope is inverse of                  .\n+        |  /    slip compliance                      .\n+        | /                                          .\n+        |/                                           .\n+      --+-------------------------- slipRatio\n+        |\n</pre></div>\n\n\n<p>I've added two different tests for this plugin:</p>\n<ul>\n<li>a wheel on a test rig rolling on a spinning drum (<code>tire_drum_test.world</code>)</li>\n<li>a bunch of variations of a <code>triball</code> models (ie. 3 connected spheres) on a ground plane with an inclined gravity vector to simulate a slope. This is a demonstration that wheeled robots seemingly at rest on a slope were drifting slowly down the slope when simulated with ODE. This test has 4 variations of the triball:<ul>\n<li>lumped: one lumped rigid body with 3 spherical collisions</li>\n<li>fixed: one chassis and 3 spherical rigid bodies connected to chassis with fixed joints</li>\n<li>revolute: like fixed but with revolute joints and joint friction</li>\n<li>wheel_slip: like revolute but with the <code>WheelSlipPlugin</code> acting on each sphere.</li>\n</ul>\n</li>\n</ul>\n<p><img alt=\"triball.png\" src=\"data/bitbucket.org/repo/jgXqbo/images/2960193225-triball.png\" /></p>\n<p>If you open the triball world interactively, it will look like they are sitting still, but if you look at the test expectations there are subtle differences (for example velocity magnitude <code>10^-4</code> vs <code>10^-7</code>) that accumulate over time.</p>\n<p>There is also a <code>gazebo_ros_wheel_slip</code> plugin that builds on top of this one. After I submit a pull request for that plugin, I will create a tutorial for how to use it.</p>", "type": "rendered"}, "source": {"commit": {"hash": "02433c983b79", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/02433c983b79.json"}, "html": {"href": "#!/osrf/gazebo/commits/02433c983b79"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "wheel_slip_plugin"}}, "comment_count": 17, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-05-11T00:36:25.544055+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}, {"role": "PARTICIPANT", "participated_on": "2018-11-15T20:06:57.229382+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2018-11-16T20:38:32.403983+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2018-10-17T22:19:33.794199+00:00", "type": "participant", "approved": true, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}], "reason": "", "updated_on": "2018-11-16T21:26:57.383564+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "b2dc798d0d4a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b2dc798d0d4a.json"}, "html": {"href": "#!/osrf/gazebo/commits/b2dc798d0d4a"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}