{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/935/comments/1274951.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/935/_/diff#comment-1274951"}}, "parent": {"id": 1274807, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/935/comments/1274807.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/935/_/diff#comment-1274807"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 935, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/935.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/935"}}, "title": "Create FrictionPyramid class to generalize mu1, mu2, and fdir1 parameters"}, "content": {"raw": "There is a middle ground. The GetPrimary/Secondary functions could be the public API, which in turn call the private accessor and mutators that use index values.\n\nThis would have a nice public API without duplicate code.\n\nJust something to consider, I'm not trying to force this.", "markup": "markdown", "html": "<p>There is a middle ground. The GetPrimary/Secondary functions could be the public API, which in turn call the private accessor and mutators that use index values.</p>\n<p>This would have a nice public API without duplicate code.</p>\n<p>Just something to consider, I'm not trying to force this.</p>", "type": "rendered"}, "created_on": "2014-02-20T17:52:16.292736+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": "2014-02-20T18:40:25.403583+00:00", "type": "pullrequest_comment", "id": 1274951}