{"rendered": {"description": {"raw": "Test `RemoveBlankWorld` is failing on default because new classes `Atmosphere` and `Wind` have `shared_ptr`s to the world which are not being released.\r\n\r\nThere is currently an [open discussion](#!/osrf/gazebo_design/src/smart_pointers/smart_pointers/smart_pointers.md?at=smart_pointers&fileviewer=file-view-default) on how to improve the way we use smart pointers to avoid such problems in the future.\r\n\r\nOne ugly way to solve it is to  use `Fini` methods as was done in pull request #2256.\r\n\r\nBut since these classes were introduced in gazebo8, we have more room for experimentation. So I thought we could try some of the ideas on the design document. This pull request:\r\n\r\n1. Gets rid of `shared_ptr` for Atmosphere and Wind.\r\n\r\n1. The `World` is the one responsible for these classes' lifetimes, so it holds `unique_ptr`s to them. These classes should never outlive the world, and their lifespan is basically the same as the world's.\r\n\r\n1. Atmosphere and Wind each hold a raw pointer to the world. They can use the object, but they should not delete it.\r\n\r\n1. Other objects can hold raw pointers to Atmosphere and Wind, but no one should delete them.\r\n\r\n1. Removed `Fini` and `Init` methods.\r\n\r\n1. Destructors are empty because everything goes out of scope nicely, which is proven by the test being fixed.", "markup": "markdown", "html": "<p>Test <code>RemoveBlankWorld</code> is failing on default because new classes <code>Atmosphere</code> and <code>Wind</code> have <code>shared_ptr</code>s to the world which are not being released.</p>\n<p>There is currently an <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo_design/src/smart_pointers/smart_pointers/smart_pointers.md?at=smart_pointers&amp;fileviewer=file-view-default\" rel=\"nofollow\">open discussion</a> on how to improve the way we use smart pointers to avoid such problems in the future.</p>\n<p>One ugly way to solve it is to  use <code>Fini</code> methods as was done in <a href=\"#!/osrf/gazebo/pull-requests/2256/clean-up-wind-and-atmosphere\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2256</a>.</p>\n<p>But since these classes were introduced in gazebo8, we have more room for experimentation. So I thought we could try some of the ideas on the design document. This pull request:</p>\n<ol>\n<li>\n<p>Gets rid of <code>shared_ptr</code> for Atmosphere and Wind.</p>\n</li>\n<li>\n<p>The <code>World</code> is the one responsible for these classes' lifetimes, so it holds <code>unique_ptr</code>s to them. These classes should never outlive the world, and their lifespan is basically the same as the world's.</p>\n</li>\n<li>\n<p>Atmosphere and Wind each hold a raw pointer to the world. They can use the object, but they should not delete it.</p>\n</li>\n<li>\n<p>Other objects can hold raw pointers to Atmosphere and Wind, but no one should delete them.</p>\n</li>\n<li>\n<p>Removed <code>Fini</code> and <code>Init</code> methods.</p>\n</li>\n<li>\n<p>Destructors are empty because everything goes out of scope nicely, which is proven by the test being fixed.</p>\n</li>\n</ol>", "type": "rendered"}, "title": {"raw": "Wind and atmosphere memory management", "markup": "markdown", "html": "<p>Wind and atmosphere memory management</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Test `RemoveBlankWorld` is failing on default because new classes `Atmosphere` and `Wind` have `shared_ptr`s to the world which are not being released.\r\n\r\nThere is currently an [open discussion](#!/osrf/gazebo_design/src/smart_pointers/smart_pointers/smart_pointers.md?at=smart_pointers&fileviewer=file-view-default) on how to improve the way we use smart pointers to avoid such problems in the future.\r\n\r\nOne ugly way to solve it is to  use `Fini` methods as was done in pull request #2256.\r\n\r\nBut since these classes were introduced in gazebo8, we have more room for experimentation. So I thought we could try some of the ideas on the design document. This pull request:\r\n\r\n1. Gets rid of `shared_ptr` for Atmosphere and Wind.\r\n\r\n1. The `World` is the one responsible for these classes' lifetimes, so it holds `unique_ptr`s to them. These classes should never outlive the world, and their lifespan is basically the same as the world's.\r\n\r\n1. Atmosphere and Wind each hold a raw pointer to the world. They can use the object, but they should not delete it.\r\n\r\n1. Other objects can hold raw pointers to Atmosphere and Wind, but no one should delete them.\r\n\r\n1. Removed `Fini` and `Init` methods.\r\n\r\n1. Destructors are empty because everything goes out of scope nicely, which is proven by the test being fixed.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2257/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:d95058b6af43%0D1d1e3a542af8?from_pullrequest_id=2257"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2257/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2257.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2257/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2257/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2257"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2257/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:d95058b6af43%0D1d1e3a542af8?from_pullrequest_id=2257"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2257/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2257/statuses_page=1.json"}}, "title": "Wind and atmosphere memory management", "close_source_branch": true, "reviewers": [], "id": 2257, "destination": {"commit": {"hash": "1d1e3a542af8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/1d1e3a542af8.json"}, "html": {"href": "#!/osrf/gazebo/commits/1d1e3a542af8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2016-04-12T06:54:27.954107+00:00", "summary": {"raw": "Test `RemoveBlankWorld` is failing on default because new classes `Atmosphere` and `Wind` have `shared_ptr`s to the world which are not being released.\r\n\r\nThere is currently an [open discussion](#!/osrf/gazebo_design/src/smart_pointers/smart_pointers/smart_pointers.md?at=smart_pointers&fileviewer=file-view-default) on how to improve the way we use smart pointers to avoid such problems in the future.\r\n\r\nOne ugly way to solve it is to  use `Fini` methods as was done in pull request #2256.\r\n\r\nBut since these classes were introduced in gazebo8, we have more room for experimentation. So I thought we could try some of the ideas on the design document. This pull request:\r\n\r\n1. Gets rid of `shared_ptr` for Atmosphere and Wind.\r\n\r\n1. The `World` is the one responsible for these classes' lifetimes, so it holds `unique_ptr`s to them. These classes should never outlive the world, and their lifespan is basically the same as the world's.\r\n\r\n1. Atmosphere and Wind each hold a raw pointer to the world. They can use the object, but they should not delete it.\r\n\r\n1. Other objects can hold raw pointers to Atmosphere and Wind, but no one should delete them.\r\n\r\n1. Removed `Fini` and `Init` methods.\r\n\r\n1. Destructors are empty because everything goes out of scope nicely, which is proven by the test being fixed.", "markup": "markdown", "html": "<p>Test <code>RemoveBlankWorld</code> is failing on default because new classes <code>Atmosphere</code> and <code>Wind</code> have <code>shared_ptr</code>s to the world which are not being released.</p>\n<p>There is currently an <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo_design/src/smart_pointers/smart_pointers/smart_pointers.md?at=smart_pointers&amp;fileviewer=file-view-default\" rel=\"nofollow\">open discussion</a> on how to improve the way we use smart pointers to avoid such problems in the future.</p>\n<p>One ugly way to solve it is to  use <code>Fini</code> methods as was done in <a href=\"#!/osrf/gazebo/pull-requests/2256/clean-up-wind-and-atmosphere\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2256</a>.</p>\n<p>But since these classes were introduced in gazebo8, we have more room for experimentation. So I thought we could try some of the ideas on the design document. This pull request:</p>\n<ol>\n<li>\n<p>Gets rid of <code>shared_ptr</code> for Atmosphere and Wind.</p>\n</li>\n<li>\n<p>The <code>World</code> is the one responsible for these classes' lifetimes, so it holds <code>unique_ptr</code>s to them. These classes should never outlive the world, and their lifespan is basically the same as the world's.</p>\n</li>\n<li>\n<p>Atmosphere and Wind each hold a raw pointer to the world. They can use the object, but they should not delete it.</p>\n</li>\n<li>\n<p>Other objects can hold raw pointers to Atmosphere and Wind, but no one should delete them.</p>\n</li>\n<li>\n<p>Removed <code>Fini</code> and <code>Init</code> methods.</p>\n</li>\n<li>\n<p>Destructors are empty because everything goes out of scope nicely, which is proven by the test being fixed.</p>\n</li>\n</ol>", "type": "rendered"}, "source": {"commit": {"hash": "22ac40993aeb", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/22ac40993aeb.json"}, "html": {"href": "#!/osrf/gazebo/commits/22ac40993aeb"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "cleanup_wind_atmosphere"}}, "comment_count": 29, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-04-14T01:08:08.383427+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2016-04-20T17:00:26.749939+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2016-04-20T17:02:38.282985+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2016-04-20T18:07:44.279121+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "d95058b6af43", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/d95058b6af43.json"}, "html": {"href": "#!/osrf/gazebo/commits/d95058b6af43"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}