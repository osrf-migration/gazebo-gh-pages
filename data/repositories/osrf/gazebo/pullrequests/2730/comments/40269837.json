{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2730/comments/40269837.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2730/_/diff#comment-40269837"}}, "parent": {"id": 40023559, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2730/comments/40023559.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2730/_/diff#comment-40023559"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2730, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2730.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2730"}}, "title": "Joint control menu read current values"}, "content": {"raw": "94b4437 has a potential fix for the concurrency issues. Instead of directly updating the text boxes from the `ignition::transport` callback emits a Qt signal, which triggers a Qt slot that actually updates the text boxes. This approach should let Qt handle the call synchronously with its other events ([see here](http://doc.qt.io/qt-5/threads-synchronizing.html#high-level-event-queues)). The Qt slot (callback) checks that the model name for the response matches the current model name as suggested above.\n\nIt is possible for the controller response to overwrite changes if it arrives after a user change. For example, if you newly select a model and quickly press reset, it will zero the control targets, but if the controller response arrives later, it will set the control targets back to what they were before. This is noticeable with the 1 second delay but is difficult to reproduce without the delay. Since this problem does not cause the GUI to hang or crash, do you think the solution is acceptable for now? If this solution is merged, I will create an issue noting this problem.", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo/commits/94b4437\" rel=\"nofollow\" class=\"ap-connect-link\">94b4437</a> has a potential fix for the concurrency issues. Instead of directly updating the text boxes from the <code>ignition::transport</code> callback emits a Qt signal, which triggers a Qt slot that actually updates the text boxes. This approach should let Qt handle the call synchronously with its other events (<a data-is-external-link=\"true\" href=\"http://doc.qt.io/qt-5/threads-synchronizing.html#high-level-event-queues\" rel=\"nofollow\">see here</a>). The Qt slot (callback) checks that the model name for the response matches the current model name as suggested above.</p>\n<p>It is possible for the controller response to overwrite changes if it arrives after a user change. For example, if you newly select a model and quickly press reset, it will zero the control targets, but if the controller response arrives later, it will set the control targets back to what they were before. This is noticeable with the 1 second delay but is difficult to reproduce without the delay. Since this problem does not cause the GUI to hang or crash, do you think the solution is acceptable for now? If this solution is merged, I will create an issue noting this problem.</p>", "type": "rendered"}, "created_on": "2017-07-06T23:00:43.904227+00:00", "user": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}, "updated_on": "2017-07-06T23:04:09.304569+00:00", "type": "pullrequest_comment", "id": 40269837}