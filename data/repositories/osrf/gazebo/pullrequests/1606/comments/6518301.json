{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1606/comments/6518301.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1606/_/diff#comment-6518301"}}, "parent": {"id": 6517619, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1606/comments/6517619.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1606/_/diff#comment-6517619"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1606, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1606.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1606"}}, "title": "Install server fixture for use outside of gazebo."}, "content": {"raw": "This ouput is giving you the error:\n\n```\n/usr/bin/ld: /home/jackie/local/lib/x86_64-linux-gnu/libgazebo_test_fixture.a(ServerFixture.cc.o): undefined reference to symbol '_ZTVN5boost6detail16thread_data_baseE'\n//usr/lib/x86_64-linux-gnu/libboost_thread.so.1.54.0: error adding symbols: DSO missing from command line\n``` \n?\n\nStrange, yes, I would say that is something related to the lazy binding of symbols when compiling a library. You can use boost in ServerFixture, not linking against it but be able to compile the library. In the moment of trying to compile an executable, it will complain. The point is that it could be solved by: recompiling the library again, linking against boost (ldd can show you if you the library is linked or not) or, like seems to be the case, adding -lboost_system to the compilation of the executable.", "markup": "markdown", "html": "<p>This ouput is giving you the error:</p>\n<div class=\"codehilite\"><pre><span></span>/usr/bin/ld: /home/jackie/local/lib/x86_64-linux-gnu/libgazebo_test_fixture.a(ServerFixture.cc.o): undefined reference to symbol &#39;_ZTVN5boost6detail16thread_data_baseE&#39;\n//usr/lib/x86_64-linux-gnu/libboost_thread.so.1.54.0: error adding symbols: DSO missing from command line\n</pre></div>\n\n\n<p>?</p>\n<p>Strange, yes, I would say that is something related to the lazy binding of symbols when compiling a library. You can use boost in ServerFixture, not linking against it but be able to compile the library. In the moment of trying to compile an executable, it will complain. The point is that it could be solved by: recompiling the library again, linking against boost (ldd can show you if you the library is linked or not) or, like seems to be the case, adding -lboost_system to the compilation of the executable.</p>", "type": "rendered"}, "created_on": "2015-04-27T23:34:21.483043+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": "2015-04-27T23:34:21.491022+00:00", "type": "pullrequest_comment", "id": 6518301}