{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/29866565.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-29866565"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Thank you for the bug report and for the fix!\n\nLooking at the commit which added this line, it looks like the line might be needed for certain use cases (something related to initial joint positions for example). I think a solution which would be good for everyone can be either to have two different functions or to add a flag to this function, so we support both the behavior which zeroes the twist, and the behavior which doesn't. What do you think?", "markup": "markdown", "html": "<p>Thank you for the bug report and for the fix!</p>\n<p>Looking at the commit which added this line, it looks like the line might be needed for certain use cases (something related to initial joint positions for example). I think a solution which would be good for everyone can be either to have two different functions or to add a flag to this function, so we support both the behavior which zeroes the twist, and the behavior which doesn't. What do you think?</p>", "type": "rendered"}, "created_on": "2017-01-17T17:23:10.882682+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-01-17T17:23:10.885925+00:00", "type": "pullrequest_comment", "id": 29866565}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/29912993.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-29912993"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Thank you for your answer.\n\nI don't know if this line is usefull at all. It has been added here : #!/osrf/gazebo/commits/657230d00c8bc8d90d0b3bfa99fe735498d3900b#chg-gazebo/physics/Link.cc\nAnd the commit comment say \"debuging\".\n\nHow to know when this line could be useful and when not ?", "markup": "markdown", "html": "<p>Thank you for your answer.</p>\n<p>I don't know if this line is usefull at all. It has been added here : <a href=\"#!/osrf/gazebo/commits/657230d00c8bc8d90d0b3bfa99fe735498d3900b#chg-gazebo/physics/Link.cc\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/commits/657230d00c8bc8d90d0b3bfa99fe735498d3900b#chg-gazebo/physics/Link.cc</a>\nAnd the commit comment say \"debuging\".</p>\n<p>How to know when this line could be useful and when not ?</p>", "type": "rendered"}, "created_on": "2017-01-18T10:49:10.294851+00:00", "user": {"display_name": "vincentrou", "uuid": "{a24abfd6-eba5-4d99-996b-0c779083728a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D"}, "html": {"href": "https://bitbucket.org/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2f6091b5f0f614d27ff1d21b847264c5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsV-3.png"}}, "nickname": "vincentrou", "type": "user", "account_id": "557058:1860ddb2-e1c1-4175-bf2b-82fcfbe0b62b"}, "updated_on": "2017-01-18T10:49:10.349070+00:00", "type": "pullrequest_comment", "id": 29912993}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/29944172.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-29944172"}}, "parent": {"id": 29912993, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/29912993.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-29912993"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "For more context, you can take a look at pull request #1096, which introduced this line. It looks like the line was introduced at the same time as the function. i.e. the function has never existed without the line.", "markup": "markdown", "html": "<p>For more context, you can take a look at <a href=\"#!/osrf/gazebo/pull-requests/1096/fix-issue-1138-setjointposition\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1096</a>, which introduced this line. It looks like the line was introduced at the same time as the function. i.e. the function has never existed without the line.</p>", "type": "rendered"}, "created_on": "2017-01-18T17:02:16.910386+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-01-18T17:02:51.996407+00:00", "type": "pullrequest_comment", "id": 29944172}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/29963428.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-29963428"}}, "parent": {"id": 29944172, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/29944172.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-29944172"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Yes you are right the function MoveFrame in Link.cc comes from this pull request.\n\nBut it feels strange to me that the speed of the link is set to zero in the MoveFrame function. Why setting the twist to zero if you want to move the link frame ?\nYou think it could be useful for the initialization ?\n\nFor me this line jam the simulator when calling SetPosition on a joint when there is multiple joint in cascade like [I reproduce here](https://github.com/ros-simulation/gazebo_ros_pkgs/issues/479#issuecomment-266748088)", "markup": "markdown", "html": "<p>Yes you are right the function MoveFrame in Link.cc comes from this pull request.</p>\n<p>But it feels strange to me that the speed of the link is set to zero in the MoveFrame function. Why setting the twist to zero if you want to move the link frame ?\nYou think it could be useful for the initialization ?</p>\n<p>For me this line jam the simulator when calling SetPosition on a joint when there is multiple joint in cascade like <a data-is-external-link=\"true\" href=\"https://github.com/ros-simulation/gazebo_ros_pkgs/issues/479#issuecomment-266748088\" rel=\"nofollow\">I reproduce here</a></p>", "type": "rendered"}, "created_on": "2017-01-18T22:18:27.495877+00:00", "user": {"display_name": "vincentrou", "uuid": "{a24abfd6-eba5-4d99-996b-0c779083728a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D"}, "html": {"href": "https://bitbucket.org/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2f6091b5f0f614d27ff1d21b847264c5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsV-3.png"}}, "nickname": "vincentrou", "type": "user", "account_id": "557058:1860ddb2-e1c1-4175-bf2b-82fcfbe0b62b"}, "updated_on": "2017-01-18T22:18:27.562014+00:00", "type": "pullrequest_comment", "id": 29963428}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/30559896.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-30559896"}}, "parent": {"id": 29963428, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/29963428.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-29963428"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "I see what you're saying, but I can see use cases for both zeroing the twist and not zeroing it, especially since we're talking about the world frame. Say you have a link moving on the X axis. Then you use this function to rotate it by 90 degrees. You might not want it to keep on moving in the direction it was before.\n\nIn any case, since it looks like this has been the behavior of the function since it was created, I'm afraid that simply removing this line has the potential for breaking user code. I'll stick to my original suggestion of either adding a flag to this function or creating a new function with the desired behavior, but we should hear the opinion of other reviewers too.", "markup": "markdown", "html": "<p>I see what you're saying, but I can see use cases for both zeroing the twist and not zeroing it, especially since we're talking about the world frame. Say you have a link moving on the X axis. Then you use this function to rotate it by 90 degrees. You might not want it to keep on moving in the direction it was before.</p>\n<p>In any case, since it looks like this has been the behavior of the function since it was created, I'm afraid that simply removing this line has the potential for breaking user code. I'll stick to my original suggestion of either adding a flag to this function or creating a new function with the desired behavior, but we should hear the opinion of other reviewers too.</p>", "type": "rendered"}, "created_on": "2017-01-30T17:52:26.121359+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-01-30T17:52:26.124551+00:00", "type": "pullrequest_comment", "id": 30559896}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/30562460.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-30562460"}}, "parent": {"id": 30559896, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/30559896.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-30559896"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "I think the behavior of zeroing linear and angular velocity doesn't match the description of MoveFrame. I'm not sure if I would expect the new velocity to be the same relative to the destination frame as it was the source frame, or the velocity in world frame to be unchanged. \n\nI agree about making a new method. How about the new method (MoveRelativeToFrame?) changes the pose and leaves the velocity in world frame unchanged?\n\nSince setting the velocity to zero is trivial, I think MoveFrame could be deprecated in favor of calling the new method and then setting the link velocity to zero.", "markup": "markdown", "html": "<p>I think the behavior of zeroing linear and angular velocity doesn't match the description of MoveFrame. I'm not sure if I would expect the new velocity to be the same relative to the destination frame as it was the source frame, or the velocity in world frame to be unchanged. </p>\n<p>I agree about making a new method. How about the new method (MoveRelativeToFrame?) changes the pose and leaves the velocity in world frame unchanged?</p>\n<p>Since setting the velocity to zero is trivial, I think MoveFrame could be deprecated in favor of calling the new method and then setting the link velocity to zero.</p>", "type": "rendered"}, "created_on": "2017-01-30T18:31:47.579271+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": "2017-01-30T18:31:47.581367+00:00", "type": "pullrequest_comment", "id": 30562460}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/30639258.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-30639258"}}, "parent": {"id": 30562460, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/30562460.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-30562460"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "I am not an expert in simulation so I trust you judgement to keep both behavior (with and without zeroing the twist) but I do not see how to handle it.\nIn fact, the MoveFrame function is only called in Joint::SetPositionMaximal in physics/Joint.cc\n\nWhen do you want to activate or deactivate zeroing the twist ?\nBecause I see a single use case : calling Joint::SetPosition", "markup": "markdown", "html": "<p>I am not an expert in simulation so I trust you judgement to keep both behavior (with and without zeroing the twist) but I do not see how to handle it.\nIn fact, the MoveFrame function is only called in Joint::SetPositionMaximal in physics/Joint.cc</p>\n<p>When do you want to activate or deactivate zeroing the twist ?\nBecause I see a single use case : calling Joint::SetPosition</p>", "type": "rendered"}, "created_on": "2017-01-31T17:43:07.646112+00:00", "user": {"display_name": "vincentrou", "uuid": "{a24abfd6-eba5-4d99-996b-0c779083728a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D"}, "html": {"href": "https://bitbucket.org/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2f6091b5f0f614d27ff1d21b847264c5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsV-3.png"}}, "nickname": "vincentrou", "type": "user", "account_id": "557058:1860ddb2-e1c1-4175-bf2b-82fcfbe0b62b"}, "updated_on": "2017-01-31T17:43:07.697403+00:00", "type": "pullrequest_comment", "id": 30639258}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/43342827.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-43342827"}}, "parent": {"id": 30562460, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/30562460.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-30562460"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "@sloretz, @chapulina, What do you think of maintaining the joint velocities rather than the velocities in either the source or world frame? This is what DART appears to do. Or alternatively, what about zeroing the velocities but relative to the parent link instead of the world?\n\n`SetPosition` produces different behaviors for DART and ODE. I created tests on [this branch](https://bitbucket.org/pchorak/gazebo/branch/joint_set_position_moving) to demonstrate. They expect the joint velocity to be unaffected by `SetPosition`, so they fail for ODE and pass for DART. I also made the change proposed in this PR but by modifying `SetPositionMaximal` so the behavior of `MoveFrame` is unaffected. The tests pass for ODE with the change.", "markup": "markdown", "html": "<p>@sloretz, @chapulina, What do you think of maintaining the joint velocities rather than the velocities in either the source or world frame? This is what DART appears to do. Or alternatively, what about zeroing the velocities but relative to the parent link instead of the world?</p>\n<p><code>SetPosition</code> produces different behaviors for DART and ODE. I created tests on <a data-is-external-link=\"true\" href=\"https://bitbucket.org/pchorak/gazebo/branch/joint_set_position_moving\" rel=\"nofollow\">this branch</a> to demonstrate. They expect the joint velocity to be unaffected by <code>SetPosition</code>, so they fail for ODE and pass for DART. I also made the change proposed in this PR but by modifying <code>SetPositionMaximal</code> so the behavior of <code>MoveFrame</code> is unaffected. The tests pass for ODE with the change.</p>", "type": "rendered"}, "created_on": "2017-08-22T21:36:22.198807+00:00", "user": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}, "updated_on": "2017-08-22T21:36:22.229656+00:00", "type": "pullrequest_comment", "id": 43342827}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/33464118.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-33464118"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Is it possible that this function is never used by gazebo it self ?\nAnd only used with ROS when using the PositionJointInterface in urdf ?\n\nThis could explain why we saw this bug now even if the bug is from a commit in 2014.\nSince ROS users use indigo with gazebo 2 and just start to migrate to ROS kinetic with gazebo 7.", "markup": "markdown", "html": "<p>Is it possible that this function is never used by gazebo it self ?\nAnd only used with ROS when using the PositionJointInterface in urdf ?</p>\n<p>This could explain why we saw this bug now even if the bug is from a commit in 2014.\nSince ROS users use indigo with gazebo 2 and just start to migrate to ROS kinetic with gazebo 7.</p>", "type": "rendered"}, "created_on": "2017-03-20T13:03:46.338902+00:00", "user": {"display_name": "vincentrou", "uuid": "{a24abfd6-eba5-4d99-996b-0c779083728a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D"}, "html": {"href": "https://bitbucket.org/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2f6091b5f0f614d27ff1d21b847264c5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsV-3.png"}}, "nickname": "vincentrou", "type": "user", "account_id": "557058:1860ddb2-e1c1-4175-bf2b-82fcfbe0b62b"}, "updated_on": "2017-03-20T13:03:46.390077+00:00", "type": "pullrequest_comment", "id": 33464118}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/33772570.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-33772570"}}, "parent": {"id": 33464118, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/33464118.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-33464118"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "It looks like the function is used by `ODEJoint::SetPosition`  and `BulletJoint::SetPosition` , which are public functions. So any downstream code could be using them, just like gazebo\\_ros does.\n\nYeah it looks like the `Link::MoveFrame`  function has been introduced after Gazebo 2.2, which goes with Indigo. \n\nI'm not sure what's the best path forward here. Leaving it like this makes the function unusable in some cases, but changing it might break user code. I haven't used the `SetPosition`  function enough to have a strong opinion about what it should do (in fact, I'd say using `SetPosition` to control a robot in simulation is not good practice, since it overrides the physics engine). @scpeters , thoughts?", "markup": "markdown", "html": "<p>It looks like the function is used by <code>ODEJoint::SetPosition</code>  and <code>BulletJoint::SetPosition</code> , which are public functions. So any downstream code could be using them, just like gazebo_ros does.</p>\n<p>Yeah it looks like the <code>Link::MoveFrame</code>  function has been introduced after Gazebo 2.2, which goes with Indigo. </p>\n<p>I'm not sure what's the best path forward here. Leaving it like this makes the function unusable in some cases, but changing it might break user code. I haven't used the <code>SetPosition</code>  function enough to have a strong opinion about what it should do (in fact, I'd say using <code>SetPosition</code> to control a robot in simulation is not good practice, since it overrides the physics engine). @scpeters , thoughts?</p>", "type": "rendered"}, "created_on": "2017-03-23T22:44:18.303435+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-03-23T22:44:18.312523+00:00", "type": "pullrequest_comment", "id": 33772570}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/34094475.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-34094475"}}, "parent": {"id": 33772570, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/33772570.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-33772570"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Currently the JointPosition interface in ROS is using SetPosition (in default_robot_hw_sim.cpp) .It is problematic since PositionInterface freeze with gazebo 7. In our case, we want to use this to control a steering angle. Perhaps @chapulina have a good point, if the JointPositionInterface overwrite the simulation it will not respect the physics.( The joint position will directly match the joint command instead of reaching the position based on joint parameter.)", "markup": "markdown", "html": "<p>Currently the JointPosition interface in ROS is using SetPosition (in default_robot_hw_sim.cpp) .It is problematic since PositionInterface freeze with gazebo 7. In our case, we want to use this to control a steering angle. Perhaps @chapulina have a good point, if the JointPositionInterface overwrite the simulation it will not respect the physics.( The joint position will directly match the joint command instead of reaching the position based on joint parameter.)</p>", "type": "rendered"}, "created_on": "2017-03-29T15:10:36.155759+00:00", "user": {"display_name": "Pier-Marc Comtois-Rivet", "uuid": "{0175b05b-cfdb-42e5-aa09-f785a9507234}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0175b05b-cfdb-42e5-aa09-f785a9507234%7D"}, "html": {"href": "https://bitbucket.org/%7B0175b05b-cfdb-42e5-aa09-f785a9507234%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:88944d93-fa51-47d9-a10b-db77a1ae855d/d8c27000-64d4-47a8-b096-58044725ed25/128"}}, "nickname": "Pier-Marc Comtois Rivet", "type": "user", "account_id": "557058:88944d93-fa51-47d9-a10b-db77a1ae855d"}, "updated_on": "2017-03-29T15:10:36.231216+00:00", "type": "pullrequest_comment", "id": 34094475}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/34159015.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-34159015"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "I think I found the way to dodge the problem. I am also doing the 2 JointPositionInterface for steering. Using directly the Position Interface will result in the << SetPosition>> of the joint which will cause an overwrite of the physics since we are directly setting the state. Instead, in ros_gazebo_pkg, if you define  \n```\n#!c++\n\n<param name=\"/gazebo_ros_control/pid_gains/front_left_angle_joint/p\" type=\"double\" value=\"0.25\" />\n```\nIn the param server, the default_robot_hw_sim will use a POSITION_PID instead and it will do a close loop with the physics.\n\nSure it doesn't solve the freezing problem, but I think the JointPositionInterface must be used that way, but I can see cases ( maybe direct linkage mechanism) that you want to impose joint position.\n\n\n", "markup": "markdown", "html": "<p>I think I found the way to dodge the problem. I am also doing the 2 JointPositionInterface for steering. Using directly the Position Interface will result in the &lt;&lt; SetPosition&gt;&gt; of the joint which will cause an overwrite of the physics since we are directly setting the state. Instead, in ros_gazebo_pkg, if you define  </p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"o\">&lt;</span><span class=\"n\">param</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;/gazebo_ros_control/pid_gains/front_left_angle_joint/p&quot;</span> <span class=\"n\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;double&quot;</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;0.25&quot;</span> <span class=\"o\">/&gt;</span>\n</pre></div>\n\n\n<p>In the param server, the default_robot_hw_sim will use a POSITION_PID instead and it will do a close loop with the physics.</p>\n<p>Sure it doesn't solve the freezing problem, but I think the JointPositionInterface must be used that way, but I can see cases ( maybe direct linkage mechanism) that you want to impose joint position.</p>", "type": "rendered"}, "created_on": "2017-03-30T11:38:57.250530+00:00", "user": {"display_name": "Pier-Marc Comtois-Rivet", "uuid": "{0175b05b-cfdb-42e5-aa09-f785a9507234}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0175b05b-cfdb-42e5-aa09-f785a9507234%7D"}, "html": {"href": "https://bitbucket.org/%7B0175b05b-cfdb-42e5-aa09-f785a9507234%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:88944d93-fa51-47d9-a10b-db77a1ae855d/d8c27000-64d4-47a8-b096-58044725ed25/128"}}, "nickname": "Pier-Marc Comtois Rivet", "type": "user", "account_id": "557058:88944d93-fa51-47d9-a10b-db77a1ae855d"}, "updated_on": "2017-03-30T11:38:57.321056+00:00", "type": "pullrequest_comment", "id": 34159015}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/34259506.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-34259506"}}, "parent": {"id": 34159015, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/34159015.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-34159015"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "I tried to use the POSITION_PID but for me it is unstable.\nI have tested different PID and joint damping/friction but I did not find a working point...", "markup": "markdown", "html": "<p>I tried to use the POSITION_PID but for me it is unstable.\nI have tested different PID and joint damping/friction but I did not find a working point...</p>", "type": "rendered"}, "created_on": "2017-03-31T15:20:18.925331+00:00", "user": {"display_name": "vincentrou", "uuid": "{a24abfd6-eba5-4d99-996b-0c779083728a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D"}, "html": {"href": "https://bitbucket.org/%7Ba24abfd6-eba5-4d99-996b-0c779083728a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2f6091b5f0f614d27ff1d21b847264c5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsV-3.png"}}, "nickname": "vincentrou", "type": "user", "account_id": "557058:1860ddb2-e1c1-4175-bf2b-82fcfbe0b62b"}, "updated_on": "2017-03-31T15:20:19.012566+00:00", "type": "pullrequest_comment", "id": 34259506}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/37170074.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-37170074"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Is this issue fixed in the last version of gazebo 7 (7.7)?", "markup": "markdown", "html": "<p>Is this issue fixed in the last version of gazebo 7 (7.7)?</p>", "type": "rendered"}, "created_on": "2017-05-18T15:07:32.838845+00:00", "user": {"display_name": "artu", "uuid": "{492a29bc-8670-4056-b993-0ef9aa031f26}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B492a29bc-8670-4056-b993-0ef9aa031f26%7D"}, "html": {"href": "https://bitbucket.org/%7B492a29bc-8670-4056-b993-0ef9aa031f26%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/39cb13b120de5e6e8c4f7c99467ed550d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsA-6.png"}}, "nickname": "artubit", "type": "user", "account_id": "557058:2dc561a4-58f0-4dd3-8f4b-263138e49e37"}, "updated_on": "2017-05-18T15:07:32.893724+00:00", "type": "pullrequest_comment", "id": 37170074}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/37172765.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-37172765"}}, "parent": {"id": 37170074, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/37170074.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-37170074"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "This pull request hasn't been merged into any Gazebo versions yet.", "markup": "markdown", "html": "<p>This pull request hasn't been merged into any Gazebo versions yet.</p>", "type": "rendered"}, "created_on": "2017-05-18T15:32:34.735521+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2017-05-18T15:32:34.739160+00:00", "type": "pullrequest_comment", "id": 37172765}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/44041829.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-44041829"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "The zeroing of world velocity makes sense if you consider the use case of some kind of \"reinitialization\" of a link to a known state.  However, in the use case of wanting to rotate a link that is moving, as in the ros_controllers example, it causes the link to freeze or fall slowly because its velocity is constantly being zeroed. I'll throw a vote in for the `zeroVelocity` flag that defaults to true, there is value in both use cases.", "markup": "markdown", "html": "<p>The zeroing of world velocity makes sense if you consider the use case of some kind of \"reinitialization\" of a link to a known state.  However, in the use case of wanting to rotate a link that is moving, as in the ros_controllers example, it causes the link to freeze or fall slowly because its velocity is constantly being zeroed. I'll throw a vote in for the <code>zeroVelocity</code> flag that defaults to true, there is value in both use cases.</p>", "type": "rendered"}, "created_on": "2017-09-01T00:52:31.328217+00:00", "user": {"display_name": "Zach Anderson", "uuid": "{9ff24246-615c-4363-b2e9-d4376dc21d60}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9ff24246-615c-4363-b2e9-d4376dc21d60%7D"}, "html": {"href": "https://bitbucket.org/%7B9ff24246-615c-4363-b2e9-d4376dc21d60%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/83817c27892fe04bfd3afa2ea4fd473ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsZA-4.png"}}, "nickname": "zanderson", "type": "user", "account_id": "557058:ddb1c27b-9024-4e29-af53-26129daa9220"}, "updated_on": "2017-09-01T00:52:31.375384+00:00", "type": "pullrequest_comment", "id": 44041829}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/44609396.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-44609396"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "There would also have to be a `preserveVelocity` flag in `Joint::SetPosition` for the flag solution to be effective, since thats the primary place `Link::MoveFrame` is being called from. It's possible to implement a solution on the use case side by caching the velocity of every frame before the positions are updated and then reapplying them afterwards, but that seems like a much less optimal solution.", "markup": "markdown", "html": "<p>There would also have to be a <code>preserveVelocity</code> flag in <code>Joint::SetPosition</code> for the flag solution to be effective, since thats the primary place <code>Link::MoveFrame</code> is being called from. It's possible to implement a solution on the use case side by caching the velocity of every frame before the positions are updated and then reapplying them afterwards, but that seems like a much less optimal solution.</p>", "type": "rendered"}, "created_on": "2017-09-10T17:32:59.039331+00:00", "user": {"display_name": "Zach Anderson", "uuid": "{9ff24246-615c-4363-b2e9-d4376dc21d60}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9ff24246-615c-4363-b2e9-d4376dc21d60%7D"}, "html": {"href": "https://bitbucket.org/%7B9ff24246-615c-4363-b2e9-d4376dc21d60%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/83817c27892fe04bfd3afa2ea4fd473ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsZA-4.png"}}, "nickname": "zanderson", "type": "user", "account_id": "557058:ddb1c27b-9024-4e29-af53-26129daa9220"}, "updated_on": "2017-09-10T17:32:59.092507+00:00", "type": "pullrequest_comment", "id": 44609396}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49451934.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49451934"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "This is certainly a thorny issue, and both views on the matter are understandable.\n\nOn one hand, changing one component of an object's state shouldn't clobber another component of the state unless it's completely necessary in order to preserve sanity, so zeroing out the twist seems like a superfluous behavior in this function.\n\nOn the other hand, it could be argued that having the velocity component of an object's state persist between physics-defying teleportations of an object is not particularly sane (unless we're supporting use cases for Aperture Science portal devices).\n\nTrying to mix together physics-obeying concepts of momentum conservation with physics-defying concepts of discrete teleportation seems like begging for trouble. Since there is no obviously correct behavior in this circumstance, I agree with @zachanderson that the nicest thing to do would be to allow the user to specify the behavior with a flag, and have the default match the legacy behavior. That would mean adding a boolean flag to `MoveFrame` and `SetPosition`.\n\nThe catch with that solution is that `SetPosition` is a virtual function which gets implemented by every single physics engine, potentially multiple times (up to once for each joint type in each physics engine), so this fix would not be as trivial to implement as it seems on the surface. Worse yet, right now the exact behavior of `SetPosition` varies between physics engines, where some will zero out the velocity while others do not. If we introduce a flag which tells the physics engine to zero out the **world** velocity of the joint's child link, this would be extremely problematic for physics engines which use generalized coordinates, like DART and Simbody. That would require them to perform an inverse differential kinematics computation to find a set of parent joint velocities that would achieve zero world velocity for the child link. In many cases, such a solution might not even exist mathematically.\n\nTherefore, while it's not the most user-friendly option, I think the most sensible option is to make the user responsible for saving the world velocity before calling the function and then reverting to that velocity afterwards. We should also add documentation to `MoveFrame` which indicates that it will reset the velocity, and add documentation to `SetPosition` to indicate that its behavior varies between physics engines (specifically that ODE and Bullet resets it while DART and Simbody don't).\n\nThen, in the ROS JointPosition interface, we can tweak its behavior so that it saves the velocity before calling `SetPosition` and then reverts to that velocity after calling the function. I believe that should opaquely solve the problem for the users who have reported being affected in this thread.", "markup": "markdown", "html": "<p>This is certainly a thorny issue, and both views on the matter are understandable.</p>\n<p>On one hand, changing one component of an object's state shouldn't clobber another component of the state unless it's completely necessary in order to preserve sanity, so zeroing out the twist seems like a superfluous behavior in this function.</p>\n<p>On the other hand, it could be argued that having the velocity component of an object's state persist between physics-defying teleportations of an object is not particularly sane (unless we're supporting use cases for Aperture Science portal devices).</p>\n<p>Trying to mix together physics-obeying concepts of momentum conservation with physics-defying concepts of discrete teleportation seems like begging for trouble. Since there is no obviously correct behavior in this circumstance, I agree with @zachanderson that the nicest thing to do would be to allow the user to specify the behavior with a flag, and have the default match the legacy behavior. That would mean adding a boolean flag to <code>MoveFrame</code> and <code>SetPosition</code>.</p>\n<p>The catch with that solution is that <code>SetPosition</code> is a virtual function which gets implemented by every single physics engine, potentially multiple times (up to once for each joint type in each physics engine), so this fix would not be as trivial to implement as it seems on the surface. Worse yet, right now the exact behavior of <code>SetPosition</code> varies between physics engines, where some will zero out the velocity while others do not. If we introduce a flag which tells the physics engine to zero out the <strong>world</strong> velocity of the joint's child link, this would be extremely problematic for physics engines which use generalized coordinates, like DART and Simbody. That would require them to perform an inverse differential kinematics computation to find a set of parent joint velocities that would achieve zero world velocity for the child link. In many cases, such a solution might not even exist mathematically.</p>\n<p>Therefore, while it's not the most user-friendly option, I think the most sensible option is to make the user responsible for saving the world velocity before calling the function and then reverting to that velocity afterwards. We should also add documentation to <code>MoveFrame</code> which indicates that it will reset the velocity, and add documentation to <code>SetPosition</code> to indicate that its behavior varies between physics engines (specifically that ODE and Bullet resets it while DART and Simbody don't).</p>\n<p>Then, in the ROS JointPosition interface, we can tweak its behavior so that it saves the velocity before calling <code>SetPosition</code> and then reverts to that velocity after calling the function. I believe that should opaquely solve the problem for the users who have reported being affected in this thread.</p>", "type": "rendered"}, "created_on": "2017-11-13T19:01:36.567610+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-13T19:01:36.593897+00:00", "type": "pullrequest_comment", "id": 49451934}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49454527.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49454527"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "As it stands, it seems the behavior of this kinematic teleportation is undefined in regards to how the other kinematic properties should be handled. What if we add the flag and update the existing implementations of `SetPosition` to throw an exception (or indicate an error in some other way) when the type of teleportation requested is not how the particular physics engine implemented it? That would lead to a more well defined behavior overall, without requiring functional changes to existing code beyond some refactoring.", "markup": "markdown", "html": "<p>As it stands, it seems the behavior of this kinematic teleportation is undefined in regards to how the other kinematic properties should be handled. What if we add the flag and update the existing implementations of <code>SetPosition</code> to throw an exception (or indicate an error in some other way) when the type of teleportation requested is not how the particular physics engine implemented it? That would lead to a more well defined behavior overall, without requiring functional changes to existing code beyond some refactoring.</p>", "type": "rendered"}, "created_on": "2017-11-13T19:37:32.895270+00:00", "user": {"display_name": "Zach Anderson", "uuid": "{9ff24246-615c-4363-b2e9-d4376dc21d60}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9ff24246-615c-4363-b2e9-d4376dc21d60%7D"}, "html": {"href": "https://bitbucket.org/%7B9ff24246-615c-4363-b2e9-d4376dc21d60%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/83817c27892fe04bfd3afa2ea4fd473ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsZA-4.png"}}, "nickname": "zanderson", "type": "user", "account_id": "557058:ddb1c27b-9024-4e29-af53-26129daa9220"}, "updated_on": "2017-11-13T19:38:11.048631+00:00", "type": "pullrequest_comment", "id": 49454527}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49457531.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49457531"}}, "parent": {"id": 49454527, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49454527.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49454527"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "I completely agree with the motive of having better-defined behavior for the API between different physics engines, but I'm afraid that the current implementation of physics in Gazebo was not originally designed for the kind of multiple-engine support that it currently exercises. As a result, there isn't a clear path to standardizing the behavior in a way that wouldn't be harmful to existing users. Having rigorously-defined behavior is one of the major goals of an upcoming revision of Gazebo, but that won't be back-portable to resolve this outstanding issue, since it involves a considerable redesign of the codebase.\n\nWe could potentially provide something similar to what you're proposing. We could give `SetPosition` a `preserve_world_velocity` (notice that it's a more specific name) flag which defaults to `false`. \n\n- When `preserve_world_velocity` is `false`, the physics engine will do whatever its default legacy behavior is. For ODE and Bullet, it would set the world velocity of the child link to all zeros. For DART and Simbody, it would preserve the link velocity relative to the parent link.\n\n- When `preserve_world_velocity` is `true`, ODE and Bullet will skip over resetting the world velocity of the child link so its world velocity remains unaffected. `DART` and `Simbody` will perhaps print a warning message or throw an exception, depending on what everyone thinks is the most appropriate level of error reporting.\n\nThat would still leave the default behavior somewhat weakly-defined and inconsistent between physics engines, but that's unavoidable with the current design if we want to avoid breaking existing, working code.", "markup": "markdown", "html": "<p>I completely agree with the motive of having better-defined behavior for the API between different physics engines, but I'm afraid that the current implementation of physics in Gazebo was not originally designed for the kind of multiple-engine support that it currently exercises. As a result, there isn't a clear path to standardizing the behavior in a way that wouldn't be harmful to existing users. Having rigorously-defined behavior is one of the major goals of an upcoming revision of Gazebo, but that won't be back-portable to resolve this outstanding issue, since it involves a considerable redesign of the codebase.</p>\n<p>We could potentially provide something similar to what you're proposing. We could give <code>SetPosition</code> a <code>preserve_world_velocity</code> (notice that it's a more specific name) flag which defaults to <code>false</code>. </p>\n<ul>\n<li>\n<p>When <code>preserve_world_velocity</code> is <code>false</code>, the physics engine will do whatever its default legacy behavior is. For ODE and Bullet, it would set the world velocity of the child link to all zeros. For DART and Simbody, it would preserve the link velocity relative to the parent link.</p>\n</li>\n<li>\n<p>When <code>preserve_world_velocity</code> is <code>true</code>, ODE and Bullet will skip over resetting the world velocity of the child link so its world velocity remains unaffected. <code>DART</code> and <code>Simbody</code> will perhaps print a warning message or throw an exception, depending on what everyone thinks is the most appropriate level of error reporting.</p>\n</li>\n</ul>\n<p>That would still leave the default behavior somewhat weakly-defined and inconsistent between physics engines, but that's unavoidable with the current design if we want to avoid breaking existing, working code.</p>", "type": "rendered"}, "created_on": "2017-11-13T20:20:00.763024+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-13T20:20:00.765127+00:00", "type": "pullrequest_comment", "id": 49457531}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49705360.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49705360"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "I read through all the comments and try to find a workaround that could take both cases (zero velocity or not) carefully.   \nBased on the existing function name and documentation: `SetPositionMaximal` and `SetPosition` should only set the positions of  \nthe child links of the joint, and leave the velocity as it is, although in some cases the preserved velocity doesn't make sense any more.  \n\nIt should be the users' responsibility to `zero` the velocity, or `set` the velocity to some other values. We could provide such APIs, such as `SetVelocityRelativeToFrame()`   \nIn this case, I would prefer the fix by Peter here [3dd9114](https://bitbucket.org/pchorak/gazebo/commits/3dd9114d6a53a14646b1b1191ac2fc24e74537b9?at=joint_set_position_moving)     \n\nIf we accept the above commit: (1) update the documentation of  `SetPosition` such that users are clear that this set position only and doesn't affect `twist / velocity` at all   \n(2)  `MoveFrame` will be unused in the existing `gazebo` repo.   \nHowever, this fix might break some users' code who depends on the default behavior of `SetPosition` to zero the velocity (although I guess most users probably are not aware that we    \nset the velocity to zero, unless they read the source code and they probably are not depending on this too much, but this is just a guess).  Anyway, It is trivial to zero the velocity after calling a function.  \nTherefore, I tend to vote for this fix.   \n\nAnother approach is proposed by Grey, where we add a new flag `preserve_world_velocity`, this might cause inconsistent behaviors for different physics engines, as covered above.  \nBut this fix would guarantee the legacy behaviors.    \n", "markup": "markdown", "html": "<p>I read through all the comments and try to find a workaround that could take both cases (zero velocity or not) carefully. <br />\nBased on the existing function name and documentation: <code>SetPositionMaximal</code> and <code>SetPosition</code> should only set the positions of<br />\nthe child links of the joint, and leave the velocity as it is, although in some cases the preserved velocity doesn't make sense any more.  </p>\n<p>It should be the users' responsibility to <code>zero</code> the velocity, or <code>set</code> the velocity to some other values. We could provide such APIs, such as <code>SetVelocityRelativeToFrame()</code> <br />\nIn this case, I would prefer the fix by Peter here <a data-is-external-link=\"true\" href=\"https://bitbucket.org/pchorak/gazebo/commits/3dd9114d6a53a14646b1b1191ac2fc24e74537b9?at=joint_set_position_moving\" rel=\"nofollow\">3dd9114</a>     </p>\n<p>If we accept the above commit: (1) update the documentation of  <code>SetPosition</code> such that users are clear that this set position only and doesn't affect <code>twist / velocity</code> at all <br />\n(2)  <code>MoveFrame</code> will be unused in the existing <code>gazebo</code> repo. <br />\nHowever, this fix might break some users' code who depends on the default behavior of <code>SetPosition</code> to zero the velocity (although I guess most users probably are not aware that we  <br />\nset the velocity to zero, unless they read the source code and they probably are not depending on this too much, but this is just a guess).  Anyway, It is trivial to zero the velocity after calling a function.<br />\nTherefore, I tend to vote for this fix.   </p>\n<p>Another approach is proposed by Grey, where we add a new flag <code>preserve_world_velocity</code>, this might cause inconsistent behaviors for different physics engines, as covered above.<br />\nBut this fix would guarantee the legacy behaviors.    </p>", "type": "rendered"}, "created_on": "2017-11-16T01:02:52.587975+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "updated_on": "2017-11-16T01:02:52.590171+00:00", "type": "pullrequest_comment", "id": 49705360}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49705830.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49705830"}}, "parent": {"id": 49705360, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49705360.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49705360"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Note that behavior is already inconsistent between different physics engines, so the fix that @zanderson and I are proposing would not have an impact on any existing behavior, and would allow the issue to be gracefully and opaquely resolved without any unintended consequences.\n\nI think major behavioral changes should be avoided until Gazebo X, where we will have an opportunity to start from a fresh design and ensure that we have rigorous definitions for how the physics engines should behave.", "markup": "markdown", "html": "<p>Note that behavior is already inconsistent between different physics engines, so the fix that @zanderson and I are proposing would not have an impact on any existing behavior, and would allow the issue to be gracefully and opaquely resolved without any unintended consequences.</p>\n<p>I think major behavioral changes should be avoided until Gazebo X, where we will have an opportunity to start from a fresh design and ensure that we have rigorous definitions for how the physics engines should behave.</p>", "type": "rendered"}, "created_on": "2017-11-16T01:13:47.023823+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-16T01:13:47.470646+00:00", "type": "pullrequest_comment", "id": 49705830}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49705995.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49705995"}}, "parent": {"id": 49705830, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49705830.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49705830"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "For the record, I do agree in principle that `SetPosition` functions *shouldn't* zero out velocity, but since it's already a behavior which user code may easily be depending on, it could be harmful to change the default behavior while keeping the API the same. Users whose code suddenly starts to fail after an upgrade would be lost as to why it's suddenly failing.", "markup": "markdown", "html": "<p>For the record, I do agree in principle that <code>SetPosition</code> functions <em>shouldn't</em> zero out velocity, but since it's already a behavior which user code may easily be depending on, it could be harmful to change the default behavior while keeping the API the same. Users whose code suddenly starts to fail after an upgrade would be lost as to why it's suddenly failing.</p>", "type": "rendered"}, "created_on": "2017-11-16T01:18:06.297617+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-16T01:18:06.300064+00:00", "type": "pullrequest_comment", "id": 49705995}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49706468.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49706468"}}, "parent": {"id": 49705995, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49705995.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49705995"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Sounds good to me, let's go with the approach by adding a flag then", "markup": "markdown", "html": "<p>Sounds good to me, let's go with the approach by adding a flag then</p>", "type": "rendered"}, "created_on": "2017-11-16T01:32:37.105816+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "updated_on": "2017-11-16T01:32:37.108459+00:00", "type": "pullrequest_comment", "id": 49706468}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49890172.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49890172"}}, "parent": {"id": 49706468, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49706468.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49706468"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Has anyone started on implementing this solution yet? I've got a few lines of code written, but I don't want to be duplicating work if someone else has already made more progress. Additionally, should we add this flag to `Joint::SetPositionMaximal` as well or let it use the default behavior?", "markup": "markdown", "html": "<p>Has anyone started on implementing this solution yet? I've got a few lines of code written, but I don't want to be duplicating work if someone else has already made more progress. Additionally, should we add this flag to <code>Joint::SetPositionMaximal</code> as well or let it use the default behavior?</p>", "type": "rendered"}, "created_on": "2017-11-17T17:29:31.452297+00:00", "user": {"display_name": "Zach Anderson", "uuid": "{9ff24246-615c-4363-b2e9-d4376dc21d60}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9ff24246-615c-4363-b2e9-d4376dc21d60%7D"}, "html": {"href": "https://bitbucket.org/%7B9ff24246-615c-4363-b2e9-d4376dc21d60%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/83817c27892fe04bfd3afa2ea4fd473ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsZA-4.png"}}, "nickname": "zanderson", "type": "user", "account_id": "557058:ddb1c27b-9024-4e29-af53-26129daa9220"}, "updated_on": "2017-11-17T17:29:31.503256+00:00", "type": "pullrequest_comment", "id": 49890172}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49892109.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49892109"}}, "parent": {"id": 49890172, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49890172.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49890172"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Yes, I have another PR  [here](#!/osrf/gazebo/pull-requests/2814)    \nPlease feel free to review the PR   \nThanks for your help and contribution!  ", "markup": "markdown", "html": "<p>Yes, I have another PR  <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/pull-requests/2814\" rel=\"nofollow\">here</a>  <br />\nPlease feel free to review the PR <br />\nThanks for your help and contribution!  </p>", "type": "rendered"}, "created_on": "2017-11-17T17:57:57.233633+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "updated_on": "2017-11-17T17:57:57.236879+00:00", "type": "pullrequest_comment", "id": 49892109}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49892224.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49892224"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Another [PR](#!/osrf/gazebo/pull-requests/2814)   has been created to reflect the discussions here.    \nPlease review it and add your comments if any! ", "markup": "markdown", "html": "<p>Another <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/pull-requests/2814\" rel=\"nofollow\">PR</a>   has been created to reflect the discussions here.  <br />\nPlease review it and add your comments if any! </p>", "type": "rendered"}, "created_on": "2017-11-17T17:59:43.674006+00:00", "user": {"display_name": "Ying Lu", "uuid": "{11ec131e-4af6-4228-beaf-167b1c8d1c2c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D"}, "html": {"href": "https://bitbucket.org/%7B11ec131e-4af6-4228-beaf-167b1c8d1c2c%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:659bfe31-d941-44f5-aa6d-00058b070ea8/c88d5925-8a09-40c7-8684-c02aeafe0f59/128"}}, "nickname": "rosebudflyaway", "type": "user", "account_id": "557058:659bfe31-d941-44f5-aa6d-00058b070ea8"}, "updated_on": "2017-11-17T17:59:43.678519+00:00", "type": "pullrequest_comment", "id": 49892224}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/55957480.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-55957480"}}, "parent": {"id": 49892224, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49892224.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49892224"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "Pull request #2814 has been merged, I'll close this one.\n\nThanks everyone for all the effort!", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo/pull-requests/2814/fix-issue-2111-by-providing-options-to\" rel=\"nofollow\" class=\"ap-connect-link\">Pull request #2814</a> has been merged, I'll close this one.</p>\n<p>Thanks everyone for all the effort!</p>", "type": "rendered"}, "created_on": "2018-02-09T17:06:48.768153+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2018-02-09T17:06:48.770874+00:00", "type": "pullrequest_comment", "id": 55957480}], "page": 1, "size": 28}