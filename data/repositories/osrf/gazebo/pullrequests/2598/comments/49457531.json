{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49457531.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49457531"}}, "parent": {"id": 49454527, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598/comments/49454527.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598/_/diff#comment-49454527"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2598, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2598.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2598"}}, "title": "Fix2111"}, "content": {"raw": "I completely agree with the motive of having better-defined behavior for the API between different physics engines, but I'm afraid that the current implementation of physics in Gazebo was not originally designed for the kind of multiple-engine support that it currently exercises. As a result, there isn't a clear path to standardizing the behavior in a way that wouldn't be harmful to existing users. Having rigorously-defined behavior is one of the major goals of an upcoming revision of Gazebo, but that won't be back-portable to resolve this outstanding issue, since it involves a considerable redesign of the codebase.\n\nWe could potentially provide something similar to what you're proposing. We could give `SetPosition` a `preserve_world_velocity` (notice that it's a more specific name) flag which defaults to `false`. \n\n- When `preserve_world_velocity` is `false`, the physics engine will do whatever its default legacy behavior is. For ODE and Bullet, it would set the world velocity of the child link to all zeros. For DART and Simbody, it would preserve the link velocity relative to the parent link.\n\n- When `preserve_world_velocity` is `true`, ODE and Bullet will skip over resetting the world velocity of the child link so its world velocity remains unaffected. `DART` and `Simbody` will perhaps print a warning message or throw an exception, depending on what everyone thinks is the most appropriate level of error reporting.\n\nThat would still leave the default behavior somewhat weakly-defined and inconsistent between physics engines, but that's unavoidable with the current design if we want to avoid breaking existing, working code.", "markup": "markdown", "html": "<p>I completely agree with the motive of having better-defined behavior for the API between different physics engines, but I'm afraid that the current implementation of physics in Gazebo was not originally designed for the kind of multiple-engine support that it currently exercises. As a result, there isn't a clear path to standardizing the behavior in a way that wouldn't be harmful to existing users. Having rigorously-defined behavior is one of the major goals of an upcoming revision of Gazebo, but that won't be back-portable to resolve this outstanding issue, since it involves a considerable redesign of the codebase.</p>\n<p>We could potentially provide something similar to what you're proposing. We could give <code>SetPosition</code> a <code>preserve_world_velocity</code> (notice that it's a more specific name) flag which defaults to <code>false</code>. </p>\n<ul>\n<li>\n<p>When <code>preserve_world_velocity</code> is <code>false</code>, the physics engine will do whatever its default legacy behavior is. For ODE and Bullet, it would set the world velocity of the child link to all zeros. For DART and Simbody, it would preserve the link velocity relative to the parent link.</p>\n</li>\n<li>\n<p>When <code>preserve_world_velocity</code> is <code>true</code>, ODE and Bullet will skip over resetting the world velocity of the child link so its world velocity remains unaffected. <code>DART</code> and <code>Simbody</code> will perhaps print a warning message or throw an exception, depending on what everyone thinks is the most appropriate level of error reporting.</p>\n</li>\n</ul>\n<p>That would still leave the default behavior somewhat weakly-defined and inconsistent between physics engines, but that's unavoidable with the current design if we want to avoid breaking existing, working code.</p>", "type": "rendered"}, "created_on": "2017-11-13T20:20:00.763024+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-11-13T20:20:00.765127+00:00", "type": "pullrequest_comment", "id": 49457531}