{"rendered": {"reason": {"raw": "moved to #!/osrf/gazebo_design/pull-requests/30/smart-pointers-in-gazebo-physics-world/diff", "markup": "markdown", "html": "<p>moved to <a href=\"#!/osrf/gazebo_design/pull-requests/30/smart-pointers-in-gazebo-physics-world/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo_design/pull-requests/30/smart-pointers-in-gazebo-physics-world/diff</a></p>", "type": "rendered"}, "description": {"raw": "In c++11 the following statements are equivalent:\r\n\r\n~~~\r\nstd::shared_ptr<Typename> x(new std::shared_ptr<Typename>(arg1, arg2));\r\n~~~\r\n\r\n~~~\r\nauto x = std::make_shared<T>(arg1, arg2);\r\n~~~\r\n\r\n`make_shared` is more concise, but it is also [safer in certain cases](http://herbsutter.com/gotw/_102/). There is no `make_unique` in c++11 however; though it will be in c++14. In the meantime, [it is recommended](http://herbsutter.com/gotw/_102/) to include a version of `make_unique` in your own code ([dartsim has already done it](https://github.com/dartsim/dart/pull/639)). I've copied one such implementation into `gazebo/util/make_unique.hh` namespaced as `gazebo::make_unique`. The function is not declared as visible and the header file is not installed; it's just for internal use.\r\n\r\nI've used it in a couple places, which should be a sufficient test.", "markup": "markdown", "html": "<p>In c++11 the following statements are equivalent:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">Typename</span><span class=\"o\">&gt;</span> <span class=\"nt\">x</span><span class=\"o\">(</span><span class=\"nt\">new</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">Typename</span><span class=\"o\">&gt;(</span><span class=\"nt\">arg1</span><span class=\"o\">,</span> <span class=\"nt\">arg2</span><span class=\"o\">));</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">auto</span> <span class=\"nt\">x</span> <span class=\"o\">=</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">make_shared</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;(</span><span class=\"nt\">arg1</span><span class=\"o\">,</span> <span class=\"nt\">arg2</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p><code>make_shared</code> is more concise, but it is also <a data-is-external-link=\"true\" href=\"http://herbsutter.com/gotw/_102/\" rel=\"nofollow\">safer in certain cases</a>. There is no <code>make_unique</code> in c++11 however; though it will be in c++14. In the meantime, <a data-is-external-link=\"true\" href=\"http://herbsutter.com/gotw/_102/\" rel=\"nofollow\">it is recommended</a> to include a version of <code>make_unique</code> in your own code (<a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/pull/639\" rel=\"nofollow\">dartsim has already done it</a>). I've copied one such implementation into <code>gazebo/util/make_unique.hh</code> namespaced as <code>gazebo::make_unique</code>. The function is not declared as visible and the header file is not installed; it's just for internal use.</p>\n<p>I've used it in a couple places, which should be a sufficient test.</p>", "type": "rendered"}, "title": {"raw": "Create gazebo::make_unique while we wait for c++14, use it in a few places", "markup": "markdown", "html": "<p>Create gazebo::make_unique while we wait for c++14, use it in a few places</p>", "type": "rendered"}}, "type": "pullrequest", "description": "In c++11 the following statements are equivalent:\r\n\r\n~~~\r\nstd::shared_ptr<Typename> x(new std::shared_ptr<Typename>(arg1, arg2));\r\n~~~\r\n\r\n~~~\r\nauto x = std::make_shared<T>(arg1, arg2);\r\n~~~\r\n\r\n`make_shared` is more concise, but it is also [safer in certain cases](http://herbsutter.com/gotw/_102/). There is no `make_unique` in c++11 however; though it will be in c++14. In the meantime, [it is recommended](http://herbsutter.com/gotw/_102/) to include a version of `make_unique` in your own code ([dartsim has already done it](https://github.com/dartsim/dart/pull/639)). I've copied one such implementation into `gazebo/util/make_unique.hh` namespaced as `gazebo::make_unique`. The function is not declared as visible and the header file is not installed; it's just for internal use.\r\n\r\nI've used it in a couple places, which should be a sufficient test.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2232/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:644560d8f60c%0Dd0de5e75ba79?from_pullrequest_id=2232"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2232/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2232.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2232/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2232/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2232"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2232/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:644560d8f60c%0Dd0de5e75ba79?from_pullrequest_id=2232"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2232/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2232/statuses_page=1.json"}}, "title": "Create gazebo::make_unique while we wait for c++14, use it in a few places", "close_source_branch": false, "reviewers": [], "id": 2232, "destination": {"commit": {"hash": "d0de5e75ba79", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/d0de5e75ba79.json"}, "html": {"href": "#!/osrf/gazebo/commits/d0de5e75ba79"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "created_on": "2016-04-02T01:05:57.708443+00:00", "summary": {"raw": "In c++11 the following statements are equivalent:\r\n\r\n~~~\r\nstd::shared_ptr<Typename> x(new std::shared_ptr<Typename>(arg1, arg2));\r\n~~~\r\n\r\n~~~\r\nauto x = std::make_shared<T>(arg1, arg2);\r\n~~~\r\n\r\n`make_shared` is more concise, but it is also [safer in certain cases](http://herbsutter.com/gotw/_102/). There is no `make_unique` in c++11 however; though it will be in c++14. In the meantime, [it is recommended](http://herbsutter.com/gotw/_102/) to include a version of `make_unique` in your own code ([dartsim has already done it](https://github.com/dartsim/dart/pull/639)). I've copied one such implementation into `gazebo/util/make_unique.hh` namespaced as `gazebo::make_unique`. The function is not declared as visible and the header file is not installed; it's just for internal use.\r\n\r\nI've used it in a couple places, which should be a sufficient test.", "markup": "markdown", "html": "<p>In c++11 the following statements are equivalent:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">Typename</span><span class=\"o\">&gt;</span> <span class=\"nt\">x</span><span class=\"o\">(</span><span class=\"nt\">new</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">Typename</span><span class=\"o\">&gt;(</span><span class=\"nt\">arg1</span><span class=\"o\">,</span> <span class=\"nt\">arg2</span><span class=\"o\">));</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">auto</span> <span class=\"nt\">x</span> <span class=\"o\">=</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">make_shared</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;(</span><span class=\"nt\">arg1</span><span class=\"o\">,</span> <span class=\"nt\">arg2</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p><code>make_shared</code> is more concise, but it is also <a data-is-external-link=\"true\" href=\"http://herbsutter.com/gotw/_102/\" rel=\"nofollow\">safer in certain cases</a>. There is no <code>make_unique</code> in c++11 however; though it will be in c++14. In the meantime, <a data-is-external-link=\"true\" href=\"http://herbsutter.com/gotw/_102/\" rel=\"nofollow\">it is recommended</a> to include a version of <code>make_unique</code> in your own code (<a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/pull/639\" rel=\"nofollow\">dartsim has already done it</a>). I've copied one such implementation into <code>gazebo/util/make_unique.hh</code> namespaced as <code>gazebo::make_unique</code>. The function is not declared as visible and the header file is not installed; it's just for internal use.</p>\n<p>I've used it in a couple places, which should be a sufficient test.</p>", "type": "rendered"}, "source": {"commit": {"hash": "644560d8f60c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/644560d8f60c.json"}, "html": {"href": "#!/osrf/gazebo/commits/644560d8f60c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "make_unique7"}}, "comment_count": 1, "state": "DECLINED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-04-02T02:35:26.586068+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}], "reason": "moved to #!/osrf/gazebo_design/pull-requests/30/smart-pointers-in-gazebo-physics-world/diff", "updated_on": "2016-04-02T03:55:12.577259+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": null, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}