{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2858/comments/54181621.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2858/_/diff#comment-54181621"}}, "parent": {"id": 54181356, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2858/comments/54181356.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2858/_/diff#comment-54181356"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2858, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2858.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2858"}}, "title": "Only initialize the marker service in the client (GUI) scene [targeting gazebo8]"}, "content": {"raw": "That's a good point.\n\nThe `MarkerVisual` sets its visibility flag to `GZ_VISIBILITY_GUI` by default. The marker message seems to contain an optional `visibility` field which can be set to `GUI` or `ALL`, but I don't see that flag getting used anywhere in `MarkerVisual.cc` or `MarkerManager.cc`, so as far as I can tell, that message flag will never have an effect. As a result, the marker will never be visible to cameras, even if it gets added to the server scene with the `visibility` flag set to `ALL`.\n\nAn alternative fix for this might be to create two marker services: `/marker/gui` and `/marker/sensors` or something along those lines. Then we can choose which type of service a scene should offer based on whether it's a server scene or a client scene. That would mean eliminating the `visibility` flag, but that flag isn't getting used anyhow.", "markup": "markdown", "html": "<p>That's a good point.</p>\n<p>The <code>MarkerVisual</code> sets its visibility flag to <code>GZ_VISIBILITY_GUI</code> by default. The marker message seems to contain an optional <code>visibility</code> field which can be set to <code>GUI</code> or <code>ALL</code>, but I don't see that flag getting used anywhere in <code>MarkerVisual.cc</code> or <code>MarkerManager.cc</code>, so as far as I can tell, that message flag will never have an effect. As a result, the marker will never be visible to cameras, even if it gets added to the server scene with the <code>visibility</code> flag set to <code>ALL</code>.</p>\n<p>An alternative fix for this might be to create two marker services: <code>/marker/gui</code> and <code>/marker/sensors</code> or something along those lines. Then we can choose which type of service a scene should offer based on whether it's a server scene or a client scene. That would mean eliminating the <code>visibility</code> flag, but that flag isn't getting used anyhow.</p>", "type": "rendered"}, "created_on": "2018-01-20T00:11:58.529649+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-01-20T00:13:20.784431+00:00", "type": "pullrequest_comment", "id": 54181621}