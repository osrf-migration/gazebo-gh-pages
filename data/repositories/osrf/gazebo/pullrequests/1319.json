{"rendered": {"description": {"raw": "Louise discovered a bug where calling `Visual::SetMaterial` on a Visual made that item opaque, even when Visual::transparency was less than 1. I've noticed that uses of SetMaterial for a transparent object throughout Gazebo (see `rendering::AxisVisual`, `rendering::OrbitViewController`) use a transparent material, which may be why this bug was not noticed before.\r\n\r\nThis pull request changes `Visual::SetMaterial` to use the last transparency value set for the Visual to apply the same transparency filter to the model after the material has been applied. For some reason, calling `Visual::SetMaterial` then `Visual::SetTransparency` did not set the transparency of the desired object. Someone who has used Ogre more than I have can explain this to me.\r\n\r\nYou can see this bug by setting the texture of the floor in branch [hitl_textures_inspector_transp](#!/osrf/gazebo/branch/hitl_textures_inspector_transp), and compare the fix in [hitl_textures_inspector_transp_jackie](#!/osrf/gazebo/branch/hitl_textures_inspector_transp_jackie), which is a superset of the changes in this PR.", "markup": "markdown", "html": "<p>Louise discovered a bug where calling <code>Visual::SetMaterial</code> on a Visual made that item opaque, even when Visual::transparency was less than 1. I've noticed that uses of SetMaterial for a transparent object throughout Gazebo (see <code>rendering::AxisVisual</code>, <code>rendering::OrbitViewController</code>) use a transparent material, which may be why this bug was not noticed before.</p>\n<p>This pull request changes <code>Visual::SetMaterial</code> to use the last transparency value set for the Visual to apply the same transparency filter to the model after the material has been applied. For some reason, calling <code>Visual::SetMaterial</code> then <code>Visual::SetTransparency</code> did not set the transparency of the desired object. Someone who has used Ogre more than I have can explain this to me.</p>\n<p>You can see this bug by setting the texture of the floor in branch <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/branch/hitl_textures_inspector_transp\" rel=\"nofollow\">hitl_textures_inspector_transp</a>, and compare the fix in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/branch/hitl_textures_inspector_transp_jackie\" rel=\"nofollow\">hitl_textures_inspector_transp_jackie</a>, which is a superset of the changes in this PR.</p>", "type": "rendered"}, "title": {"raw": "Set transparency in `Visual::SetMaterial`", "markup": "markdown", "html": "<p>Set transparency in <code>Visual::SetMaterial</code></p>", "type": "rendered"}}, "type": "pullrequest", "description": "Louise discovered a bug where calling `Visual::SetMaterial` on a Visual made that item opaque, even when Visual::transparency was less than 1. I've noticed that uses of SetMaterial for a transparent object throughout Gazebo (see `rendering::AxisVisual`, `rendering::OrbitViewController`) use a transparent material, which may be why this bug was not noticed before.\r\n\r\nThis pull request changes `Visual::SetMaterial` to use the last transparency value set for the Visual to apply the same transparency filter to the model after the material has been applied. For some reason, calling `Visual::SetMaterial` then `Visual::SetTransparency` did not set the transparency of the desired object. Someone who has used Ogre more than I have can explain this to me.\r\n\r\nYou can see this bug by setting the texture of the floor in branch [hitl_textures_inspector_transp](#!/osrf/gazebo/branch/hitl_textures_inspector_transp), and compare the fix in [hitl_textures_inspector_transp_jackie](#!/osrf/gazebo/branch/hitl_textures_inspector_transp_jackie), which is a superset of the changes in this PR.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1319/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:38106cba8f15%0Dc01e0298455b?from_pullrequest_id=1319"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/1319/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/1319.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/1319/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1319/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1319"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/1319/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:38106cba8f15%0Dc01e0298455b?from_pullrequest_id=1319"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1319/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/1319/statuses_page=1.json"}}, "title": "Set transparency in `Visual::SetMaterial`", "close_source_branch": true, "reviewers": [], "id": 1319, "destination": {"commit": {"hash": "c01e0298455b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c01e0298455b.json"}, "html": {"href": "#!/osrf/gazebo/commits/c01e0298455b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2014-12-02T23:41:54.317973+00:00", "summary": {"raw": "Louise discovered a bug where calling `Visual::SetMaterial` on a Visual made that item opaque, even when Visual::transparency was less than 1. I've noticed that uses of SetMaterial for a transparent object throughout Gazebo (see `rendering::AxisVisual`, `rendering::OrbitViewController`) use a transparent material, which may be why this bug was not noticed before.\r\n\r\nThis pull request changes `Visual::SetMaterial` to use the last transparency value set for the Visual to apply the same transparency filter to the model after the material has been applied. For some reason, calling `Visual::SetMaterial` then `Visual::SetTransparency` did not set the transparency of the desired object. Someone who has used Ogre more than I have can explain this to me.\r\n\r\nYou can see this bug by setting the texture of the floor in branch [hitl_textures_inspector_transp](#!/osrf/gazebo/branch/hitl_textures_inspector_transp), and compare the fix in [hitl_textures_inspector_transp_jackie](#!/osrf/gazebo/branch/hitl_textures_inspector_transp_jackie), which is a superset of the changes in this PR.", "markup": "markdown", "html": "<p>Louise discovered a bug where calling <code>Visual::SetMaterial</code> on a Visual made that item opaque, even when Visual::transparency was less than 1. I've noticed that uses of SetMaterial for a transparent object throughout Gazebo (see <code>rendering::AxisVisual</code>, <code>rendering::OrbitViewController</code>) use a transparent material, which may be why this bug was not noticed before.</p>\n<p>This pull request changes <code>Visual::SetMaterial</code> to use the last transparency value set for the Visual to apply the same transparency filter to the model after the material has been applied. For some reason, calling <code>Visual::SetMaterial</code> then <code>Visual::SetTransparency</code> did not set the transparency of the desired object. Someone who has used Ogre more than I have can explain this to me.</p>\n<p>You can see this bug by setting the texture of the floor in branch <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/branch/hitl_textures_inspector_transp\" rel=\"nofollow\">hitl_textures_inspector_transp</a>, and compare the fix in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/branch/hitl_textures_inspector_transp_jackie\" rel=\"nofollow\">hitl_textures_inspector_transp_jackie</a>, which is a superset of the changes in this PR.</p>", "type": "rendered"}, "source": {"commit": {"hash": "2461b68686f5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/2461b68686f5.json"}, "html": {"href": "#!/osrf/gazebo/commits/2461b68686f5"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "visual_setmaterial_transparency"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2014-12-03T14:13:27.969114+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2014-12-03T21:48:16.347579+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2014-12-03T21:50:15.494527+00:00", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "merge_commit": {"hash": "38106cba8f15", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/38106cba8f15.json"}, "html": {"href": "#!/osrf/gazebo/commits/38106cba8f15"}}}, "closed_by": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}}