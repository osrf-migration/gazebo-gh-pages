{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2215/comments/16372062.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2215/_/diff#comment-16372062"}}, "parent": {"id": 16371366, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2215/comments/16371366.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2215/_/diff#comment-16371366"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2215, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2215.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2215"}}, "title": "Fix bug when simbody is launched without any model"}, "content": {"raw": "Sorry about the vague directions, I just checked now that it isn't as straight forward as I thought. Try this patch:\n\n~~~\ndiff -r 170103dbc7b1 test/integration/world.cc\n--- a/test/integration/world.cc\tThu Mar 24 19:02:30 2016 -0700\n+++ b/test/integration/world.cc\tMon Mar 28 15:32:52 2016 -0700\n@@ -17,19 +17,28 @@\n #include \"gazebo/test/ServerFixture.hh\"\n #include \"gazebo/physics/Light.hh\"\n #include \"gazebo/physics/physics.hh\"\n+#include \"gazebo/test/helper_physics_generator.hh\"\n \n using namespace gazebo;\n-class WorldTest : public ServerFixture\n+class WorldTest : public ServerFixture,\n+                  public testing::WithParamInterface<const char*>\n {\n+  public: void ClearEmptyWorld(const std::string &_physicsEngine);\n };\n \n /////////////////////////////////////////////////\n-TEST_F(WorldTest, ClearEmptyWorld)\n+void WorldTest::ClearEmptyWorld(const std::string &_physicsEngine)\n {\n-  Load(\"worlds/blank.world\");\n+  Load(\"worlds/blank.world\", false, _physicsEngine);\n   physics::WorldPtr world = physics::get_world(\"default\");\n   ASSERT_TRUE(world != NULL);\n \n+  // Verify physics engine type\n+  gzdbg << \"Engine: \" << _physicsEngine << std::endl;\n+  physics::PhysicsEnginePtr physics = world->GetPhysicsEngine();\n+  ASSERT_TRUE(physics != NULL);\n+  EXPECT_EQ(physics->GetType(), _physicsEngine);\n+\n   EXPECT_EQ(world->GetModelCount(), 0u);\n \n   world->Clear();\n@@ -45,6 +54,11 @@\n   EXPECT_EQ(world->GetModelCount(), 1u);\n }\n \n+TEST_P(WorldTest, ClearEmptyWorld)\n+{\n+  ClearEmptyWorld(GetParam());\n+}\n+\n /////////////////////////////////////////////////\n TEST_F(WorldTest, Clear)\n {\n@@ -351,6 +365,8 @@\n   EXPECT_FALSE(boxModel != NULL);\n }\n \n+INSTANTIATE_TEST_CASE_P(PhysicsEngines, WorldTest, PHYSICS_ENGINE_VALUES);\n+\n /////////////////////////////////////////////////\n int main(int argc, char **argv)\n {\n~~~\n\nThen when you try to run this test case specifically:\n\n`./test/integration/INTEGRATION_world --gtest_filter=\"*Empty*\"`\n\nyou can see that it crashes for Simbody if we're on default. I haven't tried with your pull request yet to see if it passes then.", "markup": "markdown", "html": "<p>Sorry about the vague directions, I just checked now that it isn't as straight forward as I thought. Try this patch:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 170103dbc7b1 test/integration/world.cc</span>\n<span class=\"gd\">--- a/test/integration/world.cc Thu Mar 24 19:02:30 2016 -0700</span>\n<span class=\"gi\">+++ b/test/integration/world.cc Mon Mar 28 15:32:52 2016 -0700</span>\n<span class=\"gu\">@@ -17,19 +17,28 @@</span>\n #include &quot;gazebo/test/ServerFixture.hh&quot;\n #include &quot;gazebo/physics/Light.hh&quot;\n #include &quot;gazebo/physics/physics.hh&quot;\n<span class=\"gi\">+#include &quot;gazebo/test/helper_physics_generator.hh&quot;</span>\n\n using namespace gazebo;\n<span class=\"gd\">-class WorldTest : public ServerFixture</span>\n<span class=\"gi\">+class WorldTest : public ServerFixture,</span>\n<span class=\"gi\">+                  public testing::WithParamInterface&lt;const char*&gt;</span>\n {\n<span class=\"gi\">+  public: void ClearEmptyWorld(const std::string &amp;_physicsEngine);</span>\n };\n\n /////////////////////////////////////////////////\n<span class=\"gd\">-TEST_F(WorldTest, ClearEmptyWorld)</span>\n<span class=\"gi\">+void WorldTest::ClearEmptyWorld(const std::string &amp;_physicsEngine)</span>\n {\n<span class=\"gd\">-  Load(&quot;worlds/blank.world&quot;);</span>\n<span class=\"gi\">+  Load(&quot;worlds/blank.world&quot;, false, _physicsEngine);</span>\n   physics::WorldPtr world = physics::get_world(&quot;default&quot;);\n   ASSERT_TRUE(world != NULL);\n\n<span class=\"gi\">+  // Verify physics engine type</span>\n<span class=\"gi\">+  gzdbg &lt;&lt; &quot;Engine: &quot; &lt;&lt; _physicsEngine &lt;&lt; std::endl;</span>\n<span class=\"gi\">+  physics::PhysicsEnginePtr physics = world-&gt;GetPhysicsEngine();</span>\n<span class=\"gi\">+  ASSERT_TRUE(physics != NULL);</span>\n<span class=\"gi\">+  EXPECT_EQ(physics-&gt;GetType(), _physicsEngine);</span>\n<span class=\"gi\">+</span>\n   EXPECT_EQ(world-&gt;GetModelCount(), 0u);\n\n   world-&gt;Clear();\n<span class=\"gu\">@@ -45,6 +54,11 @@</span>\n   EXPECT_EQ(world-&gt;GetModelCount(), 1u);\n }\n\n<span class=\"gi\">+TEST_P(WorldTest, ClearEmptyWorld)</span>\n<span class=\"gi\">+{</span>\n<span class=\"gi\">+  ClearEmptyWorld(GetParam());</span>\n<span class=\"gi\">+}</span>\n<span class=\"gi\">+</span>\n /////////////////////////////////////////////////\n TEST_F(WorldTest, Clear)\n {\n<span class=\"gu\">@@ -351,6 +365,8 @@</span>\n   EXPECT_FALSE(boxModel != NULL);\n }\n\n<span class=\"gi\">+INSTANTIATE_TEST_CASE_P(PhysicsEngines, WorldTest, PHYSICS_ENGINE_VALUES);</span>\n<span class=\"gi\">+</span>\n /////////////////////////////////////////////////\n int main(int argc, char **argv)\n {\n</pre></div>\n\n\n<p>Then when you try to run this test case specifically:</p>\n<p><code>./test/integration/INTEGRATION_world --gtest_filter=\"*Empty*\"</code></p>\n<p>you can see that it crashes for Simbody if we're on default. I haven't tried with your pull request yet to see if it passes then.</p>", "type": "rendered"}, "created_on": "2016-03-28T22:40:26.525636+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2016-03-28T22:40:26.535760+00:00", "type": "pullrequest_comment", "id": 16372062}