{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2826/comments/52080505.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2826/_/diff#comment-52080505"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2826, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2826.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2826"}}, "title": "Move header buffer from heap to stack, thereby avoid racecondition between multiple writers to the same connection."}, "content": {"raw": "I've managed to get consistent failures with the following test:\n\n~~~\ndiff -r 7da89efd6c8f test/integration/transport.cc\n--- a/test/integration/transport.cc\tWed Dec 13 01:37:19 2017 +0000\n+++ b/test/integration/transport.cc\tFri Dec 15 13:51:56 2017 -0800\n@@ -185,6 +185,33 @@\n }\n \n /////////////////////////////////////////////////\n+void NodeTeardownLoop()\n+{\n+  for (int i = 0; i < 10000; ++i)\n+  {\n+    transport::NodePtr node(new transport::Node());\n+    node->Init();\n+    transport::PublisherPtr pub = node->Advertise<msgs::GzString>(\"~/test\");\n+    transport::PublisherPtr pub2 = node->Advertise<msgs::GzString>(\"~/test2\");\n+    transport::PublisherPtr pub3 = node->Advertise<msgs::GzString>(\"~/test3\");\n+    node->Fini();\n+  }\n+}\n+\n+/////////////////////////////////////////////////\n+// This test creates multiple threads with transport nodes to teardown.\n+TEST_F(TransportTest, MultiThreadedNodeTeardownLoop)\n+{\n+  Load(\"worlds/empty.world\");\n+\n+  boost::thread *thread1 = new boost::thread(boost::bind(&NodeTeardownLoop));\n+  boost::thread *thread2 = new boost::thread(boost::bind(&NodeTeardownLoop));\n+\n+  thread1->join();\n+  thread2->join();\n+}\n+\n+/////////////////////////////////////////////////\n void SinglePub()\n {\n   transport::NodePtr node(new transport::Node());\n~~~\n\nThis pull request mostly fixes it, but it is a little flaky; there may be other bugs hiding here.", "markup": "markdown", "html": "<p>I've managed to get consistent failures with the following test:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 7da89efd6c8f test/integration/transport.cc</span>\n<span class=\"gd\">--- a/test/integration/transport.cc Wed Dec 13 01:37:19 2017 +0000</span>\n<span class=\"gi\">+++ b/test/integration/transport.cc Fri Dec 15 13:51:56 2017 -0800</span>\n<span class=\"gu\">@@ -185,6 +185,33 @@</span>\n }\n\n /////////////////////////////////////////////////\n<span class=\"gi\">+void NodeTeardownLoop()</span>\n<span class=\"gi\">+{</span>\n<span class=\"gi\">+  for (int i = 0; i &lt; 10000; ++i)</span>\n<span class=\"gi\">+  {</span>\n<span class=\"gi\">+    transport::NodePtr node(new transport::Node());</span>\n<span class=\"gi\">+    node-&gt;Init();</span>\n<span class=\"gi\">+    transport::PublisherPtr pub = node-&gt;Advertise&lt;msgs::GzString&gt;(&quot;~/test&quot;);</span>\n<span class=\"gi\">+    transport::PublisherPtr pub2 = node-&gt;Advertise&lt;msgs::GzString&gt;(&quot;~/test2&quot;);</span>\n<span class=\"gi\">+    transport::PublisherPtr pub3 = node-&gt;Advertise&lt;msgs::GzString&gt;(&quot;~/test3&quot;);</span>\n<span class=\"gi\">+    node-&gt;Fini();</span>\n<span class=\"gi\">+  }</span>\n<span class=\"gi\">+}</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+/////////////////////////////////////////////////</span>\n<span class=\"gi\">+// This test creates multiple threads with transport nodes to teardown.</span>\n<span class=\"gi\">+TEST_F(TransportTest, MultiThreadedNodeTeardownLoop)</span>\n<span class=\"gi\">+{</span>\n<span class=\"gi\">+  Load(&quot;worlds/empty.world&quot;);</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  boost::thread *thread1 = new boost::thread(boost::bind(&amp;NodeTeardownLoop));</span>\n<span class=\"gi\">+  boost::thread *thread2 = new boost::thread(boost::bind(&amp;NodeTeardownLoop));</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  thread1-&gt;join();</span>\n<span class=\"gi\">+  thread2-&gt;join();</span>\n<span class=\"gi\">+}</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+/////////////////////////////////////////////////</span>\n void SinglePub()\n {\n   transport::NodePtr node(new transport::Node());\n</pre></div>\n\n\n<p>This pull request mostly fixes it, but it is a little flaky; there may be other bugs hiding here.</p>", "type": "rendered"}, "created_on": "2017-12-15T21:53:45.853590+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-12-15T21:53:45.856040+00:00", "type": "pullrequest_comment", "id": 52080505}