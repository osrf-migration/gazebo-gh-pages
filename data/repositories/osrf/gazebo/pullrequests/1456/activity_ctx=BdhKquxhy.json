{"pagelen": 50, "values": [{"update": {"description": "Some sort of `Add*Force` function is needed to be used with the Apply Force GUI.\r\n\r\nThe current `Link::Add*Force` API is [not very clear](#!/osrf/gazebo/issue/354/setforce-settorque-in-class-odelink-point). Talking to @scpeters, we thought of adding 3 new functions as follows, and eventually deprecating the currently existing ones.\r\n\r\n~~~\r\n      /// \\brief Add a force expressed in the world frame.\r\n      /// \\param[in] _force Force is a free vector (a direction, orientation)\r\n      /// expressed in the world frame. Each component corresponds to the force\r\n      /// which will be added in that direction.\r\n      /// \\param[in] _offset Offset position (translation) with respect to the\r\n      /// world frame. It defaults to the world origin.\r\n      public: virtual void AddWorldForce(const math::Vector3 &_force,\r\n          const math::Vector3 &_offset = math::Vector3::Zero) = 0;\r\n\r\n      /// \\brief Add a force expressed in the link frame.\r\n      /// \\param[in] _force Force is a free vector (a direction, orientation)\r\n      /// expressed in the link frame. Each component corresponds to the force\r\n      /// which will be added in that direction.\r\n      /// \\param[in] _offset Offset position (translation) with respect to the\r\n      /// link frame. It defaults to the link origin.\r\n      public: virtual void AddLinkForce(const math::Vector3 &_force,\r\n          const math::Vector3 &_offset = math::Vector3::Zero) = 0;\r\n\r\n      /// \\brief Add a force expressed in the inertial frame.\r\n      /// \\param[in] _force Force is a free vector (a direction, orientation)\r\n      /// expressed in the inertial frame. Each component corresponds to the force\r\n      /// which will be added in that direction.\r\n      /// \\param[in] _offset Offset position (translation) with respect to the\r\n      /// inertial frame. It defaults to CoG.\r\n      public: virtual void AddInertialForce(const math::Vector3 &_force,\r\n          const math::Vector3 &_offset = math::Vector3::Zero) = 0;\r\n~~~\r\n\r\nThis PR implements one of them, `AddLinkForce`, which is the one needed for the Apply Force GUI. You can try out the GUI on branch [apply_force_dialog](#!/osrf/gazebo/branch/apply_force_dialog) if you want to see the function in action.\r\n\r\nThis PR includes integration tests for the new function. Four situations are tested, each with a combination of frame poses and application points which hopefully cover most of the possibilities without too much overlap. But it's very much likely that these are very bad test cases... \r\n\r\nBelow you can see how I expect the cases to be working. xyz are the axes of the world frame (W), link frame (L) and inertial frame (I).\r\n\r\n![applylinkforce.png](https://bitbucket.org/repo/jgXqbo/images/498559168-applylinkforce.png)\r\n\r\nAll test cases are passing. But I did some weird stuff to make some tests pass. More specifically, in lines [377](#!/osrf/gazebo/pull-request/1456/implemented-addlinkforce-for-ode-with/diff#Ltest/integration/physics_link.ccT377) and [383/384](#!/osrf/gazebo/pull-request/1456/implemented-addlinkforce-for-ode-with/diff#Ltest/integration/physics_link.ccT383). Having that said, I'm sure there's a lot more weird stuff I'm not aware of.", "title": "Implemented AddLinkForce for ODE with integration tests", "destination": {"commit": {"hash": "c1fbfcaa6ea7", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c1fbfcaa6ea7.json"}, "html": {"href": "#!/osrf/gazebo/commits/c1fbfcaa6ea7"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "46428c27e072", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/46428c27e072.json"}, "html": {"href": "#!/osrf/gazebo/commits/46428c27e072"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "add_XXX_force"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2015-02-25T20:11:49.518096+00:00"}, "pull_request": {"type": "pullrequest", "id": 1456, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1456.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1456"}}, "title": "Implemented AddLinkForce for ODE with integration tests"}}, {"update": {"description": "Some sort of `Add*Force` function is needed to be used with the Apply Force GUI.\r\n\r\nThe current `Link::Add*Force` API is [not very clear](#!/osrf/gazebo/issue/354/setforce-settorque-in-class-odelink-point). Talking to @scpeters, we thought of adding 3 new functions as follows, and eventually deprecating the currently existing ones.\r\n\r\n~~~\r\n      /// \\brief Add a force expressed in the world frame.\r\n      /// \\param[in] _force Force is a free vector (a direction, orientation)\r\n      /// expressed in the world frame. Each component corresponds to the force\r\n      /// which will be added in that direction.\r\n      /// \\param[in] _offset Offset position (translation) with respect to the\r\n      /// world frame. It defaults to the world origin.\r\n      public: virtual void AddWorldForce(const math::Vector3 &_force,\r\n          const math::Vector3 &_offset = math::Vector3::Zero) = 0;\r\n\r\n      /// \\brief Add a force expressed in the link frame.\r\n      /// \\param[in] _force Force is a free vector (a direction, orientation)\r\n      /// expressed in the link frame. Each component corresponds to the force\r\n      /// which will be added in that direction.\r\n      /// \\param[in] _offset Offset position (translation) with respect to the\r\n      /// link frame. It defaults to the link origin.\r\n      public: virtual void AddLinkForce(const math::Vector3 &_force,\r\n          const math::Vector3 &_offset = math::Vector3::Zero) = 0;\r\n\r\n      /// \\brief Add a force expressed in the inertial frame.\r\n      /// \\param[in] _force Force is a free vector (a direction, orientation)\r\n      /// expressed in the inertial frame. Each component corresponds to the force\r\n      /// which will be added in that direction.\r\n      /// \\param[in] _offset Offset position (translation) with respect to the\r\n      /// inertial frame. It defaults to CoG.\r\n      public: virtual void AddInertialForce(const math::Vector3 &_force,\r\n          const math::Vector3 &_offset = math::Vector3::Zero) = 0;\r\n~~~\r\n\r\nThis PR implements one of them, `AddLinkForce`, which is the one needed for the Apply Force GUI. You can try out the GUI on branch [apply_force_dialog](#!/osrf/gazebo/branch/apply_force_dialog) if you want to see the function in action.\r\n\r\nThis PR includes integration tests for the new function. Four situations are tested, each with a combination of frame poses and application points which hopefully cover most of the possibilities without too much overlap. But it's very much likely that these are very bad test cases... \r\n\r\nBelow you can see how I expect the cases to be working. xyz are the axes of the world frame (W), link frame (L) and inertial frame (I).\r\n\r\n![applylinkforce.png](https://bitbucket.org/repo/jgXqbo/images/498559168-applylinkforce.png)\r\n\r\nAll test cases are passing. But I did some weird stuff to make some tests pass. More specifically, in lines [377](#!/osrf/gazebo/pull-request/new#Ltest/integration/physics_link.ccT377) and [383/384](#!/osrf/gazebo/pull-request/new#Ltest/integration/physics_link.ccT383). Having that said, I'm sure there's a lot more weird stuff I'm not aware of.", "title": "Implemented AddLinkForce for ODE with integration tests", "destination": {"commit": {"hash": "c1fbfcaa6ea7", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c1fbfcaa6ea7.json"}, "html": {"href": "#!/osrf/gazebo/commits/c1fbfcaa6ea7"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "46428c27e072", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/46428c27e072.json"}, "html": {"href": "#!/osrf/gazebo/commits/46428c27e072"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "add_XXX_force"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2015-02-25T20:10:40.133496+00:00"}, "pull_request": {"type": "pullrequest", "id": 1456, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1456.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1456"}}, "title": "Implemented AddLinkForce for ODE with integration tests"}}, {"update": {"description": "Some sort of `Add*Force` function is needed to be used with the Apply Force GUI.\r\n\r\nThe current `Link::Add*Force` API is [not very clear](#!/osrf/gazebo/issue/354/setforce-settorque-in-class-odelink-point). Talking to @scpeters, we thought of adding 3 new functions as follows, and eventually deprecating the currently existing ones.\r\n\r\n~~~\r\n      /// \\brief Add a force expressed in the world frame.\r\n      /// \\param[in] _force Force is a free vector (a direction, orientation)\r\n      /// expressed in the world frame. Each component corresponds to the force\r\n      /// which will be added in that direction.\r\n      /// \\param[in] _offset Offset position (translation) with respect to the\r\n      /// world frame. It defaults to the world origin.\r\n      public: virtual void AddWorldForce(const math::Vector3 &_force,\r\n          const math::Vector3 &_offset = math::Vector3::Zero) = 0;\r\n\r\n      /// \\brief Add a force expressed in the link frame.\r\n      /// \\param[in] _force Force is a free vector (a direction, orientation)\r\n      /// expressed in the link frame. Each component corresponds to the force\r\n      /// which will be added in that direction.\r\n      /// \\param[in] _offset Offset position (translation) with respect to the\r\n      /// link frame. It defaults to the link origin.\r\n      public: virtual void AddLinkForce(const math::Vector3 &_force,\r\n          const math::Vector3 &_offset = math::Vector3::Zero) = 0;\r\n\r\n      /// \\brief Add a force expressed in the inertial frame.\r\n      /// \\param[in] _force Force is a free vector (a direction, orientation)\r\n      /// expressed in the inertial frame. Each component corresponds to the force\r\n      /// which will be added in that direction.\r\n      /// \\param[in] _offset Offset position (translation) with respect to the\r\n      /// inertial frame. It defaults to CoG.\r\n      public: virtual void AddInertialForce(const math::Vector3 &_force,\r\n          const math::Vector3 &_offset = math::Vector3::Zero) = 0;\r\n~~~\r\n\r\nThis PR implements one of them, `AddLinkForce`, which is the one needed for the Apply Force GUI. You can try out the GUI on branch [apply_force_dialog](#!/osrf/gazebo/branch/apply_force_dialog) if you want to see the function in action.\r\n\r\nThis PR includes integration tests for the new function. Four situations are tested, each with a combination of frame poses and application points which hopefully cover most of the possibilities without too much overlap. But it's very much likely that these are very bad test cases... \r\n\r\nBelow you can see how I expect the cases to be working. xyz are the axes of the world frame (W), link frame (L) and inertial frame (I).\r\n\r\n![applylinkforce.png](https://bitbucket.org/repo/jgXqbo/images/498559168-applylinkforce.png)\r\n\r\nAll test cases are passing. But I did some weird stuff to make some tests pass. More specifically, in lines [377](#!/osrf/gazebo/pull-request/new#Ltest/integration/physics_link.ccT377) and [383/384](#!/osrf/gazebo/pull-request/new#Ltest/integration/physics_link.ccT383). Having that said, I'm sure there's a lot more weird stuff I'm not aware of.", "title": "Implemented AddLinkForce for ODE with integration tests", "destination": {"commit": {"hash": "c1fbfcaa6ea7", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c1fbfcaa6ea7.json"}, "html": {"href": "#!/osrf/gazebo/commits/c1fbfcaa6ea7"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "46428c27e072", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/46428c27e072.json"}, "html": {"href": "#!/osrf/gazebo/commits/46428c27e072"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "add_XXX_force"}}, "state": "OPEN", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "date": "2015-02-25T20:10:39.652653+00:00"}, "pull_request": {"type": "pullrequest", "id": 1456, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1456.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1456"}}, "title": "Implemented AddLinkForce for ODE with integration tests"}}]}