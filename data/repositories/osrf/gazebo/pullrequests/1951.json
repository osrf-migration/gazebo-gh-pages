{"rendered": {"description": {"raw": "In function \"SendMessage()\" from file \"transport/Publisher.cc\", the following line can lead to memory corruption.\r\n\r\n```\r\n#!c++\r\nthis->pubIds[*pubIter] = this->publication->Publish(*iter,\r\n                boost::bind(&Publisher::OnPublishComplete, this, _1), *pubIter);\r\n```\r\n\r\nThe method Publish() calls directly the callback OnPublishComplete(), which erases the map entry \"this->pubIds[*pubIter]\". \r\nIn c/c++, considering an assignment, the order of evaluation of right and left operands is not specified. Therefore the compiler can choose to evaluate first \"this->pubIds[*pubIter]\", then executes the methode Publish(). The assignment ends up with writting in a memory area that has been disallocated.\r\n\r\nThe solution to avoid that is simple. Just split the assignment in two steps:\r\n\r\n```\r\n#!c++\r\nint result = this->publication->Publish(*iter,\r\n                boost::bind(&Publisher::OnPublishComplete, this, _1), *pubIter);\r\n\r\nthis->pubIds[*pubIter] = result;\r\n\r\n```", "markup": "markdown", "html": "<p>In function \"SendMessage()\" from file \"transport/Publisher.cc\", the following line can lead to memory corruption.</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">pubIds</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">pubIter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">publication</span><span class=\"o\">-&gt;</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">,</span>\n                <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Publisher</span><span class=\"o\">::</span><span class=\"n\">OnPublishComplete</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">pubIter</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>The method Publish() calls directly the callback OnPublishComplete(), which erases the map entry \"this-&gt;pubIds[<em>pubIter]\". \nIn c/c++, considering an assignment, the order of evaluation of right and left operands is not specified. Therefore the compiler can choose to evaluate first \"this-&gt;pubIds[</em>pubIter]\", then executes the methode Publish(). The assignment ends up with writting in a memory area that has been disallocated.</p>\n<p>The solution to avoid that is simple. Just split the assignment in two steps:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">publication</span><span class=\"o\">-&gt;</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">,</span>\n                <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Publisher</span><span class=\"o\">::</span><span class=\"n\">OnPublishComplete</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">pubIter</span><span class=\"p\">);</span>\n\n<span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">pubIds</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">pubIter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n</pre></div>", "type": "rendered"}, "title": {"raw": "fix memory corruption in transport/Publisher.cc", "markup": "markdown", "html": "<p>fix memory corruption in transport/Publisher.cc</p>", "type": "rendered"}}, "type": "pullrequest", "description": "In function \"SendMessage()\" from file \"transport/Publisher.cc\", the following line can lead to memory corruption.\r\n\r\n```\r\n#!c++\r\nthis->pubIds[*pubIter] = this->publication->Publish(*iter,\r\n                boost::bind(&Publisher::OnPublishComplete, this, _1), *pubIter);\r\n```\r\n\r\nThe method Publish() calls directly the callback OnPublishComplete(), which erases the map entry \"this->pubIds[*pubIter]\". \r\nIn c/c++, considering an assignment, the order of evaluation of right and left operands is not specified. Therefore the compiler can choose to evaluate first \"this->pubIds[*pubIter]\", then executes the methode Publish(). The assignment ends up with writting in a memory area that has been disallocated.\r\n\r\nThe solution to avoid that is simple. Just split the assignment in two steps:\r\n\r\n```\r\n#!c++\r\nint result = this->publication->Publish(*iter,\r\n                boost::bind(&Publisher::OnPublishComplete, this, _1), *pubIter);\r\n\r\nthis->pubIds[*pubIter] = result;\r\n\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1951/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:e6db1e08058d%0D38bb28d3bba4?from_pullrequest_id=1951"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/1951/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/1951.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/1951/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1951/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1951"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/1951/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:e6db1e08058d%0D38bb28d3bba4?from_pullrequest_id=1951"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1951/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/1951/statuses_page=1.json"}}, "title": "fix memory corruption in transport/Publisher.cc", "close_source_branch": true, "reviewers": [], "id": 1951, "destination": {"commit": {"hash": "38bb28d3bba4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/38bb28d3bba4.json"}, "html": {"href": "#!/osrf/gazebo/commits/38bb28d3bba4"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2015-10-19T12:30:25.728253+00:00", "summary": {"raw": "In function \"SendMessage()\" from file \"transport/Publisher.cc\", the following line can lead to memory corruption.\r\n\r\n```\r\n#!c++\r\nthis->pubIds[*pubIter] = this->publication->Publish(*iter,\r\n                boost::bind(&Publisher::OnPublishComplete, this, _1), *pubIter);\r\n```\r\n\r\nThe method Publish() calls directly the callback OnPublishComplete(), which erases the map entry \"this->pubIds[*pubIter]\". \r\nIn c/c++, considering an assignment, the order of evaluation of right and left operands is not specified. Therefore the compiler can choose to evaluate first \"this->pubIds[*pubIter]\", then executes the methode Publish(). The assignment ends up with writting in a memory area that has been disallocated.\r\n\r\nThe solution to avoid that is simple. Just split the assignment in two steps:\r\n\r\n```\r\n#!c++\r\nint result = this->publication->Publish(*iter,\r\n                boost::bind(&Publisher::OnPublishComplete, this, _1), *pubIter);\r\n\r\nthis->pubIds[*pubIter] = result;\r\n\r\n```", "markup": "markdown", "html": "<p>In function \"SendMessage()\" from file \"transport/Publisher.cc\", the following line can lead to memory corruption.</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">pubIds</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">pubIter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">publication</span><span class=\"o\">-&gt;</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">,</span>\n                <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Publisher</span><span class=\"o\">::</span><span class=\"n\">OnPublishComplete</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">pubIter</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>The method Publish() calls directly the callback OnPublishComplete(), which erases the map entry \"this-&gt;pubIds[<em>pubIter]\". \nIn c/c++, considering an assignment, the order of evaluation of right and left operands is not specified. Therefore the compiler can choose to evaluate first \"this-&gt;pubIds[</em>pubIter]\", then executes the methode Publish(). The assignment ends up with writting in a memory area that has been disallocated.</p>\n<p>The solution to avoid that is simple. Just split the assignment in two steps:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">publication</span><span class=\"o\">-&gt;</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">,</span>\n                <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Publisher</span><span class=\"o\">::</span><span class=\"n\">OnPublishComplete</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">pubIter</span><span class=\"p\">);</span>\n\n<span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">pubIds</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">pubIter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "22f0f70199d9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/slekieffre/gazebo_slek/commit/22f0f70199d9"}, "html": {"href": "https://bitbucket.org/slekieffre/gazebo_slek/commits/22f0f70199d9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/slekieffre/gazebo_slek"}, "html": {"href": "https://bitbucket.org/slekieffre/gazebo_slek"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a4e98e2d-c636-472b-b095-af2766cf0f99}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo_slek", "full_name": "slekieffre/gazebo_slek", "uuid": "{a4e98e2d-c636-472b-b095-af2766cf0f99}"}, "branch": {"name": "fix_send_message"}}, "comment_count": 8, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2015-10-23T16:29:16.804474+00:00", "type": "participant", "approved": false, "user": {"display_name": "samuel lekieffre", "uuid": "{fb91c214-fb22-4bd8-9ecd-59fa5606f448}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D"}, "html": {"href": "https://bitbucket.org/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/711b8f132d9815416df59500328659f1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSL-4.png"}}, "nickname": "slekieffre", "type": "user", "account_id": "557058:0d0672e4-f62e-4297-b00a-3c73d652fb94"}}, {"role": "PARTICIPANT", "participated_on": "2015-10-28T16:39:47.205261+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2015-10-26T21:33:04.338393+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2015-10-28T16:48:37.942162+00:00", "author": {"display_name": "samuel lekieffre", "uuid": "{fb91c214-fb22-4bd8-9ecd-59fa5606f448}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D"}, "html": {"href": "https://bitbucket.org/%7Bfb91c214-fb22-4bd8-9ecd-59fa5606f448%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/711b8f132d9815416df59500328659f1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSL-4.png"}}, "nickname": "slekieffre", "type": "user", "account_id": "557058:0d0672e4-f62e-4297-b00a-3c73d652fb94"}, "merge_commit": {"hash": "e6db1e08058d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/e6db1e08058d.json"}, "html": {"href": "#!/osrf/gazebo/commits/e6db1e08058d"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}