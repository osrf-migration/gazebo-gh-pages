{"rendered": {"description": {"raw": "I just started getting compiler warnings on OS X Yosemite about the use of a floating point constant `1e9` used in integer calculations in  `common::Time::Correct`:\r\n~~~\r\ngazebo/common/Time.hh:434:32: warning: using integer absolute value function 'abs'\r\n      when argument is of floating point type [-Wabsolute-value]\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^\r\ngazebo/common/Time.hh:434:32: note: use function 'std::abs' instead\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^~~\r\n                               std::abs\r\ngazebo/common/Time.hh:440:32: warning: using integer absolute value function 'abs'\r\n      when argument is of floating point type [-Wabsolute-value]\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^\r\ngazebo/common/Time.hh:440:32: note: use function 'std::abs' instead\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^~~\r\n                               std::abs\r\n~~~\r\nIt recommends a floating point absolute value function, but I think it's more efficient and precise to use an integer constant instead of a floating point constant, since the end result is an integer anyway.\r\n\r\nThis is a fix targeted at `gazebo_4.1`. For c++11 (gazebo5+), some people [recommend user-defined literals](http://stackoverflow.com/a/24389792), but I'm happy with this implementation for now.\r\n\r\nUPDATE: I found a few more warnings to fix and I added them to this pull request:\r\n\r\n* 5099ef0: Use `std::abs(double)` instead of `abs(int)` in WirelessTransmitter.cc\r\n~~~\r\ngazebo/sensors/WirelessTransmitter.cc:180:14: warning: using integer absolute value\r\n      function 'abs' when argument is of floating point type [-Wabsolute-value]\r\n  double x = abs(math::Rand::GetDblNormal(0.0, ModelStdDesv));\r\n             ^\r\ngazebo/sensors/WirelessTransmitter.cc:180:14: note: use function 'std::abs' instead\r\n  double x = abs(math::Rand::GetDblNormal(0.0, ModelStdDesv));\r\n             ^~~\r\n             std::abs\r\n1 warning generated.\r\n~~~\r\n* 9f6a109: Don't use `this` when subscribing with a non-member callback function in MainWindow_TEST.cc. Use latching = `true` to preserve existing functionality.\r\n~~~\r\ngazebo/gui/MainWindow_TEST.cc:408:50: warning: 'this' pointer cannot be null in\r\n      well-defined C++ code; pointer may be assumed to always convert to true [-Wundefined-bool-conversion]\r\n  sub = node->Subscribe(\"~/request\", &OnRequest, this);\r\n        ~~~~                                     ^~~~\r\n~~~\r\n\r\nThe following wasn't from a compiler warning, but I was reading about how you're not supposed to throw exceptions from a destructor, and noticed this and decided to fix it.\r\n* 496fee3: Add try/catch around pubsync and close functions (both of which can throw) in `~Buffer` to ensure no exceptions are thrown from the destructor", "markup": "markdown", "html": "<p>I just started getting compiler warnings on OS X Yosemite about the use of a floating point constant <code>1e9</code> used in integer calculations in  <code>common::Time::Correct</code>:</p>\n<div class=\"codehilite\"><pre><span></span>gazebo/common/Time.hh:434:32: warning: using integer absolute value function &#39;abs&#39;\n      when argument is of floating point type [-Wabsolute-value]\n                   int32_t n = abs(this-&gt;nsec / 1e9) + 1;\n                               ^\ngazebo/common/Time.hh:434:32: note: use function &#39;std::abs&#39; instead\n                   int32_t n = abs(this-&gt;nsec / 1e9) + 1;\n                               ^~~\n                               std::abs\ngazebo/common/Time.hh:440:32: warning: using integer absolute value function &#39;abs&#39;\n      when argument is of floating point type [-Wabsolute-value]\n                   int32_t n = abs(this-&gt;nsec / 1e9) + 1;\n                               ^\ngazebo/common/Time.hh:440:32: note: use function &#39;std::abs&#39; instead\n                   int32_t n = abs(this-&gt;nsec / 1e9) + 1;\n                               ^~~\n                               std::abs\n</pre></div>\n\n\n<p>It recommends a floating point absolute value function, but I think it's more efficient and precise to use an integer constant instead of a floating point constant, since the end result is an integer anyway.</p>\n<p>This is a fix targeted at <code>gazebo_4.1</code>. For c++11 (gazebo5+), some people <a data-is-external-link=\"true\" href=\"http://stackoverflow.com/a/24389792\" rel=\"nofollow\">recommend user-defined literals</a>, but I'm happy with this implementation for now.</p>\n<p>UPDATE: I found a few more warnings to fix and I added them to this pull request:</p>\n<ul>\n<li><a href=\"#!/osrf/gazebo/commits/5099ef0\" rel=\"nofollow\" class=\"ap-connect-link\">5099ef0</a>: Use <code>std::abs(double)</code> instead of <code>abs(int)</code> in WirelessTransmitter.cc</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">sensors</span><span class=\"o\">/</span><span class=\"nt\">WirelessTransmitter</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">180</span><span class=\"p\">:</span><span class=\"nd\">14</span><span class=\"o\">:</span> <span class=\"nt\">warning</span><span class=\"o\">:</span> <span class=\"nt\">using</span> <span class=\"nt\">integer</span> <span class=\"nt\">absolute</span> <span class=\"nt\">value</span>\n      <span class=\"nt\">function</span> <span class=\"s1\">&#39;abs&#39;</span> <span class=\"nt\">when</span> <span class=\"nt\">argument</span> <span class=\"nt\">is</span> <span class=\"nt\">of</span> <span class=\"nt\">floating</span> <span class=\"nt\">point</span> <span class=\"nt\">type</span> <span class=\"cp\">[</span><span class=\"na\">-Wabsolute-value</span><span class=\"cp\">]</span>\n  <span class=\"nt\">double</span> <span class=\"nt\">x</span> <span class=\"o\">=</span> <span class=\"nt\">abs</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Rand</span><span class=\"p\">::</span><span class=\"nd\">GetDblNormal</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"o\">,</span> <span class=\"nt\">ModelStdDesv</span><span class=\"o\">));</span>\n             <span class=\"o\">^</span>\n<span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">sensors</span><span class=\"o\">/</span><span class=\"nt\">WirelessTransmitter</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">180</span><span class=\"p\">:</span><span class=\"nd\">14</span><span class=\"o\">:</span> <span class=\"nt\">note</span><span class=\"o\">:</span> <span class=\"nt\">use</span> <span class=\"nt\">function</span> <span class=\"s1\">&#39;std::abs&#39;</span> <span class=\"nt\">instead</span>\n  <span class=\"nt\">double</span> <span class=\"nt\">x</span> <span class=\"o\">=</span> <span class=\"nt\">abs</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Rand</span><span class=\"p\">::</span><span class=\"nd\">GetDblNormal</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"o\">,</span> <span class=\"nt\">ModelStdDesv</span><span class=\"o\">));</span>\n             <span class=\"o\">^~~</span>\n             <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">abs</span>\n<span class=\"nt\">1</span> <span class=\"nt\">warning</span> <span class=\"nt\">generated</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<ul>\n<li><a href=\"#!/osrf/gazebo/commits/9f6a109\" rel=\"nofollow\" class=\"ap-connect-link\">9f6a109</a>: Don't use <code>this</code> when subscribing with a non-member callback function in MainWindow_TEST.cc. Use latching = <code>true</code> to preserve existing functionality.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>gazebo/gui/MainWindow_TEST.cc:408:50: warning: &#39;this&#39; pointer cannot be null in\n      well-defined C++ code; pointer may be assumed to always convert to true [-Wundefined-bool-conversion]\n  sub = node-&gt;Subscribe(&quot;~/request&quot;, &amp;OnRequest, this);\n        ~~~~                                     ^~~~\n</pre></div>\n\n\n<p>The following wasn't from a compiler warning, but I was reading about how you're not supposed to throw exceptions from a destructor, and noticed this and decided to fix it.\n* <a href=\"#!/osrf/gazebo/commits/496fee3\" rel=\"nofollow\" class=\"ap-connect-link\">496fee3</a>: Add try/catch around pubsync and close functions (both of which can throw) in <code>~Buffer</code> to ensure no exceptions are thrown from the destructor</p>", "type": "rendered"}, "title": {"raw": "Fix several clang compiler warnings", "markup": "markdown", "html": "<p>Fix several clang compiler warnings</p>", "type": "rendered"}}, "type": "pullrequest", "description": "I just started getting compiler warnings on OS X Yosemite about the use of a floating point constant `1e9` used in integer calculations in  `common::Time::Correct`:\r\n~~~\r\ngazebo/common/Time.hh:434:32: warning: using integer absolute value function 'abs'\r\n      when argument is of floating point type [-Wabsolute-value]\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^\r\ngazebo/common/Time.hh:434:32: note: use function 'std::abs' instead\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^~~\r\n                               std::abs\r\ngazebo/common/Time.hh:440:32: warning: using integer absolute value function 'abs'\r\n      when argument is of floating point type [-Wabsolute-value]\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^\r\ngazebo/common/Time.hh:440:32: note: use function 'std::abs' instead\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^~~\r\n                               std::abs\r\n~~~\r\nIt recommends a floating point absolute value function, but I think it's more efficient and precise to use an integer constant instead of a floating point constant, since the end result is an integer anyway.\r\n\r\nThis is a fix targeted at `gazebo_4.1`. For c++11 (gazebo5+), some people [recommend user-defined literals](http://stackoverflow.com/a/24389792), but I'm happy with this implementation for now.\r\n\r\nUPDATE: I found a few more warnings to fix and I added them to this pull request:\r\n\r\n* 5099ef0: Use `std::abs(double)` instead of `abs(int)` in WirelessTransmitter.cc\r\n~~~\r\ngazebo/sensors/WirelessTransmitter.cc:180:14: warning: using integer absolute value\r\n      function 'abs' when argument is of floating point type [-Wabsolute-value]\r\n  double x = abs(math::Rand::GetDblNormal(0.0, ModelStdDesv));\r\n             ^\r\ngazebo/sensors/WirelessTransmitter.cc:180:14: note: use function 'std::abs' instead\r\n  double x = abs(math::Rand::GetDblNormal(0.0, ModelStdDesv));\r\n             ^~~\r\n             std::abs\r\n1 warning generated.\r\n~~~\r\n* 9f6a109: Don't use `this` when subscribing with a non-member callback function in MainWindow_TEST.cc. Use latching = `true` to preserve existing functionality.\r\n~~~\r\ngazebo/gui/MainWindow_TEST.cc:408:50: warning: 'this' pointer cannot be null in\r\n      well-defined C++ code; pointer may be assumed to always convert to true [-Wundefined-bool-conversion]\r\n  sub = node->Subscribe(\"~/request\", &OnRequest, this);\r\n        ~~~~                                     ^~~~\r\n~~~\r\n\r\nThe following wasn't from a compiler warning, but I was reading about how you're not supposed to throw exceptions from a destructor, and noticed this and decided to fix it.\r\n* 496fee3: Add try/catch around pubsync and close functions (both of which can throw) in `~Buffer` to ensure no exceptions are thrown from the destructor", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1594/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:df15cace3d63%0D3b2197395ca5?from_pullrequest_id=1594"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/1594/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/1594.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/1594/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1594/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1594"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/1594/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:df15cace3d63%0D3b2197395ca5?from_pullrequest_id=1594"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1594/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/1594/statuses_page=1.json"}}, "title": "Fix several clang compiler warnings", "close_source_branch": true, "reviewers": [], "id": 1594, "destination": {"commit": {"hash": "3b2197395ca5", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/3b2197395ca5.json"}, "html": {"href": "#!/osrf/gazebo/commits/3b2197395ca5"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo_4.1"}}, "created_on": "2015-04-17T12:37:50.482339+00:00", "summary": {"raw": "I just started getting compiler warnings on OS X Yosemite about the use of a floating point constant `1e9` used in integer calculations in  `common::Time::Correct`:\r\n~~~\r\ngazebo/common/Time.hh:434:32: warning: using integer absolute value function 'abs'\r\n      when argument is of floating point type [-Wabsolute-value]\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^\r\ngazebo/common/Time.hh:434:32: note: use function 'std::abs' instead\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^~~\r\n                               std::abs\r\ngazebo/common/Time.hh:440:32: warning: using integer absolute value function 'abs'\r\n      when argument is of floating point type [-Wabsolute-value]\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^\r\ngazebo/common/Time.hh:440:32: note: use function 'std::abs' instead\r\n                   int32_t n = abs(this->nsec / 1e9) + 1;\r\n                               ^~~\r\n                               std::abs\r\n~~~\r\nIt recommends a floating point absolute value function, but I think it's more efficient and precise to use an integer constant instead of a floating point constant, since the end result is an integer anyway.\r\n\r\nThis is a fix targeted at `gazebo_4.1`. For c++11 (gazebo5+), some people [recommend user-defined literals](http://stackoverflow.com/a/24389792), but I'm happy with this implementation for now.\r\n\r\nUPDATE: I found a few more warnings to fix and I added them to this pull request:\r\n\r\n* 5099ef0: Use `std::abs(double)` instead of `abs(int)` in WirelessTransmitter.cc\r\n~~~\r\ngazebo/sensors/WirelessTransmitter.cc:180:14: warning: using integer absolute value\r\n      function 'abs' when argument is of floating point type [-Wabsolute-value]\r\n  double x = abs(math::Rand::GetDblNormal(0.0, ModelStdDesv));\r\n             ^\r\ngazebo/sensors/WirelessTransmitter.cc:180:14: note: use function 'std::abs' instead\r\n  double x = abs(math::Rand::GetDblNormal(0.0, ModelStdDesv));\r\n             ^~~\r\n             std::abs\r\n1 warning generated.\r\n~~~\r\n* 9f6a109: Don't use `this` when subscribing with a non-member callback function in MainWindow_TEST.cc. Use latching = `true` to preserve existing functionality.\r\n~~~\r\ngazebo/gui/MainWindow_TEST.cc:408:50: warning: 'this' pointer cannot be null in\r\n      well-defined C++ code; pointer may be assumed to always convert to true [-Wundefined-bool-conversion]\r\n  sub = node->Subscribe(\"~/request\", &OnRequest, this);\r\n        ~~~~                                     ^~~~\r\n~~~\r\n\r\nThe following wasn't from a compiler warning, but I was reading about how you're not supposed to throw exceptions from a destructor, and noticed this and decided to fix it.\r\n* 496fee3: Add try/catch around pubsync and close functions (both of which can throw) in `~Buffer` to ensure no exceptions are thrown from the destructor", "markup": "markdown", "html": "<p>I just started getting compiler warnings on OS X Yosemite about the use of a floating point constant <code>1e9</code> used in integer calculations in  <code>common::Time::Correct</code>:</p>\n<div class=\"codehilite\"><pre><span></span>gazebo/common/Time.hh:434:32: warning: using integer absolute value function &#39;abs&#39;\n      when argument is of floating point type [-Wabsolute-value]\n                   int32_t n = abs(this-&gt;nsec / 1e9) + 1;\n                               ^\ngazebo/common/Time.hh:434:32: note: use function &#39;std::abs&#39; instead\n                   int32_t n = abs(this-&gt;nsec / 1e9) + 1;\n                               ^~~\n                               std::abs\ngazebo/common/Time.hh:440:32: warning: using integer absolute value function &#39;abs&#39;\n      when argument is of floating point type [-Wabsolute-value]\n                   int32_t n = abs(this-&gt;nsec / 1e9) + 1;\n                               ^\ngazebo/common/Time.hh:440:32: note: use function &#39;std::abs&#39; instead\n                   int32_t n = abs(this-&gt;nsec / 1e9) + 1;\n                               ^~~\n                               std::abs\n</pre></div>\n\n\n<p>It recommends a floating point absolute value function, but I think it's more efficient and precise to use an integer constant instead of a floating point constant, since the end result is an integer anyway.</p>\n<p>This is a fix targeted at <code>gazebo_4.1</code>. For c++11 (gazebo5+), some people <a data-is-external-link=\"true\" href=\"http://stackoverflow.com/a/24389792\" rel=\"nofollow\">recommend user-defined literals</a>, but I'm happy with this implementation for now.</p>\n<p>UPDATE: I found a few more warnings to fix and I added them to this pull request:</p>\n<ul>\n<li><a href=\"#!/osrf/gazebo/commits/5099ef0\" rel=\"nofollow\" class=\"ap-connect-link\">5099ef0</a>: Use <code>std::abs(double)</code> instead of <code>abs(int)</code> in WirelessTransmitter.cc</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">sensors</span><span class=\"o\">/</span><span class=\"nt\">WirelessTransmitter</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">180</span><span class=\"p\">:</span><span class=\"nd\">14</span><span class=\"o\">:</span> <span class=\"nt\">warning</span><span class=\"o\">:</span> <span class=\"nt\">using</span> <span class=\"nt\">integer</span> <span class=\"nt\">absolute</span> <span class=\"nt\">value</span>\n      <span class=\"nt\">function</span> <span class=\"s1\">&#39;abs&#39;</span> <span class=\"nt\">when</span> <span class=\"nt\">argument</span> <span class=\"nt\">is</span> <span class=\"nt\">of</span> <span class=\"nt\">floating</span> <span class=\"nt\">point</span> <span class=\"nt\">type</span> <span class=\"cp\">[</span><span class=\"na\">-Wabsolute-value</span><span class=\"cp\">]</span>\n  <span class=\"nt\">double</span> <span class=\"nt\">x</span> <span class=\"o\">=</span> <span class=\"nt\">abs</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Rand</span><span class=\"p\">::</span><span class=\"nd\">GetDblNormal</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"o\">,</span> <span class=\"nt\">ModelStdDesv</span><span class=\"o\">));</span>\n             <span class=\"o\">^</span>\n<span class=\"nt\">gazebo</span><span class=\"o\">/</span><span class=\"nt\">sensors</span><span class=\"o\">/</span><span class=\"nt\">WirelessTransmitter</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">180</span><span class=\"p\">:</span><span class=\"nd\">14</span><span class=\"o\">:</span> <span class=\"nt\">note</span><span class=\"o\">:</span> <span class=\"nt\">use</span> <span class=\"nt\">function</span> <span class=\"s1\">&#39;std::abs&#39;</span> <span class=\"nt\">instead</span>\n  <span class=\"nt\">double</span> <span class=\"nt\">x</span> <span class=\"o\">=</span> <span class=\"nt\">abs</span><span class=\"o\">(</span><span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Rand</span><span class=\"p\">::</span><span class=\"nd\">GetDblNormal</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"o\">,</span> <span class=\"nt\">ModelStdDesv</span><span class=\"o\">));</span>\n             <span class=\"o\">^~~</span>\n             <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">abs</span>\n<span class=\"nt\">1</span> <span class=\"nt\">warning</span> <span class=\"nt\">generated</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<ul>\n<li><a href=\"#!/osrf/gazebo/commits/9f6a109\" rel=\"nofollow\" class=\"ap-connect-link\">9f6a109</a>: Don't use <code>this</code> when subscribing with a non-member callback function in MainWindow_TEST.cc. Use latching = <code>true</code> to preserve existing functionality.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>gazebo/gui/MainWindow_TEST.cc:408:50: warning: &#39;this&#39; pointer cannot be null in\n      well-defined C++ code; pointer may be assumed to always convert to true [-Wundefined-bool-conversion]\n  sub = node-&gt;Subscribe(&quot;~/request&quot;, &amp;OnRequest, this);\n        ~~~~                                     ^~~~\n</pre></div>\n\n\n<p>The following wasn't from a compiler warning, but I was reading about how you're not supposed to throw exceptions from a destructor, and noticed this and decided to fix it.\n* <a href=\"#!/osrf/gazebo/commits/496fee3\" rel=\"nofollow\" class=\"ap-connect-link\">496fee3</a>: Add try/catch around pubsync and close functions (both of which can throw) in <code>~Buffer</code> to ensure no exceptions are thrown from the destructor</p>", "type": "rendered"}, "source": {"commit": {"hash": "496fee336ec9", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/496fee336ec9.json"}, "html": {"href": "#!/osrf/gazebo/commits/496fee336ec9"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "time_1e9_4.1"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2015-04-23T12:19:05.658004+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2015-04-23T16:58:33.824257+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2015-04-23T06:01:50.835804+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2015-04-23T17:14:29.116599+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "df15cace3d63", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/df15cace3d63.json"}, "html": {"href": "#!/osrf/gazebo/commits/df15cace3d63"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}