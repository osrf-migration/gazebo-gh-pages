{"rendered": {"description": {"raw": "Hi, I'm gazebo GSoC applicant this year.\r\nToday I've faced with huge memory usage in my gazebo camera plugin.\r\n\r\nThis code caused couple of gigabytes memory usage in 5 minutes.\r\n```\r\n#!c++\r\nvoid OnNewFrame(\r\n      const unsigned char *_image,\r\n      unsigned int _width, unsigned int _height, unsigned int _depth,\r\n      const std::string &_format)\r\n  {\r\n    common::Image image;\r\n    image.SetFromData(_image, _width, _height, common::Image::ConvertPixelFormat(_format));\r\n\r\n    ::msgs::Camera cameraMsg;\r\n    msgs::Set(cameraMsg.mutable_frame(), image);\r\n\r\n    cameraMsg.set_camera_type(this->type);\r\n\r\n    this->cameraPublisher->Publish(cameraMsg);\r\n  }\r\n```\r\n\r\nChanging Set function call to manually setting up my msgs::Image helped to fix this problem.\r\n\r\nThen I looked at that function definition and found the problem.\r\n\r\n\r\n```\r\n#!c++\r\n\r\n      _i.GetData(&data, size);\r\n```\r\nCopies all bytes of _i into data variable.\r\n\r\n\r\n```\r\n#!c++\r\n\r\n      _msg->set_data(data, size);\r\n```\r\nThis function is generated by protobuf and calls std::string::assign method inside which also copies memory of size \"size\" from data. After that nobody needs memory, allocated for data pointer, and nobody can delete it.", "markup": "markdown", "html": "<p>Hi, I'm gazebo GSoC applicant this year.\nToday I've faced with huge memory usage in my gazebo camera plugin.</p>\n<p>This code caused couple of gigabytes memory usage in 5 minutes.</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">OnNewFrame</span><span class=\"p\">(</span>\n      <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">_image</span><span class=\"p\">,</span>\n      <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">_width</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">_height</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">_depth</span><span class=\"p\">,</span>\n      <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_format</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Image</span> <span class=\"n\">image</span><span class=\"p\">;</span>\n    <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">SetFromData</span><span class=\"p\">(</span><span class=\"n\">_image</span><span class=\"p\">,</span> <span class=\"n\">_width</span><span class=\"p\">,</span> <span class=\"n\">_height</span><span class=\"p\">,</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Image</span><span class=\"o\">::</span><span class=\"n\">ConvertPixelFormat</span><span class=\"p\">(</span><span class=\"n\">_format</span><span class=\"p\">));</span>\n\n    <span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Camera</span> <span class=\"n\">cameraMsg</span><span class=\"p\">;</span>\n    <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">cameraMsg</span><span class=\"p\">.</span><span class=\"n\">mutable_frame</span><span class=\"p\">(),</span> <span class=\"n\">image</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cameraMsg</span><span class=\"p\">.</span><span class=\"n\">set_camera_type</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">cameraPublisher</span><span class=\"o\">-&gt;</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"n\">cameraMsg</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Changing Set function call to manually setting up my msgs::Image helped to fix this problem.</p>\n<p>Then I looked at that function definition and found the problem.</p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"n\">_i</span><span class=\"p\">.</span><span class=\"n\">GetData</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Copies all bytes of _i into data variable.</p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"n\">_msg</span><span class=\"o\">-&gt;</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>This function is generated by protobuf and calls std::string::assign method inside which also copies memory of size \"size\" from data. After that nobody needs memory, allocated for data pointer, and nobody can delete it.</p>", "type": "rendered"}, "title": {"raw": "Fix memory leak in function that converts common::Image to msgs::Image", "markup": "markdown", "html": "<p>Fix memory leak in function that converts common::Image to msgs::Image</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Hi, I'm gazebo GSoC applicant this year.\r\nToday I've faced with huge memory usage in my gazebo camera plugin.\r\n\r\nThis code caused couple of gigabytes memory usage in 5 minutes.\r\n```\r\n#!c++\r\nvoid OnNewFrame(\r\n      const unsigned char *_image,\r\n      unsigned int _width, unsigned int _height, unsigned int _depth,\r\n      const std::string &_format)\r\n  {\r\n    common::Image image;\r\n    image.SetFromData(_image, _width, _height, common::Image::ConvertPixelFormat(_format));\r\n\r\n    ::msgs::Camera cameraMsg;\r\n    msgs::Set(cameraMsg.mutable_frame(), image);\r\n\r\n    cameraMsg.set_camera_type(this->type);\r\n\r\n    this->cameraPublisher->Publish(cameraMsg);\r\n  }\r\n```\r\n\r\nChanging Set function call to manually setting up my msgs::Image helped to fix this problem.\r\n\r\nThen I looked at that function definition and found the problem.\r\n\r\n\r\n```\r\n#!c++\r\n\r\n      _i.GetData(&data, size);\r\n```\r\nCopies all bytes of _i into data variable.\r\n\r\n\r\n```\r\n#!c++\r\n\r\n      _msg->set_data(data, size);\r\n```\r\nThis function is generated by protobuf and calls std::string::assign method inside which also copies memory of size \"size\" from data. After that nobody needs memory, allocated for data pointer, and nobody can delete it.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1057/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:2930b2d1508d%0Db2a0b8df2b36?from_pullrequest_id=1057"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/1057/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/1057.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/1057/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1057/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1057"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/1057/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:2930b2d1508d%0Db2a0b8df2b36?from_pullrequest_id=1057"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1057/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/1057/statuses_page=1.json"}}, "title": "Fix memory leak in function that converts common::Image to msgs::Image", "close_source_branch": false, "reviewers": [{"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}], "id": 1057, "destination": {"commit": {"hash": "b2a0b8df2b36", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/b2a0b8df2b36.json"}, "html": {"href": "#!/osrf/gazebo/commits/b2a0b8df2b36"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2014-04-05T12:14:29.495967+00:00", "summary": {"raw": "Hi, I'm gazebo GSoC applicant this year.\r\nToday I've faced with huge memory usage in my gazebo camera plugin.\r\n\r\nThis code caused couple of gigabytes memory usage in 5 minutes.\r\n```\r\n#!c++\r\nvoid OnNewFrame(\r\n      const unsigned char *_image,\r\n      unsigned int _width, unsigned int _height, unsigned int _depth,\r\n      const std::string &_format)\r\n  {\r\n    common::Image image;\r\n    image.SetFromData(_image, _width, _height, common::Image::ConvertPixelFormat(_format));\r\n\r\n    ::msgs::Camera cameraMsg;\r\n    msgs::Set(cameraMsg.mutable_frame(), image);\r\n\r\n    cameraMsg.set_camera_type(this->type);\r\n\r\n    this->cameraPublisher->Publish(cameraMsg);\r\n  }\r\n```\r\n\r\nChanging Set function call to manually setting up my msgs::Image helped to fix this problem.\r\n\r\nThen I looked at that function definition and found the problem.\r\n\r\n\r\n```\r\n#!c++\r\n\r\n      _i.GetData(&data, size);\r\n```\r\nCopies all bytes of _i into data variable.\r\n\r\n\r\n```\r\n#!c++\r\n\r\n      _msg->set_data(data, size);\r\n```\r\nThis function is generated by protobuf and calls std::string::assign method inside which also copies memory of size \"size\" from data. After that nobody needs memory, allocated for data pointer, and nobody can delete it.", "markup": "markdown", "html": "<p>Hi, I'm gazebo GSoC applicant this year.\nToday I've faced with huge memory usage in my gazebo camera plugin.</p>\n<p>This code caused couple of gigabytes memory usage in 5 minutes.</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">OnNewFrame</span><span class=\"p\">(</span>\n      <span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">_image</span><span class=\"p\">,</span>\n      <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">_width</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">_height</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">_depth</span><span class=\"p\">,</span>\n      <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_format</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Image</span> <span class=\"n\">image</span><span class=\"p\">;</span>\n    <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">SetFromData</span><span class=\"p\">(</span><span class=\"n\">_image</span><span class=\"p\">,</span> <span class=\"n\">_width</span><span class=\"p\">,</span> <span class=\"n\">_height</span><span class=\"p\">,</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Image</span><span class=\"o\">::</span><span class=\"n\">ConvertPixelFormat</span><span class=\"p\">(</span><span class=\"n\">_format</span><span class=\"p\">));</span>\n\n    <span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Camera</span> <span class=\"n\">cameraMsg</span><span class=\"p\">;</span>\n    <span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">cameraMsg</span><span class=\"p\">.</span><span class=\"n\">mutable_frame</span><span class=\"p\">(),</span> <span class=\"n\">image</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cameraMsg</span><span class=\"p\">.</span><span class=\"n\">set_camera_type</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">cameraPublisher</span><span class=\"o\">-&gt;</span><span class=\"n\">Publish</span><span class=\"p\">(</span><span class=\"n\">cameraMsg</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Changing Set function call to manually setting up my msgs::Image helped to fix this problem.</p>\n<p>Then I looked at that function definition and found the problem.</p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"n\">_i</span><span class=\"p\">.</span><span class=\"n\">GetData</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Copies all bytes of _i into data variable.</p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"n\">_msg</span><span class=\"o\">-&gt;</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>This function is generated by protobuf and calls std::string::assign method inside which also copies memory of size \"size\" from data. After that nobody needs memory, allocated for data pointer, and nobody can delete it.</p>", "type": "rendered"}, "source": {"commit": {"hash": "0f0be7f3acb7", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/msporyshev/gazebo/commit/0f0be7f3acb7"}, "html": {"href": "https://bitbucket.org/msporyshev/gazebo/commits/0f0be7f3acb7"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/msporyshev/gazebo"}, "html": {"href": "https://bitbucket.org/msporyshev/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{7a2dc9da-d580-4876-bc51-9c350c259d2d}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "msporyshev/gazebo", "uuid": "{7a2dc9da-d580-4876-bc51-9c350c259d2d}"}, "branch": {"name": "default"}}, "comment_count": 27, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2014-04-17T20:18:50.435401+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2014-04-17T07:08:41.226815+00:00", "type": "participant", "approved": false, "user": {"display_name": "Max Sporyshev", "uuid": "{cb898fcc-a76c-42fd-9d24-13d08160fa7e}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcb898fcc-a76c-42fd-9d24-13d08160fa7e%7D"}, "html": {"href": "https://bitbucket.org/%7Bcb898fcc-a76c-42fd-9d24-13d08160fa7e%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/bf3767bca8771268145497502edfeba2d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-1.png"}}, "nickname": "msporyshev", "type": "user", "account_id": "557058:559fc3f3-6c92-447f-8fdf-7dc1f5643530"}}, {"role": "REVIEWER", "participated_on": "2014-04-17T17:17:39.025950+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": "2014-04-16T05:35:38.877760+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2014-04-17T20:19:03.266094+00:00", "author": {"display_name": "Max Sporyshev", "uuid": "{cb898fcc-a76c-42fd-9d24-13d08160fa7e}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcb898fcc-a76c-42fd-9d24-13d08160fa7e%7D"}, "html": {"href": "https://bitbucket.org/%7Bcb898fcc-a76c-42fd-9d24-13d08160fa7e%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/bf3767bca8771268145497502edfeba2d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-1.png"}}, "nickname": "msporyshev", "type": "user", "account_id": "557058:559fc3f3-6c92-447f-8fdf-7dc1f5643530"}, "merge_commit": {"hash": "2930b2d1508d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/2930b2d1508d.json"}, "html": {"href": "#!/osrf/gazebo/commits/2930b2d1508d"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}