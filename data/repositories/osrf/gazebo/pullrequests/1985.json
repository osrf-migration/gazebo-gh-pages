{"rendered": {"description": {"raw": "Gazebo does not have a Wind class. This pull request provides a simple Wind class whose default behavior can be overriden by a plugin.\r\n\r\nThe global wind parameters are defined in the SDF file, they consist of the wind linear velocity. The Wind class is instantiated once during World initialization. A plugin can access the Wind singleton with ```World::GetWind()``` and change its method of computation by specifying a custom function with ```Wind::SetLinearVelFunc(std::function<ignition::math::Vector3d (const WindPtr &, const Entity *_entity)> _linearVelFunc)```.\r\n\r\nThe wind velocity at a link position in space is updated before each simulation iteration by calling ```Wind::WorldLinearVel(const Entity *_entity)``` during world update. This method takes the entity itself as a parameter and returns the wind linear velocity at entity's current location. This operation is only performed if the wind is enabled globally and if the link is defined to be affected by it. Internally, this method calls the function that was determined by ```Wind::SetLinearVelFunc(...)```.\r\n\r\nIf it gets accepted, this feature would require two new optional sections in the link and world SDF files  (see related pull request [#240](https://bitbucket.org/osrf/sdformat/pull-requests/240/new-element/diff) in sdformat):\r\n\r\n```\r\n#!xml\r\n<world name=\"default\">\r\n  <wind>\r\n    <linear_velocity>11 11 0</linear_velocity> <!-- Wind linear velocity -->\r\n  </wind>\r\n  <model name=\"model\">\r\n    <link name=\"link\">\r\n      <wind>true</<wind>\r\n    </link>\r\n  </model>\r\n</world>\r\n```\r\n\r\nAt the client side, the wind parameters are displayed in the property tree browser. Wind velocity for a selected link only appears in its corresponding property tree if the wind is enabled for this link.\r\n\r\nA plugin example can be found in `plugins/WindPlugin.cc`. Its corresponding world is `worlds/wind_demo.world`.", "markup": "markdown", "html": "<p>Gazebo does not have a Wind class. This pull request provides a simple Wind class whose default behavior can be overriden by a plugin.</p>\n<p>The global wind parameters are defined in the SDF file, they consist of the wind linear velocity. The Wind class is instantiated once during World initialization. A plugin can access the Wind singleton with <code>World::GetWind()</code> and change its method of computation by specifying a custom function with <code>Wind::SetLinearVelFunc(std::function&lt;ignition::math::Vector3d (const WindPtr &amp;, const Entity *_entity)&gt; _linearVelFunc)</code>.</p>\n<p>The wind velocity at a link position in space is updated before each simulation iteration by calling <code>Wind::WorldLinearVel(const Entity *_entity)</code> during world update. This method takes the entity itself as a parameter and returns the wind linear velocity at entity's current location. This operation is only performed if the wind is enabled globally and if the link is defined to be affected by it. Internally, this method calls the function that was determined by <code>Wind::SetLinearVelFunc(...)</code>.</p>\n<p>If it gets accepted, this feature would require two new optional sections in the link and world SDF files  (see related pull request <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/240/new-element/diff\" rel=\"nofollow\">#240</a> in sdformat):</p>\n<div class=\"codehilite language-xml\"><pre><span></span><span class=\"nt\">&lt;world</span> <span class=\"na\">name=</span><span class=\"s\">&quot;default&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;wind&gt;</span>\n    <span class=\"nt\">&lt;linear_velocity&gt;</span>11 11 0<span class=\"nt\">&lt;/linear_velocity&gt;</span> <span class=\"c\">&lt;!-- Wind linear velocity --&gt;</span>\n  <span class=\"nt\">&lt;/wind&gt;</span>\n  <span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;model&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">name=</span><span class=\"s\">&quot;link&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;wind&gt;</span>true<span class=\"err\">&lt;</span>/<span class=\"nt\">&lt;wind&gt;</span>\n    <span class=\"nt\">&lt;/link&gt;</span>\n  <span class=\"nt\">&lt;/model&gt;</span>\n<span class=\"nt\">&lt;/world&gt;</span>\n</pre></div>\n\n\n<p>At the client side, the wind parameters are displayed in the property tree browser. Wind velocity for a selected link only appears in its corresponding property tree if the wind is enabled for this link.</p>\n<p>A plugin example can be found in <code>plugins/WindPlugin.cc</code>. Its corresponding world is <code>worlds/wind_demo.world</code>.</p>", "type": "rendered"}, "title": {"raw": "Added wind support", "markup": "markdown", "html": "<p>Added wind support</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Gazebo does not have a Wind class. This pull request provides a simple Wind class whose default behavior can be overriden by a plugin.\r\n\r\nThe global wind parameters are defined in the SDF file, they consist of the wind linear velocity. The Wind class is instantiated once during World initialization. A plugin can access the Wind singleton with ```World::GetWind()``` and change its method of computation by specifying a custom function with ```Wind::SetLinearVelFunc(std::function<ignition::math::Vector3d (const WindPtr &, const Entity *_entity)> _linearVelFunc)```.\r\n\r\nThe wind velocity at a link position in space is updated before each simulation iteration by calling ```Wind::WorldLinearVel(const Entity *_entity)``` during world update. This method takes the entity itself as a parameter and returns the wind linear velocity at entity's current location. This operation is only performed if the wind is enabled globally and if the link is defined to be affected by it. Internally, this method calls the function that was determined by ```Wind::SetLinearVelFunc(...)```.\r\n\r\nIf it gets accepted, this feature would require two new optional sections in the link and world SDF files  (see related pull request [#240](https://bitbucket.org/osrf/sdformat/pull-requests/240/new-element/diff) in sdformat):\r\n\r\n```\r\n#!xml\r\n<world name=\"default\">\r\n  <wind>\r\n    <linear_velocity>11 11 0</linear_velocity> <!-- Wind linear velocity -->\r\n  </wind>\r\n  <model name=\"model\">\r\n    <link name=\"link\">\r\n      <wind>true</<wind>\r\n    </link>\r\n  </model>\r\n</world>\r\n```\r\n\r\nAt the client side, the wind parameters are displayed in the property tree browser. Wind velocity for a selected link only appears in its corresponding property tree if the wind is enabled for this link.\r\n\r\nA plugin example can be found in `plugins/WindPlugin.cc`. Its corresponding world is `worlds/wind_demo.world`.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1985/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:f53ba4a8dbf4%0D86b8dcf6a5b1?from_pullrequest_id=1985"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/1985/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/1985.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/1985/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1985/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1985"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/1985/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:f53ba4a8dbf4%0D86b8dcf6a5b1?from_pullrequest_id=1985"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1985/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/1985/statuses_page=1.json"}}, "title": "Added wind support", "close_source_branch": false, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}], "id": 1985, "destination": {"commit": {"hash": "86b8dcf6a5b1", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/86b8dcf6a5b1.json"}, "html": {"href": "#!/osrf/gazebo/commits/86b8dcf6a5b1"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2015-11-12T08:51:19.760157+00:00", "summary": {"raw": "Gazebo does not have a Wind class. This pull request provides a simple Wind class whose default behavior can be overriden by a plugin.\r\n\r\nThe global wind parameters are defined in the SDF file, they consist of the wind linear velocity. The Wind class is instantiated once during World initialization. A plugin can access the Wind singleton with ```World::GetWind()``` and change its method of computation by specifying a custom function with ```Wind::SetLinearVelFunc(std::function<ignition::math::Vector3d (const WindPtr &, const Entity *_entity)> _linearVelFunc)```.\r\n\r\nThe wind velocity at a link position in space is updated before each simulation iteration by calling ```Wind::WorldLinearVel(const Entity *_entity)``` during world update. This method takes the entity itself as a parameter and returns the wind linear velocity at entity's current location. This operation is only performed if the wind is enabled globally and if the link is defined to be affected by it. Internally, this method calls the function that was determined by ```Wind::SetLinearVelFunc(...)```.\r\n\r\nIf it gets accepted, this feature would require two new optional sections in the link and world SDF files  (see related pull request [#240](https://bitbucket.org/osrf/sdformat/pull-requests/240/new-element/diff) in sdformat):\r\n\r\n```\r\n#!xml\r\n<world name=\"default\">\r\n  <wind>\r\n    <linear_velocity>11 11 0</linear_velocity> <!-- Wind linear velocity -->\r\n  </wind>\r\n  <model name=\"model\">\r\n    <link name=\"link\">\r\n      <wind>true</<wind>\r\n    </link>\r\n  </model>\r\n</world>\r\n```\r\n\r\nAt the client side, the wind parameters are displayed in the property tree browser. Wind velocity for a selected link only appears in its corresponding property tree if the wind is enabled for this link.\r\n\r\nA plugin example can be found in `plugins/WindPlugin.cc`. Its corresponding world is `worlds/wind_demo.world`.", "markup": "markdown", "html": "<p>Gazebo does not have a Wind class. This pull request provides a simple Wind class whose default behavior can be overriden by a plugin.</p>\n<p>The global wind parameters are defined in the SDF file, they consist of the wind linear velocity. The Wind class is instantiated once during World initialization. A plugin can access the Wind singleton with <code>World::GetWind()</code> and change its method of computation by specifying a custom function with <code>Wind::SetLinearVelFunc(std::function&lt;ignition::math::Vector3d (const WindPtr &amp;, const Entity *_entity)&gt; _linearVelFunc)</code>.</p>\n<p>The wind velocity at a link position in space is updated before each simulation iteration by calling <code>Wind::WorldLinearVel(const Entity *_entity)</code> during world update. This method takes the entity itself as a parameter and returns the wind linear velocity at entity's current location. This operation is only performed if the wind is enabled globally and if the link is defined to be affected by it. Internally, this method calls the function that was determined by <code>Wind::SetLinearVelFunc(...)</code>.</p>\n<p>If it gets accepted, this feature would require two new optional sections in the link and world SDF files  (see related pull request <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/240/new-element/diff\" rel=\"nofollow\">#240</a> in sdformat):</p>\n<div class=\"codehilite language-xml\"><pre><span></span><span class=\"nt\">&lt;world</span> <span class=\"na\">name=</span><span class=\"s\">&quot;default&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;wind&gt;</span>\n    <span class=\"nt\">&lt;linear_velocity&gt;</span>11 11 0<span class=\"nt\">&lt;/linear_velocity&gt;</span> <span class=\"c\">&lt;!-- Wind linear velocity --&gt;</span>\n  <span class=\"nt\">&lt;/wind&gt;</span>\n  <span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;model&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">name=</span><span class=\"s\">&quot;link&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;wind&gt;</span>true<span class=\"err\">&lt;</span>/<span class=\"nt\">&lt;wind&gt;</span>\n    <span class=\"nt\">&lt;/link&gt;</span>\n  <span class=\"nt\">&lt;/model&gt;</span>\n<span class=\"nt\">&lt;/world&gt;</span>\n</pre></div>\n\n\n<p>At the client side, the wind parameters are displayed in the property tree browser. Wind velocity for a selected link only appears in its corresponding property tree if the wind is enabled for this link.</p>\n<p>A plugin example can be found in <code>plugins/WindPlugin.cc</code>. Its corresponding world is <code>worlds/wind_demo.world</code>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "e2d982bdbb61", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ocrave/gazebo/commit/e2d982bdbb61"}, "html": {"href": "https://bitbucket.org/ocrave/gazebo/commits/e2d982bdbb61"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ocrave/gazebo"}, "html": {"href": "https://bitbucket.org/ocrave/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f2b7e0a0-04ff-4851-9879-a852a70325b2}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "ocrave/gazebo", "uuid": "{f2b7e0a0-04ff-4851-9879-a852a70325b2}"}, "branch": {"name": "wind"}}, "comment_count": 49, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2016-03-15T16:43:19.078554+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2016-02-12T13:27:44.003640+00:00", "type": "participant", "approved": false, "user": {"display_name": "Olivier Crave", "uuid": "{c2c9ac10-3ca6-45ef-a19b-d3a76d065296}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc2c9ac10-3ca6-45ef-a19b-d3a76d065296%7D"}, "html": {"href": "https://bitbucket.org/%7Bc2c9ac10-3ca6-45ef-a19b-d3a76d065296%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a4e0f2b75ca0affe5c82b9650a623d0dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsOC-4.png"}}, "nickname": "ocrave", "type": "user", "account_id": "557058:24cd6b3d-30bb-4c42-9e4b-f5836c392874"}}, {"role": "REVIEWER", "participated_on": "2016-04-06T00:05:14.500576+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2016-03-25T09:23:37.575188+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nicolae Rosia", "uuid": "{47441263-bb15-495f-b324-58a1e3c7b35f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B47441263-bb15-495f-b324-58a1e3c7b35f%7D"}, "html": {"href": "https://bitbucket.org/%7B47441263-bb15-495f-b324-58a1e3c7b35f%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1b61ff7ec618b3e8743b8ab9743e4108d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsNR-6.png"}}, "nickname": "nicolaerosia", "type": "user", "account_id": "557058:2ea02a3a-4b8d-4620-8154-81f2eb2f71af"}}, {"role": "REVIEWER", "participated_on": "2016-01-26T18:29:33.064029+00:00", "type": "participant", "approved": false, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}], "reason": "", "updated_on": "2016-04-07T14:20:05.535034+00:00", "author": {"display_name": "Olivier Crave", "uuid": "{c2c9ac10-3ca6-45ef-a19b-d3a76d065296}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc2c9ac10-3ca6-45ef-a19b-d3a76d065296%7D"}, "html": {"href": "https://bitbucket.org/%7Bc2c9ac10-3ca6-45ef-a19b-d3a76d065296%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a4e0f2b75ca0affe5c82b9650a623d0dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsOC-4.png"}}, "nickname": "ocrave", "type": "user", "account_id": "557058:24cd6b3d-30bb-4c42-9e4b-f5836c392874"}, "merge_commit": {"hash": "f53ba4a8dbf4", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f53ba4a8dbf4.json"}, "html": {"href": "#!/osrf/gazebo/commits/f53ba4a8dbf4"}}}, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}