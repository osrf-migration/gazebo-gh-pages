{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1866/comments/9826637.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1866/_/diff#comment-9826637"}}, "parent": {"id": 9479908, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1866/comments/9479908.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1866/_/diff#comment-9479908"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1866, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1866.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1866"}}, "title": "WideAngle Camera"}, "content": {"raw": "yes they are false positives but we would like to either avoid or suppress them as much as possible\n\nThe following patch should get rid of the warnings\n\n~~~\ndiff -r b73928df66b1 gazebo/rendering/CameraLensPrivate.hh\n--- a/gazebo/rendering/CameraLensPrivate.hh\tWed Sep 09 21:02:27 2015 +0300\n+++ b/gazebo/rendering/CameraLensPrivate.hh\tThu Sep 10 18:36:59 2015 -0700\n@@ -106,18 +106,18 @@\n                 /// List of all available functions and it's representations\n                 private: const std::vector<\n                     std::tuple<std::string, ignition::math::Vector3d,\n-                        std::function<float(float)> > > variants = {\n+                        std::function<float (float)> > > variants = {\n                           std::make_tuple(\"sin\",\n                               ignition::math::Vector3d::UnitX,\n-                              std::function<float(float)>(\n-                                  static_cast<float(*)(float)>(&std::sin))),\n+                              std::function<float (float)>(\n+                                  static_cast<float (*)(float)>(&std::sin))),\n                           std::make_tuple(\"tan\",\n                               ignition::math::Vector3d::UnitY,\n-                              std::function<float(float)>(\n-                                  static_cast<float(*)(float)>(&std::tan))),\n+                              std::function<float (float)>(\n+                                  static_cast<float (*)(float)>(&std::tan))),\n                           std::make_tuple(\"id\",\n                               ignition::math::Vector3d::UnitZ,\n-                              std::function<float(float)>(\n+                              std::function<float (float)>(\n                                   [](float t) -> float\n                                   {\n                                     return t;\n~~~", "markup": "markdown", "html": "<p>yes they are false positives but we would like to either avoid or suppress them as much as possible</p>\n<p>The following patch should get rid of the warnings</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r b73928df66b1 gazebo/rendering/CameraLensPrivate.hh</span>\n<span class=\"gd\">--- a/gazebo/rendering/CameraLensPrivate.hh Wed Sep 09 21:02:27 2015 +0300</span>\n<span class=\"gi\">+++ b/gazebo/rendering/CameraLensPrivate.hh Thu Sep 10 18:36:59 2015 -0700</span>\n<span class=\"gu\">@@ -106,18 +106,18 @@</span>\n                 /// List of all available functions and it&#39;s representations\n                 private: const std::vector&lt;\n                     std::tuple&lt;std::string, ignition::math::Vector3d,\n<span class=\"gd\">-                        std::function&lt;float(float)&gt; &gt; &gt; variants = {</span>\n<span class=\"gi\">+                        std::function&lt;float (float)&gt; &gt; &gt; variants = {</span>\n                           std::make_tuple(&quot;sin&quot;,\n                               ignition::math::Vector3d::UnitX,\n<span class=\"gd\">-                              std::function&lt;float(float)&gt;(</span>\n<span class=\"gd\">-                                  static_cast&lt;float(*)(float)&gt;(&amp;std::sin))),</span>\n<span class=\"gi\">+                              std::function&lt;float (float)&gt;(</span>\n<span class=\"gi\">+                                  static_cast&lt;float (*)(float)&gt;(&amp;std::sin))),</span>\n                           std::make_tuple(&quot;tan&quot;,\n                               ignition::math::Vector3d::UnitY,\n<span class=\"gd\">-                              std::function&lt;float(float)&gt;(</span>\n<span class=\"gd\">-                                  static_cast&lt;float(*)(float)&gt;(&amp;std::tan))),</span>\n<span class=\"gi\">+                              std::function&lt;float (float)&gt;(</span>\n<span class=\"gi\">+                                  static_cast&lt;float (*)(float)&gt;(&amp;std::tan))),</span>\n                           std::make_tuple(&quot;id&quot;,\n                               ignition::math::Vector3d::UnitZ,\n<span class=\"gd\">-                              std::function&lt;float(float)&gt;(</span>\n<span class=\"gi\">+                              std::function&lt;float (float)&gt;(</span>\n                                   [](float t) -&gt; float\n                                   {\n                                     return t;\n</pre></div>", "type": "rendered"}, "created_on": "2015-09-11T01:38:52.189374+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2015-09-11T01:38:52.196297+00:00", "type": "pullrequest_comment", "id": 9826637}