{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1278/comments/3807095.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/ahaidu/gazebo:d030dcf3443e..8cb66bd70ee8?path=gazebo%2Fmath%2FBox_TEST.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1278/_/diff#comment-3807095"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1278, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1278.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1278"}}, "title": "box get center fix"}, "content": {"raw": "I haven't taken the time to look into how this class is being used, but I think we should add a check when `min` and `max` are set to make sure they are really min and max.\n\nFor example, for the box proposed here: `box = math::Box(math::Vector3(0, -1, 2), math::Vector3(1, -2, 3))`, the minimum vertex would actually be `(0, -2, 2)` and max `(1, -1, 3)`. \n\nHaving the wrong min and max means we also get wrong merges - the result here should actually be    \n\n```\n#!c++\n\nEXPECT_TRUE(box == math::Box(math::Vector3(-1, -2, -1), math::Vector3(2, 2, 3)));\n```\n\nAn idea would be for the constructor  `Box::Box` to have as inputs `Vertex1` and `Vertex2` and have `min` and `max` calculated from these vertices internally. \n", "markup": "markdown", "html": "<p>I haven't taken the time to look into how this class is being used, but I think we should add a check when <code>min</code> and <code>max</code> are set to make sure they are really min and max.</p>\n<p>For example, for the box proposed here: <code>box = math::Box(math::Vector3(0, -1, 2), math::Vector3(1, -2, 3))</code>, the minimum vertex would actually be <code>(0, -2, 2)</code> and max <code>(1, -1, 3)</code>. </p>\n<p>Having the wrong min and max means we also get wrong merges - the result here should actually be    </p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">box</span> <span class=\"o\">==</span> <span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Box</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)));</span>\n</pre></div>\n\n\n<p>An idea would be for the constructor  <code>Box::Box</code> to have as inputs <code>Vertex1</code> and <code>Vertex2</code> and have <code>min</code> and <code>max</code> calculated from these vertices internally. </p>", "type": "rendered"}, "created_on": "2014-11-10T15:46:32.826549+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "inline": {"to": null, "from": 80, "outdated": false, "path": "gazebo/math/Box_TEST.cc"}, "updated_on": "2014-11-10T15:46:32.838374+00:00", "type": "pullrequest_comment", "id": 3807095}