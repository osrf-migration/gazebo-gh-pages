{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2547/comments/33409001.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2547/_/diff#comment-33409001"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2547, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2547.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2547"}}, "title": "Dart 6"}, "content": {"raw": "I debugged the force torque test, and the test involves apply feedback control to some joints and then expecting specific force/torque values. I reproduced the test interactively, and I found that it eventually reached the desired values, but it takes a little longer to converge. So if we increase the number of test timesteps, then the test passes for me, which is reasonable to me:\n\n~~~\ndiff -r 0cfe322af3ca test/integration/joint_force_torque.cc\n--- a/test/integration/joint_force_torque.cc\tThu Mar 16 13:27:45 2017 +1100\n+++ b/test/integration/joint_force_torque.cc\tFri Mar 17 14:37:24 2017 -0700\n@@ -366,7 +366,8 @@\n   static const double kp2 = 10000.0;\n   static const double target1 = 0.0;\n   static const double target2 = -0.25*M_PI;\n-  for (unsigned int i = 0; i < 3388; ++i)\n+  static const unsigned int steps = 4500;\n+  for (unsigned int i = 0; i < steps; ++i)\n   {\n     // pd control\n     double j1State = joint_01->Position(0);\n@@ -382,7 +383,7 @@\n     // test joint_01 wrench\n     physics::JointWrench wrench_01 = joint_01->GetForceTorque(0u);\n \n-    if (i == 3387)\n+    if (i == steps-1)\n     {\n       EXPECT_NEAR(wrench_01.body1Force.X(),     0.0, TOL_CONT);\n       EXPECT_NEAR(wrench_01.body1Force.Y(),     0.0, TOL_CONT);\n@@ -417,7 +418,7 @@\n \n     // test joint_12 wrench\n     physics::JointWrench wrench_12 = joint_12->GetForceTorque(0u);\n-    if (i == 3387)\n+    if (i == steps-1)\n     {\n       EXPECT_NEAR(wrench_12.body1Force.X(),     0.0, TOL_CONT);\n       EXPECT_NEAR(wrench_12.body1Force.Y(),     0.0, TOL_CONT);\n@@ -497,10 +498,11 @@\n   static const double kp2 = 10000.0;\n   static const double target1 = 0.0;\n   static const double target2 = -0.25*M_PI;\n+  static const unsigned int steps = 4500;\n \n   for (unsigned int j = 0; j < 2; ++j)\n   {\n-    for (unsigned int i = 0; i < 3388; ++i)\n+    for (unsigned int i = 0; i < steps; ++i)\n     {\n       // pd control\n       double j1State = joint_01->Position(0);\n@@ -516,7 +518,7 @@\n       // test joint_01 wrench\n       physics::JointWrench wrench_01 = joint_01->GetForceTorque(0u);\n \n-      if (i < 3387)\n+      if (i < steps-1)\n         continue;\n \n       EXPECT_NEAR(wrench_01.body1Force.X(),     0.0, TOL_CONT);\n~~~", "markup": "markdown", "html": "<p>I debugged the force torque test, and the test involves apply feedback control to some joints and then expecting specific force/torque values. I reproduced the test interactively, and I found that it eventually reached the desired values, but it takes a little longer to converge. So if we increase the number of test timesteps, then the test passes for me, which is reasonable to me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 0cfe322af3ca test/integration/joint_force_torque.cc</span>\n<span class=\"gd\">--- a/test/integration/joint_force_torque.cc    Thu Mar 16 13:27:45 2017 +1100</span>\n<span class=\"gi\">+++ b/test/integration/joint_force_torque.cc    Fri Mar 17 14:37:24 2017 -0700</span>\n<span class=\"gu\">@@ -366,7 +366,8 @@</span>\n   static const double kp2 = 10000.0;\n   static const double target1 = 0.0;\n   static const double target2 = -0.25*M_PI;\n<span class=\"gd\">-  for (unsigned int i = 0; i &lt; 3388; ++i)</span>\n<span class=\"gi\">+  static const unsigned int steps = 4500;</span>\n<span class=\"gi\">+  for (unsigned int i = 0; i &lt; steps; ++i)</span>\n   {\n     // pd control\n     double j1State = joint_01-&gt;Position(0);\n<span class=\"gu\">@@ -382,7 +383,7 @@</span>\n     // test joint_01 wrench\n     physics::JointWrench wrench_01 = joint_01-&gt;GetForceTorque(0u);\n\n<span class=\"gd\">-    if (i == 3387)</span>\n<span class=\"gi\">+    if (i == steps-1)</span>\n     {\n       EXPECT_NEAR(wrench_01.body1Force.X(),     0.0, TOL_CONT);\n       EXPECT_NEAR(wrench_01.body1Force.Y(),     0.0, TOL_CONT);\n<span class=\"gu\">@@ -417,7 +418,7 @@</span>\n\n     // test joint_12 wrench\n     physics::JointWrench wrench_12 = joint_12-&gt;GetForceTorque(0u);\n<span class=\"gd\">-    if (i == 3387)</span>\n<span class=\"gi\">+    if (i == steps-1)</span>\n     {\n       EXPECT_NEAR(wrench_12.body1Force.X(),     0.0, TOL_CONT);\n       EXPECT_NEAR(wrench_12.body1Force.Y(),     0.0, TOL_CONT);\n<span class=\"gu\">@@ -497,10 +498,11 @@</span>\n   static const double kp2 = 10000.0;\n   static const double target1 = 0.0;\n   static const double target2 = -0.25*M_PI;\n<span class=\"gi\">+  static const unsigned int steps = 4500;</span>\n\n   for (unsigned int j = 0; j &lt; 2; ++j)\n   {\n<span class=\"gd\">-    for (unsigned int i = 0; i &lt; 3388; ++i)</span>\n<span class=\"gi\">+    for (unsigned int i = 0; i &lt; steps; ++i)</span>\n     {\n       // pd control\n       double j1State = joint_01-&gt;Position(0);\n<span class=\"gu\">@@ -516,7 +518,7 @@</span>\n       // test joint_01 wrench\n       physics::JointWrench wrench_01 = joint_01-&gt;GetForceTorque(0u);\n\n<span class=\"gd\">-      if (i &lt; 3387)</span>\n<span class=\"gi\">+      if (i &lt; steps-1)</span>\n         continue;\n\n       EXPECT_NEAR(wrench_01.body1Force.X(),     0.0, TOL_CONT);\n</pre></div>", "type": "rendered"}, "created_on": "2017-03-17T21:40:44.932735+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-03-17T21:40:44.936583+00:00", "type": "pullrequest_comment", "id": 33409001}