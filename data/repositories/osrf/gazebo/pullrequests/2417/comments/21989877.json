{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2417/comments/21989877.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:bd987eae11a6..75d910de8890?path=gazebo%2Fcommon%2FCommonIface_TEST.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2417/_/diff#comment-21989877"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2417, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2417.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2417"}}, "title": "Gazebo7 file operations"}, "content": {"raw": "How about checking that the content of `test2.tmp` is the same as `test1.tmp`?\n\n\n```\n#!c++\n\nstd::ofstream tmpOut(\"test.tmp\");\nstd::string data = \"Output\\n\";\ntmpOut << data;\ntmpOut.close();\n\ncommon::copyFile(\"test.tmp\", \"test2.tmp\");\nEXPECT_TRUE(common::exists(\"test.tmp\"));\nEXPECT_TRUE(common::exists(\"test2.tmp\"));\n\nstd::ifstream ifs(\"test2.tmp\");\nstd::string content((std::istreambuf_iterator<char>(ifs) ),\n  (std::istreambuf_iterator<char>()));\nEXPECT_EQ(content, data);\n```\n\nWe could do a similar thing after `common::moveFile()`.", "markup": "markdown", "html": "<p>How about checking that the content of <code>test2.tmp</code> is the same as <code>test1.tmp</code>?</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ofstream</span> <span class=\"n\">tmpOut</span><span class=\"p\">(</span><span class=\"s\">&quot;test.tmp&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Output</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n<span class=\"n\">tmpOut</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n<span class=\"n\">tmpOut</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\n<span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">copyFile</span><span class=\"p\">(</span><span class=\"s\">&quot;test.tmp&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;test2.tmp&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s\">&quot;test.tmp&quot;</span><span class=\"p\">));</span>\n<span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s\">&quot;test2.tmp&quot;</span><span class=\"p\">));</span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ifstream</span> <span class=\"n\">ifs</span><span class=\"p\">(</span><span class=\"s\">&quot;test2.tmp&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">content</span><span class=\"p\">((</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">istreambuf_iterator</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ifs</span><span class=\"p\">)</span> <span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">istreambuf_iterator</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span><span class=\"p\">()));</span>\n<span class=\"n\">EXPECT_EQ</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>We could do a similar thing after <code>common::moveFile()</code>.</p>", "type": "rendered"}, "created_on": "2016-08-05T17:21:46.189863+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "inline": {"to": 91, "from": null, "outdated": true, "path": "gazebo/common/CommonIface_TEST.cc"}, "updated_on": "2016-08-05T17:56:40.004675+00:00", "type": "pullrequest_comment", "id": 21989877}