{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2821/comments/59770334.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:1c00adf9350c..08cac3d6158e?path=gazebo%2Futil%2FDiagnostics.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2821/_/diff#comment-59770334"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2821, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2821.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2821"}}, "title": "Diagnostics: record timing statistics instead of all timestamps"}, "content": {"raw": "I'm not sure how much we care, but since this is a diagnostic tool, optimizations might be relevant.\n\nWe can significantly reduce the map lookup overhead of this function by doing:\n\n```\nconst auto inserted = this->dataPtr->stats.insert(std::make_pair(_name, ignition::math::SignalStats()));\nconst auto &iter = inserted.first;\n\nif (inserted.second)\n{\n  iter->second.InsertStatistics(\"mean,maxAbs,min,var\");\n}\n\niter->second.InsertData(_time.Double());\n```\n\nThis would turn 3 map lookups into 1 map lookup. The semantics of the `insert(~)` function is to (1) insert a new entry with the given (key, value) pair if an entry does not already exist for that key, and then (2) return an iterator to the entry at that key, whether or not the entry existed before `insert(~)` was called. It returns a `std::pair<iterator, bool>` where the `bool` is true when an entry was actually inserted; if an entry already existed, then it's false.", "markup": "markdown", "html": "<p>I'm not sure how much we care, but since this is a diagnostic tool, optimizations might be relevant.</p>\n<p>We can significantly reduce the map lookup overhead of this function by doing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">const</span> <span class=\"nt\">auto</span> <span class=\"nt\">inserted</span> <span class=\"o\">=</span> <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">dataPtr-</span><span class=\"o\">&gt;</span><span class=\"nt\">stats</span><span class=\"p\">.</span><span class=\"nc\">insert</span><span class=\"o\">(</span><span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">make_pair</span><span class=\"o\">(</span><span class=\"nt\">_name</span><span class=\"o\">,</span> <span class=\"nt\">ignition</span><span class=\"p\">::</span><span class=\"nd\">math</span><span class=\"p\">::</span><span class=\"nd\">SignalStats</span><span class=\"o\">()));</span>\n<span class=\"nt\">const</span> <span class=\"nt\">auto</span> <span class=\"o\">&amp;</span><span class=\"nt\">iter</span> <span class=\"o\">=</span> <span class=\"nt\">inserted</span><span class=\"p\">.</span><span class=\"nc\">first</span><span class=\"o\">;</span>\n\n<span class=\"nt\">if</span> <span class=\"o\">(</span><span class=\"nt\">inserted</span><span class=\"p\">.</span><span class=\"nc\">second</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">iter-&gt;second.InsertStatistics(&quot;mean,maxAbs,min,var&quot;)</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">iter-</span><span class=\"o\">&gt;</span><span class=\"nt\">second</span><span class=\"p\">.</span><span class=\"nc\">InsertData</span><span class=\"o\">(</span><span class=\"nt\">_time</span><span class=\"p\">.</span><span class=\"nc\">Double</span><span class=\"o\">());</span>\n</pre></div>\n\n\n<p>This would turn 3 map lookups into 1 map lookup. The semantics of the <code>insert(~)</code> function is to (1) insert a new entry with the given (key, value) pair if an entry does not already exist for that key, and then (2) return an iterator to the entry at that key, whether or not the entry existed before <code>insert(~)</code> was called. It returns a <code>std::pair&lt;iterator, bool&gt;</code> where the <code>bool</code> is true when an entry was actually inserted; if an entry already existed, then it's false.</p>", "type": "rendered"}, "created_on": "2018-03-23T21:46:58.283987+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": 411, "from": null, "outdated": true, "path": "gazebo/util/Diagnostics.cc"}, "updated_on": "2018-03-23T21:46:58.288093+00:00", "type": "pullrequest_comment", "id": 59770334}