{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2805/comments/49224540.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2805/_/diff#comment-49224540"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2805, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2805.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2805"}}, "title": "Shadow improvements"}, "content": {"raw": "I noticed that [INTEGRATION_gpu_laser failed on xenial-nvidia](https://build.osrfoundation.org/job/gazebo-ci-pr_any-xenial-amd64-gpu-nvidia/337/testReport/(root)/INTEGRATION_gpu_laser/test_ran/) with the following console output:\n\n~~~\n453: [ RUN      ] GPURaySensorTest.LaserUnitBox\n453: [Msg] Waiting for master.\n453: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\n453: [Msg] Publicized address: 172.17.0.5\n453: [Dbg] [ServerFixture.cc:207] ServerFixture load in 0.9 seconds, timeout after 600 seconds\n453: [Wrn] [msgs.cc:1808] Conversion of sensor type[gpu_ray] not suppported.\n453: [Wrn] [msgs.cc:1808] Conversion of sensor type[gpu_ray] not suppported.\n453: [Dbg] [ServerFixture.cc:133] ServerFixture::Unload\n453: [       OK ] GPURaySensorTest.LaserUnitBox (2447 ms)\n453: [ RUN      ] GPURaySensorTest.NameCollision\n157/200 Test #453: INTEGRATION_gpu_laser .................................***Exception: SegFault  2.73 sec\n~~~\n\nI'm able to reproduce it maybe 50% of the time. The backtrace implicates the following line in [Console.cc](#!/osrf/gazebo/src/4ec26fcd89872290714029c0126dd837302ac9f6/gazebo/common/Console.cc?at=gazebo7&fileviewer=file-view-default#Console.cc-205) of all places:\n\n~~~\nbuf->stream = new std::ofstream(logPath.string().c_str(), std::ios::out);\n~~~\n\n~~~\nCore was generated by `test/integration/INTEGRATION_gpu_laser'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x00007f14ccd59545 in _int_malloc (av=av@entry=0x7f14cd09bb20 <main_arena>, bytes=bytes@entry=8192) at malloc.c:3727\n3727\tmalloc.c: No such file or directory.\n(gdb) bt\n#0  0x00007f14ccd59545 in _int_malloc (av=av@entry=0x7f14cd09bb20 <main_arena>, bytes=bytes@entry=8192) at malloc.c:3727\n#1  0x00007f14ccd5b184 in __GI___libc_malloc (bytes=8192) at malloc.c:2913\n#2  0x00007f14cd64de78 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#3  0x00007f14cd64df19 in operator new[](unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#4  0x00007f14cd6ac468 in std::basic_filebuf<char, std::char_traits<char> >::_M_allocate_internal_buffer() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#5  0x00007f14cd6b06b2 in std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#6  0x00007f14ce81bb1e in std::basic_ofstream<char, std::char_traits<char> >::open (__mode=std::_S_out, __s=0x223c220 \"/home/scpeters/.gazebo/test-11345/test.log\", this=0x2236f60) at /usr/include/c++/5/fstream:802\n#7  std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream (__mode=std::_S_out, __s=0x223c220 \"/home/scpeters/.gazebo/test-11345/test.log\", this=0x2236f60, __in_chrg=<optimized out>, __vtt_parm=<optimized out>) at /usr/include/c++/5/fstream:702\n#8  gazebo::common::FileLogger::Init (this=0x7f14ceaaf680 <gazebo::common::Console::log>, _prefix=\"test-\", _filename=\"test.log\") at /data_fast/scpeters/ws/gazebo7/src/gazebo/gazebo/common/Console.cc:205\n#9  0x0000000000445b2a in gazebo::ServerFixture::ServerFixture (this=0x2221b70) at /data_fast/scpeters/ws/gazebo7/src/gazebo/gazebo/test/ServerFixture.cc:91\n#10 0x000000000041955b in GPURaySensorTest::GPURaySensorTest (this=0x2221b70) at /data_fast/scpeters/ws/gazebo7/src/gazebo/test/integration/gpu_laser.cc:25\n#11 GPURaySensorTest_NameCollision_Test::GPURaySensorTest_NameCollision_Test (this=0x2221b70) at /data_fast/scpeters/ws/gazebo7/src/gazebo/test/integration/gpu_laser.cc:213\n...\n~~~\n\nIt's hard to see how it could be related, but I checked my collection of backtraces from overnight testing, and this looks new. I saw a [random stackoverflow post](https://stackoverflow.com/questions/40498613/logger-receiving-segmentation-fault-when-trying-to-open-ofstream) saying they had a similar issue with an ofstream, but who knows. Since this looks like a new flaky failure, I'd like to try to fix it before merging.", "markup": "markdown", "html": "<p>I noticed that <a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/gazebo-ci-pr_any-xenial-amd64-gpu-nvidia/337/testReport/(root)/INTEGRATION_gpu_laser/test_ran/\" rel=\"nofollow\">INTEGRATION_gpu_laser failed on xenial-nvidia</a> with the following console output:</p>\n<div class=\"codehilite\"><pre><span></span>453: [ RUN      ] GPURaySensorTest.LaserUnitBox\n453: [Msg] Waiting for master.\n453: [Msg] Connected to gazebo master @ http://127.0.0.1:11345\n453: [Msg] Publicized address: 172.17.0.5\n453: [Dbg] [ServerFixture.cc:207] ServerFixture load in 0.9 seconds, timeout after 600 seconds\n453: [Wrn] [msgs.cc:1808] Conversion of sensor type[gpu_ray] not suppported.\n453: [Wrn] [msgs.cc:1808] Conversion of sensor type[gpu_ray] not suppported.\n453: [Dbg] [ServerFixture.cc:133] ServerFixture::Unload\n453: [       OK ] GPURaySensorTest.LaserUnitBox (2447 ms)\n453: [ RUN      ] GPURaySensorTest.NameCollision\n157/200 Test #453: INTEGRATION_gpu_laser .................................***Exception: SegFault  2.73 sec\n</pre></div>\n\n\n<p>I'm able to reproduce it maybe 50% of the time. The backtrace implicates the following line in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/4ec26fcd89872290714029c0126dd837302ac9f6/gazebo/common/Console.cc?at=gazebo7&amp;fileviewer=file-view-default#Console.cc-205\" rel=\"nofollow\">Console.cc</a> of all places:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">buf-</span><span class=\"o\">&gt;</span><span class=\"nt\">stream</span> <span class=\"o\">=</span> <span class=\"nt\">new</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">ofstream</span><span class=\"o\">(</span><span class=\"nt\">logPath</span><span class=\"p\">.</span><span class=\"nc\">string</span><span class=\"o\">()</span><span class=\"p\">.</span><span class=\"nc\">c_str</span><span class=\"o\">(),</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">ios</span><span class=\"p\">::</span><span class=\"nd\">out</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Core was generated by `test/integration/INTEGRATION_gpu_laser&#39;.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x00007f14ccd59545 in _int_malloc (av=av@entry=0x7f14cd09bb20 &lt;main_arena&gt;, bytes=bytes@entry=8192) at malloc.c:3727\n3727    malloc.c: No such file or directory.\n(gdb) bt\n#0  0x00007f14ccd59545 in _int_malloc (av=av@entry=0x7f14cd09bb20 &lt;main_arena&gt;, bytes=bytes@entry=8192) at malloc.c:3727\n#1  0x00007f14ccd5b184 in __GI___libc_malloc (bytes=8192) at malloc.c:2913\n#2  0x00007f14cd64de78 in operator new(unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#3  0x00007f14cd64df19 in operator new[](unsigned long) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#4  0x00007f14cd6ac468 in std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#5  0x00007f14cd6b06b2 in std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open(char const*, std::_Ios_Openmode) () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#6  0x00007f14ce81bb1e in std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;::open (__mode=std::_S_out, __s=0x223c220 &quot;/home/scpeters/.gazebo/test-11345/test.log&quot;, this=0x2236f60) at /usr/include/c++/5/fstream:802\n#7  std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ofstream (__mode=std::_S_out, __s=0x223c220 &quot;/home/scpeters/.gazebo/test-11345/test.log&quot;, this=0x2236f60, __in_chrg=&lt;optimized out&gt;, __vtt_parm=&lt;optimized out&gt;) at /usr/include/c++/5/fstream:702\n#8  gazebo::common::FileLogger::Init (this=0x7f14ceaaf680 &lt;gazebo::common::Console::log&gt;, _prefix=&quot;test-&quot;, _filename=&quot;test.log&quot;) at /data_fast/scpeters/ws/gazebo7/src/gazebo/gazebo/common/Console.cc:205\n#9  0x0000000000445b2a in gazebo::ServerFixture::ServerFixture (this=0x2221b70) at /data_fast/scpeters/ws/gazebo7/src/gazebo/gazebo/test/ServerFixture.cc:91\n#10 0x000000000041955b in GPURaySensorTest::GPURaySensorTest (this=0x2221b70) at /data_fast/scpeters/ws/gazebo7/src/gazebo/test/integration/gpu_laser.cc:25\n#11 GPURaySensorTest_NameCollision_Test::GPURaySensorTest_NameCollision_Test (this=0x2221b70) at /data_fast/scpeters/ws/gazebo7/src/gazebo/test/integration/gpu_laser.cc:213\n...\n</pre></div>\n\n\n<p>It's hard to see how it could be related, but I checked my collection of backtraces from overnight testing, and this looks new. I saw a <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/questions/40498613/logger-receiving-segmentation-fault-when-trying-to-open-ofstream\" rel=\"nofollow\">random stackoverflow post</a> saying they had a similar issue with an ofstream, but who knows. Since this looks like a new flaky failure, I'd like to try to fix it before merging.</p>", "type": "rendered"}, "created_on": "2017-11-09T18:15:07.687298+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-11-09T18:15:07.690843+00:00", "type": "pullrequest_comment", "id": 49224540}