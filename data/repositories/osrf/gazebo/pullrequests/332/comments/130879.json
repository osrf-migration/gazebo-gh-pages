{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/332/comments/130879.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/332/_/diff#comment-130879"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 332, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/332.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/332"}}, "title": "Fixed Sensor time reset"}, "content": {"raw": "You added a mutex to the test, which is an improvement, but it isn't always used to protect the global variable g_hokuyoMsgCount. This patch would fix it. It's a minor point, since thread overlap would be unlikely.\n~~~\ndiff -r 06e05b2e3261 gazebo/sensors/Sensor_TEST.cc\n--- a/gazebo/sensors/Sensor_TEST.cc\tMon Feb 25 13:48:15 2013 -0800\n+++ b/gazebo/sensors/Sensor_TEST.cc\tMon Feb 25 15:13:30 2013 -0800\n@@ -32,6 +32,7 @@\n unsigned int g_hokuyoMsgCount;\n void ReceiveHokuyoMsg(ConstLaserScanStampedPtr &/*_msg*/)\n {\n+  boost::mutex::scoped_lock lock(g_countMutex);\n   g_hokuyoMsgCount++;\n   if (g_hokuyoMsgCount >= 20)\n     g_countCondition.notify_one();\n@@ -65,7 +66,10 @@\n   gzdbg << sensor->GetScopedName() << \" loaded with update rate of \"\n         << sensor->GetUpdateRate() << \" Hz\\n\";\n \n-  g_hokuyoMsgCount = 0;\n+  {\n+    boost::mutex::scoped_lock lock(g_countMutex);\n+    g_hokuyoMsgCount = 0;\n+  }\n \n   // Subscribe to hokuyo laser scan messages\n   transport::NodePtr node = transport::NodePtr(new transport::Node());\n@@ -105,7 +109,10 @@\n   EXPECT_LT(now, 0.12);\n \n   // Count messages again for 2 second\n-  g_hokuyoMsgCount = 0;\n+  {\n+    boost::mutex::scoped_lock lock(g_countMutex);\n+    g_hokuyoMsgCount = 0;\n+  }\n   for (i = 0; i < 20; ++i)\n   {\n     common::Time::MSleep(100);\n@@ -122,7 +129,10 @@\n \n   // Count messages again for 2 more seconds\n   then = now;\n-  g_hokuyoMsgCount = 0;\n+  {\n+    boost::mutex::scoped_lock lock(g_countMutex);\n+    g_hokuyoMsgCount = 0;\n+  }\n   for (i = 0; i < 20; ++i)\n   {\n     common::Time::MSleep(100);\n~~~", "markup": "markdown", "html": "<p>You added a mutex to the test, which is an improvement, but it isn't always used to protect the global variable g_hokuyoMsgCount. This patch would fix it. It's a minor point, since thread overlap would be unlikely.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 06e05b2e3261 gazebo/sensors/Sensor_TEST.cc</span>\n<span class=\"gd\">--- a/gazebo/sensors/Sensor_TEST.cc Mon Feb 25 13:48:15 2013 -0800</span>\n<span class=\"gi\">+++ b/gazebo/sensors/Sensor_TEST.cc Mon Feb 25 15:13:30 2013 -0800</span>\n<span class=\"gu\">@@ -32,6 +32,7 @@</span>\n unsigned int g_hokuyoMsgCount;\n void ReceiveHokuyoMsg(ConstLaserScanStampedPtr &amp;/*_msg*/)\n {\n<span class=\"gi\">+  boost::mutex::scoped_lock lock(g_countMutex);</span>\n   g_hokuyoMsgCount++;\n   if (g_hokuyoMsgCount &gt;= 20)\n     g_countCondition.notify_one();\n<span class=\"gu\">@@ -65,7 +66,10 @@</span>\n   gzdbg &lt;&lt; sensor-&gt;GetScopedName() &lt;&lt; &quot; loaded with update rate of &quot;\n         &lt;&lt; sensor-&gt;GetUpdateRate() &lt;&lt; &quot; Hz\\n&quot;;\n\n<span class=\"gd\">-  g_hokuyoMsgCount = 0;</span>\n<span class=\"gi\">+  {</span>\n<span class=\"gi\">+    boost::mutex::scoped_lock lock(g_countMutex);</span>\n<span class=\"gi\">+    g_hokuyoMsgCount = 0;</span>\n<span class=\"gi\">+  }</span>\n\n   // Subscribe to hokuyo laser scan messages\n   transport::NodePtr node = transport::NodePtr(new transport::Node());\n<span class=\"gu\">@@ -105,7 +109,10 @@</span>\n   EXPECT_LT(now, 0.12);\n\n   // Count messages again for 2 second\n<span class=\"gd\">-  g_hokuyoMsgCount = 0;</span>\n<span class=\"gi\">+  {</span>\n<span class=\"gi\">+    boost::mutex::scoped_lock lock(g_countMutex);</span>\n<span class=\"gi\">+    g_hokuyoMsgCount = 0;</span>\n<span class=\"gi\">+  }</span>\n   for (i = 0; i &lt; 20; ++i)\n   {\n     common::Time::MSleep(100);\n<span class=\"gu\">@@ -122,7 +129,10 @@</span>\n\n   // Count messages again for 2 more seconds\n   then = now;\n<span class=\"gd\">-  g_hokuyoMsgCount = 0;</span>\n<span class=\"gi\">+  {</span>\n<span class=\"gi\">+    boost::mutex::scoped_lock lock(g_countMutex);</span>\n<span class=\"gi\">+    g_hokuyoMsgCount = 0;</span>\n<span class=\"gi\">+  }</span>\n   for (i = 0; i &lt; 20; ++i)\n   {\n     common::Time::MSleep(100);\n</pre></div>", "type": "rendered"}, "created_on": "2013-02-25T23:16:31.875394+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2013-02-25T23:16:31.885659+00:00", "type": "pullrequest_comment", "id": 130879}