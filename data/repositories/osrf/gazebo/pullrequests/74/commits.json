{"pagelen": 100, "values": [{"hash": "d9e6100f82ee88a3781aba201153e0fad92ee19c", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/d9e6100f82ee88a3781aba201153e0fad92ee19c.json"}, "comments": {"href": "data/repositories/osrf/gazebo/commit/d9e6100f82ee88a3781aba201153e0fad92ee19c/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/commits/d9e6100f82ee88a3781aba201153e0fad92ee19c"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/d9e6100f82ee88a3781aba201153e0fad92ee19c"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/commit/d9e6100f82ee88a3781aba201153e0fad92ee19c/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/commit/d9e6100f82ee88a3781aba201153e0fad92ee19c/statuses_page=1.json"}}, "author": {"raw": "\"Nate Koenig <natekoenig@gmail.com>\"", "type": "author"}, "summary": {"raw": "Merged in ffurrer/gazebo/visual_plugin (pull request #74)", "markup": "markdown", "html": "<p>Merged in <a href=\"https://bitbucket.org/ffurrer/gazebo\" rel=\"nofollow\" class=\"ap-connect-link\">ffurrer/gazebo</a>/visual_plugin (<a href=\"#!/osrf/gazebo/pull-requests/74/add-new-plugin-type-visualplugin\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #74</a>)</p>", "type": "rendered"}, "parents": [{"hash": "59180133dcc86f4d13ee37bad73327780151a21e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/59180133dcc86f4d13ee37bad73327780151a21e.json"}, "html": {"href": "#!/osrf/gazebo/commits/59180133dcc86f4d13ee37bad73327780151a21e"}}}, {"hash": "028df72684b2f62455887a1f0aab21be7dd92c77", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/028df72684b2f62455887a1f0aab21be7dd92c77.json"}, "html": {"href": "#!/osrf/gazebo/commits/028df72684b2f62455887a1f0aab21be7dd92c77"}}}], "date": "2012-11-08T15:08:22+00:00", "message": "Merged in ffurrer/gazebo/visual_plugin (pull request #74)", "type": "commit"}, {"hash": "028df72684b2f62455887a1f0aab21be7dd92c77", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/028df72684b2f62455887a1f0aab21be7dd92c77.json"}, "comments": {"href": "data/repositories/osrf/gazebo/commit/028df72684b2f62455887a1f0aab21be7dd92c77/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/patch/028df72684b2f62455887a1f0aab21be7dd92c77"}, "html": {"href": "#!/osrf/gazebo/commits/028df72684b2f62455887a1f0aab21be7dd92c77"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/028df72684b2f62455887a1f0aab21be7dd92c77"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/commit/028df72684b2f62455887a1f0aab21be7dd92c77/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/commit/028df72684b2f62455887a1f0aab21be7dd92c77/statuses_page=1.json"}}, "author": {"raw": "Fadri Furrer <ffurrer@gmail.com>", "type": "author", "user": {"display_name": "Fadri Furrer", "uuid": "{71ff7193-e7dc-452f-ba2f-da743018ab54}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B71ff7193-e7dc-452f-ba2f-da743018ab54%7D"}, "html": {"href": "https://bitbucket.org/%7B71ff7193-e7dc-452f-ba2f-da743018ab54%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/b4b09d874026ebb17a303fefc1c42a99d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsFF-3.png"}}, "nickname": "ffurrer", "type": "user", "account_id": "557058:b59ba506-a9fb-4e9a-bbf1-f67d12819f7e"}}, "summary": {"raw": "Add new Plugin type: VisualPlugin\n\nThis adds the possibility to add visual plugins to a <visual> tag as:\n    <link name=\"my_visual_link\">\n        <visual name=\"my_visual\">\n            <plugin name='my_visual_plugin' filename='lib_my_visual_plugin.so'/>\n            <pose>0 0 0 0 0 0</pose>\n            <geometry>\n                <!-- The following empty tag is needed because otherwise a\n                     default box of size 1 1 1 is put in as a geometry -->\n                <empty>\n                </empty>\n            </geometry>\n        </visual>\n    </link>\n\nVisual plugins can be written similar to other plugins. The main difference\nto other plugins is that these plugins run on the client side rather than on\nthe server side.\n\nVisualPlugin classes should inherit from VisualPlugin:\n    class MyVisualPlugin : public VisualPlugin\nit should have a Load function as:\n    void MyVisualPlugin::Load( VisualPtr _parent, sdf::ElementPtr _sdf )\nwhere _parent serves as a pointer to a Visual object, which gives access to\nall the rendering functions.\n\na callback could be made as:\n- in the header:\n    private: event::ConnectionPtr update_connection_;\n    private: DynamicLines *line;\n- in the class:\n    this->update_connection_ = event::Events::ConnectRender(\n        boost::bind(&MyVisualPlugin::UpdateChild, this));\n    void MyVisualPlugin::UpdateChild()\n    {\n        #for example a ros spin\n        ros::spinOnce();\n    }\n    # Draw a line\n    void MyVisualPlugin::DrawLine()\n    {\n        this->line = this->visual_->CreateDynamicLine(RENDERING_LINE_STRIP);\n        # Add two points to a connecting line strip from (-5,-5,0.01) to (-5,5,0.01)\n        this->line->AddPoint(math::Vector3(-5, -5, 0.01));\n        this->line->AddPoint(math::Vector3(-5, 5, 0.01));\n        # set the Material of the line, in this case to purple\n        this->line->setMaterial(\"Gazebo/Purple\")\n        this->line->setVisibilityFlags(GZ_VISIBILITY_GUI);\n        this->visual_->SetVisible(true);\n    }\n    // Register this plugin within the simulator\n    GZ_REGISTER_VISUAL_PLUGIN(GazeboVisualWire)", "markup": "markdown", "html": "<p>Add new Plugin type: VisualPlugin</p>\n<p>This adds the possibility to add visual plugins to a &lt;visual&gt; tag as:<br />\n    &lt;link name=\"my_visual_link\"&gt;<br />\n        &lt;visual name=\"my_visual\"&gt;<br />\n            &lt;plugin name='my_visual_plugin' filename='lib_my_visual_plugin.so'/&gt;<br />\n            &lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;<br />\n            &lt;geometry&gt;<br />\n                &lt;!-- The following empty tag is needed because otherwise a<br />\n                     default box of size 1 1 1 is put in as a geometry --&gt;<br />\n                &lt;empty&gt;<br />\n                &lt;/empty&gt;<br />\n            &lt;/geometry&gt;<br />\n        &lt;/visual&gt;<br />\n    &lt;/link&gt;</p>\n<p>Visual plugins can be written similar to other plugins. The main difference<br />\nto other plugins is that these plugins run on the client side rather than on<br />\nthe server side.</p>\n<p>VisualPlugin classes should inherit from VisualPlugin:<br />\n    class MyVisualPlugin : public VisualPlugin<br />\nit should have a Load function as:<br />\n    void MyVisualPlugin::Load( VisualPtr _parent, sdf::ElementPtr _sdf )<br />\nwhere _parent serves as a pointer to a Visual object, which gives access to<br />\nall the rendering functions.</p>\n<p>a callback could be made as:<br />\n- in the header:<br />\n    private: event::ConnectionPtr update_connection_;<br />\n    private: DynamicLines *line;<br />\n- in the class:<br />\n    this-&gt;update_connection_ = event::Events::ConnectRender(<br />\n        boost::bind(&amp;MyVisualPlugin::UpdateChild, this));<br />\n    void MyVisualPlugin::UpdateChild()<br />\n    {<br />\n        #for example a ros spin<br />\n        ros::spinOnce();<br />\n    }<br />\n    # Draw a line<br />\n    void MyVisualPlugin::DrawLine()<br />\n    {<br />\n        this-&gt;line = this-&gt;visual_-&gt;CreateDynamicLine(RENDERING_LINE_STRIP);<br />\n        # Add two points to a connecting line strip from (-5,-5,0.01) to (-5,5,0.01)<br />\n        this-&gt;line-&gt;AddPoint(math::Vector3(-5, -5, 0.01));<br />\n        this-&gt;line-&gt;AddPoint(math::Vector3(-5, 5, 0.01));<br />\n        # set the Material of the line, in this case to purple<br />\n        this-&gt;line-&gt;setMaterial(\"Gazebo/Purple\")<br />\n        this-&gt;line-&gt;setVisibilityFlags(GZ_VISIBILITY_GUI);<br />\n        this-&gt;visual_-&gt;SetVisible(true);<br />\n    }<br />\n    // Register this plugin within the simulator<br />\n    GZ_REGISTER_VISUAL_PLUGIN(GazeboVisualWire)</p>", "type": "rendered"}, "parents": [{"hash": "3123ecf9e8586d33055f55000294deca6a842645", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/3123ecf9e8586d33055f55000294deca6a842645.json"}, "html": {"href": "#!/osrf/gazebo/commits/3123ecf9e8586d33055f55000294deca6a842645"}}}], "date": "2012-11-02T18:51:32+00:00", "message": "Add new Plugin type: VisualPlugin\n\nThis adds the possibility to add visual plugins to a <visual> tag as:\n    <link name=\"my_visual_link\">\n        <visual name=\"my_visual\">\n            <plugin name='my_visual_plugin' filename='lib_my_visual_plugin.so'/>\n            <pose>0 0 0 0 0 0</pose>\n            <geometry>\n                <!-- The following empty tag is needed because otherwise a\n                     default box of size 1 1 1 is put in as a geometry -->\n                <empty>\n                </empty>\n            </geometry>\n        </visual>\n    </link>\n\nVisual plugins can be written similar to other plugins. The main difference\nto other plugins is that these plugins run on the client side rather than on\nthe server side.\n\nVisualPlugin classes should inherit from VisualPlugin:\n    class MyVisualPlugin : public VisualPlugin\nit should have a Load function as:\n    void MyVisualPlugin::Load( VisualPtr _parent, sdf::ElementPtr _sdf )\nwhere _parent serves as a pointer to a Visual object, which gives access to\nall the rendering functions.\n\na callback could be made as:\n- in the header:\n    private: event::ConnectionPtr update_connection_;\n    private: DynamicLines *line;\n- in the class:\n    this->update_connection_ = event::Events::ConnectRender(\n        boost::bind(&MyVisualPlugin::UpdateChild, this));\n    void MyVisualPlugin::UpdateChild()\n    {\n        #for example a ros spin\n        ros::spinOnce();\n    }\n    # Draw a line\n    void MyVisualPlugin::DrawLine()\n    {\n        this->line = this->visual_->CreateDynamicLine(RENDERING_LINE_STRIP);\n        # Add two points to a connecting line strip from (-5,-5,0.01) to (-5,5,0.01)\n        this->line->AddPoint(math::Vector3(-5, -5, 0.01));\n        this->line->AddPoint(math::Vector3(-5, 5, 0.01));\n        # set the Material of the line, in this case to purple\n        this->line->setMaterial(\"Gazebo/Purple\")\n        this->line->setVisibilityFlags(GZ_VISIBILITY_GUI);\n        this->visual_->SetVisible(true);\n    }\n    // Register this plugin within the simulator\n    GZ_REGISTER_VISUAL_PLUGIN(GazeboVisualWire)", "type": "commit"}], "page": 1}