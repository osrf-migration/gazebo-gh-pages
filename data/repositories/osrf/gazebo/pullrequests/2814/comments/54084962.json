{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2814/comments/54084962.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:25b68c1dd85c..806f4852f36e?path=test%2Fintegration%2Fjoint_set_position_test.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2814/_/diff#comment-54084962"}}, "parent": {"id": 53973867, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2814/comments/53973867.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2814/_/diff#comment-53973867"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2814, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2814.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2814"}}, "title": "Fix issue 2111 by providing options to preserve world velocity when set positions"}, "content": {"raw": "I figured out what was off about the test and fixed it here 6bc3cba\n\nTo summarize: It wasn't really testing the difference between the old behavior and the new optional behavior. Whether or not you passed the `true` flag to `SetPositions(~)` on line 687, the test would pass because the reset was changing things to zero.\n\nIn the modified version, I removed the resets, so we can be confident that the zeroing is coming from the `SetPositions(~)` call. Indeed, if you pass it the optional `true` flag, it will now fail. Also, I had to filter out DART from being tested, because the new optional behavior is undefined for DART (as well as for Simbody, so that's filtered out as well).\n\nI think the test should make sense now.", "markup": "markdown", "html": "<p>I figured out what was off about the test and fixed it here <a href=\"#!/osrf/gazebo/commits/6bc3cba\" rel=\"nofollow\" class=\"ap-connect-link\">6bc3cba</a></p>\n<p>To summarize: It wasn't really testing the difference between the old behavior and the new optional behavior. Whether or not you passed the <code>true</code> flag to <code>SetPositions(~)</code> on line 687, the test would pass because the reset was changing things to zero.</p>\n<p>In the modified version, I removed the resets, so we can be confident that the zeroing is coming from the <code>SetPositions(~)</code> call. Indeed, if you pass it the optional <code>true</code> flag, it will now fail. Also, I had to filter out DART from being tested, because the new optional behavior is undefined for DART (as well as for Simbody, so that's filtered out as well).</p>\n<p>I think the test should make sense now.</p>", "type": "rendered"}, "created_on": "2018-01-19T01:32:38.604546+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": false, "path": "test/integration/joint_set_position_test.cc"}, "updated_on": "2018-01-19T01:32:38.607899+00:00", "type": "pullrequest_comment", "id": 54084962}