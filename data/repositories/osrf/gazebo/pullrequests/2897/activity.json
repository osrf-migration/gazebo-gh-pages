{"pagelen": 50, "values": [{"update": {"description": "This introduces a new function to the `transport::Node` class which allows callers to specify a maximum wait time while initializing the Node to the \"global\" namespace.\r\n\r\nThis also introduces a static `common::Time::Maximum()` function which produces a `Time` object that represents the largest amount of time that can be represented in a `Time` object. Combining these two additions allows Nodes to essentially wait indefinitely for the global namespace to reveal itself instead of quitting early and choosing a topic namespace with the name \"default\".\r\n\r\nThe new Node initialization strategy was applied to all the Nodes (that I could find) in the GUI classes. As a result, issue #2053 should be fixed by this pull request.\r\n\r\nOne thing I'm not clear on is whether the same initialization strategy should be applied to Nodes in the `rendering` namespace. I chose to leave those Nodes alone for now to minimize the potential of unexpected side effects from this change. If anyone has opinions on this matter, please share.\r\n\r\nThese changes were specifically designed to ensure that ABI remains compatible.", "title": "Fixing the Node::Init() race condition by providing an alternative Node init function", "destination": {"commit": {"hash": "fd0d3a313bef", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/fd0d3a313bef.json"}, "html": {"href": "#!/osrf/gazebo/commits/fd0d3a313bef"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "57da313baa67", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/57da313baa67.json"}, "html": {"href": "#!/osrf/gazebo/commits/57da313baa67"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "FixNodeInitRaceCondition_issue2053"}}, "state": "MERGED", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-03-07T19:13:38.595595+00:00"}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"update": {"description": "This introduces a new function to the `transport::Node` class which allows callers to specify a maximum wait time while initializing the Node to the \"global\" namespace.\r\n\r\nThis also introduces a static `common::Time::Maximum()` function which produces a `Time` object that represents the largest amount of time that can be represented in a `Time` object. Combining these two additions allows Nodes to essentially wait indefinitely for the global namespace to reveal itself instead of quitting early and choosing a topic namespace with the name \"default\".\r\n\r\nThe new Node initialization strategy was applied to all the Nodes (that I could find) in the GUI classes. As a result, issue #2053 should be fixed by this pull request.\r\n\r\nOne thing I'm not clear on is whether the same initialization strategy should be applied to Nodes in the `rendering` namespace. I chose to leave those Nodes alone for now to minimize the potential of unexpected side effects from this change. If anyone has opinions on this matter, please share.\r\n\r\nThese changes were specifically designed to ensure that ABI remains compatible.", "title": "Fixing the Node::Init() race condition by providing an alternative Node init function", "destination": {"commit": {"hash": "fd0d3a313bef", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/fd0d3a313bef.json"}, "html": {"href": "#!/osrf/gazebo/commits/fd0d3a313bef"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "57da313baa67", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/57da313baa67.json"}, "html": {"href": "#!/osrf/gazebo/commits/57da313baa67"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "FixNodeInitRaceCondition_issue2053"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-03-07T01:22:05.437404+00:00"}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"approval": {"date": "2018-03-07T01:20:20.049163+00:00", "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"update": {"description": "This introduces a new function to the `transport::Node` class which allows callers to specify a maximum wait time while initializing the Node to the \"global\" namespace.\r\n\r\nThis also introduces a static `common::Time::Maximum()` function which produces a `Time` object that represents the largest amount of time that can be represented in a `Time` object. Combining these two additions allows Nodes to essentially wait indefinitely for the global namespace to reveal itself instead of quitting early and choosing a topic namespace with the name \"default\".\r\n\r\nThe new Node initialization strategy was applied to all the Nodes (that I could find) in the GUI classes. As a result, issue #2053 should be fixed by this pull request.\r\n\r\nOne thing I'm not clear on is whether the same initialization strategy should be applied to Nodes in the `rendering` namespace. I chose to leave those Nodes alone for now to minimize the potential of unexpected side effects from this change. If anyone has opinions on this matter, please share.\r\n\r\nThese changes were specifically designed to ensure that ABI remains compatible.", "title": "Fixing the Node::Init() race condition by providing an alternative Node init function", "destination": {"commit": {"hash": "fd0d3a313bef", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/fd0d3a313bef.json"}, "html": {"href": "#!/osrf/gazebo/commits/fd0d3a313bef"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "4df4e2aae996", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4df4e2aae996.json"}, "html": {"href": "#!/osrf/gazebo/commits/4df4e2aae996"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "FixNodeInitRaceCondition_issue2053"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-03-07T01:19:38.579876+00:00"}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"update": {"description": "This introduces a new function to the `transport::Node` class which allows callers to specify a maximum wait time while initializing the Node to the \"global\" namespace.\r\n\r\nThis also introduces a static `common::Time::Maximum()` function which produces a `Time` object that represents the largest amount of time that can be represented in a `Time` object. Combining these two additions allows Nodes to essentially wait indefinitely for the global namespace to reveal itself instead of quitting early and choosing a topic namespace with the name \"default\".\r\n\r\nThe new Node initialization strategy was applied to all the Nodes (that I could find) in the GUI classes. As a result, issue #2053 should be fixed by this pull request.\r\n\r\nOne thing I'm not clear on is whether the same initialization strategy should be applied to Nodes in the `rendering` namespace. I chose to leave those Nodes alone for now to minimize the potential of unexpected side effects from this change. If anyone has opinions on this matter, please share.\r\n\r\nThese changes were specifically designed to ensure that ABI remains compatible.", "title": "Fixing the Node::Init() race condition by providing an alternative Node init function", "destination": {"commit": {"hash": "fd0d3a313bef", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/fd0d3a313bef.json"}, "html": {"href": "#!/osrf/gazebo/commits/fd0d3a313bef"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "3da21a487410", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/3da21a487410.json"}, "html": {"href": "#!/osrf/gazebo/commits/3da21a487410"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "FixNodeInitRaceCondition_issue2053"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2018-03-07T00:47:59.279497+00:00"}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"update": {"description": "This introduces a new function to the `transport::Node` class which allows callers to specify a maximum wait time while initializing the Node to the \"global\" namespace.\r\n\r\nThis also introduces a static `common::Time::Maximum()` function which produces a `Time` object that represents the largest amount of time that can be represented in a `Time` object. Combining these two additions allows Nodes to essentially wait indefinitely for the global namespace to reveal itself instead of quitting early and choosing a topic namespace with the name \"default\".\r\n\r\nThe new Node initialization strategy was applied to all the Nodes (that I could find) in the GUI classes. As a result, issue #2053 should be fixed by this pull request.\r\n\r\nOne thing I'm not clear on is whether the same initialization strategy should be applied to Nodes in the `rendering` namespace. I chose to leave those Nodes alone for now to minimize the potential of unexpected side effects from this change. If anyone has opinions on this matter, please share.\r\n\r\nThese changes were specifically designed to ensure that ABI remains compatible.", "title": "Fixing the Node::Init() race condition by providing an alternative Node init function", "destination": {"commit": {"hash": "fd0d3a313bef", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/fd0d3a313bef.json"}, "html": {"href": "#!/osrf/gazebo/commits/fd0d3a313bef"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "3da21a487410", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/3da21a487410.json"}, "html": {"href": "#!/osrf/gazebo/commits/3da21a487410"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "FixNodeInitRaceCondition_issue2053"}}, "state": "OPEN", "author": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "date": "2018-03-07T00:47:54.126382+00:00"}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"approval": {"date": "2018-03-02T22:14:29.405147+00:00", "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57735972.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57735972"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "This looks good; I've started a new round of jenkins builds", "markup": "markdown", "html": "<p>This looks good; I've started a new round of jenkins builds</p>", "type": "rendered"}, "created_on": "2018-03-01T22:13:52.132968+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-03-01T22:13:52.135946+00:00", "type": "pullrequest_comment", "id": 57735972}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57728920.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57728920"}}, "parent": {"id": 57725696, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57725696.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57725696"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "thanks; it's much easier to read now", "markup": "markdown", "html": "<p>thanks; it's much easier to read now</p>", "type": "rendered"}, "created_on": "2018-03-01T20:53:48.522588+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-03-01T20:53:48.527397+00:00", "type": "pullrequest_comment", "id": 57728920}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57725758.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57725758"}}, "parent": {"id": 57622623, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57622623.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57622623"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "Added a test for one of the failure modes: c326b37", "markup": "markdown", "html": "<p>Added a test for one of the failure modes: <a href=\"#!/osrf/gazebo/commits/c326b37\" rel=\"nofollow\" class=\"ap-connect-link\">c326b37</a></p>", "type": "rendered"}, "created_on": "2018-03-01T20:16:52.961998+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-01T20:16:52.966125+00:00", "type": "pullrequest_comment", "id": 57725758}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57725696.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57725696"}}, "parent": {"id": 57720365, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57720365.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57720365"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "Rearranged implementation locations: 4e39728", "markup": "markdown", "html": "<p>Rearranged implementation locations: <a href=\"#!/osrf/gazebo/commits/4e39728\" rel=\"nofollow\" class=\"ap-connect-link\">4e39728</a></p>", "type": "rendered"}, "created_on": "2018-03-01T20:16:07.066847+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-01T20:16:07.072114+00:00", "type": "pullrequest_comment", "id": 57725696}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57725650.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57725650"}}, "parent": {"id": 57719906, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57719906.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57719906"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "Added an assert: c326b37", "markup": "markdown", "html": "<p>Added an assert: <a href=\"#!/osrf/gazebo/commits/c326b37\" rel=\"nofollow\" class=\"ap-connect-link\">c326b37</a></p>", "type": "rendered"}, "created_on": "2018-03-01T20:15:34.483148+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-03-01T20:15:34.486816+00:00", "type": "pullrequest_comment", "id": 57725650}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"update": {"description": "This introduces a new function to the `transport::Node` class which allows callers to specify a maximum wait time while initializing the Node to the \"global\" namespace.\r\n\r\nThis also introduces a static `common::Time::Maximum()` function which produces a `Time` object that represents the largest amount of time that can be represented in a `Time` object. Combining these two additions allows Nodes to essentially wait indefinitely for the global namespace to reveal itself instead of quitting early and choosing a topic namespace with the name \"default\".\r\n\r\nThe new Node initialization strategy was applied to all the Nodes (that I could find) in the GUI classes. As a result, issue #2053 should be fixed by this pull request.\r\n\r\nOne thing I'm not clear on is whether the same initialization strategy should be applied to Nodes in the `rendering` namespace. I chose to leave those Nodes alone for now to minimize the potential of unexpected side effects from this change. If anyone has opinions on this matter, please share.\r\n\r\nThese changes were specifically designed to ensure that ABI remains compatible.", "title": "Fixing the Node::Init() race condition by providing an alternative Node init function", "destination": {"commit": {"hash": "c8e0207f9591", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c8e0207f9591.json"}, "html": {"href": "#!/osrf/gazebo/commits/c8e0207f9591"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "4e39728c7160", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/4e39728c7160.json"}, "html": {"href": "#!/osrf/gazebo/commits/4e39728c7160"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "FixNodeInitRaceCondition_issue2053"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-03-01T20:15:06.663513+00:00"}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57722109.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57722109"}}, "parent": {"id": 57719906, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57719906.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57719906"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "Sure, we can assert it. That should help avoid code decay if the implementation gets tweaked in the future.", "markup": "markdown", "html": "<p>Sure, we can assert it. That should help avoid code decay if the implementation gets tweaked in the future.</p>", "type": "rendered"}, "created_on": "2018-03-01T19:35:57.762467+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {}, "updated_on": "2018-03-01T19:35:57.765669+00:00", "type": "pullrequest_comment", "id": 57722109}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57720365.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57720365"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "The diff in Node.cc is much easier to read if the `TryInit` function is immediately before `Init`, and `PrivateInit` is immediately after, ie:\n\n~~~\n//////////////////////////////////////////////////\nbool Node::TryInit(const common::Time &_maxWait)\n{\n  return this->PrivateInit(\"\", _maxWait, false);\n}\n\n/////////////////////////////////////////////////\nvoid Node::Init(const std::string &_space)\n{\n  this->PrivateInit(_space, common::Time(1, 0), true);\n}\n\n/////////////////////////////////////////////////\nbool Node::PrivateInit(const std::string &_space,\n                       const common::Time &_maxWait,\n                       const bool _fallbackToDefault)\n{\n  if (this->initialized)\n  {\n...\n~~~", "markup": "markdown", "html": "<p>The diff in Node.cc is much easier to read if the <code>TryInit</code> function is immediately before <code>Init</code>, and <code>PrivateInit</code> is immediately after, ie:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">//////////////////////////////////////////////////</span>\n<span class=\"nt\">bool</span> <span class=\"nt\">Node</span><span class=\"p\">::</span><span class=\"nd\">TryInit</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">common</span><span class=\"p\">::</span><span class=\"nd\">Time</span> <span class=\"o\">&amp;</span><span class=\"nt\">_maxWait</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">return</span> <span class=\"err\">this-&gt;PrivateInit(&quot;&quot;,</span> <span class=\"err\">_maxWait,</span> <span class=\"err\">false)</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">/////////////////////////////////////////////////</span>\n<span class=\"nt\">void</span> <span class=\"nt\">Node</span><span class=\"p\">::</span><span class=\"nd\">Init</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_space</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">this-&gt;PrivateInit(_space,</span> <span class=\"n\">common</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"nf\">Time</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">true</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">/////////////////////////////////////////////////</span>\n<span class=\"nt\">bool</span> <span class=\"nt\">Node</span><span class=\"p\">::</span><span class=\"nd\">PrivateInit</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_space</span><span class=\"o\">,</span>\n                       <span class=\"nt\">const</span> <span class=\"nt\">common</span><span class=\"p\">::</span><span class=\"nd\">Time</span> <span class=\"o\">&amp;</span><span class=\"nt\">_maxWait</span><span class=\"o\">,</span>\n                       <span class=\"nt\">const</span> <span class=\"nt\">bool</span> <span class=\"nt\">_fallbackToDefault</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">if</span> <span class=\"err\">(this-&gt;initialized)</span>\n  <span class=\"err\">{</span>\n<span class=\"err\">...</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-03-01T19:17:01.019171+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-03-01T19:17:01.023893+00:00", "type": "pullrequest_comment", "id": 57720365}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57719906.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57719906"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "should we assert that `!namespaces.empty()`?", "markup": "markdown", "html": "<p>should we assert that <code>!namespaces.empty()</code>?</p>", "type": "rendered"}, "created_on": "2018-03-01T19:11:54.280237+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2018-03-01T19:11:54.283328+00:00", "type": "pullrequest_comment", "id": 57719906}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57622623.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57622623"}}, "parent": {"id": 57615276, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57615276.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57615276"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "b9adeea adds a test for `TryInit()`.\n\nI think we're somewhat limited in our ability to comprehensively test `TryInit()` unless someone knows a way to isolate the namespace discovery within a test from nodes that may be running outside of the test.", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo/commits/b9adeea\" rel=\"nofollow\" class=\"ap-connect-link\">b9adeea</a> adds a test for <code>TryInit()</code>.</p>\n<p>I think we're somewhat limited in our ability to comprehensively test <code>TryInit()</code> unless someone knows a way to isolate the namespace discovery within a test from nodes that may be running outside of the test.</p>", "type": "rendered"}, "created_on": "2018-03-01T02:34:38.825648+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-01T02:34:38.828714+00:00", "type": "pullrequest_comment", "id": 57622623}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57622583.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57622583"}}, "parent": {"id": 57607943, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57607943.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57607943"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "In a63c134 I've renamed `WaitForInit()` to `TryInit()`, and merged their implementations.", "markup": "markdown", "html": "<p>In <a href=\"#!/osrf/gazebo/commits/a63c134\" rel=\"nofollow\" class=\"ap-connect-link\">a63c134</a> I've renamed <code>WaitForInit()</code> to <code>TryInit()</code>, and merged their implementations.</p>", "type": "rendered"}, "created_on": "2018-03-01T02:33:47.906290+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-03-01T02:34:06.597285+00:00", "type": "pullrequest_comment", "id": 57622583}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"update": {"description": "This introduces a new function to the `transport::Node` class which allows callers to specify a maximum wait time while initializing the Node to the \"global\" namespace.\r\n\r\nThis also introduces a static `common::Time::Maximum()` function which produces a `Time` object that represents the largest amount of time that can be represented in a `Time` object. Combining these two additions allows Nodes to essentially wait indefinitely for the global namespace to reveal itself instead of quitting early and choosing a topic namespace with the name \"default\".\r\n\r\nThe new Node initialization strategy was applied to all the Nodes (that I could find) in the GUI classes. As a result, issue #2053 should be fixed by this pull request.\r\n\r\nOne thing I'm not clear on is whether the same initialization strategy should be applied to Nodes in the `rendering` namespace. I chose to leave those Nodes alone for now to minimize the potential of unexpected side effects from this change. If anyone has opinions on this matter, please share.\r\n\r\nThese changes were specifically designed to ensure that ABI remains compatible.", "title": "Fixing the Node::Init() race condition by providing an alternative Node init function", "destination": {"commit": {"hash": "c8e0207f9591", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c8e0207f9591.json"}, "html": {"href": "#!/osrf/gazebo/commits/c8e0207f9591"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "3fa44ebf1cca", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/3fa44ebf1cca.json"}, "html": {"href": "#!/osrf/gazebo/commits/3fa44ebf1cca"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "FixNodeInitRaceCondition_issue2053"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-03-01T02:32:11.506608+00:00"}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57615276.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57615276"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "We should use `WaitForInit` (or whatever we end up calling it) in one of our tests (possibly [test/integration/transport.cc](#!/osrf/gazebo/src/43aba69517080eeaa792990795dc7ed72913928c/test/integration/transport.cc))", "markup": "markdown", "html": "<p>We should use <code>WaitForInit</code> (or whatever we end up calling it) in one of our tests (possibly <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/43aba69517080eeaa792990795dc7ed72913928c/test/integration/transport.cc\" rel=\"nofollow\">test/integration/transport.cc</a>)</p>", "type": "rendered"}, "created_on": "2018-02-28T23:41:05.361242+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-02-28T23:41:05.364091+00:00", "type": "pullrequest_comment", "id": 57615276}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57608833.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57608833"}}, "parent": {"id": 57608755, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57608755.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57608755"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "Maybe `TryInit()` as an alternative name? That would express that it's attempting to initialize, and that it might fail to actually initialize.", "markup": "markdown", "html": "<p>Maybe <code>TryInit()</code> as an alternative name? That would express that it's attempting to initialize, and that it might fail to actually initialize.</p>", "type": "rendered"}, "created_on": "2018-02-28T22:09:57.241309+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-02-28T22:09:57.246219+00:00", "type": "pullrequest_comment", "id": 57608833}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57608755.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57608755"}}, "parent": {"id": 57607943, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57607943.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57607943"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "I'm totally open to renaming the function. `InitWithWait` feels a little clunky to me, but I do agree that we should emphasize that it's an `Init()` alternative rather than an `Init()` supplement.\n\nYou're very right that `WaitForInit()` should check whether the Node is already initialized, in order to match the behavior of `Init()`. I like the idea of a private member function to help them share implementation, although it could be tricky since `Init()` and `WaitForInit()` have fundamentally different behaviors: `Init()` will always initialize, whereas `WaitForInit()` might return without initializing. But I'll see what I can do to make this DRYer.", "markup": "markdown", "html": "<p>I'm totally open to renaming the function. <code>InitWithWait</code> feels a little clunky to me, but I do agree that we should emphasize that it's an <code>Init()</code> alternative rather than an <code>Init()</code> supplement.</p>\n<p>You're very right that <code>WaitForInit()</code> should check whether the Node is already initialized, in order to match the behavior of <code>Init()</code>. I like the idea of a private member function to help them share implementation, although it could be tricky since <code>Init()</code> and <code>WaitForInit()</code> have fundamentally different behaviors: <code>Init()</code> will always initialize, whereas <code>WaitForInit()</code> might return without initializing. But I'll see what I can do to make this DRYer.</p>", "type": "rendered"}, "created_on": "2018-02-28T22:09:08.908186+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2018-02-28T22:09:08.912128+00:00", "type": "pullrequest_comment", "id": 57608755}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57607943.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57607943"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "`Node::WaitForInit` looks like an alternative to `Node::Init`. Should we call it `InitWithWait` instead to emphasize that they are similar calls?\n\nAlso, it would be nice if they could share more code, perhaps by calling a private function that accepts both `std::string` and `common::Time` arguments and contains all the logic. Currently `Init` checks if the node is already initialized, but `WaitForInit` doesn't check that.", "markup": "markdown", "html": "<p><code>Node::WaitForInit</code> looks like an alternative to <code>Node::Init</code>. Should we call it <code>InitWithWait</code> instead to emphasize that they are similar calls?</p>\n<p>Also, it would be nice if they could share more code, perhaps by calling a private function that accepts both <code>std::string</code> and <code>common::Time</code> arguments and contains all the logic. Currently <code>Init</code> checks if the node is already initialized, but <code>WaitForInit</code> doesn't check that.</p>", "type": "rendered"}, "created_on": "2018-02-28T21:59:15.786951+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-02-28T21:59:15.790587+00:00", "type": "pullrequest_comment", "id": 57607943}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"update": {"description": "This introduces a new function to the `transport::Node` class which allows callers to specify a maximum wait time while initializing the Node to the \"global\" namespace.\r\n\r\nThis also introduces a static `common::Time::Maximum()` function which produces a `Time` object that represents the largest amount of time that can be represented in a `Time` object. Combining these two additions allows Nodes to essentially wait indefinitely for the global namespace to reveal itself instead of quitting early and choosing a topic namespace with the name \"default\".\r\n\r\nThe new Node initialization strategy was applied to all the Nodes (that I could find) in the GUI classes. As a result, issue #2053 should be fixed by this pull request.\r\n\r\nOne thing I'm not clear on is whether the same initialization strategy should be applied to Nodes in the `rendering` namespace. I chose to leave those Nodes alone for now to minimize the potential of unexpected side effects from this change. If anyone has opinions on this matter, please share.\r\n\r\nThese changes were specifically designed to ensure that ABI remains compatible.", "title": "Fixing the Node::Init() race condition by providing an alternative Node init function", "destination": {"commit": {"hash": "c8e0207f9591", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c8e0207f9591.json"}, "html": {"href": "#!/osrf/gazebo/commits/c8e0207f9591"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "f13943d8d86d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f13943d8d86d.json"}, "html": {"href": "#!/osrf/gazebo/commits/f13943d8d86d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "FixNodeInitRaceCondition_issue2053"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-02-28T00:20:47.026081+00:00"}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}, {"update": {"description": "This introduces a new function to the `transport::Node` class which allows callers to specify a maximum wait time while initializing the Node to the \"global\" namespace.\r\n\r\nThis also introduces a static `common::Time::Maximum()` function which produces a `Time` object that represents the largest amount of time that can be represented in a `Time` object. Combining these two additions allows Nodes to essentially wait indefinitely for the global namespace to reveal itself instead of quitting early and choosing a topic namespace with the name \"default\".\r\n\r\nThe new Node initialization strategy was applied to all the Nodes (that I could find) in the GUI classes. As a result, issue #2053 should be fixed by this pull request.\r\n\r\nOne thing I'm not clear on is whether the same initialization strategy should be applied to Nodes in the `rendering` namespace. I chose to leave those Nodes alone for now to minimize the potential of unexpected side effects from this change. If anyone has opinions on this matter, please share.\r\n\r\nThese changes were specifically designed to ensure that ABI remains compatible.", "title": "Fixing the Node::Init() race condition by providing an alternative Node init function", "destination": {"commit": {"hash": "c8e0207f9591", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c8e0207f9591.json"}, "html": {"href": "#!/osrf/gazebo/commits/c8e0207f9591"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo7"}}, "reason": "", "source": {"commit": {"hash": "f13943d8d86d", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f13943d8d86d.json"}, "html": {"href": "#!/osrf/gazebo/commits/f13943d8d86d"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "FixNodeInitRaceCondition_issue2053"}}, "state": "OPEN", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "date": "2018-02-28T00:20:46.968913+00:00"}, "pull_request": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}}]}