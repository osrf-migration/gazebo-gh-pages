{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897/comments/57720365.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897/_/diff#comment-57720365"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2897, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2897.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2897"}}, "title": "Fixing the Node::Init() race condition by providing an alternative Node init function"}, "content": {"raw": "The diff in Node.cc is much easier to read if the `TryInit` function is immediately before `Init`, and `PrivateInit` is immediately after, ie:\n\n~~~\n//////////////////////////////////////////////////\nbool Node::TryInit(const common::Time &_maxWait)\n{\n  return this->PrivateInit(\"\", _maxWait, false);\n}\n\n/////////////////////////////////////////////////\nvoid Node::Init(const std::string &_space)\n{\n  this->PrivateInit(_space, common::Time(1, 0), true);\n}\n\n/////////////////////////////////////////////////\nbool Node::PrivateInit(const std::string &_space,\n                       const common::Time &_maxWait,\n                       const bool _fallbackToDefault)\n{\n  if (this->initialized)\n  {\n...\n~~~", "markup": "markdown", "html": "<p>The diff in Node.cc is much easier to read if the <code>TryInit</code> function is immediately before <code>Init</code>, and <code>PrivateInit</code> is immediately after, ie:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">//////////////////////////////////////////////////</span>\n<span class=\"nt\">bool</span> <span class=\"nt\">Node</span><span class=\"p\">::</span><span class=\"nd\">TryInit</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">common</span><span class=\"p\">::</span><span class=\"nd\">Time</span> <span class=\"o\">&amp;</span><span class=\"nt\">_maxWait</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">return</span> <span class=\"err\">this-&gt;PrivateInit(&quot;&quot;,</span> <span class=\"err\">_maxWait,</span> <span class=\"err\">false)</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">/////////////////////////////////////////////////</span>\n<span class=\"nt\">void</span> <span class=\"nt\">Node</span><span class=\"p\">::</span><span class=\"nd\">Init</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_space</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">this-&gt;PrivateInit(_space,</span> <span class=\"n\">common</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"nf\">Time</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">true</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">/////////////////////////////////////////////////</span>\n<span class=\"nt\">bool</span> <span class=\"nt\">Node</span><span class=\"p\">::</span><span class=\"nd\">PrivateInit</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_space</span><span class=\"o\">,</span>\n                       <span class=\"nt\">const</span> <span class=\"nt\">common</span><span class=\"p\">::</span><span class=\"nd\">Time</span> <span class=\"o\">&amp;</span><span class=\"nt\">_maxWait</span><span class=\"o\">,</span>\n                       <span class=\"nt\">const</span> <span class=\"nt\">bool</span> <span class=\"nt\">_fallbackToDefault</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">if</span> <span class=\"err\">(this-&gt;initialized)</span>\n  <span class=\"err\">{</span>\n<span class=\"err\">...</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-03-01T19:17:01.019171+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2018-03-01T19:17:01.023893+00:00", "type": "pullrequest_comment", "id": 57720365}