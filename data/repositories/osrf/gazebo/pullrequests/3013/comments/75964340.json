{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3013/comments/75964340.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/JChoclin/gazebo:c481df46618e..37909779f2fd?path=gazebo%2Frendering%2FGpuLaserDataIterator.hh"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3013/_/diff#comment-75964340"}}, "parent": {"id": 75963668, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3013/comments/75963668.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3013/_/diff#comment-75963668"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 3013, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3013.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3013"}}, "title": "Add vertical lidar rays for gazebo 9."}, "content": {"raw": "I don\u2019t know. @mxgrey any ideas?\n\nI was wondering if const members didn\u2019t add size to the class, but it looks like they do.\n\n    #include <iostream>\n    \n    \n    class A\n    {\n      public:\n        int a = 1;\n        const int a1 = 1;\n        const int a2 = 2;\n        const int a3 = 3;\n        const int a4 = 4;\n        const int a5 = 5;\n        const int a6 = 6;\n        const int a7 = 7;\n        const int a8 = 8;\n        const int a9 = 9;\n        const int a0 = 0;\n    };\n    \n    class B\n    {\n      public:\n        int b = 1;\n    };\n    \n    int main()\n    {\n      std::cout << \"Size of A\" << sizeof(A) << \"\\n\";\n      std::cout << \"Size of B\" << sizeof(B) << \"\\n\";\n      return 0;\n    }\n    \n\n\u200c\n\nOutput\n\n    sloretz(18:07):tmp$ ./a.out \n    Size of A44\n    Size of B4\n\nIt could be memory alignment of the class. This member is at the end. Maybe the compiler chose to put `sizeof(int)` bytes at the end of a class instance anyways to satisfy some memory alignment? That would be strange since all the members are small POD types.\n\n\u200c\n\nOr it could be that since this class is a template class no instantiation of the template has been exported by the library. That would be strange though because the template is instantiated with type `<GPULaser>`", "markup": "markdown", "html": "<p>I don\u2019t know. @mxgrey any ideas?</p>\n<p>I was wondering if const members didn\u2019t add size to the class, but it looks like they do.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">#</span><span class=\"nx\">include</span> <span class=\"o\">&lt;</span><span class=\"nx\">iostream</span><span class=\"o\">&gt;</span>\n\n\n<span class=\"kr\">class</span> <span class=\"nx\">A</span>\n<span class=\"p\">{</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span>\n    <span class=\"kr\">int</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a1</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a2</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a3</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a4</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a5</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a6</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a7</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a8</span> <span class=\"o\">=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a9</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"kr\">int</span> <span class=\"nx\">a0</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">class</span> <span class=\"nx\">B</span>\n<span class=\"p\">{</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span>\n    <span class=\"kr\">int</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">int</span> <span class=\"nx\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"nx\">std</span><span class=\"o\">::</span><span class=\"nx\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s2\">&quot;Size of A&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"nx\">sizeof</span><span class=\"p\">(</span><span class=\"nx\">A</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s2\">&quot;\\n&quot;</span><span class=\"p\">;</span>\n  <span class=\"nx\">std</span><span class=\"o\">::</span><span class=\"nx\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s2\">&quot;Size of B&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"nx\">sizeof</span><span class=\"p\">(</span><span class=\"nx\">B</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s2\">&quot;\\n&quot;</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>\u200c</p>\n<p>Output</p>\n<div class=\"codehilite\"><pre><span></span>sloretz(18:07):tmp$ ./a.out \nSize of A44\nSize of B4\n</pre></div>\n\n\n<p>It could be memory alignment of the class. This member is at the end. Maybe the compiler chose to put <code>sizeof(int)</code> bytes at the end of a class instance anyways to satisfy some memory alignment? That would be strange since all the members are small POD types.</p>\n<p>\u200c</p>\n<p>Or it could be that since this class is a template class no instantiation of the template has been exported by the library. That would be strange though because the template is instantiated with type <code>&lt;GPULaser&gt;</code></p>", "type": "rendered"}, "created_on": "2018-09-14T01:19:02.632571+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "inline": {"to": null, "from": null, "outdated": true, "path": "gazebo/rendering/GpuLaserDataIterator.hh"}, "updated_on": "2018-09-14T01:19:02.675523+00:00", "type": "pullrequest_comment", "id": 75964340}