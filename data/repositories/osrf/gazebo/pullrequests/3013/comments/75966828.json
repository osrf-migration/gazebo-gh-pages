{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3013/comments/75966828.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/JChoclin/gazebo:c481df46618e..37909779f2fd?path=gazebo%2Frendering%2FGpuLaserDataIterator.hh"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3013/_/diff#comment-75966828"}}, "parent": {"id": 75964340, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3013/comments/75964340.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3013/_/diff#comment-75964340"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 3013, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/3013.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3013"}}, "title": "Add vertical lidar rays for gazebo 9."}, "content": {"raw": "> Or it could be that since this class is a template class no instantiation of the template has been exported by the library.\n\nI don\u2019t know how exactly the ABI checker works, but I have a feeling this could be tricking it.\n\n> That would be strange though because the template is instantiated with type\u00a0`<GPULaser>`\n\nYes, and the `GpuLaserDataIterator<GpuLaser>` gets returned by the public API of `GpuLaser`, so it can\u2019t be ignored by the ABI.\n\nOne thing worth noting is that `verticalResolution` does not appear to be getting used anywhere. In this PR where it\u2019s being added, it only seems to be used inside of a test. It doesn\u2019t seem important for the implementation of this iterator type. Also, it\u2019s a private member which doesn\u2019t get used within the class itself, so the only possible place it can be used is inside the body of a friend, but its only friend is the class that it gets templated against.\n\nAs far as I can tell, it should be totally fine to remove this class member and maintain ABI compatibility. Is there somewhere `verticalResoluition` is being used that I\u2019m overlooking?", "markup": "markdown", "html": "<blockquote>\n<p>Or it could be that since this class is a template class no instantiation of the template has been exported by the library.</p>\n</blockquote>\n<p>I don\u2019t know how exactly the ABI checker works, but I have a feeling this could be tricking it.</p>\n<blockquote>\n<p>That would be strange though because the template is instantiated with type\u00a0<code>&lt;GPULaser&gt;</code></p>\n</blockquote>\n<p>Yes, and the <code>GpuLaserDataIterator&lt;GpuLaser&gt;</code> gets returned by the public API of <code>GpuLaser</code>, so it can\u2019t be ignored by the ABI.</p>\n<p>One thing worth noting is that <code>verticalResolution</code> does not appear to be getting used anywhere. In this PR where it\u2019s being added, it only seems to be used inside of a test. It doesn\u2019t seem important for the implementation of this iterator type. Also, it\u2019s a private member which doesn\u2019t get used within the class itself, so the only possible place it can be used is inside the body of a friend, but its only friend is the class that it gets templated against.</p>\n<p>As far as I can tell, it should be totally fine to remove this class member and maintain ABI compatibility. Is there somewhere <code>verticalResoluition</code> is being used that I\u2019m overlooking?</p>", "type": "rendered"}, "created_on": "2018-09-14T02:30:46.821226+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "inline": {"to": null, "from": null, "outdated": true, "path": "gazebo/rendering/GpuLaserDataIterator.hh"}, "updated_on": "2018-09-14T02:30:46.827072+00:00", "type": "pullrequest_comment", "id": 75966828}