{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/137/comments/45633.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:19a93a82e5ab..d692f444c686?path=gazebo%2Fsensors%2FContactSensor.cc"}, "html": {"href": "#!/osrf/gazebo/pull-requests/137/_/diff#comment-45633"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 137, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/137.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/137"}}, "title": "Time in contacts message, another contact sensor fix"}, "content": {"raw": "I'm not sure whether the approach of clearing the contacts map at every time step works out well in the long run and it might actually introduce new bugs:\n\n1) The public interface for getting information about contacts will fail most of the time, unless you're lucky and the function call gets through between the calls to OnContact() and UpdateImpl(). The functions GetCollision* and GetContacts make use of the contacts map which is empty after clearing it at the end of UpdateImpl so all the calls will result in \"Contact Sensor [...] has no collision [...]\" errors as the contacts map has a high chance of being empty even though a contact exists.\n\n2) It certainly doesn't matter when you only have a few contact sensors but for example the iRobot hands have about 102 contact sensors each which results in hundreds of constructor and destructor calls every update while manipulating with both hands, which might affect performance a little I think. \n\nI'm not sure what the best way around this would be but as (1) indicates clearing the contacts map probably does not go well unless you remove the public interface (the ros fuerte bumper plugin used it to get all the contacts) and only use the messages published by UpdateImpl. A callback indicating the loss of contact would probably allow for the most unproblematic solution but I don't know whether ODE allows for that.", "markup": "markdown", "html": "<p>I'm not sure whether the approach of clearing the contacts map at every time step works out well in the long run and it might actually introduce new bugs:</p>\n<p>1) The public interface for getting information about contacts will fail most of the time, unless you're lucky and the function call gets through between the calls to OnContact() and UpdateImpl(). The functions GetCollision* and GetContacts make use of the contacts map which is empty after clearing it at the end of UpdateImpl so all the calls will result in \"Contact Sensor [...] has no collision [...]\" errors as the contacts map has a high chance of being empty even though a contact exists.</p>\n<p>2) It certainly doesn't matter when you only have a few contact sensors but for example the iRobot hands have about 102 contact sensors each which results in hundreds of constructor and destructor calls every update while manipulating with both hands, which might affect performance a little I think. </p>\n<p>I'm not sure what the best way around this would be but as (1) indicates clearing the contacts map probably does not go well unless you remove the public interface (the ros fuerte bumper plugin used it to get all the contacts) and only use the messages published by UpdateImpl. A callback indicating the loss of contact would probably allow for the most unproblematic solution but I don't know whether ODE allows for that.</p>", "type": "rendered"}, "created_on": "2012-11-20T02:05:49.665881+00:00", "user": {"display_name": "Thomas Koletschka", "uuid": "{b33092ac-6376-48d1-9803-d9e6de445d1a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D"}, "html": {"href": "https://bitbucket.org/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D/"}, "avatar": {"href": "https://bitbucket.org/account/thomasko/avatar/"}}, "nickname": "thomasko", "type": "user", "account_id": null}, "inline": {"to": 153, "from": null, "outdated": false, "path": "gazebo/sensors/ContactSensor.cc"}, "updated_on": "2012-11-20T02:05:49.795707+00:00", "type": "pullrequest_comment", "id": 45633}