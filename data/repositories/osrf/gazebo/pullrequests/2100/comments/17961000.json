{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2100/comments/17961000.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2100/_/diff#comment-17961000"}}, "parent": {"id": 17960661, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2100/comments/17960661.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2100/_/diff#comment-17960661"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2100, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2100.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2100"}}, "title": "[DART] Apply collision pose offsets"}, "content": {"raw": "Sorry, I couldn't come up with a decent test for this. I wasn't sure if checking whether `dtCollisionShape` contains correct `relativePose` in it would be enough. Then I tried to test it using actual collision tests but had a problem in using `ContactManager`. It seemed the contact manager doesn't public contacts when there is no subscribers. (I'm still not sure). Here is the test code I tried. Just in case it helps:\n\n```cpp\n/////////////////////////////////////////////////\nvoid Issue1838Test::CollisionRelativePose(const std::string &_physicsEngine)\n{\n  Load(\"worlds/issue_1838.world\", true, _physicsEngine);\n  physics::WorldPtr world = physics::get_world(\"default\");\n  ASSERT_TRUE(world != NULL);\n  world->SetGravity(ignition::math::Vector3d::Zero);\n  EXPECT_EQ(world->Gravity(), ignition::math::Vector3d::Zero);\n\n  // check the physics engine\n  physics::PhysicsEnginePtr physics = world->GetPhysicsEngine();\n  ASSERT_TRUE(physics != NULL);\n  EXPECT_EQ(physics->GetType(), _physicsEngine);\n\n  physics::ModelPtr model1 = world->GetModel(\"sphere1\");\n  ASSERT_TRUE(model1 != NULL);\n  physics::LinkPtr link1 = model1->GetLink();\n  ASSERT_TRUE(link1 != NULL);\n  physics::CollisionPtr collision1 = link1->GetCollision(\"collision\");\n  ASSERT_TRUE(collision1 != NULL);\n\n  ignition::math::Pose3d pose1 = collision1->GetRelativePose().Ign();\n//  EXPECT_EQ(pose1, ignition::math::Pose3d(0.1, -0.5, 2.5, 0, 1.57, -1.57));\n\n  physics::ContactManager* contactManager = physics->GetContactManager();\n  ASSERT_TRUE(contactManager != NULL);\n\n  // Verify we get a valid topic name after passing in collisions\n  std::map<std::string, physics::CollisionPtr> collisionMap;\n  collisionMap[\"collision\"] = physics::CollisionPtr();\n  std::string collisionMapName = \"collision_map\";\n  std::string topic = contactManager->CreateFilter(collisionMapName, collisionMap);\n  EXPECT_TRUE(topic.find(collisionMapName) != std::string::npos);\n  EXPECT_TRUE(contactManager->HasFilter(collisionMapName));\n  EXPECT_EQ(contactManager->GetFilterCount(), 1u);\n\n  std::cout << contactManager->GetContactCount();\n  physics->UpdatePhysics();\n  physics->UpdateCollision();\n  std::cout << contactManager->GetContactCount();\n\n  link1->SetRelativePose(math::Pose(0, 0, 0.1, 0, 0, 0));\n\n  std::cout << contactManager->GetContactCount();\n  physics->UpdatePhysics();\n  physics->UpdateCollision();\n  std::cout << contactManager->GetContactCount();\n}\n\n/////////////////////////////////////////////////\nTEST_P(Issue1838Test, CollisionRelativePose)\n{\n//  CollisionRelativePose(GetParam());\n  CollisionRelativePose(\"dart\");\n}\n```", "markup": "markdown", "html": "<p>Sorry, I couldn't come up with a decent test for this. I wasn't sure if checking whether <code>dtCollisionShape</code> contains correct <code>relativePose</code> in it would be enough. Then I tried to test it using actual collision tests but had a problem in using <code>ContactManager</code>. It seemed the contact manager doesn't public contacts when there is no subscribers. (I'm still not sure). Here is the test code I tried. Just in case it helps:</p>\n<div class=\"codehilite language-cpp\"><pre><span></span><span class=\"c1\">/////////////////////////////////////////////////</span>\n<span class=\"kt\">void</span> <span class=\"n\">Issue1838Test</span><span class=\"o\">::</span><span class=\"n\">CollisionRelativePose</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">_physicsEngine</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Load</span><span class=\"p\">(</span><span class=\"s\">&quot;worlds/issue_1838.world&quot;</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">_physicsEngine</span><span class=\"p\">);</span>\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">WorldPtr</span> <span class=\"n\">world</span> <span class=\"o\">=</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">get_world</span><span class=\"p\">(</span><span class=\"s\">&quot;default&quot;</span><span class=\"p\">);</span>\n  <span class=\"n\">ASSERT_TRUE</span><span class=\"p\">(</span><span class=\"n\">world</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"n\">world</span><span class=\"o\">-&gt;</span><span class=\"n\">SetGravity</span><span class=\"p\">(</span><span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Vector3d</span><span class=\"o\">::</span><span class=\"n\">Zero</span><span class=\"p\">);</span>\n  <span class=\"n\">EXPECT_EQ</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"o\">-&gt;</span><span class=\"n\">Gravity</span><span class=\"p\">(),</span> <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Vector3d</span><span class=\"o\">::</span><span class=\"n\">Zero</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// check the physics engine</span>\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">PhysicsEnginePtr</span> <span class=\"n\">physics</span> <span class=\"o\">=</span> <span class=\"n\">world</span><span class=\"o\">-&gt;</span><span class=\"n\">GetPhysicsEngine</span><span class=\"p\">();</span>\n  <span class=\"n\">ASSERT_TRUE</span><span class=\"p\">(</span><span class=\"n\">physics</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"n\">EXPECT_EQ</span><span class=\"p\">(</span><span class=\"n\">physics</span><span class=\"o\">-&gt;</span><span class=\"n\">GetType</span><span class=\"p\">(),</span> <span class=\"n\">_physicsEngine</span><span class=\"p\">);</span>\n\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">ModelPtr</span> <span class=\"n\">model1</span> <span class=\"o\">=</span> <span class=\"n\">world</span><span class=\"o\">-&gt;</span><span class=\"n\">GetModel</span><span class=\"p\">(</span><span class=\"s\">&quot;sphere1&quot;</span><span class=\"p\">);</span>\n  <span class=\"n\">ASSERT_TRUE</span><span class=\"p\">(</span><span class=\"n\">model1</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">LinkPtr</span> <span class=\"n\">link1</span> <span class=\"o\">=</span> <span class=\"n\">model1</span><span class=\"o\">-&gt;</span><span class=\"n\">GetLink</span><span class=\"p\">();</span>\n  <span class=\"n\">ASSERT_TRUE</span><span class=\"p\">(</span><span class=\"n\">link1</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">CollisionPtr</span> <span class=\"n\">collision1</span> <span class=\"o\">=</span> <span class=\"n\">link1</span><span class=\"o\">-&gt;</span><span class=\"n\">GetCollision</span><span class=\"p\">(</span><span class=\"s\">&quot;collision&quot;</span><span class=\"p\">);</span>\n  <span class=\"n\">ASSERT_TRUE</span><span class=\"p\">(</span><span class=\"n\">collision1</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n  <span class=\"n\">ignition</span><span class=\"o\">::</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Pose3d</span> <span class=\"n\">pose1</span> <span class=\"o\">=</span> <span class=\"n\">collision1</span><span class=\"o\">-&gt;</span><span class=\"n\">GetRelativePose</span><span class=\"p\">().</span><span class=\"n\">Ign</span><span class=\"p\">();</span>\n<span class=\"c1\">//  EXPECT_EQ(pose1, ignition::math::Pose3d(0.1, -0.5, 2.5, 0, 1.57, -1.57));</span>\n\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">ContactManager</span><span class=\"o\">*</span> <span class=\"n\">contactManager</span> <span class=\"o\">=</span> <span class=\"n\">physics</span><span class=\"o\">-&gt;</span><span class=\"n\">GetContactManager</span><span class=\"p\">();</span>\n  <span class=\"n\">ASSERT_TRUE</span><span class=\"p\">(</span><span class=\"n\">contactManager</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Verify we get a valid topic name after passing in collisions</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">CollisionPtr</span><span class=\"o\">&gt;</span> <span class=\"n\">collisionMap</span><span class=\"p\">;</span>\n  <span class=\"n\">collisionMap</span><span class=\"p\">[</span><span class=\"s\">&quot;collision&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">CollisionPtr</span><span class=\"p\">();</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">collisionMapName</span> <span class=\"o\">=</span> <span class=\"s\">&quot;collision_map&quot;</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"n\">contactManager</span><span class=\"o\">-&gt;</span><span class=\"n\">CreateFilter</span><span class=\"p\">(</span><span class=\"n\">collisionMapName</span><span class=\"p\">,</span> <span class=\"n\">collisionMap</span><span class=\"p\">);</span>\n  <span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">collisionMapName</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">::</span><span class=\"n\">npos</span><span class=\"p\">);</span>\n  <span class=\"n\">EXPECT_TRUE</span><span class=\"p\">(</span><span class=\"n\">contactManager</span><span class=\"o\">-&gt;</span><span class=\"n\">HasFilter</span><span class=\"p\">(</span><span class=\"n\">collisionMapName</span><span class=\"p\">));</span>\n  <span class=\"n\">EXPECT_EQ</span><span class=\"p\">(</span><span class=\"n\">contactManager</span><span class=\"o\">-&gt;</span><span class=\"n\">GetFilterCount</span><span class=\"p\">(),</span> <span class=\"mi\">1u</span><span class=\"p\">);</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">contactManager</span><span class=\"o\">-&gt;</span><span class=\"n\">GetContactCount</span><span class=\"p\">();</span>\n  <span class=\"n\">physics</span><span class=\"o\">-&gt;</span><span class=\"n\">UpdatePhysics</span><span class=\"p\">();</span>\n  <span class=\"n\">physics</span><span class=\"o\">-&gt;</span><span class=\"n\">UpdateCollision</span><span class=\"p\">();</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">contactManager</span><span class=\"o\">-&gt;</span><span class=\"n\">GetContactCount</span><span class=\"p\">();</span>\n\n  <span class=\"n\">link1</span><span class=\"o\">-&gt;</span><span class=\"n\">SetRelativePose</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Pose</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">));</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">contactManager</span><span class=\"o\">-&gt;</span><span class=\"n\">GetContactCount</span><span class=\"p\">();</span>\n  <span class=\"n\">physics</span><span class=\"o\">-&gt;</span><span class=\"n\">UpdatePhysics</span><span class=\"p\">();</span>\n  <span class=\"n\">physics</span><span class=\"o\">-&gt;</span><span class=\"n\">UpdateCollision</span><span class=\"p\">();</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">contactManager</span><span class=\"o\">-&gt;</span><span class=\"n\">GetContactCount</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">/////////////////////////////////////////////////</span>\n<span class=\"n\">TEST_P</span><span class=\"p\">(</span><span class=\"n\">Issue1838Test</span><span class=\"p\">,</span> <span class=\"n\">CollisionRelativePose</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"c1\">//  CollisionRelativePose(GetParam());</span>\n  <span class=\"n\">CollisionRelativePose</span><span class=\"p\">(</span><span class=\"s\">&quot;dart&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2016-04-29T21:12:27.715124+00:00", "user": {"display_name": "Jeongseok Lee", "uuid": "{3907b560-aed7-43bd-bfa9-fd9873322291}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D"}, "html": {"href": "https://bitbucket.org/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/242819b368397b2b4cddf273b2ba9bf8d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJL-0.png"}}, "nickname": "jlee02", "type": "user", "account_id": "557058:e3fbdece-a1d8-4fb6-a9f1-236ecb09bd9d"}, "updated_on": "2016-04-29T21:27:50.481703+00:00", "type": "pullrequest_comment", "id": 17961000}