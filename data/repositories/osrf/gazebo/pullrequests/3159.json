{"rendered": {"description": {"raw": "A race condition can happen on startup on the rendering side when a plugin calls `Model::SetScale`, which leads to incorrect scale of visual being set.\r\n\r\nThe problem occurs if the model msg with scale information arrives on the rendering side before the initial scene msg is processed. In this case, the visual now incorrectly associates the new scale with the initial visual geometry size instead of updating the geometry to a size based on the new scale. \r\n\r\nThe workaround is to send the full model msg from the physics side to the rendering side with visuals data when a scale is set to make sure both scale and geometry data are processed at the same time.\r\n\r\nNote that the problem is difficult to reproduce. We ran into the problem when launching a simulation that takes >10 econds to load. The test added does not reproduce the problem but it verifies the contents of the new model msg when `Model::SetScale` is called.", "markup": "markdown", "html": "<p>A race condition can happen on startup on the rendering side when a plugin calls <code>Model::SetScale</code>, which leads to incorrect scale of visual being set.</p>\n<p>The problem occurs if the model msg with scale information arrives on the rendering side before the initial scene msg is processed. In this case, the visual now incorrectly associates the new scale with the initial visual geometry size instead of updating the geometry to a size based on the new scale. </p>\n<p>The workaround is to send the full model msg from the physics side to the rendering side with visuals data when a scale is set to make sure both scale and geometry data are processed at the same time.</p>\n<p>Note that the problem is difficult to reproduce. We ran into the problem when launching a simulation that takes &gt;10 econds to load. The test added does not reproduce the problem but it verifies the contents of the new model msg when <code>Model::SetScale</code> is called.</p>", "type": "rendered"}, "title": {"raw": "Workaround for race condition when setting model scale", "markup": "markdown", "html": "<p>Workaround for race condition when setting model scale</p>", "type": "rendered"}}, "type": "pullrequest", "description": "A race condition can happen on startup on the rendering side when a plugin calls `Model::SetScale`, which leads to incorrect scale of visual being set.\r\n\r\nThe problem occurs if the model msg with scale information arrives on the rendering side before the initial scene msg is processed. In this case, the visual now incorrectly associates the new scale with the initial visual geometry size instead of updating the geometry to a size based on the new scale. \r\n\r\nThe workaround is to send the full model msg from the physics side to the rendering side with visuals data when a scale is set to make sure both scale and geometry data are processed at the same time.\r\n\r\nNote that the problem is difficult to reproduce. We ran into the problem when launching a simulation that takes >10 econds to load. The test added does not reproduce the problem but it verifies the contents of the new model msg when `Model::SetScale` is called.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3159/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:84a4724e2f9a%0D898a67ae1218?from_pullrequest_id=3159"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/3159/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/3159.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/3159/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3159/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/3159"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/3159/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:84a4724e2f9a%0D898a67ae1218?from_pullrequest_id=3159"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/3159/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/3159/statuses_page=1.json"}}, "title": "Workaround for race condition when setting model scale", "close_source_branch": true, "reviewers": [], "id": 3159, "destination": {"commit": {"hash": "898a67ae1218", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/898a67ae1218.json"}, "html": {"href": "#!/osrf/gazebo/commits/898a67ae1218"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gazebo9"}}, "created_on": "2019-12-16T22:08:30.114265+00:00", "summary": {"raw": "A race condition can happen on startup on the rendering side when a plugin calls `Model::SetScale`, which leads to incorrect scale of visual being set.\r\n\r\nThe problem occurs if the model msg with scale information arrives on the rendering side before the initial scene msg is processed. In this case, the visual now incorrectly associates the new scale with the initial visual geometry size instead of updating the geometry to a size based on the new scale. \r\n\r\nThe workaround is to send the full model msg from the physics side to the rendering side with visuals data when a scale is set to make sure both scale and geometry data are processed at the same time.\r\n\r\nNote that the problem is difficult to reproduce. We ran into the problem when launching a simulation that takes >10 econds to load. The test added does not reproduce the problem but it verifies the contents of the new model msg when `Model::SetScale` is called.", "markup": "markdown", "html": "<p>A race condition can happen on startup on the rendering side when a plugin calls <code>Model::SetScale</code>, which leads to incorrect scale of visual being set.</p>\n<p>The problem occurs if the model msg with scale information arrives on the rendering side before the initial scene msg is processed. In this case, the visual now incorrectly associates the new scale with the initial visual geometry size instead of updating the geometry to a size based on the new scale. </p>\n<p>The workaround is to send the full model msg from the physics side to the rendering side with visuals data when a scale is set to make sure both scale and geometry data are processed at the same time.</p>\n<p>Note that the problem is difficult to reproduce. We ran into the problem when launching a simulation that takes &gt;10 econds to load. The test added does not reproduce the problem but it verifies the contents of the new model msg when <code>Model::SetScale</code> is called.</p>", "type": "rendered"}, "source": {"commit": {"hash": "29304ee9a7cf", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/29304ee9a7cf.json"}, "html": {"href": "#!/osrf/gazebo/commits/29304ee9a7cf"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "debug_scale"}}, "comment_count": 15, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2020-01-14T18:25:10.460544+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-15T18:29:03.076532+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-13T18:51:20.182671+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2020-01-16T07:53:42.993950+00:00", "author": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "merge_commit": {"hash": "84a4724e2f9a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/84a4724e2f9a.json"}, "html": {"href": "#!/osrf/gazebo/commits/84a4724e2f9a"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}