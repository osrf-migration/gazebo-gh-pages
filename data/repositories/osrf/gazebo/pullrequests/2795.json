{"rendered": {"description": {"raw": "See also pull request #2790 and pull request #2792. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked some from rendering, transport, msgs, util, and plugins explicit in this pull request.\r\n\r\nThis is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes `explicit` and the first character (`-` or `+`), then counts unique adjacent lines. Everything that starts with a `2` was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of `explicit`, except for `TopicManager.cc` and `SimEventsException.hh`, which needed some lines to be wrapped to stay under 80 characters.\r\n\r\n~~~\r\n$ hg up explicit_constructors_rendering\r\n$ hg diff -r default \\\r\n  | grep '^[-+] ' \\\r\n  | sed -e 's@explicit @@' -e 's@^.@@' \\\r\n  | uniq -c\r\n      2   public: GazeboGenerator(const std::string &_name);\r\n      2       public: TerrainMaterial(const std::string &_materialName);\r\n      2     AtmosphereManager(SkyX *s);\r\n      2       BasicController(const bool& deleteBySkyX = true);\r\n      2     CloudLayer(SkyX *s);\r\n      2     CloudsManager(SkyX *h);\r\n      2     GPUManager(SkyX *s);\r\n      2     MeshManager(SkyX *s);\r\n      2     MoonManager(SkyX *s);\r\n      2       DataManager(VClouds *vc);\r\n      2     GeometryManager(VClouds* vc);\r\n      2     VClouds(Ogre::SceneManager *sm);\r\n      2     VCloudsManager(SkyX *s);\r\n      2       public: CallbackHelper(bool _latching = false);\r\n      2   public: TopicManagerConnectionTask(msgs::Publish _pub) : pub(_pub) {}\r\n      1   public: NodeProcess_TBB(std::vector<NodePtr> *_nodes) : nodes(_nodes) {}\r\n      1   public: NodeProcess_TBB(std::vector<NodePtr> *_nodes)\r\n      1           : nodes(_nodes) {}\r\n      2       public: DiagnosticTimer(const std::string &_name);\r\n      2       public: DoorController(physics::JointPtr _doorJoint);\r\n      2       public: CloseState(ElevatorPluginPrivate::DoorController *_ctrl);\r\n      2       public: OpenState(ElevatorPluginPrivate::DoorController *_ctrl);\r\n      2       public: WaitState(const common::Time &_waitTime);\r\n      1     public: SimEventsException(const char* m) : std::runtime_error(m) {}\r\n      1     public: SimEventsException(const char* m)\r\n      1         : std::runtime_error(m) {}\r\n      2     public: RestException(const char *_m):std::runtime_error(_m) {}\r\n~~~", "markup": "markdown", "html": "<p>See also <a href=\"#!/osrf/gazebo/pull-requests/2790/mark-many-gui-constructors-as-explicit\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2790</a> and <a href=\"#!/osrf/gazebo/pull-requests/2792/mark-many-physics-constructors-as-explicit\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2792</a>. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked some from rendering, transport, msgs, util, and plugins explicit in this pull request.</p>\n<p>This is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes <code>explicit</code> and the first character (<code>-</code> or <code>+</code>), then counts unique adjacent lines. Everything that starts with a <code>2</code> was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of <code>explicit</code>, except for <code>TopicManager.cc</code> and <code>SimEventsException.hh</code>, which needed some lines to be wrapped to stay under 80 characters.</p>\n<div class=\"codehilite\"><pre><span></span>$ hg up explicit_constructors_rendering\n$ hg diff -r default <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> grep <span class=\"s1\">&#39;^[-+] &#39;</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s@explicit @@&#39;</span> -e <span class=\"s1\">&#39;s@^.@@&#39;</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> uniq -c\n      <span class=\"m\">2</span>   public: GazeboGenerator<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span>_name<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: TerrainMaterial<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span>_materialName<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     AtmosphereManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       BasicController<span class=\"o\">(</span>const bool<span class=\"p\">&amp;</span> <span class=\"nv\">deleteBySkyX</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     CloudLayer<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     CloudsManager<span class=\"o\">(</span>SkyX *h<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     GPUManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     MeshManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     MoonManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       DataManager<span class=\"o\">(</span>VClouds *vc<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     GeometryManager<span class=\"o\">(</span>VClouds* vc<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     VClouds<span class=\"o\">(</span>Ogre::SceneManager *sm<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     VCloudsManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: CallbackHelper<span class=\"o\">(</span>bool <span class=\"nv\">_latching</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>   public: TopicManagerConnectionTask<span class=\"o\">(</span>msgs::Publish _pub<span class=\"o\">)</span> : pub<span class=\"o\">(</span>_pub<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>   public: NodeProcess_TBB<span class=\"o\">(</span>std::vector&lt;NodePtr&gt; *_nodes<span class=\"o\">)</span> : nodes<span class=\"o\">(</span>_nodes<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>   public: NodeProcess_TBB<span class=\"o\">(</span>std::vector&lt;NodePtr&gt; *_nodes<span class=\"o\">)</span>\n      <span class=\"m\">1</span>           : nodes<span class=\"o\">(</span>_nodes<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: DiagnosticTimer<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span>_name<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DoorController<span class=\"o\">(</span>physics::JointPtr _doorJoint<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: CloseState<span class=\"o\">(</span>ElevatorPluginPrivate::DoorController *_ctrl<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: OpenState<span class=\"o\">(</span>ElevatorPluginPrivate::DoorController *_ctrl<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: WaitState<span class=\"o\">(</span>const common::Time <span class=\"p\">&amp;</span>_waitTime<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>     public: SimEventsException<span class=\"o\">(</span>const char* m<span class=\"o\">)</span> : std::runtime_error<span class=\"o\">(</span>m<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>     public: SimEventsException<span class=\"o\">(</span>const char* m<span class=\"o\">)</span>\n      <span class=\"m\">1</span>         : std::runtime_error<span class=\"o\">(</span>m<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>     public: RestException<span class=\"o\">(</span>const char *_m<span class=\"o\">)</span>:std::runtime_error<span class=\"o\">(</span>_m<span class=\"o\">)</span> <span class=\"o\">{}</span>\n</pre></div>", "type": "rendered"}, "title": {"raw": "Explicit constructors in rendering, transport, msgs, util, plugins", "markup": "markdown", "html": "<p>Explicit constructors in rendering, transport, msgs, util, plugins</p>", "type": "rendered"}}, "type": "pullrequest", "description": "See also pull request #2790 and pull request #2792. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked some from rendering, transport, msgs, util, and plugins explicit in this pull request.\r\n\r\nThis is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes `explicit` and the first character (`-` or `+`), then counts unique adjacent lines. Everything that starts with a `2` was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of `explicit`, except for `TopicManager.cc` and `SimEventsException.hh`, which needed some lines to be wrapped to stay under 80 characters.\r\n\r\n~~~\r\n$ hg up explicit_constructors_rendering\r\n$ hg diff -r default \\\r\n  | grep '^[-+] ' \\\r\n  | sed -e 's@explicit @@' -e 's@^.@@' \\\r\n  | uniq -c\r\n      2   public: GazeboGenerator(const std::string &_name);\r\n      2       public: TerrainMaterial(const std::string &_materialName);\r\n      2     AtmosphereManager(SkyX *s);\r\n      2       BasicController(const bool& deleteBySkyX = true);\r\n      2     CloudLayer(SkyX *s);\r\n      2     CloudsManager(SkyX *h);\r\n      2     GPUManager(SkyX *s);\r\n      2     MeshManager(SkyX *s);\r\n      2     MoonManager(SkyX *s);\r\n      2       DataManager(VClouds *vc);\r\n      2     GeometryManager(VClouds* vc);\r\n      2     VClouds(Ogre::SceneManager *sm);\r\n      2     VCloudsManager(SkyX *s);\r\n      2       public: CallbackHelper(bool _latching = false);\r\n      2   public: TopicManagerConnectionTask(msgs::Publish _pub) : pub(_pub) {}\r\n      1   public: NodeProcess_TBB(std::vector<NodePtr> *_nodes) : nodes(_nodes) {}\r\n      1   public: NodeProcess_TBB(std::vector<NodePtr> *_nodes)\r\n      1           : nodes(_nodes) {}\r\n      2       public: DiagnosticTimer(const std::string &_name);\r\n      2       public: DoorController(physics::JointPtr _doorJoint);\r\n      2       public: CloseState(ElevatorPluginPrivate::DoorController *_ctrl);\r\n      2       public: OpenState(ElevatorPluginPrivate::DoorController *_ctrl);\r\n      2       public: WaitState(const common::Time &_waitTime);\r\n      1     public: SimEventsException(const char* m) : std::runtime_error(m) {}\r\n      1     public: SimEventsException(const char* m)\r\n      1         : std::runtime_error(m) {}\r\n      2     public: RestException(const char *_m):std::runtime_error(_m) {}\r\n~~~", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2795/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:f8f238d19f91%0D897c5d948f63?from_pullrequest_id=2795"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2795/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2795.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2795/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2795/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2795"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2795/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:f8f238d19f91%0D897c5d948f63?from_pullrequest_id=2795"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2795/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2795/statuses_page=1.json"}}, "title": "Explicit constructors in rendering, transport, msgs, util, plugins", "close_source_branch": true, "reviewers": [], "id": 2795, "destination": {"commit": {"hash": "897c5d948f63", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/897c5d948f63.json"}, "html": {"href": "#!/osrf/gazebo/commits/897c5d948f63"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2017-10-27T17:03:14.084521+00:00", "summary": {"raw": "See also pull request #2790 and pull request #2792. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked some from rendering, transport, msgs, util, and plugins explicit in this pull request.\r\n\r\nThis is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes `explicit` and the first character (`-` or `+`), then counts unique adjacent lines. Everything that starts with a `2` was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of `explicit`, except for `TopicManager.cc` and `SimEventsException.hh`, which needed some lines to be wrapped to stay under 80 characters.\r\n\r\n~~~\r\n$ hg up explicit_constructors_rendering\r\n$ hg diff -r default \\\r\n  | grep '^[-+] ' \\\r\n  | sed -e 's@explicit @@' -e 's@^.@@' \\\r\n  | uniq -c\r\n      2   public: GazeboGenerator(const std::string &_name);\r\n      2       public: TerrainMaterial(const std::string &_materialName);\r\n      2     AtmosphereManager(SkyX *s);\r\n      2       BasicController(const bool& deleteBySkyX = true);\r\n      2     CloudLayer(SkyX *s);\r\n      2     CloudsManager(SkyX *h);\r\n      2     GPUManager(SkyX *s);\r\n      2     MeshManager(SkyX *s);\r\n      2     MoonManager(SkyX *s);\r\n      2       DataManager(VClouds *vc);\r\n      2     GeometryManager(VClouds* vc);\r\n      2     VClouds(Ogre::SceneManager *sm);\r\n      2     VCloudsManager(SkyX *s);\r\n      2       public: CallbackHelper(bool _latching = false);\r\n      2   public: TopicManagerConnectionTask(msgs::Publish _pub) : pub(_pub) {}\r\n      1   public: NodeProcess_TBB(std::vector<NodePtr> *_nodes) : nodes(_nodes) {}\r\n      1   public: NodeProcess_TBB(std::vector<NodePtr> *_nodes)\r\n      1           : nodes(_nodes) {}\r\n      2       public: DiagnosticTimer(const std::string &_name);\r\n      2       public: DoorController(physics::JointPtr _doorJoint);\r\n      2       public: CloseState(ElevatorPluginPrivate::DoorController *_ctrl);\r\n      2       public: OpenState(ElevatorPluginPrivate::DoorController *_ctrl);\r\n      2       public: WaitState(const common::Time &_waitTime);\r\n      1     public: SimEventsException(const char* m) : std::runtime_error(m) {}\r\n      1     public: SimEventsException(const char* m)\r\n      1         : std::runtime_error(m) {}\r\n      2     public: RestException(const char *_m):std::runtime_error(_m) {}\r\n~~~", "markup": "markdown", "html": "<p>See also <a href=\"#!/osrf/gazebo/pull-requests/2790/mark-many-gui-constructors-as-explicit\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2790</a> and <a href=\"#!/osrf/gazebo/pull-requests/2792/mark-many-physics-constructors-as-explicit\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2792</a>. We have a boatload of cppcheck warnings about constructors with one argument that aren't marked explicit. I think in most cases, these constructors should be explicit, and I've marked some from rendering, transport, msgs, util, and plugins explicit in this pull request.</p>\n<p>This is kind of a boring diff, but the following command can help a little. It looks at all changed lines in the diff, deletes <code>explicit</code> and the first character (<code>-</code> or <code>+</code>), then counts unique adjacent lines. Everything that starts with a <code>2</code> was identical except for those two changes. This shows that the majority of lines are identical aside from the addition of <code>explicit</code>, except for <code>TopicManager.cc</code> and <code>SimEventsException.hh</code>, which needed some lines to be wrapped to stay under 80 characters.</p>\n<div class=\"codehilite\"><pre><span></span>$ hg up explicit_constructors_rendering\n$ hg diff -r default <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> grep <span class=\"s1\">&#39;^[-+] &#39;</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> sed -e <span class=\"s1\">&#39;s@explicit @@&#39;</span> -e <span class=\"s1\">&#39;s@^.@@&#39;</span> <span class=\"se\">\\</span>\n  <span class=\"p\">|</span> uniq -c\n      <span class=\"m\">2</span>   public: GazeboGenerator<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span>_name<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: TerrainMaterial<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span>_materialName<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     AtmosphereManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       BasicController<span class=\"o\">(</span>const bool<span class=\"p\">&amp;</span> <span class=\"nv\">deleteBySkyX</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     CloudLayer<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     CloudsManager<span class=\"o\">(</span>SkyX *h<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     GPUManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     MeshManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     MoonManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       DataManager<span class=\"o\">(</span>VClouds *vc<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     GeometryManager<span class=\"o\">(</span>VClouds* vc<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     VClouds<span class=\"o\">(</span>Ogre::SceneManager *sm<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>     VCloudsManager<span class=\"o\">(</span>SkyX *s<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: CallbackHelper<span class=\"o\">(</span>bool <span class=\"nv\">_latching</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>   public: TopicManagerConnectionTask<span class=\"o\">(</span>msgs::Publish _pub<span class=\"o\">)</span> : pub<span class=\"o\">(</span>_pub<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>   public: NodeProcess_TBB<span class=\"o\">(</span>std::vector&lt;NodePtr&gt; *_nodes<span class=\"o\">)</span> : nodes<span class=\"o\">(</span>_nodes<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>   public: NodeProcess_TBB<span class=\"o\">(</span>std::vector&lt;NodePtr&gt; *_nodes<span class=\"o\">)</span>\n      <span class=\"m\">1</span>           : nodes<span class=\"o\">(</span>_nodes<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>       public: DiagnosticTimer<span class=\"o\">(</span>const std::string <span class=\"p\">&amp;</span>_name<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: DoorController<span class=\"o\">(</span>physics::JointPtr _doorJoint<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: CloseState<span class=\"o\">(</span>ElevatorPluginPrivate::DoorController *_ctrl<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: OpenState<span class=\"o\">(</span>ElevatorPluginPrivate::DoorController *_ctrl<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">2</span>       public: WaitState<span class=\"o\">(</span>const common::Time <span class=\"p\">&amp;</span>_waitTime<span class=\"o\">)</span><span class=\"p\">;</span>\n      <span class=\"m\">1</span>     public: SimEventsException<span class=\"o\">(</span>const char* m<span class=\"o\">)</span> : std::runtime_error<span class=\"o\">(</span>m<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">1</span>     public: SimEventsException<span class=\"o\">(</span>const char* m<span class=\"o\">)</span>\n      <span class=\"m\">1</span>         : std::runtime_error<span class=\"o\">(</span>m<span class=\"o\">)</span> <span class=\"o\">{}</span>\n      <span class=\"m\">2</span>     public: RestException<span class=\"o\">(</span>const char *_m<span class=\"o\">)</span>:std::runtime_error<span class=\"o\">(</span>_m<span class=\"o\">)</span> <span class=\"o\">{}</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "c50a6a7d96b3", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/c50a6a7d96b3.json"}, "html": {"href": "#!/osrf/gazebo/commits/c50a6a7d96b3"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "explicit_constructors_rendering"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-10-31T17:36:14.742899+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-31T17:31:05.318132+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2017-10-31T17:41:29.221676+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "f8f238d19f91", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/f8f238d19f91.json"}, "html": {"href": "#!/osrf/gazebo/commits/f8f238d19f91"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}