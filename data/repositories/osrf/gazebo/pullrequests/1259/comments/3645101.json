{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1259/comments/3645101.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:0fb2c2a724ed..df097796634c?path=gazebo%2Fmsgs%2Fmsgs.hh"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1259/_/diff#comment-3645101"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1259, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1259.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1259"}}, "title": "Display joint type, parent link's name and child link's name on world tree -> 4.0"}, "content": {"raw": "Copying @iche033 's comment: we can't overload by return type in C++ [reference](http://stackoverflow.com/questions/442026/function-overloading-by-return-type)\n\nSo we could call these functions `ConvertJointType` instead of `Convert`?", "markup": "markdown", "html": "<p>Copying @iche033 's comment: we can't overload by return type in C++ <a data-is-external-link=\"true\" href=\"http://stackoverflow.com/questions/442026/function-overloading-by-return-type\" rel=\"nofollow\">reference</a></p>\n<p>So we could call these functions <code>ConvertJointType</code> instead of <code>Convert</code>?</p>", "type": "rendered"}, "created_on": "2014-10-29T03:35:38.205828+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {"to": 117, "from": null, "outdated": true, "path": "gazebo/msgs/msgs.hh"}, "updated_on": "2014-10-29T03:35:38.217694+00:00", "type": "pullrequest_comment", "id": 3645101}