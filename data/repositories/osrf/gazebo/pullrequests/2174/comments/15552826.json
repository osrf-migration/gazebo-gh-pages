{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2174/comments/15552826.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2174/_/diff#comment-15552826"}}, "parent": {"id": 15481426, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2174/comments/15481426.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2174/_/diff#comment-15481426"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2174, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2174.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2174"}}, "title": "Prevent xml parser error from crashing LogPlay on osx -> gazebo7"}, "content": {"raw": "I've built this branch on a 32-bit docker image on my local machine and I've reproduced the error. It seems that `LogPlay` is successfully inserting the missing `</gazebo_log>` tag, but it is not detecting it properly with the following calls in [LogPlay_TEST](#!/osrf/gazebo/src/d795a27278409eea9287c622bedcf1891da43f61/gazebo/util/LogPlay_TEST.cc?at=fix_logplay_test_7&fileviewer=file-view-default#LogPlay_TEST.cc-438):\n\n~~~\n  // Open the temporary file, which should now have the proper end tag\n  std::ifstream inFile(tmpFilename);\n\n  std::string endTag = \"</gazebo_log>\";\n\n  // Back up the length of the closing tag.\n  inFile.seekg(-1 - endTag.length(), std::ios::end);\n\n  // Get the last line\n  std::string lastLine;\n  std::getline(inFile, lastLine);\n...\n  // Check that the log file now has the closing end tag\n  EXPECT_EQ(lastLine, endTag);\n~~~\n\nI've verified that the file contains `</gazebo_log>`, but the expectation still fails.\n\nAlso, these same statements are in [LogPlay::Open](#!/osrf/gazebo/src/d795a27278409eea9287c622bedcf1891da43f61/gazebo/util/LogPlay.cc?fileviewer=file-view-default#LogPlay.cc-61), which causes a different test to append `</gazebo_log>` to `test/logs/invalidHeader.log`, so that it winds up with two tags.\n\nSomething about those statements isn't working on 32-bit Ubuntu.", "markup": "markdown", "html": "<p>I've built this branch on a 32-bit docker image on my local machine and I've reproduced the error. It seems that <code>LogPlay</code> is successfully inserting the missing <code>&lt;/gazebo_log&gt;</code> tag, but it is not detecting it properly with the following calls in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/d795a27278409eea9287c622bedcf1891da43f61/gazebo/util/LogPlay_TEST.cc?at=fix_logplay_test_7&amp;fileviewer=file-view-default#LogPlay_TEST.cc-438\" rel=\"nofollow\">LogPlay_TEST</a>:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"o\">//</span> <span class=\"nt\">Open</span> <span class=\"nt\">the</span> <span class=\"nt\">temporary</span> <span class=\"nt\">file</span><span class=\"o\">,</span> <span class=\"nt\">which</span> <span class=\"nt\">should</span> <span class=\"nt\">now</span> <span class=\"nt\">have</span> <span class=\"nt\">the</span> <span class=\"nt\">proper</span> <span class=\"nt\">end</span> <span class=\"nt\">tag</span>\n  <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">ifstream</span> <span class=\"nt\">inFile</span><span class=\"o\">(</span><span class=\"nt\">tmpFilename</span><span class=\"o\">);</span>\n\n  <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"nt\">endTag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;/gazebo_log&gt;&quot;</span><span class=\"o\">;</span>\n\n  <span class=\"o\">//</span> <span class=\"nt\">Back</span> <span class=\"nt\">up</span> <span class=\"nt\">the</span> <span class=\"nt\">length</span> <span class=\"nt\">of</span> <span class=\"nt\">the</span> <span class=\"nt\">closing</span> <span class=\"nt\">tag</span><span class=\"o\">.</span>\n  <span class=\"nt\">inFile</span><span class=\"p\">.</span><span class=\"nc\">seekg</span><span class=\"o\">(</span><span class=\"nt\">-1</span> <span class=\"nt\">-</span> <span class=\"nt\">endTag</span><span class=\"p\">.</span><span class=\"nc\">length</span><span class=\"o\">(),</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">ios</span><span class=\"p\">::</span><span class=\"nd\">end</span><span class=\"o\">);</span>\n\n  <span class=\"o\">//</span> <span class=\"nt\">Get</span> <span class=\"nt\">the</span> <span class=\"nt\">last</span> <span class=\"nt\">line</span>\n  <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"nt\">lastLine</span><span class=\"o\">;</span>\n  <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">getline</span><span class=\"o\">(</span><span class=\"nt\">inFile</span><span class=\"o\">,</span> <span class=\"nt\">lastLine</span><span class=\"o\">);</span>\n<span class=\"o\">...</span>\n  <span class=\"o\">//</span> <span class=\"nt\">Check</span> <span class=\"nt\">that</span> <span class=\"nt\">the</span> <span class=\"nt\">log</span> <span class=\"nt\">file</span> <span class=\"nt\">now</span> <span class=\"nt\">has</span> <span class=\"nt\">the</span> <span class=\"nt\">closing</span> <span class=\"nt\">end</span> <span class=\"nt\">tag</span>\n  <span class=\"nt\">EXPECT_EQ</span><span class=\"o\">(</span><span class=\"nt\">lastLine</span><span class=\"o\">,</span> <span class=\"nt\">endTag</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>I've verified that the file contains <code>&lt;/gazebo_log&gt;</code>, but the expectation still fails.</p>\n<p>Also, these same statements are in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/d795a27278409eea9287c622bedcf1891da43f61/gazebo/util/LogPlay.cc?fileviewer=file-view-default#LogPlay.cc-61\" rel=\"nofollow\">LogPlay::Open</a>, which causes a different test to append <code>&lt;/gazebo_log&gt;</code> to <code>test/logs/invalidHeader.log</code>, so that it winds up with two tags.</p>\n<p>Something about those statements isn't working on 32-bit Ubuntu.</p>", "type": "rendered"}, "created_on": "2016-03-09T21:53:57.321960+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2016-03-09T21:53:57.324228+00:00", "type": "pullrequest_comment", "id": 15552826}