{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2562/comments/28925531.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2562/_/diff#comment-28925531"}}, "parent": {"id": 28896032, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2562/comments/28896032.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2562/_/diff#comment-28896032"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2562, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/2562.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2562"}}, "title": "Load GUI Plugins with gzclient parameter -g, fixes issue 1311"}, "content": {"raw": "Yeah I wouldn't worry about the test failures. And you're right about the tests, maybe the effort to make a test for this doesn't pay off. I couldn't find any tests currently checking GUI plugins, but I didn't look much further. The approach you described sounds good to me, but I'm ok with just manually testing this for now.\n\nAs for where to attach the plugin, as far as I know, there are 3 ways to load a GUI plugin:\n\n1. `gui.ini`\n    \n    The file is read directly by the `RenderWidget`, which loads the plugin and [attaches](#!/osrf/gazebo/src/d34d108d41020bb43ee4d8b962ad7adc1fd6c865/gazebo/gui/RenderWidget.cc?fileviewer=file-view-default#RenderWidget.cc-141) it to `GLWidget`\n\n1. `<plugin>` tag in SDF\n\n    Loaded by the server and sent to the client via a GUI message. `MainWindow` loads it and [sends](#!/osrf/gazebo/src/d34d108d41020bb43ee4d8b962ad7adc1fd6c865/gazebo/gui/MainWindow.cc?fileviewer=file-view-default#MainWindow.cc-2087) it to the render widget, who [attaches](#!/osrf/gazebo/src/d34d108d41020bb43ee4d8b962ad7adc1fd6c865/gazebo/gui/RenderWidget.cc?fileviewer=file-view-default#RenderWidget.cc-293) it to `GLWidget`.\n\n1. And now thanks to this PR, via the command line\n\n    I think we could keep the pattern and also attach it to `GLWidget` via the `RenderWidget`, as you mentioned. I think it makes sense that the same plugin shows up the same way no matter how it is loaded. This is how the Timer GUI plugin looks like for me at the moment if loaded with `gzclient --verbose -g libTimerGUIPlugin.so`:\n\n    ![guiplugin.png](data/bitbucket.org/repo/jgXqbo/images/1065399581-guiplugin.png)", "markup": "markdown", "html": "<p>Yeah I wouldn't worry about the test failures. And you're right about the tests, maybe the effort to make a test for this doesn't pay off. I couldn't find any tests currently checking GUI plugins, but I didn't look much further. The approach you described sounds good to me, but I'm ok with just manually testing this for now.</p>\n<p>As for where to attach the plugin, as far as I know, there are 3 ways to load a GUI plugin:</p>\n<ol>\n<li>\n<p><code>gui.ini</code></p>\n<p>The file is read directly by the <code>RenderWidget</code>, which loads the plugin and <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/d34d108d41020bb43ee4d8b962ad7adc1fd6c865/gazebo/gui/RenderWidget.cc?fileviewer=file-view-default#RenderWidget.cc-141\" rel=\"nofollow\">attaches</a> it to <code>GLWidget</code></p>\n</li>\n<li>\n<p><code>&lt;plugin&gt;</code> tag in SDF</p>\n<p>Loaded by the server and sent to the client via a GUI message. <code>MainWindow</code> loads it and <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/d34d108d41020bb43ee4d8b962ad7adc1fd6c865/gazebo/gui/MainWindow.cc?fileviewer=file-view-default#MainWindow.cc-2087\" rel=\"nofollow\">sends</a> it to the render widget, who <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/d34d108d41020bb43ee4d8b962ad7adc1fd6c865/gazebo/gui/RenderWidget.cc?fileviewer=file-view-default#RenderWidget.cc-293\" rel=\"nofollow\">attaches</a> it to <code>GLWidget</code>.</p>\n</li>\n<li>\n<p>And now thanks to this PR, via the command line</p>\n<p>I think we could keep the pattern and also attach it to <code>GLWidget</code> via the <code>RenderWidget</code>, as you mentioned. I think it makes sense that the same plugin shows up the same way no matter how it is loaded. This is how the Timer GUI plugin looks like for me at the moment if loaded with <code>gzclient --verbose -g libTimerGUIPlugin.so</code>:</p>\n<p><img alt=\"guiplugin.png\" src=\"data/bitbucket.org/repo/jgXqbo/images/1065399581-guiplugin.png\" /></p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2016-12-28T21:18:30.677895+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": "2016-12-28T21:18:30.680720+00:00", "type": "pullrequest_comment", "id": 28925531}