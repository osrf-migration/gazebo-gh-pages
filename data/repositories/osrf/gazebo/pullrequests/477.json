{"rendered": {"description": {"raw": "The easiest way to test is to change the hokuyo laser model to use `gpu_ray` as its type and comment out the use of `libRayPlugin` in model.sdf\r\n\r\nKey changes:\r\n\r\n- Fix some cases where the range values are not correct\r\n\r\n- Fix instantiating multiple gpu ray sensors\r\n\r\n- Add gpu laser unit and integration tests\r\n\r\n- Add noise model\r\n\r\n- Enable laser scan data publishing\r\n\r\n- Add visualization in gzclient\r\n\r\n- A bunch of style fixes\r\n\r\nKnown issue:\r\n\r\n- It was found that skyx causes laser range values to be clipped. I did a workaround that just sets it to invisible when doing the first laser rendering pass (line 384 in gazebo/rendering/GpuLaser.cc). There maybe another easier/cleaner way to do this but this is sufficient for now to make things work.\r\n\r\nUpdate: \r\n\r\n- Fix sampling of range ranges when gpu ray sensor is pitched or rolled. \r\n\r\n- Added test world file: gpu_laser2.world ", "markup": "markdown", "html": "<p>The easiest way to test is to change the hokuyo laser model to use <code>gpu_ray</code> as its type and comment out the use of <code>libRayPlugin</code> in model.sdf</p>\n<p>Key changes:</p>\n<ul>\n<li>\n<p>Fix some cases where the range values are not correct</p>\n</li>\n<li>\n<p>Fix instantiating multiple gpu ray sensors</p>\n</li>\n<li>\n<p>Add gpu laser unit and integration tests</p>\n</li>\n<li>\n<p>Add noise model</p>\n</li>\n<li>\n<p>Enable laser scan data publishing</p>\n</li>\n<li>\n<p>Add visualization in gzclient</p>\n</li>\n<li>\n<p>A bunch of style fixes</p>\n</li>\n</ul>\n<p>Known issue:</p>\n<ul>\n<li>It was found that skyx causes laser range values to be clipped. I did a workaround that just sets it to invisible when doing the first laser rendering pass (line 384 in gazebo/rendering/GpuLaser.cc). There maybe another easier/cleaner way to do this but this is sufficient for now to make things work.</li>\n</ul>\n<p>Update: </p>\n<ul>\n<li>\n<p>Fix sampling of range ranges when gpu ray sensor is pitched or rolled. </p>\n</li>\n<li>\n<p>Added test world file: gpu_laser2.world </p>\n</li>\n</ul>", "type": "rendered"}, "title": {"raw": "gpu ray sensor", "markup": "markdown", "html": "<p>gpu ray sensor</p>", "type": "rendered"}}, "type": "pullrequest", "description": "The easiest way to test is to change the hokuyo laser model to use `gpu_ray` as its type and comment out the use of `libRayPlugin` in model.sdf\r\n\r\nKey changes:\r\n\r\n- Fix some cases where the range values are not correct\r\n\r\n- Fix instantiating multiple gpu ray sensors\r\n\r\n- Add gpu laser unit and integration tests\r\n\r\n- Add noise model\r\n\r\n- Enable laser scan data publishing\r\n\r\n- Add visualization in gzclient\r\n\r\n- A bunch of style fixes\r\n\r\nKnown issue:\r\n\r\n- It was found that skyx causes laser range values to be clipped. I did a workaround that just sets it to invisible when doing the first laser rendering pass (line 384 in gazebo/rendering/GpuLaser.cc). There maybe another easier/cleaner way to do this but this is sufficient for now to make things work.\r\n\r\nUpdate: \r\n\r\n- Fix sampling of range ranges when gpu ray sensor is pitched or rolled. \r\n\r\n- Added test world file: gpu_laser2.world ", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/477/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:51041ca76825%0Dd397e7b7e93f?from_pullrequest_id=477"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/477/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/477.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/477/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/477/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/477"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/477/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:51041ca76825%0Dd397e7b7e93f?from_pullrequest_id=477"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/477/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/477/statuses_page=1.json"}}, "title": "gpu ray sensor", "close_source_branch": true, "reviewers": [], "id": 477, "destination": {"commit": {"hash": "d397e7b7e93f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/d397e7b7e93f.json"}, "html": {"href": "#!/osrf/gazebo/commits/d397e7b7e93f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2013-04-22T20:38:54.257540+00:00", "summary": {"raw": "The easiest way to test is to change the hokuyo laser model to use `gpu_ray` as its type and comment out the use of `libRayPlugin` in model.sdf\r\n\r\nKey changes:\r\n\r\n- Fix some cases where the range values are not correct\r\n\r\n- Fix instantiating multiple gpu ray sensors\r\n\r\n- Add gpu laser unit and integration tests\r\n\r\n- Add noise model\r\n\r\n- Enable laser scan data publishing\r\n\r\n- Add visualization in gzclient\r\n\r\n- A bunch of style fixes\r\n\r\nKnown issue:\r\n\r\n- It was found that skyx causes laser range values to be clipped. I did a workaround that just sets it to invisible when doing the first laser rendering pass (line 384 in gazebo/rendering/GpuLaser.cc). There maybe another easier/cleaner way to do this but this is sufficient for now to make things work.\r\n\r\nUpdate: \r\n\r\n- Fix sampling of range ranges when gpu ray sensor is pitched or rolled. \r\n\r\n- Added test world file: gpu_laser2.world ", "markup": "markdown", "html": "<p>The easiest way to test is to change the hokuyo laser model to use <code>gpu_ray</code> as its type and comment out the use of <code>libRayPlugin</code> in model.sdf</p>\n<p>Key changes:</p>\n<ul>\n<li>\n<p>Fix some cases where the range values are not correct</p>\n</li>\n<li>\n<p>Fix instantiating multiple gpu ray sensors</p>\n</li>\n<li>\n<p>Add gpu laser unit and integration tests</p>\n</li>\n<li>\n<p>Add noise model</p>\n</li>\n<li>\n<p>Enable laser scan data publishing</p>\n</li>\n<li>\n<p>Add visualization in gzclient</p>\n</li>\n<li>\n<p>A bunch of style fixes</p>\n</li>\n</ul>\n<p>Known issue:</p>\n<ul>\n<li>It was found that skyx causes laser range values to be clipped. I did a workaround that just sets it to invisible when doing the first laser rendering pass (line 384 in gazebo/rendering/GpuLaser.cc). There maybe another easier/cleaner way to do this but this is sufficient for now to make things work.</li>\n</ul>\n<p>Update: </p>\n<ul>\n<li>\n<p>Fix sampling of range ranges when gpu ray sensor is pitched or rolled. </p>\n</li>\n<li>\n<p>Added test world file: gpu_laser2.world </p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "113793f6304a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/113793f6304a.json"}, "html": {"href": "#!/osrf/gazebo/commits/113793f6304a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "gpu_sensors"}}, "comment_count": 33, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2013-04-25T23:30:33.881890+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}}, {"role": "PARTICIPANT", "participated_on": "2013-04-25T20:13:34.755006+00:00", "type": "participant", "approved": true, "user": {"display_name": "Thomas Koletschka", "uuid": "{b33092ac-6376-48d1-9803-d9e6de445d1a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D"}, "html": {"href": "https://bitbucket.org/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D/"}, "avatar": {"href": "https://bitbucket.org/account/thomasko/avatar/"}}, "nickname": "thomasko", "type": "user", "account_id": null}}, {"role": "PARTICIPANT", "participated_on": "2013-04-26T15:45:21.729873+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2013-04-25T20:13:16.446477+00:00", "type": "participant", "approved": true, "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}}, {"role": "PARTICIPANT", "participated_on": "2013-04-26T05:28:02.193179+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2013-04-26T17:45:08.919097+00:00", "author": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "merge_commit": {"hash": "51041ca76825", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/51041ca76825.json"}, "html": {"href": "#!/osrf/gazebo/commits/51041ca76825"}}}, "closed_by": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}