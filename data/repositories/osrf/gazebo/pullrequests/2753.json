{"rendered": {"description": {"raw": "This pull request fixes issue #1011 and cleans up large parts of the physics/dart implementation. I apologize for the large size of the diff, but most of it is just wiping away redundant function implementations and centralizing them into DARTJoint.\r\n\r\nThe actual problem that caused issue #1011 was only tangentially related to the Universal Joint. The ``UniversalJointForce`` test runs through a set of loops where each loop aims to test the internal consistency of the Universal Joint behavior with a model that contains two universal joints in sequence. The very last test was failing because the loop before it assumed that the joint positions of the two universal joints were being driven to all zero position and velocity, because it clamped the lower and upper position limits to zero. However, DART does not behave like this (by design). In DART, when a position limit is violated, it simply prevents the joint from moving any further in that direction (and computes the joint forces necessary to ensure this); it does not drive the joint position back to the limit value. Therefore, since the initial joint position was outside of the limits, DART did not drive it down to zero as the test was expecting.\r\n\r\nOn another note, the final test loop was a little bit ill-conceived. It assumed that the sum of the universal joint angles for each component could be summed to get the Euler angles of the final link's world-frame rotation. This would only be true if each joint has only one non-zero position component and the axes of those non-zero position components are parallel to each other. I tweaked the test to reflect these conditions.", "markup": "markdown", "html": "<p>This pull request fixes issue <a href=\"#!/osrf/gazebo/issues/1011/dartuniversaljoint-has-failing-tests\" rel=\"nofollow\" title=\"DARTUniversalJoint has failing tests\" class=\"ap-connect-link\"><s>#1011</s></a> and cleans up large parts of the physics/dart implementation. I apologize for the large size of the diff, but most of it is just wiping away redundant function implementations and centralizing them into DARTJoint.</p>\n<p>The actual problem that caused issue <a href=\"#!/osrf/gazebo/issues/1011/dartuniversaljoint-has-failing-tests\" rel=\"nofollow\" title=\"DARTUniversalJoint has failing tests\" class=\"ap-connect-link\"><s>#1011</s></a> was only tangentially related to the Universal Joint. The <code>UniversalJointForce</code> test runs through a set of loops where each loop aims to test the internal consistency of the Universal Joint behavior with a model that contains two universal joints in sequence. The very last test was failing because the loop before it assumed that the joint positions of the two universal joints were being driven to all zero position and velocity, because it clamped the lower and upper position limits to zero. However, DART does not behave like this (by design). In DART, when a position limit is violated, it simply prevents the joint from moving any further in that direction (and computes the joint forces necessary to ensure this); it does not drive the joint position back to the limit value. Therefore, since the initial joint position was outside of the limits, DART did not drive it down to zero as the test was expecting.</p>\n<p>On another note, the final test loop was a little bit ill-conceived. It assumed that the sum of the universal joint angles for each component could be summed to get the Euler angles of the final link's world-frame rotation. This would only be true if each joint has only one non-zero position component and the axes of those non-zero position components are parallel to each other. I tweaked the test to reflect these conditions.</p>", "type": "rendered"}, "title": {"raw": "Fix Issue 1011 -- DARTUniversalJoint", "markup": "markdown", "html": "<p>Fix Issue 1011 -- DARTUniversalJoint</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request fixes issue #1011 and cleans up large parts of the physics/dart implementation. I apologize for the large size of the diff, but most of it is just wiping away redundant function implementations and centralizing them into DARTJoint.\r\n\r\nThe actual problem that caused issue #1011 was only tangentially related to the Universal Joint. The ``UniversalJointForce`` test runs through a set of loops where each loop aims to test the internal consistency of the Universal Joint behavior with a model that contains two universal joints in sequence. The very last test was failing because the loop before it assumed that the joint positions of the two universal joints were being driven to all zero position and velocity, because it clamped the lower and upper position limits to zero. However, DART does not behave like this (by design). In DART, when a position limit is violated, it simply prevents the joint from moving any further in that direction (and computes the joint forces necessary to ensure this); it does not drive the joint position back to the limit value. Therefore, since the initial joint position was outside of the limits, DART did not drive it down to zero as the test was expecting.\r\n\r\nOn another note, the final test loop was a little bit ill-conceived. It assumed that the sum of the universal joint angles for each component could be summed to get the Euler angles of the final link's world-frame rotation. This would only be true if each joint has only one non-zero position component and the axes of those non-zero position components are parallel to each other. I tweaked the test to reflect these conditions.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2753/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:bb8abcd6ee11%0D6dd3ea7938b7?from_pullrequest_id=2753"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/2753/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/2753.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/2753/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2753/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/2753"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/2753/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:bb8abcd6ee11%0D6dd3ea7938b7?from_pullrequest_id=2753"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/2753/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/2753/statuses_page=1.json"}}, "title": "Fix Issue 1011 -- DARTUniversalJoint", "close_source_branch": false, "reviewers": [], "id": 2753, "destination": {"commit": {"hash": "6dd3ea7938b7", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/6dd3ea7938b7.json"}, "html": {"href": "#!/osrf/gazebo/commits/6dd3ea7938b7"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2017-07-19T19:24:28.764098+00:00", "summary": {"raw": "This pull request fixes issue #1011 and cleans up large parts of the physics/dart implementation. I apologize for the large size of the diff, but most of it is just wiping away redundant function implementations and centralizing them into DARTJoint.\r\n\r\nThe actual problem that caused issue #1011 was only tangentially related to the Universal Joint. The ``UniversalJointForce`` test runs through a set of loops where each loop aims to test the internal consistency of the Universal Joint behavior with a model that contains two universal joints in sequence. The very last test was failing because the loop before it assumed that the joint positions of the two universal joints were being driven to all zero position and velocity, because it clamped the lower and upper position limits to zero. However, DART does not behave like this (by design). In DART, when a position limit is violated, it simply prevents the joint from moving any further in that direction (and computes the joint forces necessary to ensure this); it does not drive the joint position back to the limit value. Therefore, since the initial joint position was outside of the limits, DART did not drive it down to zero as the test was expecting.\r\n\r\nOn another note, the final test loop was a little bit ill-conceived. It assumed that the sum of the universal joint angles for each component could be summed to get the Euler angles of the final link's world-frame rotation. This would only be true if each joint has only one non-zero position component and the axes of those non-zero position components are parallel to each other. I tweaked the test to reflect these conditions.", "markup": "markdown", "html": "<p>This pull request fixes issue <a href=\"#!/osrf/gazebo/issues/1011/dartuniversaljoint-has-failing-tests\" rel=\"nofollow\" title=\"DARTUniversalJoint has failing tests\" class=\"ap-connect-link\"><s>#1011</s></a> and cleans up large parts of the physics/dart implementation. I apologize for the large size of the diff, but most of it is just wiping away redundant function implementations and centralizing them into DARTJoint.</p>\n<p>The actual problem that caused issue <a href=\"#!/osrf/gazebo/issues/1011/dartuniversaljoint-has-failing-tests\" rel=\"nofollow\" title=\"DARTUniversalJoint has failing tests\" class=\"ap-connect-link\"><s>#1011</s></a> was only tangentially related to the Universal Joint. The <code>UniversalJointForce</code> test runs through a set of loops where each loop aims to test the internal consistency of the Universal Joint behavior with a model that contains two universal joints in sequence. The very last test was failing because the loop before it assumed that the joint positions of the two universal joints were being driven to all zero position and velocity, because it clamped the lower and upper position limits to zero. However, DART does not behave like this (by design). In DART, when a position limit is violated, it simply prevents the joint from moving any further in that direction (and computes the joint forces necessary to ensure this); it does not drive the joint position back to the limit value. Therefore, since the initial joint position was outside of the limits, DART did not drive it down to zero as the test was expecting.</p>\n<p>On another note, the final test loop was a little bit ill-conceived. It assumed that the sum of the universal joint angles for each component could be summed to get the Euler angles of the final link's world-frame rotation. This would only be true if each joint has only one non-zero position component and the axes of those non-zero position components are parallel to each other. I tweaked the test to reflect these conditions.</p>", "type": "rendered"}, "source": {"commit": {"hash": "c46b196e84ba", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mxgrey/gazebo/commit/c46b196e84ba"}, "html": {"href": "https://bitbucket.org/mxgrey/gazebo/commits/c46b196e84ba"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/mxgrey/gazebo"}, "html": {"href": "https://bitbucket.org/mxgrey/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{db441b9a-5483-4728-b3af-1135ccc99e42}ts=c_plus_plus"}}, "type": "repository", "name": "gazebo", "full_name": "mxgrey/gazebo", "uuid": "{db441b9a-5483-4728-b3af-1135ccc99e42}"}, "branch": {"name": "Issue_1011_DARTUniversalJoint"}}, "comment_count": 45, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-08-18T00:43:28.640483+00:00", "type": "participant", "approved": true, "user": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}}, {"role": "PARTICIPANT", "participated_on": "2017-08-18T00:49:31.793336+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2017-08-17T21:37:05.985699+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "", "updated_on": "2017-08-18T00:54:37.742879+00:00", "author": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "merge_commit": {"hash": "bb8abcd6ee11", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/bb8abcd6ee11.json"}, "html": {"href": "#!/osrf/gazebo/commits/bb8abcd6ee11"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}