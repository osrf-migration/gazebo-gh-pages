{"rendered": {"description": {"raw": "This is a fix for [issue 1303](#!/osrf/gazebo/issue/1303/keyeventhandler-addreleasefilter-does-not). When using common::KeyEvent and gui::KeyEventHandler, there was no built-in way to detect when shift was being pressed to produce an uppercase letter. This pull request adds a \"text\" field to KeyEvent which stores the Unicode character produced by a key press event. It is found by simply storing the text field of the QKeyEvent which generates the Gazebo Key Event (see [QT Documentation](http://qt-project.org/doc/qt-4.8/qkeyevent.html#text)).\r\n\r\nTo test this pull request, add the following line to the constructor of a GUI plugin:\r\n\r\n\r\n```\r\n#!c++\r\n\r\n  gui::KeyEventHandler::Instance()->AddPressFilter(\"gui_example\",\r\n    boost::bind(&GUIExampleWidget::OnKeyPress, this, _1));\r\n```\r\n\r\n\r\nWrite the OnKeyPress function to show you the fields of the KeyEvent:\r\n\r\n```\r\n#!c++\r\n\r\n\r\nbool GUIExampleWidget::OnKeyPress(common::KeyEvent _event){\r\n  std::cout << \"event.key: \" << _event.key << std::endl;\r\n  std::cout << \"event.text: \" << _event.text << std::endl;\r\n}\r\n\r\n```\r\nevent.key will show you the decimal value of the corresponding ascii value while text will give you the unicode string. However, the event.key field will be the same for an uppercase and lowercase letter. For example, 'a' and 'SHIFT-a' will both give a key field of 65, but the text field will read 'a' for the first case and 'A' for the second case.", "markup": "markdown", "html": "<p>This is a fix for <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issue/1303/keyeventhandler-addreleasefilter-does-not\" rel=\"nofollow\">issue 1303</a>. When using common::KeyEvent and gui::KeyEventHandler, there was no built-in way to detect when shift was being pressed to produce an uppercase letter. This pull request adds a \"text\" field to KeyEvent which stores the Unicode character produced by a key press event. It is found by simply storing the text field of the QKeyEvent which generates the Gazebo Key Event (see <a data-is-external-link=\"true\" href=\"http://qt-project.org/doc/qt-4.8/qkeyevent.html#text\" rel=\"nofollow\">QT Documentation</a>).</p>\n<p>To test this pull request, add the following line to the constructor of a GUI plugin:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"n\">gui</span><span class=\"o\">::</span><span class=\"n\">KeyEventHandler</span><span class=\"o\">::</span><span class=\"n\">Instance</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">AddPressFilter</span><span class=\"p\">(</span><span class=\"s\">&quot;gui_example&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GUIExampleWidget</span><span class=\"o\">::</span><span class=\"n\">OnKeyPress</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>Write the OnKeyPress function to show you the fields of the KeyEvent:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">bool</span> <span class=\"n\">GUIExampleWidget</span><span class=\"o\">::</span><span class=\"n\">OnKeyPress</span><span class=\"p\">(</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">KeyEvent</span> <span class=\"n\">_event</span><span class=\"p\">){</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;event.key: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_event</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;event.text: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_event</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>event.key will show you the decimal value of the corresponding ascii value while text will give you the unicode string. However, the event.key field will be the same for an uppercase and lowercase letter. For example, 'a' and 'SHIFT-a' will both give a key field of 65, but the text field will read 'a' for the first case and 'A' for the second case.</p>", "type": "rendered"}, "title": {"raw": "Added text field to common::KeyEvent", "markup": "markdown", "html": "<p>Added text field to common::KeyEvent</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is a fix for [issue 1303](#!/osrf/gazebo/issue/1303/keyeventhandler-addreleasefilter-does-not). When using common::KeyEvent and gui::KeyEventHandler, there was no built-in way to detect when shift was being pressed to produce an uppercase letter. This pull request adds a \"text\" field to KeyEvent which stores the Unicode character produced by a key press event. It is found by simply storing the text field of the QKeyEvent which generates the Gazebo Key Event (see [QT Documentation](http://qt-project.org/doc/qt-4.8/qkeyevent.html#text)).\r\n\r\nTo test this pull request, add the following line to the constructor of a GUI plugin:\r\n\r\n\r\n```\r\n#!c++\r\n\r\n  gui::KeyEventHandler::Instance()->AddPressFilter(\"gui_example\",\r\n    boost::bind(&GUIExampleWidget::OnKeyPress, this, _1));\r\n```\r\n\r\n\r\nWrite the OnKeyPress function to show you the fields of the KeyEvent:\r\n\r\n```\r\n#!c++\r\n\r\n\r\nbool GUIExampleWidget::OnKeyPress(common::KeyEvent _event){\r\n  std::cout << \"event.key: \" << _event.key << std::endl;\r\n  std::cout << \"event.text: \" << _event.text << std::endl;\r\n}\r\n\r\n```\r\nevent.key will show you the decimal value of the corresponding ascii value while text will give you the unicode string. However, the event.key field will be the same for an uppercase and lowercase letter. For example, 'a' and 'SHIFT-a' will both give a key field of 65, but the text field will read 'a' for the first case and 'A' for the second case.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1234/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:45b20b079f1e%0D156b23889547?from_pullrequest_id=1234"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/1234/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/1234.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/1234/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1234/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1234"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/1234/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:45b20b079f1e%0D156b23889547?from_pullrequest_id=1234"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/1234/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/1234/statuses_page=1.json"}}, "title": "Added text field to common::KeyEvent", "close_source_branch": true, "reviewers": [], "id": 1234, "destination": {"commit": {"hash": "156b23889547", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/156b23889547.json"}, "html": {"href": "#!/osrf/gazebo/commits/156b23889547"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2014-10-16T23:33:44.991664+00:00", "summary": {"raw": "This is a fix for [issue 1303](#!/osrf/gazebo/issue/1303/keyeventhandler-addreleasefilter-does-not). When using common::KeyEvent and gui::KeyEventHandler, there was no built-in way to detect when shift was being pressed to produce an uppercase letter. This pull request adds a \"text\" field to KeyEvent which stores the Unicode character produced by a key press event. It is found by simply storing the text field of the QKeyEvent which generates the Gazebo Key Event (see [QT Documentation](http://qt-project.org/doc/qt-4.8/qkeyevent.html#text)).\r\n\r\nTo test this pull request, add the following line to the constructor of a GUI plugin:\r\n\r\n\r\n```\r\n#!c++\r\n\r\n  gui::KeyEventHandler::Instance()->AddPressFilter(\"gui_example\",\r\n    boost::bind(&GUIExampleWidget::OnKeyPress, this, _1));\r\n```\r\n\r\n\r\nWrite the OnKeyPress function to show you the fields of the KeyEvent:\r\n\r\n```\r\n#!c++\r\n\r\n\r\nbool GUIExampleWidget::OnKeyPress(common::KeyEvent _event){\r\n  std::cout << \"event.key: \" << _event.key << std::endl;\r\n  std::cout << \"event.text: \" << _event.text << std::endl;\r\n}\r\n\r\n```\r\nevent.key will show you the decimal value of the corresponding ascii value while text will give you the unicode string. However, the event.key field will be the same for an uppercase and lowercase letter. For example, 'a' and 'SHIFT-a' will both give a key field of 65, but the text field will read 'a' for the first case and 'A' for the second case.", "markup": "markdown", "html": "<p>This is a fix for <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issue/1303/keyeventhandler-addreleasefilter-does-not\" rel=\"nofollow\">issue 1303</a>. When using common::KeyEvent and gui::KeyEventHandler, there was no built-in way to detect when shift was being pressed to produce an uppercase letter. This pull request adds a \"text\" field to KeyEvent which stores the Unicode character produced by a key press event. It is found by simply storing the text field of the QKeyEvent which generates the Gazebo Key Event (see <a data-is-external-link=\"true\" href=\"http://qt-project.org/doc/qt-4.8/qkeyevent.html#text\" rel=\"nofollow\">QT Documentation</a>).</p>\n<p>To test this pull request, add the following line to the constructor of a GUI plugin:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"n\">gui</span><span class=\"o\">::</span><span class=\"n\">KeyEventHandler</span><span class=\"o\">::</span><span class=\"n\">Instance</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">AddPressFilter</span><span class=\"p\">(</span><span class=\"s\">&quot;gui_example&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GUIExampleWidget</span><span class=\"o\">::</span><span class=\"n\">OnKeyPress</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>Write the OnKeyPress function to show you the fields of the KeyEvent:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">bool</span> <span class=\"n\">GUIExampleWidget</span><span class=\"o\">::</span><span class=\"n\">OnKeyPress</span><span class=\"p\">(</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">KeyEvent</span> <span class=\"n\">_event</span><span class=\"p\">){</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;event.key: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_event</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;event.text: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_event</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>event.key will show you the decimal value of the corresponding ascii value while text will give you the unicode string. However, the event.key field will be the same for an uppercase and lowercase letter. For example, 'a' and 'SHIFT-a' will both give a key field of 65, but the text field will read 'a' for the first case and 'A' for the second case.</p>", "type": "rendered"}, "source": {"commit": {"hash": "a248fc0596b7", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/a248fc0596b7.json"}, "html": {"href": "#!/osrf/gazebo/commits/a248fc0596b7"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "keyevent_lowercase"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2014-10-16T23:50:36.481138+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2014-10-17T23:54:47.037357+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2014-10-18T00:02:51.261790+00:00", "author": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "merge_commit": {"hash": "45b20b079f1e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/45b20b079f1e.json"}, "html": {"href": "#!/osrf/gazebo/commits/45b20b079f1e"}}}, "closed_by": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}}