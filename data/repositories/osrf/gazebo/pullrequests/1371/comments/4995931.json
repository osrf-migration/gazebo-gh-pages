{"links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1371/comments/4995931.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:None..None?path=plugins%2FActuatorPlugin.hh"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1371/_/diff#comment-4995931"}}, "parent": {"id": 4977530, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1371/comments/4977530.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1371/_/diff#comment-4977530"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1371, "links": {"self": {"href": "data/repositories/osrf/gazebo/pullrequests/1371.json"}, "html": {"href": "#!/osrf/gazebo/pull-requests/1371"}}, "title": "Actuator plugin (torque-speed curve for joints)"}, "content": {"raw": "right.... I have been thinking about how to redesign this because I don't love how it works right now.\n```\nclass Actuator\n{\n  // properties\n  float power;\n  float maxVelocity;\n\n  // commanded state\n  float velocity;\n\n  // actuator model\n  boost::function<float (Actuator* actuator)> modelFunction;\n\n  // the joint we are actuating\n  Joint joint;\n\n  // interface functions\n  // input is torque from joint member\n  // calls a generic function\n  public: void SetCommandedVelocity\n  (\n    // Side effect of the motor model: set joint torque based on outcome\n    float torque = this->modelFunction(this);\n    ...\n  );\n};\n```\n\nBUT that line where I call the model function is kind of terrible. It may be more prudent to take a more OOP approach: make `Actuator` an abstract class, and make the motor model a pure virtual function that gets implemented by subclasses representing different motors.", "markup": "markdown", "html": "<p>right.... I have been thinking about how to redesign this because I don't love how it works right now.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">class</span> <span class=\"nx\">Actuator</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// properties</span>\n  <span class=\"kr\">float</span> <span class=\"nx\">power</span><span class=\"p\">;</span>\n  <span class=\"kr\">float</span> <span class=\"nx\">maxVelocity</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// commanded state</span>\n  <span class=\"kr\">float</span> <span class=\"nx\">velocity</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// actuator model</span>\n  <span class=\"nx\">boost</span><span class=\"o\">::</span><span class=\"kd\">function</span><span class=\"o\">&lt;</span><span class=\"kr\">float</span> <span class=\"p\">(</span><span class=\"nx\">Actuator</span><span class=\"o\">*</span> <span class=\"nx\">actuator</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"nx\">modelFunction</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// the joint we are actuating</span>\n  <span class=\"nx\">Joint</span> <span class=\"nx\">joint</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// interface functions</span>\n  <span class=\"c1\">// input is torque from joint member</span>\n  <span class=\"c1\">// calls a generic function</span>\n  <span class=\"kr\">public</span><span class=\"o\">:</span> <span class=\"k\">void</span> <span class=\"nx\">SetCommandedVelocity</span>\n  <span class=\"p\">(</span>\n    <span class=\"c1\">// Side effect of the motor model: set joint torque based on outcome</span>\n    <span class=\"kr\">float</span> <span class=\"nx\">torque</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"nx\">modelFunction</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n    <span class=\"p\">...</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>BUT that line where I call the model function is kind of terrible. It may be more prudent to take a more OOP approach: make <code>Actuator</code> an abstract class, and make the motor model a pure virtual function that gets implemented by subclasses representing different motors.</p>", "type": "rendered"}, "created_on": "2015-02-05T19:17:44.974553+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "inline": {"to": null, "from": null, "outdated": false, "path": "plugins/ActuatorPlugin.hh"}, "updated_on": "2015-02-05T19:17:44.983377+00:00", "type": "pullrequest_comment", "id": 4995931}