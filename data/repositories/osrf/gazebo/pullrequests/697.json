{"rendered": {"description": {"raw": "This is a re-try of pull request #672 that uses some fancy gtest syntax to allow for multiple parameters to tests (issue #820). Using multiple parameters requires use of the `std::tr1::tuple` datatype. For example, two strings can be represented by a tuple and accessed as:\r\n~~~\r\ntypedef std::tr1::tuple<std::string, std::string> std_string2;\r\nstd_string2 param;\r\nstd_string string1 string2;\r\nstd::tr1::tie(string1, string2) = param;\r\n~~~\r\nThen you can use the gtest `Combine` function (see `Joint_TEST.cc`) to run tests against all combinations of lists of parameters (aka [Cartesian product](http://en.wikipedia.org/wiki/Cartesian_product)).\r\n\r\nI did all that in order to add some joint tests, which required fixing some bullet joints. I also refactored helper_physics_generator based on the syntax of the `Combine` function.", "markup": "markdown", "html": "<p>This is a re-try of <a href=\"#!/osrf/gazebo/pull-requests/672/add-test-for-rotational-joints-fix-some\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #672</a> that uses some fancy gtest syntax to allow for multiple parameters to tests (issue <a href=\"#!/osrf/gazebo/issues/820/multi-parameter-unit-tests\" rel=\"nofollow\" title=\"Multi-parameter unit tests\" class=\"ap-connect-link\"><s>#820</s></a>). Using multiple parameters requires use of the <code>std::tr1::tuple</code> datatype. For example, two strings can be represented by a tuple and accessed as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">typedef</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">tr1</span><span class=\"p\">::</span><span class=\"nd\">tuple</span><span class=\"o\">&lt;</span><span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span><span class=\"o\">,</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span><span class=\"o\">&gt;</span> <span class=\"nt\">std_string2</span><span class=\"o\">;</span>\n<span class=\"nt\">std_string2</span> <span class=\"nt\">param</span><span class=\"o\">;</span>\n<span class=\"nt\">std_string</span> <span class=\"nt\">string1</span> <span class=\"nt\">string2</span><span class=\"o\">;</span>\n<span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">tr1</span><span class=\"p\">::</span><span class=\"nd\">tie</span><span class=\"o\">(</span><span class=\"nt\">string1</span><span class=\"o\">,</span> <span class=\"nt\">string2</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"nt\">param</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<p>Then you can use the gtest <code>Combine</code> function (see <code>Joint_TEST.cc</code>) to run tests against all combinations of lists of parameters (aka <a data-is-external-link=\"true\" href=\"http://en.wikipedia.org/wiki/Cartesian_product\" rel=\"nofollow\">Cartesian product</a>).</p>\n<p>I did all that in order to add some joint tests, which required fixing some bullet joints. I also refactored helper_physics_generator based on the syntax of the <code>Combine</code> function.</p>", "type": "rendered"}, "title": {"raw": "Add test for rotational joints, fix some bullet joints, #820", "markup": "markdown", "html": "<p>Add test for rotational joints, fix some bullet joints, <a href=\"#!/osrf/gazebo/issues/820/multi-parameter-unit-tests\" rel=\"nofollow\" title=\"Multi-parameter unit tests\" class=\"ap-connect-link\"><s>#820</s></a></p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is a re-try of pull request #672 that uses some fancy gtest syntax to allow for multiple parameters to tests (issue #820). Using multiple parameters requires use of the `std::tr1::tuple` datatype. For example, two strings can be represented by a tuple and accessed as:\r\n~~~\r\ntypedef std::tr1::tuple<std::string, std::string> std_string2;\r\nstd_string2 param;\r\nstd_string string1 string2;\r\nstd::tr1::tie(string1, string2) = param;\r\n~~~\r\nThen you can use the gtest `Combine` function (see `Joint_TEST.cc`) to run tests against all combinations of lists of parameters (aka [Cartesian product](http://en.wikipedia.org/wiki/Cartesian_product)).\r\n\r\nI did all that in order to add some joint tests, which required fixing some bullet joints. I also refactored helper_physics_generator based on the syntax of the `Combine` function.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/697/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diffstat/osrf/gazebo:3ce55d2bcf71%0D458414b4ee96?from_pullrequest_id=697"}, "commits": {"href": "data/repositories/osrf/gazebo/pullrequests/697/commits.json"}, "self": {"href": "data/repositories/osrf/gazebo/pullrequests/697.json"}, "comments": {"href": "data/repositories/osrf/gazebo/pullrequests/697/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/697/merge"}, "html": {"href": "#!/osrf/gazebo/pull-requests/697"}, "activity": {"href": "data/repositories/osrf/gazebo/pullrequests/697/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/diff/osrf/gazebo:3ce55d2bcf71%0D458414b4ee96?from_pullrequest_id=697"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/pullrequests/697/approve"}, "statuses": {"href": "data/repositories/osrf/gazebo/pullrequests/697/statuses_page=1.json"}}, "title": "Add test for rotational joints, fix some bullet joints, #820", "close_source_branch": true, "reviewers": [], "id": 697, "destination": {"commit": {"hash": "458414b4ee96", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/458414b4ee96.json"}, "html": {"href": "#!/osrf/gazebo/commits/458414b4ee96"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "default"}}, "created_on": "2013-09-06T07:55:23.549447+00:00", "summary": {"raw": "This is a re-try of pull request #672 that uses some fancy gtest syntax to allow for multiple parameters to tests (issue #820). Using multiple parameters requires use of the `std::tr1::tuple` datatype. For example, two strings can be represented by a tuple and accessed as:\r\n~~~\r\ntypedef std::tr1::tuple<std::string, std::string> std_string2;\r\nstd_string2 param;\r\nstd_string string1 string2;\r\nstd::tr1::tie(string1, string2) = param;\r\n~~~\r\nThen you can use the gtest `Combine` function (see `Joint_TEST.cc`) to run tests against all combinations of lists of parameters (aka [Cartesian product](http://en.wikipedia.org/wiki/Cartesian_product)).\r\n\r\nI did all that in order to add some joint tests, which required fixing some bullet joints. I also refactored helper_physics_generator based on the syntax of the `Combine` function.", "markup": "markdown", "html": "<p>This is a re-try of <a href=\"#!/osrf/gazebo/pull-requests/672/add-test-for-rotational-joints-fix-some\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #672</a> that uses some fancy gtest syntax to allow for multiple parameters to tests (issue <a href=\"#!/osrf/gazebo/issues/820/multi-parameter-unit-tests\" rel=\"nofollow\" title=\"Multi-parameter unit tests\" class=\"ap-connect-link\"><s>#820</s></a>). Using multiple parameters requires use of the <code>std::tr1::tuple</code> datatype. For example, two strings can be represented by a tuple and accessed as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">typedef</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">tr1</span><span class=\"p\">::</span><span class=\"nd\">tuple</span><span class=\"o\">&lt;</span><span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span><span class=\"o\">,</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span><span class=\"o\">&gt;</span> <span class=\"nt\">std_string2</span><span class=\"o\">;</span>\n<span class=\"nt\">std_string2</span> <span class=\"nt\">param</span><span class=\"o\">;</span>\n<span class=\"nt\">std_string</span> <span class=\"nt\">string1</span> <span class=\"nt\">string2</span><span class=\"o\">;</span>\n<span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">tr1</span><span class=\"p\">::</span><span class=\"nd\">tie</span><span class=\"o\">(</span><span class=\"nt\">string1</span><span class=\"o\">,</span> <span class=\"nt\">string2</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"nt\">param</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<p>Then you can use the gtest <code>Combine</code> function (see <code>Joint_TEST.cc</code>) to run tests against all combinations of lists of parameters (aka <a data-is-external-link=\"true\" href=\"http://en.wikipedia.org/wiki/Cartesian_product\" rel=\"nofollow\">Cartesian product</a>).</p>\n<p>I did all that in order to add some joint tests, which required fixing some bullet joints. I also refactored helper_physics_generator based on the syntax of the <code>Combine</code> function.</p>", "type": "rendered"}, "source": {"commit": {"hash": "63cc07b1f9ca", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/63cc07b1f9ca.json"}, "html": {"href": "#!/osrf/gazebo/commits/63cc07b1f9ca"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "branch": {"name": "issue_820"}}, "comment_count": 20, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2013-09-09T21:53:27.113526+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2013-09-06T23:30:03.694165+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2013-09-09T20:47:49.985934+00:00", "type": "participant", "approved": true, "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}}], "reason": "", "updated_on": "2013-09-09T21:55:15.495994+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "3ce55d2bcf71", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/gazebo/commit/3ce55d2bcf71.json"}, "html": {"href": "#!/osrf/gazebo/commits/3ce55d2bcf71"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}