{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/3/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/3/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/3/raysensor-race-condition"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/3/vote"}}, "reporter": {"display_name": "jagielka", "uuid": "{7dafa645-28d9-4717-b25b-1ae0eebf1aaa}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7dafa645-28d9-4717-b25b-1ae0eebf1aaa%7D"}, "html": {"href": "https://bitbucket.org/%7B7dafa645-28d9-4717-b25b-1ae0eebf1aaa%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jagielka/avatar/"}}, "nickname": "jagielka", "type": "user", "account_id": null}, "title": "RaySensor race condition", "component": null, "votes": 0, "watches": 2, "content": {"raw": "When using <sensor:ray name=\"laser\"> and update rate is quite short you receive lots of warnings:\r\n\r\n  Warning [RaySensor.cc:206] ranges not constructed yet (zero sized)\r\n\r\nQuick solution for this issue is to move the locking mechanism before reading laserMsg.ranges in function RaySensor::GetRange\r\n\r\n{{{\r\n#!c++\r\ndouble RaySensor::GetRange(int _index)\r\n{\r\n  boost::mutex::scoped_lock(*this->mutex);\r\n\r\n  if (this->laserMsg.ranges_size() == 0)\r\n  {\r\n    gzwarn << \"ranges not constructed yet (zero sized)\\n\";\r\n    return 0.0;\r\n  }\r\n  if (_index < 0 || _index >= this->laserMsg.ranges_size())\r\n  {\r\n    gzerr << \"Invalid range index[\" << _index << \"]\\n\";\r\n    return 0.0;\r\n  }\r\n\r\n  // Move locking mechanism to the beginning of the function\r\n  // boost::mutex::scoped_lock(*this->mutex);\r\n  return this->laserMsg.ranges(_index);\r\n}\r\n\r\n}}}", "markup": "markdown", "html": "<p>When using &lt;sensor:ray name=\"laser\"&gt; and update rate is quite short you receive lots of warnings:</p>\n<p>Warning [RaySensor.cc:206] ranges not constructed yet (zero sized)</p>\n<p>Quick solution for this issue is to move the locking mechanism before reading laserMsg.ranges in function RaySensor::GetRange</p>\n<p>{{{\n#!c++\ndouble RaySensor::GetRange(int _index)\n{\n  boost::mutex::scoped_lock(*this-&gt;mutex);</p>\n<p>if (this-&gt;laserMsg.ranges_size() == 0)\n  {\n    gzwarn &lt;&lt; \"ranges not constructed yet (zero sized)\\n\";\n    return 0.0;\n  }\n  if (_index &lt; 0 || _index &gt;= this-&gt;laserMsg.ranges_size())\n  {\n    gzerr &lt;&lt; \"Invalid range index[\" &lt;&lt; _index &lt;&lt; \"]\\n\";\n    return 0.0;\n  }</p>\n<p>// Move locking mechanism to the beginning of the function\n  // boost::mutex::scoped_lock(*this-&gt;mutex);\n  return this-&gt;laserMsg.ranges(_index);\n}</p>\n<p>}}}</p>", "type": "rendered"}, "assignee": null, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2012-07-13T18:27:42.577022+00:00", "milestone": null, "updated_on": "2016-09-14T19:45:11.753214+00:00", "type": "issue", "id": 3}