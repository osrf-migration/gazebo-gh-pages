{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/193/comments/14062585.json"}, "html": {"href": "#!/osrf/gazebo/issues/193#comment-14062585"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/193.json"}}, "type": "issue", "id": 193, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Make Gazebo Windows-compatible"}, "content": {"raw": "If `on fire`means patching like a savage, then yes, kind of on fire.\n\nSome other notes: \n\nWe have detected circular dependencies between gazebo libraries. This is working on Linux since the linker does not resolve symbols on linking but on loading, which makes the whole thing to work. Visual Studio is trying to resolve symbols on linking, so ... no luck.\n\nThe workaround is to change all linking to STATIC. We are trying that now. Symbol visibility was implemented until today, at least, for the following libraries: msgs, util, common, math, rendering and physics. The proper way to go to keep things dynamic on linux is probably to modify `gz_add_library` to remove the `SHARED` keyword, leaving nothing. In this case, cmake will depend on the value of `BUILD_SHARED_LIBS`.\n\nI've detected the following problems to be solved in the future:\n\n * `gazebo_physics` is linked against `gazebo_physics_ode`. This should be just the opposite. It is fixed in the code for every physics engine.\n * `gazebo_physics` and `gazebo_sensors` are in a circular dependency.\n\n@gerkey: feel free to add what is missing please.\n\nAt this moment, all libraries should be more or less 'compilable' and we are going for the executables.\n", "markup": "markdown", "html": "<p>If <code>on fire</code>means patching like a savage, then yes, kind of on fire.</p>\n<p>Some other notes: </p>\n<p>We have detected circular dependencies between gazebo libraries. This is working on Linux since the linker does not resolve symbols on linking but on loading, which makes the whole thing to work. Visual Studio is trying to resolve symbols on linking, so ... no luck.</p>\n<p>The workaround is to change all linking to STATIC. We are trying that now. Symbol visibility was implemented until today, at least, for the following libraries: msgs, util, common, math, rendering and physics. The proper way to go to keep things dynamic on linux is probably to modify <code>gz_add_library</code> to remove the <code>SHARED</code> keyword, leaving nothing. In this case, cmake will depend on the value of <code>BUILD_SHARED_LIBS</code>.</p>\n<p>I've detected the following problems to be solved in the future:</p>\n<ul>\n<li><code>gazebo_physics</code> is linked against <code>gazebo_physics_ode</code>. This should be just the opposite. It is fixed in the code for every physics engine.</li>\n<li><code>gazebo_physics</code> and <code>gazebo_sensors</code> are in a circular dependency.</li>\n</ul>\n<p>@gerkey: feel free to add what is missing please.</p>\n<p>At this moment, all libraries should be more or less 'compilable' and we are going for the executables.</p>", "type": "rendered"}, "created_on": "2014-12-03T23:19:25.171019+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": "2014-12-03T23:29:20.904629+00:00", "type": "issue_comment", "id": 14062585}