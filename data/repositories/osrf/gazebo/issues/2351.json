{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2351/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2351.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2351/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2351/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2351/gazebo-issues-on-windows-subsystem-for"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2351/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "Gazebo issues on Windows Subsystem for Linux (WSL)", "component": null, "votes": 0, "watches": 2, "content": {"raw": "I recently discover that a few users of `gazebo-yarp-plugins` are using Gazebo on WSL (a.k.a. Ubuntu on Windows, https://msdn.microsoft.com/en-us/commandline/wsl/about ). \r\nSee #!/osrf/gazebo_tutorials/pull-requests/364/tutorial-for-installing-on-ubuntu-on/diff for a tutorial on how to run Gazebo on WSL. \r\n\r\nFor middleware that support Windows such as YARP, this is an interesting alternative to get Gazebo running on Windows, because it permits to have just the minimum amount of Gazebo-related code running under WSL, while the rest of the software can run on the actual Windows system, communicating with WSL-processes using regular network sockets. \r\n\r\nHowever, I noticed some WSL-specific problem in Gazebo, that I think it is worth reporting (even if most of them are actually WSL bugs).\r\n\r\n# Error setting socket option (IP_MULTICAST_IF)\r\nRelated WSL issue: https://github.com/Microsoft/BashOnWindows/issues/990 \r\n\r\n## Problem\r\nAll code using ignition-transport (including Gazebo 8 and 9) fails on the regular WSL with the following error:\r\n~~~\r\nError setting socket option (IP_MULTICAST_IF).\r\nError setting socket option (IP_MULTICAST_IF).\r\nDid you set the environment variable IGN_IP with a correct IP address?\r\n  [192.168.1.100] seems an invalid local IP address.\r\n  Using 127.0.0.1 as hostname.\r\nterminate called after throwing an instance of 'std::out_of_range'\r\n  what():  vector::_M_range_check: __n (which is 0) >= this->size() (which is 0)\r\nAborted (core dumped)\r\n~~~\r\nThis is due to the fact that the `IP_MULTICAST_IF` socket option is not supported in the released version of WSL, and support for it have been introduced only in Windows build `16176` ( https://github.com/Microsoft/BashOnWindows/issues/990 ) that is currently only available if you use the \"Insider\" version of Windows.\r\n\r\n## Possible solutions\r\nI am not an expert of the schedule of Windows update, but I think waiting for the fix to be released is the easiest option. People interested in running the latest version of Gazebo in the meanwhile can update to the \"Insider\" version of Windows.\r\n\r\n# clock_nanosleep with clockid CLOCK_REALTIME fails with error EINVAL\r\nRelated WSL issue: https://github.com/Microsoft/BashOnWindows/issues/2503\r\n\r\nRelated Gazebo issue: #!/osrf/gazebo/issues/2058/use-clock_monotonic-in-sleep-and-timer\r\n\r\n## Problem\r\nBoth the `gazebo::common::Time::Sleep(...)` and `ign::common::Time::Sleep(...)` methods use the system call `clock_nanosleep(CLOCK_REALTIME, ... )` to sleep the current thread. However, clock_nanosleep in WSL works only with the clock `CLOCK_MONOTONIC`.  I opened an issue for this on WSL issue tracker https://github.com/Microsoft/BashOnWindows/issues/2503 , but I don't it will be solved anytime soon. \r\n\r\n## Possible solutions\r\n~~One possible solution is to check if `clock_nanosleep(CLOCK_REALTIME, ...)` is supported during the Time class initialization, and switch otherwise to use `clock_nanosleep(CLOCK_MONOTONIC, ...)` . A more complicated possible solution is to migrate the Time classes to the new C++11 `<chrono>` functions, that seem to work fine also on WSL (even if I imagine that they are internally implemented using the `clock_nanosleep` system calls.~~\r\nApparently switching to `CLOCK_MONOTONIC` was already planned to avoid problems with system clock reset (see #!/osrf/gazebo/issues/2058/use-clock_monotonic-in-sleep-and-timer) so that would be the easier solution.", "markup": "markdown", "html": "<p>I recently discover that a few users of <code>gazebo-yarp-plugins</code> are using Gazebo on WSL (a.k.a. Ubuntu on Windows, <a href=\"https://msdn.microsoft.com/en-us/commandline/wsl/about\" rel=\"nofollow\" class=\"ap-connect-link\">https://msdn.microsoft.com/en-us/commandline/wsl/about</a> ). \nSee <a href=\"#!/osrf/gazebo_tutorials/pull-requests/364/tutorial-for-installing-on-ubuntu-on/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo_tutorials/pull-requests/364/tutorial-for-installing-on-ubuntu-on/diff</a> for a tutorial on how to run Gazebo on WSL. </p>\n<p>For middleware that support Windows such as YARP, this is an interesting alternative to get Gazebo running on Windows, because it permits to have just the minimum amount of Gazebo-related code running under WSL, while the rest of the software can run on the actual Windows system, communicating with WSL-processes using regular network sockets. </p>\n<p>However, I noticed some WSL-specific problem in Gazebo, that I think it is worth reporting (even if most of them are actually WSL bugs).</p>\n<h1 id=\"markdown-header-error-setting-socket-option-ip_multicast_if\">Error setting socket option (IP_MULTICAST_IF)</h1>\n<p>Related WSL issue: <a href=\"https://github.com/Microsoft/BashOnWindows/issues/990\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/Microsoft/BashOnWindows/issues/990</a> </p>\n<h2 id=\"markdown-header-problem\">Problem</h2>\n<p>All code using ignition-transport (including Gazebo 8 and 9) fails on the regular WSL with the following error:</p>\n<div class=\"codehilite\"><pre><span></span>Error setting socket option (IP_MULTICAST_IF).\nError setting socket option (IP_MULTICAST_IF).\nDid you set the environment variable IGN_IP with a correct IP address?\n  [192.168.1.100] seems an invalid local IP address.\n  Using 127.0.0.1 as hostname.\nterminate called after throwing an instance of &#39;std::out_of_range&#39;\n  what():  vector::_M_range_check: __n (which is 0) &gt;= this-&gt;size() (which is 0)\nAborted (core dumped)\n</pre></div>\n\n\n<p>This is due to the fact that the <code>IP_MULTICAST_IF</code> socket option is not supported in the released version of WSL, and support for it have been introduced only in Windows build <code>16176</code> ( <a href=\"https://github.com/Microsoft/BashOnWindows/issues/990\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/Microsoft/BashOnWindows/issues/990</a> ) that is currently only available if you use the \"Insider\" version of Windows.</p>\n<h2 id=\"markdown-header-possible-solutions\">Possible solutions</h2>\n<p>I am not an expert of the schedule of Windows update, but I think waiting for the fix to be released is the easiest option. People interested in running the latest version of Gazebo in the meanwhile can update to the \"Insider\" version of Windows.</p>\n<h1 id=\"markdown-header-clock_nanosleep-with-clockid-clock_realtime-fails-with-error-einval\">clock_nanosleep with clockid CLOCK_REALTIME fails with error EINVAL</h1>\n<p>Related WSL issue: <a href=\"https://github.com/Microsoft/BashOnWindows/issues/2503\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/Microsoft/BashOnWindows/issues/2503</a></p>\n<p>Related Gazebo issue: <a href=\"#!/osrf/gazebo/issues/2058/use-clock_monotonic-in-sleep-and-timer\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/issues/2058/use-clock_monotonic-in-sleep-and-timer</a></p>\n<h2 id=\"markdown-header-problem_1\">Problem</h2>\n<p>Both the <code>gazebo::common::Time::Sleep(...)</code> and <code>ign::common::Time::Sleep(...)</code> methods use the system call <code>clock_nanosleep(CLOCK_REALTIME, ... )</code> to sleep the current thread. However, clock_nanosleep in WSL works only with the clock <code>CLOCK_MONOTONIC</code>.  I opened an issue for this on WSL issue tracker <a href=\"https://github.com/Microsoft/BashOnWindows/issues/2503\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/Microsoft/BashOnWindows/issues/2503</a> , but I don't it will be solved anytime soon. </p>\n<h2 id=\"markdown-header-possible-solutions_1\">Possible solutions</h2>\n<p><del>One possible solution is to check if <code>clock_nanosleep(CLOCK_REALTIME, ...)</code> is supported during the Time class initialization, and switch otherwise to use <code>clock_nanosleep(CLOCK_MONOTONIC, ...)</code> . A more complicated possible solution is to migrate the Time classes to the new C++11 <code>&lt;chrono&gt;</code> functions, that seem to work fine also on WSL (even if I imagine that they are internally implemented using the <code>clock_nanosleep</code> system calls.</del>\nApparently switching to <code>CLOCK_MONOTONIC</code> was already planned to avoid problems with system clock reset (see <a href=\"#!/osrf/gazebo/issues/2058/use-clock_monotonic-in-sleep-and-timer\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/issues/2058/use-clock_monotonic-in-sleep-and-timer</a>) so that would be the easier solution.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-09-23T15:53:28.862772+00:00", "milestone": null, "updated_on": "2020-02-28T08:39:11.768482+00:00", "type": "issue", "id": 2351}