{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2237/comments/38193340.json"}, "html": {"href": "#!/osrf/gazebo/issues/2237#comment-38193340"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2237.json"}}, "type": "issue", "id": 2237, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Enable self-collision functionality of DART engine"}, "content": {"raw": "The [some_collide](#!/osrf/gazebo/src/0d39ebf2b92ba1833f83ea14df668b50f89b5017/test/worlds/model_self_collide.world?at=default&fileviewer=file-view-default#model_self_collide.world-102) model appears to be the trickiest one in the `ModelSelfCollide` test. Self-collision is enanable for the `some_collide` model but then disabled for two of its three links. The test expects the disabled links to not collide with each other but to collide with the self-collision-enabled link.\n\nDART does not check for collisions between pairs of bodies if [either one is not collidable](https://github.com/dartsim/dart/blob/master/dart/collision/CollisionFilter.cpp#L58). This appears to be consistent with the [code](#!/osrf/gazebo/src/45f77842932c95d747d2f20df98aed613792b295/gazebo/physics/dart/DARTLink.cc?at=default&fileviewer=file-view-default#DARTLink.cc-750) disable in the PR but differs from the behavior expected in the `ModelSelfCollide` test. The latter behavior matches the [sdformat spec](http://sdformat.org/spec?ver=1.6&elem=link#link_self_collide), so perhaps a custom collision filter is needed? Also, wouldn't using `BodyNode::setCollidable()` affect collision checking between models/skeletons as well as self-collision checking within them?", "markup": "markdown", "html": "<p>The <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/0d39ebf2b92ba1833f83ea14df668b50f89b5017/test/worlds/model_self_collide.world?at=default&amp;fileviewer=file-view-default#model_self_collide.world-102\" rel=\"nofollow\">some_collide</a> model appears to be the trickiest one in the <code>ModelSelfCollide</code> test. Self-collision is enanable for the <code>some_collide</code> model but then disabled for two of its three links. The test expects the disabled links to not collide with each other but to collide with the self-collision-enabled link.</p>\n<p>DART does not check for collisions between pairs of bodies if <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/blob/master/dart/collision/CollisionFilter.cpp#L58\" rel=\"nofollow\">either one is not collidable</a>. This appears to be consistent with the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/45f77842932c95d747d2f20df98aed613792b295/gazebo/physics/dart/DARTLink.cc?at=default&amp;fileviewer=file-view-default#DARTLink.cc-750\" rel=\"nofollow\">code</a> disable in the PR but differs from the behavior expected in the <code>ModelSelfCollide</code> test. The latter behavior matches the <a data-is-external-link=\"true\" href=\"http://sdformat.org/spec?ver=1.6&amp;elem=link#link_self_collide\" rel=\"nofollow\">sdformat spec</a>, so perhaps a custom collision filter is needed? Also, wouldn't using <code>BodyNode::setCollidable()</code> affect collision checking between models/skeletons as well as self-collision checking within them?</p>", "type": "rendered"}, "created_on": "2017-07-12T22:55:42.396938+00:00", "user": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}, "updated_on": "2017-07-12T22:57:02.598447+00:00", "type": "issue_comment", "id": 38193340}