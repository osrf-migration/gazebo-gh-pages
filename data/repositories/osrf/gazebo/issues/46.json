{"priority": "trivial", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/46/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/46.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/46/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/46/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/46/time-class"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/46/vote"}}, "reporter": {"display_name": "Hugo Boyer", "uuid": "{3d87874e-7099-4981-b04f-57f0272faa7d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d87874e-7099-4981-b04f-57f0272faa7d%7D"}, "html": {"href": "https://bitbucket.org/%7B3d87874e-7099-4981-b04f-57f0272faa7d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/21198da8539b599e3633017f5f5f8150d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsHB-6.png"}}, "nickname": "hugomatic", "type": "user", "account_id": "557058:869c02bb-b246-4cdc-9db3-0064e8add185"}, "title": "Time class", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Has too many operators. \nmultiplication and division operators should only be available for double\n\n    #!c++\n    /////////////////////////////////////////////////\n    const Time &Time::operator *=(const Time &_time)\n    {\n       this->sec *= _time.sec;\n       this->nsec *= _time.nsec;\n       this->Correct();\n       return *this;\n     }\n\nThis is confusing use of multiplication operator. I would expect an implementation that looks like this:\n\n   \n    #!c++\n    const Time &Time::operator *=(const Time &_time)\n    {\n      double t = this->Double() * _time.Double();\n      this->Set(t);\n      return *this;\n    }\n\nalso... why can't GetWallTime return Time instead of a `Time&` ?\n\n    #!c++\n    const Time &Time::GetWallTime()\n\nThis could lead to weird behavior if used like so:\n\n    #!c++\n    const Time& t = Time::GetWallTime();\n    // do something with t.sec ...\n    // t.sec may have changed\n\n", "markup": "markdown", "html": "<p>Has too many operators. \nmultiplication and division operators should only be available for double</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">/////////////////////////////////////////////////</span>\n<span class=\"k\">const</span> <span class=\"n\">Time</span> <span class=\"o\">&amp;</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"k\">operator</span> <span class=\"o\">*=</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Time</span> <span class=\"o\">&amp;</span><span class=\"n\">_time</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n   <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">sec</span> <span class=\"o\">*=</span> <span class=\"n\">_time</span><span class=\"p\">.</span><span class=\"n\">sec</span><span class=\"p\">;</span>\n   <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">nsec</span> <span class=\"o\">*=</span> <span class=\"n\">_time</span><span class=\"p\">.</span><span class=\"n\">nsec</span><span class=\"p\">;</span>\n   <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">Correct</span><span class=\"p\">();</span>\n   <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"k\">this</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This is confusing use of multiplication operator. I would expect an implementation that looks like this:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">const</span> <span class=\"n\">Time</span> <span class=\"o\">&amp;</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"k\">operator</span> <span class=\"o\">*=</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Time</span> <span class=\"o\">&amp;</span><span class=\"n\">_time</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">double</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">Double</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">_time</span><span class=\"p\">.</span><span class=\"n\">Double</span><span class=\"p\">();</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"k\">this</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>also... why can't GetWallTime return Time instead of a <code>Time&amp;</code> ?</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">const</span> <span class=\"n\">Time</span> <span class=\"o\">&amp;</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">GetWallTime</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>This could lead to weird behavior if used like so:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">const</span> <span class=\"n\">Time</span><span class=\"o\">&amp;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">GetWallTime</span><span class=\"p\">();</span>\n<span class=\"c1\">// do something with t.sec ...</span>\n<span class=\"c1\">// t.sec may have changed</span>\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Hugo Boyer", "uuid": "{3d87874e-7099-4981-b04f-57f0272faa7d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d87874e-7099-4981-b04f-57f0272faa7d%7D"}, "html": {"href": "https://bitbucket.org/%7B3d87874e-7099-4981-b04f-57f0272faa7d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/21198da8539b599e3633017f5f5f8150d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsHB-6.png"}}, "nickname": "hugomatic", "type": "user", "account_id": "557058:869c02bb-b246-4cdc-9db3-0064e8add185"}, "state": "invalid", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2012-10-11T00:56:27.757638+00:00", "milestone": null, "updated_on": "2016-09-14T19:21:15.210382+00:00", "type": "issue", "id": 46}