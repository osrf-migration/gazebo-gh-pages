{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/6278721.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-6278721"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "Test disabled in f5037e4 ", "markup": "markdown", "html": "<p>Test disabled in <a href=\"#!/osrf/gazebo/commits/f5037e4\" rel=\"nofollow\" class=\"ap-connect-link\">f5037e4</a> </p>", "type": "rendered"}, "created_on": "2013-09-30T22:05:07.924702+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 6278721}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10713755.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10713755"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "I was just testing this today and it doesn't have the same behavior anymore; it now aborts with a complaint about Nan's. It doesn't complain if you insert the model while paused, but once you try to take a stop it gives the following error message and aborts (also backtrace):\n~~~\nSimTK Exception thrown at AbstractIntegratorRep.cpp:428:\n  Integrator step failed at time 0 apparently because:\nSimTK Exception thrown at MassProperties.h:529:\n  Error detected by Simbody method Inertia::Inertia(SymMat33): Inertia matrix contains a NaN.\n  (Required condition '!isNaN()' was not met.)\n\nWill stop trying now.\nlibc++abi.dylib: terminate called throwing an exception\nProcess 17670 stopped\n* thread #19: tid = 0x14651a, 0x00007fff8bb32212 libsystem_kernel.dylib`__pthread_kill + 10, stop reason = signal SIGABRT\n    frame #0: 0x00007fff8bb32212 libsystem_kernel.dylib`__pthread_kill + 10\nlibsystem_kernel.dylib`__pthread_kill + 10:\n-> 0x7fff8bb32212:  jae    0x7fff8bb32219            ; __pthread_kill + 17\n   0x7fff8bb32214:  jmpq   0x7fff8bb334d4            ; cerror_nocancel\n   0x7fff8bb32219:  ret    \n   0x7fff8bb3221a:  nop    \n(lldb) bt\n* thread #19: tid = 0x14651a, 0x00007fff8bb32212 libsystem_kernel.dylib`__pthread_kill + 10, stop reason = signal SIGABRT\n  * frame #0: 0x00007fff8bb32212 libsystem_kernel.dylib`__pthread_kill + 10\n    frame #1: 0x00007fff8b51fb24 libsystem_c.dylib`pthread_kill + 90\n    frame #2: 0x00007fff8b563f61 libsystem_c.dylib`abort + 143\n    frame #3: 0x00007fff8ac4c9eb libc++abi.dylib`abort_message + 257\n    frame #4: 0x00007fff8ac4a39a libc++abi.dylib`default_terminate() + 28\n    frame #5: 0x00007fff88c86887 libobjc.A.dylib`_objc_terminate() + 111\n    frame #6: 0x00007fff8ac4a3c9 libc++abi.dylib`safe_handler_caller(void (*)()) + 8\n    frame #7: 0x00007fff8ac4a424 libc++abi.dylib`std::terminate() + 16\n    frame #8: 0x00007fff8ac4b58b libc++abi.dylib`__cxa_throw + 111\n    frame #9: 0x0000000102b45b8f libSimTKcommon.3.4.dylib`SimTK::StateImpl::getCacheEntry(SimTK::SubsystemIndex, SimTK::CacheEntryIndex) const + 407\n    frame #10: 0x0000000102105514 libSimTKsimbody.3.4.dylib`SimbodyMatterSubsystemRep::getTreePositionCache(SimTK::State const&) const + 70\n    frame #11: 0x000000010215bd9f libSimTKsimbody.3.4.dylib`SimTK::MobilizedBodyImpl::getBodyTransform(SimTK::State const&) const + 29\n    frame #12: 0x0000000101ff3768 libgazebo_physics_simbody.3.dylib`gazebo::physics::SimbodyPhysics::UpdatePhysics(this=0x000000010efeb670) + 920 at SimbodyPhysics.cc:455\n    frame #13: 0x00000001004a2493 libgazebo_physics.3.dylib`gazebo::physics::World::Update(this=0x0000000105894000) + 483 at World.cc:670\n    frame #14: 0x00000001004a024a libgazebo_physics.3.dylib`gazebo::physics::World::Step(this=0x0000000105894000) + 954 at World.cc:563\n    frame #15: 0x000000010049f728 libgazebo_physics.3.dylib`gazebo::physics::World::RunLoop(this=<unavailable>) + 648 at World.cc:412\n    frame #16: 0x0000000104cd0625 libboost_thread-mt.dylib`boost::(anonymous namespace)::thread_proxy(void*) + 133\n    frame #17: 0x00007fff8b51e772 libsystem_c.dylib`_pthread_start + 327\n(lldb) ^DQuitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] \n~~~\n@sherm1  do you have any recommendations about how to debug this? The model.sdf has valid inertia and works in ODE and bullet.", "markup": "markdown", "html": "<p>I was just testing this today and it doesn't have the same behavior anymore; it now aborts with a complaint about Nan's. It doesn't complain if you insert the model while paused, but once you try to take a stop it gives the following error message and aborts (also backtrace):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">SimTK</span> <span class=\"nt\">Exception</span> <span class=\"nt\">thrown</span> <span class=\"nt\">at</span> <span class=\"nt\">AbstractIntegratorRep</span><span class=\"p\">.</span><span class=\"nc\">cpp</span><span class=\"p\">:</span><span class=\"nd\">428</span><span class=\"o\">:</span>\n  <span class=\"nt\">Integrator</span> <span class=\"nt\">step</span> <span class=\"nt\">failed</span> <span class=\"nt\">at</span> <span class=\"nt\">time</span> <span class=\"nt\">0</span> <span class=\"nt\">apparently</span> <span class=\"nt\">because</span><span class=\"o\">:</span>\n<span class=\"nt\">SimTK</span> <span class=\"nt\">Exception</span> <span class=\"nt\">thrown</span> <span class=\"nt\">at</span> <span class=\"nt\">MassProperties</span><span class=\"p\">.</span><span class=\"nc\">h</span><span class=\"p\">:</span><span class=\"nd\">529</span><span class=\"o\">:</span>\n  <span class=\"nt\">Error</span> <span class=\"nt\">detected</span> <span class=\"nt\">by</span> <span class=\"nt\">Simbody</span> <span class=\"nt\">method</span> <span class=\"nt\">Inertia</span><span class=\"p\">::</span><span class=\"nd\">Inertia</span><span class=\"o\">(</span><span class=\"nt\">SymMat33</span><span class=\"o\">):</span> <span class=\"nt\">Inertia</span> <span class=\"nt\">matrix</span> <span class=\"nt\">contains</span> <span class=\"nt\">a</span> <span class=\"nt\">NaN</span><span class=\"o\">.</span>\n  <span class=\"o\">(</span><span class=\"nt\">Required</span> <span class=\"nt\">condition</span> <span class=\"s1\">&#39;!isNaN()&#39;</span> <span class=\"nt\">was</span> <span class=\"nt\">not</span> <span class=\"nt\">met</span><span class=\"o\">.)</span>\n\n<span class=\"nt\">Will</span> <span class=\"nt\">stop</span> <span class=\"nt\">trying</span> <span class=\"nt\">now</span><span class=\"o\">.</span>\n<span class=\"nt\">libc</span><span class=\"o\">++</span><span class=\"nt\">abi</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"o\">:</span> <span class=\"nt\">terminate</span> <span class=\"nt\">called</span> <span class=\"nt\">throwing</span> <span class=\"nt\">an</span> <span class=\"nt\">exception</span>\n<span class=\"nt\">Process</span> <span class=\"nt\">17670</span> <span class=\"nt\">stopped</span>\n<span class=\"o\">*</span> <span class=\"nt\">thread</span> <span class=\"p\">#</span><span class=\"nn\">19</span><span class=\"o\">:</span> <span class=\"nt\">tid</span> <span class=\"o\">=</span> <span class=\"nt\">0x14651a</span><span class=\"o\">,</span> <span class=\"nt\">0x00007fff8bb32212</span> <span class=\"nt\">libsystem_kernel</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">__pthread_kill</span> <span class=\"o\">+</span> <span class=\"nt\">10</span><span class=\"o\">,</span> <span class=\"nt\">stop</span> <span class=\"nt\">reason</span> <span class=\"o\">=</span> <span class=\"nt\">signal</span> <span class=\"nt\">SIGABRT</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">0</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8bb32212</span> <span class=\"nt\">libsystem_kernel</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">__pthread_kill</span> <span class=\"o\">+</span> <span class=\"nt\">10</span>\n<span class=\"nt\">libsystem_kernel</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">__pthread_kill</span> <span class=\"o\">+</span> <span class=\"nt\">10</span><span class=\"o\">:</span>\n<span class=\"nt\">-</span><span class=\"o\">&gt;</span> <span class=\"nt\">0x7fff8bb32212</span><span class=\"o\">:</span>  <span class=\"nt\">jae</span>    <span class=\"nt\">0x7fff8bb32219</span>            <span class=\"o\">;</span> <span class=\"nt\">__pthread_kill</span> <span class=\"o\">+</span> <span class=\"nt\">17</span>\n   <span class=\"nt\">0x7fff8bb32214</span><span class=\"o\">:</span>  <span class=\"nt\">jmpq</span>   <span class=\"nt\">0x7fff8bb334d4</span>            <span class=\"o\">;</span> <span class=\"nt\">cerror_nocancel</span>\n   <span class=\"nt\">0x7fff8bb32219</span><span class=\"o\">:</span>  <span class=\"nt\">ret</span>    \n   <span class=\"nt\">0x7fff8bb3221a</span><span class=\"o\">:</span>  <span class=\"nt\">nop</span>    \n<span class=\"o\">(</span><span class=\"nt\">lldb</span><span class=\"o\">)</span> <span class=\"nt\">bt</span>\n<span class=\"o\">*</span> <span class=\"nt\">thread</span> <span class=\"p\">#</span><span class=\"nn\">19</span><span class=\"o\">:</span> <span class=\"nt\">tid</span> <span class=\"o\">=</span> <span class=\"nt\">0x14651a</span><span class=\"o\">,</span> <span class=\"nt\">0x00007fff8bb32212</span> <span class=\"nt\">libsystem_kernel</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">__pthread_kill</span> <span class=\"o\">+</span> <span class=\"nt\">10</span><span class=\"o\">,</span> <span class=\"nt\">stop</span> <span class=\"nt\">reason</span> <span class=\"o\">=</span> <span class=\"nt\">signal</span> <span class=\"nt\">SIGABRT</span>\n  <span class=\"o\">*</span> <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">0</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8bb32212</span> <span class=\"nt\">libsystem_kernel</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">__pthread_kill</span> <span class=\"o\">+</span> <span class=\"nt\">10</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">1</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8b51fb24</span> <span class=\"nt\">libsystem_c</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">pthread_kill</span> <span class=\"o\">+</span> <span class=\"nt\">90</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">2</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8b563f61</span> <span class=\"nt\">libsystem_c</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">abort</span> <span class=\"o\">+</span> <span class=\"nt\">143</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">3</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8ac4c9eb</span> <span class=\"nt\">libc</span><span class=\"o\">++</span><span class=\"nt\">abi</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">abort_message</span> <span class=\"o\">+</span> <span class=\"nt\">257</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">4</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8ac4a39a</span> <span class=\"nt\">libc</span><span class=\"o\">++</span><span class=\"nt\">abi</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">default_terminate</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"nt\">28</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">5</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff88c86887</span> <span class=\"nt\">libobjc</span><span class=\"p\">.</span><span class=\"nc\">A</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">_objc_terminate</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"nt\">111</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">6</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8ac4a3c9</span> <span class=\"nt\">libc</span><span class=\"o\">++</span><span class=\"nt\">abi</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">safe_handler_caller</span><span class=\"o\">(</span><span class=\"nt\">void</span> <span class=\"o\">(*)())</span> <span class=\"o\">+</span> <span class=\"nt\">8</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">7</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8ac4a424</span> <span class=\"nt\">libc</span><span class=\"o\">++</span><span class=\"nt\">abi</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">terminate</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"nt\">16</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">8</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8ac4b58b</span> <span class=\"nt\">libc</span><span class=\"o\">++</span><span class=\"nt\">abi</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">__cxa_throw</span> <span class=\"o\">+</span> <span class=\"nt\">111</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">9</span><span class=\"o\">:</span> <span class=\"nt\">0x0000000102b45b8f</span> <span class=\"nt\">libSimTKcommon</span><span class=\"p\">.</span><span class=\"nc\">3</span><span class=\"p\">.</span><span class=\"nc\">4</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">SimTK</span><span class=\"p\">::</span><span class=\"nd\">StateImpl</span><span class=\"p\">::</span><span class=\"nd\">getCacheEntry</span><span class=\"o\">(</span><span class=\"nt\">SimTK</span><span class=\"p\">::</span><span class=\"nd\">SubsystemIndex</span><span class=\"o\">,</span> <span class=\"nt\">SimTK</span><span class=\"p\">::</span><span class=\"nd\">CacheEntryIndex</span><span class=\"o\">)</span> <span class=\"nt\">const</span> <span class=\"o\">+</span> <span class=\"nt\">407</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">10</span><span class=\"o\">:</span> <span class=\"nt\">0x0000000102105514</span> <span class=\"nt\">libSimTKsimbody</span><span class=\"p\">.</span><span class=\"nc\">3</span><span class=\"p\">.</span><span class=\"nc\">4</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">SimbodyMatterSubsystemRep</span><span class=\"p\">::</span><span class=\"nd\">getTreePositionCache</span><span class=\"o\">(</span><span class=\"nt\">SimTK</span><span class=\"p\">::</span><span class=\"nd\">State</span> <span class=\"nt\">const</span><span class=\"o\">&amp;)</span> <span class=\"nt\">const</span> <span class=\"o\">+</span> <span class=\"nt\">70</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">11</span><span class=\"o\">:</span> <span class=\"nt\">0x000000010215bd9f</span> <span class=\"nt\">libSimTKsimbody</span><span class=\"p\">.</span><span class=\"nc\">3</span><span class=\"p\">.</span><span class=\"nc\">4</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">SimTK</span><span class=\"p\">::</span><span class=\"nd\">MobilizedBodyImpl</span><span class=\"p\">::</span><span class=\"nd\">getBodyTransform</span><span class=\"o\">(</span><span class=\"nt\">SimTK</span><span class=\"p\">::</span><span class=\"nd\">State</span> <span class=\"nt\">const</span><span class=\"o\">&amp;)</span> <span class=\"nt\">const</span> <span class=\"o\">+</span> <span class=\"nt\">29</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">12</span><span class=\"o\">:</span> <span class=\"nt\">0x0000000101ff3768</span> <span class=\"nt\">libgazebo_physics_simbody</span><span class=\"p\">.</span><span class=\"nc\">3</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">physics</span><span class=\"p\">::</span><span class=\"nd\">SimbodyPhysics</span><span class=\"p\">::</span><span class=\"nd\">UpdatePhysics</span><span class=\"o\">(</span><span class=\"nt\">this</span><span class=\"o\">=</span><span class=\"nt\">0x000000010efeb670</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"nt\">920</span> <span class=\"nt\">at</span> <span class=\"nt\">SimbodyPhysics</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">455</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">13</span><span class=\"o\">:</span> <span class=\"nt\">0x00000001004a2493</span> <span class=\"nt\">libgazebo_physics</span><span class=\"p\">.</span><span class=\"nc\">3</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">physics</span><span class=\"p\">::</span><span class=\"nd\">World</span><span class=\"p\">::</span><span class=\"nd\">Update</span><span class=\"o\">(</span><span class=\"nt\">this</span><span class=\"o\">=</span><span class=\"nt\">0x0000000105894000</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"nt\">483</span> <span class=\"nt\">at</span> <span class=\"nt\">World</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">670</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">14</span><span class=\"o\">:</span> <span class=\"nt\">0x00000001004a024a</span> <span class=\"nt\">libgazebo_physics</span><span class=\"p\">.</span><span class=\"nc\">3</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">physics</span><span class=\"p\">::</span><span class=\"nd\">World</span><span class=\"p\">::</span><span class=\"nd\">Step</span><span class=\"o\">(</span><span class=\"nt\">this</span><span class=\"o\">=</span><span class=\"nt\">0x0000000105894000</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"nt\">954</span> <span class=\"nt\">at</span> <span class=\"nt\">World</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">563</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">15</span><span class=\"o\">:</span> <span class=\"nt\">0x000000010049f728</span> <span class=\"nt\">libgazebo_physics</span><span class=\"p\">.</span><span class=\"nc\">3</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">physics</span><span class=\"p\">::</span><span class=\"nd\">World</span><span class=\"p\">::</span><span class=\"nd\">RunLoop</span><span class=\"o\">(</span><span class=\"nt\">this</span><span class=\"o\">=&lt;</span><span class=\"nt\">unavailable</span><span class=\"o\">&gt;)</span> <span class=\"o\">+</span> <span class=\"nt\">648</span> <span class=\"nt\">at</span> <span class=\"nt\">World</span><span class=\"p\">.</span><span class=\"nc\">cc</span><span class=\"p\">:</span><span class=\"nd\">412</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">16</span><span class=\"o\">:</span> <span class=\"nt\">0x0000000104cd0625</span> <span class=\"nt\">libboost_thread-mt</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">boost</span><span class=\"o\">::(</span><span class=\"nt\">anonymous</span> <span class=\"nt\">namespace</span><span class=\"o\">)</span><span class=\"p\">::</span><span class=\"nd\">thread_proxy</span><span class=\"o\">(</span><span class=\"nt\">void</span><span class=\"o\">*)</span> <span class=\"o\">+</span> <span class=\"nt\">133</span>\n    <span class=\"nt\">frame</span> <span class=\"p\">#</span><span class=\"nn\">17</span><span class=\"o\">:</span> <span class=\"nt\">0x00007fff8b51e772</span> <span class=\"nt\">libsystem_c</span><span class=\"p\">.</span><span class=\"nc\">dylib</span><span class=\"err\">`</span><span class=\"nt\">_pthread_start</span> <span class=\"o\">+</span> <span class=\"nt\">327</span>\n<span class=\"o\">(</span><span class=\"nt\">lldb</span><span class=\"o\">)</span> <span class=\"o\">^</span><span class=\"nt\">DQuitting</span> <span class=\"nt\">LLDB</span> <span class=\"nt\">will</span> <span class=\"nt\">kill</span> <span class=\"nt\">one</span> <span class=\"nt\">or</span> <span class=\"nt\">more</span> <span class=\"nt\">processes</span><span class=\"o\">.</span> <span class=\"nt\">Do</span> <span class=\"nt\">you</span> <span class=\"nt\">really</span> <span class=\"nt\">want</span> <span class=\"nt\">to</span> <span class=\"nt\">proceed</span><span class=\"o\">:</span> <span class=\"cp\">[</span><span class=\"nx\">Y</span><span class=\"p\">/</span><span class=\"nx\">n</span><span class=\"cp\">]</span> \n</pre></div>\n\n\n<p>@sherm1  do you have any recommendations about how to debug this? The model.sdf has valid inertia and works in ODE and bullet.</p>", "type": "rendered"}, "created_on": "2014-06-13T20:24:48.224729+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 10713755}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10714911.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10714911"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "Hi, Steve. NaN in an inertia is generally a side effect of NaN in a position state q. I suspect the state is corrupt or uninitialized. Could this be a timing problem associated with starting or stopping the model (like, the simulator tries to run before the state has been initialized?)\n\nBTW, the fact that this got detected now is probably a convenient artifact of our having accidentally built without defining NDEBUG (or was this an intentional Debug build?). (Per our earlier discussion with Jose.) Simbody doesn't scan through inertia matrices looking for NaNs if NDEBUG is set.\n\nRegards,\nSherm", "markup": "markdown", "html": "<p>Hi, Steve. NaN in an inertia is generally a side effect of NaN in a position state q. I suspect the state is corrupt or uninitialized. Could this be a timing problem associated with starting or stopping the model (like, the simulator tries to run before the state has been initialized?)</p>\n<p>BTW, the fact that this got detected now is probably a convenient artifact of our having accidentally built without defining NDEBUG (or was this an intentional Debug build?). (Per our earlier discussion with Jose.) Simbody doesn't scan through inertia matrices looking for NaNs if NDEBUG is set.</p>\n<p>Regards,\nSherm</p>", "type": "rendered"}, "created_on": "2014-06-13T22:32:40.851921+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 10714911}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10715318.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10715318"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "I just figured out the problem. The pioneer 2dx model uses the DiffDrivePlugin. In [DiffDrivePlugin::Init](#!/osrf/gazebo/src/7b30d2c150a7f17dfd7cf8122a9af1e115f587c6/plugins/DiffDrivePlugin.cc?at=default#cl-75), it calls Joint::GetAnchor and Link::GetBoundingBox, which are expected be nonzero, but are zero because these functions aren't working. The commanded torque is later divided by the radius, which leads to NaN. I'll add a bit to the test to show what needs to be fixed.", "markup": "markdown", "html": "<p>I just figured out the problem. The pioneer 2dx model uses the DiffDrivePlugin. In <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/7b30d2c150a7f17dfd7cf8122a9af1e115f587c6/plugins/DiffDrivePlugin.cc?at=default#cl-75\" rel=\"nofollow\">DiffDrivePlugin::Init</a>, it calls Joint::GetAnchor and Link::GetBoundingBox, which are expected be nonzero, but are zero because these functions aren't working. The commanded torque is later divided by the radius, which leads to NaN. I'll add a bit to the test to show what needs to be fixed.</p>", "type": "rendered"}, "created_on": "2014-06-13T23:25:07.833178+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 10715318}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10775671.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10775671"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "I've updated the test a bit in f25d010 (branch issue_866), so that it now has expectations on the parameters computed in DiffDrivePlugin and an assertion if the wheelRadius is computed to be zero (which was causing NaN's).", "markup": "markdown", "html": "<p>I've updated the test a bit in <a href=\"#!/osrf/gazebo/commits/f25d010\" rel=\"nofollow\" class=\"ap-connect-link\">f25d010</a> (branch issue_866), so that it now has expectations on the parameters computed in DiffDrivePlugin and an assertion if the wheelRadius is computed to be zero (which was causing NaN's).</p>", "type": "rendered"}, "created_on": "2014-06-17T23:46:58.526265+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 10775671}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10776309.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10776309"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "@sherm1 I've been trying to figure out how to implement [SimbodyCollision::GetBoundingBox](#!/osrf/gazebo/src/93fe281a39e05683078a6cece51e8c59436705ee/gazebo/physics/simbody/SimbodyCollision.cc?at=default#cl-66). My first thought is to use [SimTK::ContactGeometry::getBoundingSphere](https://simtk.org/api_docs/simbody/api_docs30/Simbody/html/classSimTK_1_1ContactGeometry.html#ab54d1f8d2185432686c0120d7827a1d3), but [SimbodyCollision::collisionShape](#!/osrf/gazebo/src/93fe281a39e05683078a6cece51e8c59436705ee/gazebo/physics/simbody/SimbodyCollision.hh#cl-73) is never set. Do you think that could be set during [SimbodyPhysics::AddCollisionsToLink](#!/osrf/gazebo/src/93fe281a39e05683078a6cece51e8c59436705ee/gazebo/physics/simbody/SimbodyPhysics.cc?at=default#cl-1142)?", "markup": "markdown", "html": "<p>@sherm1 I've been trying to figure out how to implement <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/93fe281a39e05683078a6cece51e8c59436705ee/gazebo/physics/simbody/SimbodyCollision.cc?at=default#cl-66\" rel=\"nofollow\">SimbodyCollision::GetBoundingBox</a>. My first thought is to use <a data-is-external-link=\"true\" href=\"https://simtk.org/api_docs/simbody/api_docs30/Simbody/html/classSimTK_1_1ContactGeometry.html#ab54d1f8d2185432686c0120d7827a1d3\" rel=\"nofollow\">SimTK::ContactGeometry::getBoundingSphere</a>, but <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/93fe281a39e05683078a6cece51e8c59436705ee/gazebo/physics/simbody/SimbodyCollision.hh#cl-73\" rel=\"nofollow\">SimbodyCollision::collisionShape</a> is never set. Do you think that could be set during <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/93fe281a39e05683078a6cece51e8c59436705ee/gazebo/physics/simbody/SimbodyPhysics.cc?at=default#cl-1142\" rel=\"nofollow\">SimbodyPhysics::AddCollisionsToLink</a>?</p>", "type": "rendered"}, "created_on": "2014-06-18T01:12:32.420059+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 10776309}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10778054.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10778054"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "Hi, Steve. Is GetBoundingBox supposed to return a World axis-aligned bounding box, or one that is fixed to the collision geometry object? If it is axis aligned then the bounding sphere could be a workable substitute. Six calls to calcSupportPoint() could give you an actual AABB, but that seems inefficient.\n\nHow to add the collision shapes will require some indirection; John probably has some thoughts. The main problem is that the Simbody System (computational representation of the model) is built all at once when all modeling information has been collected. That's the point at which ContactGeometry objects are constructed. I believe that in AddCollisionsToLink the modeling information is still being collected. So what could go there would be a *reference* from a Gazebo Collision geometry object to its corresponding SimTK::ContactGeometry object. That reference would be initially null, and would get filled in at the time we create the Simbody System. We are already dealing with a similar issue for Links and Joints -- there is a Simbody object corresponding to each one, but they are created at the last minute and then references to them are kept with the Gazebo Link and Joint objects so that they know where to go to get run time info.", "markup": "markdown", "html": "<p>Hi, Steve. Is GetBoundingBox supposed to return a World axis-aligned bounding box, or one that is fixed to the collision geometry object? If it is axis aligned then the bounding sphere could be a workable substitute. Six calls to calcSupportPoint() could give you an actual AABB, but that seems inefficient.</p>\n<p>How to add the collision shapes will require some indirection; John probably has some thoughts. The main problem is that the Simbody System (computational representation of the model) is built all at once when all modeling information has been collected. That's the point at which ContactGeometry objects are constructed. I believe that in AddCollisionsToLink the modeling information is still being collected. So what could go there would be a <em>reference</em> from a Gazebo Collision geometry object to its corresponding SimTK::ContactGeometry object. That reference would be initially null, and would get filled in at the time we create the Simbody System. We are already dealing with a similar issue for Links and Joints -- there is a Simbody object corresponding to each one, but they are created at the last minute and then references to them are kept with the Gazebo Link and Joint objects so that they know where to go to get run time info.</p>", "type": "rendered"}, "created_on": "2014-06-18T04:12:04.536148+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 10778054}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10797347.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10797347"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "`Collision::GetBoundingBox` reports an axis-aligned bounding box (AABB) in world coordinates.\n\nI would be fine with calling calcSupportPoint() multiple times; I just was not familiar with that part of the API.\n\nCan you point me to the part of simbody physics when the system is created? I'll see if I can add a reference to the collision shapes there.", "markup": "markdown", "html": "<p><code>Collision::GetBoundingBox</code> reports an axis-aligned bounding box (AABB) in world coordinates.</p>\n<p>I would be fine with calling calcSupportPoint() multiple times; I just was not familiar with that part of the API.</p>\n<p>Can you point me to the part of simbody physics when the system is created? I'll see if I can add a reference to the collision shapes there.</p>", "type": "rendered"}, "created_on": "2014-06-18T20:54:37.486038+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 10797347}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10797763.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10797763"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "This is where the system-building gets started: [code](#!/osrf/gazebo/src/93fe281a39e05683078a6cece51e8c59436705ee/gazebo/physics/simbody/SimbodyPhysics.cc?at=default#cl-298)\n", "markup": "markdown", "html": "<p>This is where the system-building gets started: <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/93fe281a39e05683078a6cece51e8c59436705ee/gazebo/physics/simbody/SimbodyPhysics.cc?at=default#cl-298\" rel=\"nofollow\">code</a></p>", "type": "rendered"}, "created_on": "2014-06-18T21:27:13.779110+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 10797763}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10798999.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10798999"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2014-06-18T23:34:11.487660+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 10798999}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10799104.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10799104"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "Please take a look at b1b6e10.  Alternatively, how does approach in 6b20147 compare?", "markup": "markdown", "html": "<p>Please take a look at <a href=\"#!/osrf/gazebo/commits/b1b6e10\" rel=\"nofollow\" class=\"ap-connect-link\">b1b6e10</a>.  Alternatively, how does approach in <a href=\"#!/osrf/gazebo/commits/6b20147\" rel=\"nofollow\" class=\"ap-connect-link\">6b20147</a> compare?</p>", "type": "rendered"}, "created_on": "2014-06-18T23:45:25.683875+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 10799104}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10799176.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10799176"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "It seems weird that b1b6e10 creates two instances of `ContactGeometry::Sphere`. I would expect just one instance and a pointer to that instance.\n\nI'll defer to @sherm1 on evaluating whether 6b20147 is the right approach, since I'm not familiar with the API.", "markup": "markdown", "html": "<p>It seems weird that <a href=\"#!/osrf/gazebo/commits/b1b6e10\" rel=\"nofollow\" class=\"ap-connect-link\">b1b6e10</a> creates two instances of <code>ContactGeometry::Sphere</code>. I would expect just one instance and a pointer to that instance.</p>\n<p>I'll defer to @sherm1 on evaluating whether <a href=\"#!/osrf/gazebo/commits/6b20147\" rel=\"nofollow\" class=\"ap-connect-link\">6b20147</a> is the right approach, since I'm not familiar with the API.</p>", "type": "rendered"}, "created_on": "2014-06-18T23:56:09.726713+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 10799176}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10799252.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10799252"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "to avoid two instances of `ContactGeometry`, b1b6e10 should be replaced by ce358ec. Though I am not sure if a copy of `ContactGeometry` is made during `ContactSurface` assignment. I'll wait for @sherm1's response. Thanks.", "markup": "markdown", "html": "<p>to avoid two instances of <code>ContactGeometry</code>, <a href=\"#!/osrf/gazebo/commits/b1b6e10\" rel=\"nofollow\" class=\"ap-connect-link\">b1b6e10</a> should be replaced by <a href=\"#!/osrf/gazebo/commits/ce358ec\" rel=\"nofollow\" class=\"ap-connect-link\">ce358ec</a>. Though I am not sure if a copy of <code>ContactGeometry</code> is made during <code>ContactSurface</code> assignment. I'll wait for @sherm1's response. Thanks.</p>", "type": "rendered"}, "created_on": "2014-06-19T00:06:53.355235+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2014-06-19T00:08:09.142196+00:00", "type": "issue_comment", "id": 10799252}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10801359.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10801359"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "My first thought would be simply to record the `int` that comes back from `addContactSurface()`, along with a reference to the `MobilizedBody` to which it is attached. Then when you need it you can get a reference to the `ContactSurface`, which contains the shape and material properties. That way you would have access to everything known about the contact geometry, including its location on the body, or in space, or whatever.\n\nIf that seems too awkward, you could grab the int from addContactSurface(), use it to get a reference to the internally stored ContactSurface and keep that reference with the Collision object. \n\nCreating a ContactGeometry::Sphere as a local object and saving a reference to it won't work because that local object will evaporate. Any stored references have to be to the copy of the ContactSurface or ContactGeometry that is stored in the Simbody MultibodySystem.\n\nP.S. These objects are generally trivial little structs so I tend to copy them around freely. The Sphere, for example, just contains a radius. Only when there is a mesh being referenced does it try to avoid copying (the underlying mesh is reference counted and doesn't get copied). But even in the mesh case the corresponding ContactGeometry objects are small and ephemeral.\n\nP.P.S. Happy to co-hack on this with you Friday or whenever if you want.", "markup": "markdown", "html": "<p>My first thought would be simply to record the <code>int</code> that comes back from <code>addContactSurface()</code>, along with a reference to the <code>MobilizedBody</code> to which it is attached. Then when you need it you can get a reference to the <code>ContactSurface</code>, which contains the shape and material properties. That way you would have access to everything known about the contact geometry, including its location on the body, or in space, or whatever.</p>\n<p>If that seems too awkward, you could grab the int from addContactSurface(), use it to get a reference to the internally stored ContactSurface and keep that reference with the Collision object. </p>\n<p>Creating a ContactGeometry::Sphere as a local object and saving a reference to it won't work because that local object will evaporate. Any stored references have to be to the copy of the ContactSurface or ContactGeometry that is stored in the Simbody MultibodySystem.</p>\n<p>P.S. These objects are generally trivial little structs so I tend to copy them around freely. The Sphere, for example, just contains a radius. Only when there is a mesh being referenced does it try to avoid copying (the underlying mesh is reference counted and doesn't get copied). But even in the mesh case the corresponding ContactGeometry objects are small and ephemeral.</p>\n<p>P.P.S. Happy to co-hack on this with you Friday or whenever if you want.</p>", "type": "rendered"}, "created_on": "2014-06-19T04:31:40.017934+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 10801359}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10937409.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10937409"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "see pull request #1129 for updates.\n\nnot sure why pioneer2dx runs slower with the same controller in simbody as compared to ode.", "markup": "markdown", "html": "<p>see <a href=\"#!/osrf/gazebo/pull-requests/1129/fix-issue-866\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1129</a> for updates.</p>\n<p>not sure why pioneer2dx runs slower with the same controller in simbody as compared to ode.</p>", "type": "rendered"}, "created_on": "2014-06-26T17:43:53.874044+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 10937409}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/11195760.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-11195760"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "pull request #1129 declined for now because the [DiffDrivePlugin header change](#!/osrf/gazebo/pull-request/1129/fix-issue-866/diff#Lplugins/DiffDrivePlugin.hhT40) breaks ABI/API. If we could fix this without touching the headers, then we can apply this patch later as a bug patch.", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo/pull-requests/1129/fix-issue-866\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1129</a> declined for now because the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/pull-request/1129/fix-issue-866/diff#Lplugins/DiffDrivePlugin.hhT40\" rel=\"nofollow\">DiffDrivePlugin header change</a> breaks ABI/API. If we could fix this without touching the headers, then we can apply this patch later as a bug patch.</p>", "type": "rendered"}, "created_on": "2014-07-11T16:43:00.833337+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 11195760}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/11235629.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-11235629"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "See pull request #1145", "markup": "markdown", "html": "<p>See <a href=\"#!/osrf/gazebo/pull-requests/1145/fix-pioneer2dx-for-simbody\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1145</a></p>", "type": "rendered"}, "created_on": "2014-07-14T23:54:41.017680+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 11235629}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/30611372.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-30611372"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:24:57.591429+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30611372}], "page": 1, "size": 18}