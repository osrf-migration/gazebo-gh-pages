{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10801359.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10801359"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "My first thought would be simply to record the `int` that comes back from `addContactSurface()`, along with a reference to the `MobilizedBody` to which it is attached. Then when you need it you can get a reference to the `ContactSurface`, which contains the shape and material properties. That way you would have access to everything known about the contact geometry, including its location on the body, or in space, or whatever.\n\nIf that seems too awkward, you could grab the int from addContactSurface(), use it to get a reference to the internally stored ContactSurface and keep that reference with the Collision object. \n\nCreating a ContactGeometry::Sphere as a local object and saving a reference to it won't work because that local object will evaporate. Any stored references have to be to the copy of the ContactSurface or ContactGeometry that is stored in the Simbody MultibodySystem.\n\nP.S. These objects are generally trivial little structs so I tend to copy them around freely. The Sphere, for example, just contains a radius. Only when there is a mesh being referenced does it try to avoid copying (the underlying mesh is reference counted and doesn't get copied). But even in the mesh case the corresponding ContactGeometry objects are small and ephemeral.\n\nP.P.S. Happy to co-hack on this with you Friday or whenever if you want.", "markup": "markdown", "html": "<p>My first thought would be simply to record the <code>int</code> that comes back from <code>addContactSurface()</code>, along with a reference to the <code>MobilizedBody</code> to which it is attached. Then when you need it you can get a reference to the <code>ContactSurface</code>, which contains the shape and material properties. That way you would have access to everything known about the contact geometry, including its location on the body, or in space, or whatever.</p>\n<p>If that seems too awkward, you could grab the int from addContactSurface(), use it to get a reference to the internally stored ContactSurface and keep that reference with the Collision object. </p>\n<p>Creating a ContactGeometry::Sphere as a local object and saving a reference to it won't work because that local object will evaporate. Any stored references have to be to the copy of the ContactSurface or ContactGeometry that is stored in the Simbody MultibodySystem.</p>\n<p>P.S. These objects are generally trivial little structs so I tend to copy them around freely. The Sphere, for example, just contains a radius. Only when there is a mesh being referenced does it try to avoid copying (the underlying mesh is reference counted and doesn't get copied). But even in the mesh case the corresponding ContactGeometry objects are small and ephemeral.</p>\n<p>P.P.S. Happy to co-hack on this with you Friday or whenever if you want.</p>", "type": "rendered"}, "created_on": "2014-06-19T04:31:40.017934+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 10801359}