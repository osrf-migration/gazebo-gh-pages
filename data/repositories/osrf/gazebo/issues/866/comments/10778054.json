{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866/comments/10778054.json"}, "html": {"href": "#!/osrf/gazebo/issues/866#comment-10778054"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/866.json"}}, "type": "issue", "id": 866, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody has trouble with pioneer2dx model and test"}, "content": {"raw": "Hi, Steve. Is GetBoundingBox supposed to return a World axis-aligned bounding box, or one that is fixed to the collision geometry object? If it is axis aligned then the bounding sphere could be a workable substitute. Six calls to calcSupportPoint() could give you an actual AABB, but that seems inefficient.\n\nHow to add the collision shapes will require some indirection; John probably has some thoughts. The main problem is that the Simbody System (computational representation of the model) is built all at once when all modeling information has been collected. That's the point at which ContactGeometry objects are constructed. I believe that in AddCollisionsToLink the modeling information is still being collected. So what could go there would be a *reference* from a Gazebo Collision geometry object to its corresponding SimTK::ContactGeometry object. That reference would be initially null, and would get filled in at the time we create the Simbody System. We are already dealing with a similar issue for Links and Joints -- there is a Simbody object corresponding to each one, but they are created at the last minute and then references to them are kept with the Gazebo Link and Joint objects so that they know where to go to get run time info.", "markup": "markdown", "html": "<p>Hi, Steve. Is GetBoundingBox supposed to return a World axis-aligned bounding box, or one that is fixed to the collision geometry object? If it is axis aligned then the bounding sphere could be a workable substitute. Six calls to calcSupportPoint() could give you an actual AABB, but that seems inefficient.</p>\n<p>How to add the collision shapes will require some indirection; John probably has some thoughts. The main problem is that the Simbody System (computational representation of the model) is built all at once when all modeling information has been collected. That's the point at which ContactGeometry objects are constructed. I believe that in AddCollisionsToLink the modeling information is still being collected. So what could go there would be a <em>reference</em> from a Gazebo Collision geometry object to its corresponding SimTK::ContactGeometry object. That reference would be initially null, and would get filled in at the time we create the Simbody System. We are already dealing with a similar issue for Links and Joints -- there is a Simbody object corresponding to each one, but they are created at the last minute and then references to them are kept with the Gazebo Link and Joint objects so that they know where to go to get run time info.</p>", "type": "rendered"}, "created_on": "2014-06-18T04:12:04.536148+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 10778054}