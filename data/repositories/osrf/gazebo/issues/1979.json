{"priority": "trivial", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1979/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1979.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1979/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1979/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1979/any-reason-why-world-getmodels-copy"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1979/vote"}}, "reporter": {"display_name": "udi B", "uuid": "{a5706a65-899d-42a3-8da0-8d868294d05f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba5706a65-899d-42a3-8da0-8d868294d05f%7D"}, "html": {"href": "https://bitbucket.org/%7Ba5706a65-899d-42a3-8da0-8d868294d05f%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8035137ee59757d927dd2773c84325acd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsUB-4.png"}}, "nickname": "UdiB", "type": "user", "account_id": "557058:d7224236-4af1-4899-bd88-c78cf9e22f8b"}, "title": "Any reason why World::GetModels()  copy constructs instead of returning a reference?", "component": {"name": "physics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122876.json"}}}, "votes": 0, "watches": 2, "content": {"raw": "I can't think of any scenario where this\r\n```\r\n#!c++\r\nModel_V World::GetModels() const\r\n{\r\n  return this->dataPtr->models;\r\n}\r\n```\r\n\r\nis preferable to:\r\n```\r\n#!c++\r\nModel_V const & World::GetModels() const\r\n{\r\n  return this->dataPtr->models;\r\n}\r\n```\r\n\r\nThe former is a forced waste of CPU cycles for copying a bunch of ModelPtrs. Since these are smart shared pointers, this also means incrementing reference counts for all models when the copy is made and decrementing them again when the copied vector is discarded, which expectably is very shortly afterwards.\r\n\r\nFor comparison, we do have `const Model_V & Model::NestedModels() const`\r\n\r\nIssue marked for version 6.0 for lack of a more recent option, but is present at the repository tip as well.\r\n", "markup": "markdown", "html": "<p>I can't think of any scenario where this</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">Model_V</span> <span class=\"n\">World</span><span class=\"o\">::</span><span class=\"n\">GetModels</span><span class=\"p\">()</span> <span class=\"k\">const</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">models</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>is preferable to:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">Model_V</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">World</span><span class=\"o\">::</span><span class=\"n\">GetModels</span><span class=\"p\">()</span> <span class=\"k\">const</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">models</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>The former is a forced waste of CPU cycles for copying a bunch of ModelPtrs. Since these are smart shared pointers, this also means incrementing reference counts for all models when the copy is made and decrementing them again when the copied vector is discarded, which expectably is very shortly afterwards.</p>\n<p>For comparison, we do have <code>const Model_V &amp; Model::NestedModels() const</code></p>\n<p>Issue marked for version 6.0 for lack of a more recent option, but is present at the repository tip as well.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2016-06-10T08:24:19.654823+00:00", "milestone": null, "updated_on": "2016-09-14T19:20:41.666360+00:00", "type": "issue", "id": 1979}