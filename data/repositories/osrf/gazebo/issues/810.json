{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/810/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/810.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/810/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/810/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/810/slow-client-can-cause-publisher-to-stop"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/810/vote"}}, "reporter": {"display_name": "Brian Gerkey", "uuid": "{3d8b5763-9dad-4be7-85c2-a7ab6cd49173}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D"}, "html": {"href": "https://bitbucket.org/%7B3d8b5763-9dad-4be7-85c2-a7ab6cd49173%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9/5fa9ec73-0fec-4860-a202-e34ae23b6a12/128"}}, "nickname": "Brian Gerkey", "type": "user", "account_id": "557058:2e35028e-9ad8-4d6a-a3a5-275159a304a9"}, "title": "Slow client can cause publisher to stop producing data", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Run Gazebo with the following world:\r\n\r\n~~~\r\n<?xml version=\"1.0\" ?>\r\n<sdf version='1.4'>\r\n  <world name=\"default\">\r\n    <model name=\"model\">\r\n      <link name=\"link\">\r\n        <sensor name=\"camera\" type=\"camera\"/>\r\n      </link>\r\n    </model>\r\n  </world>\r\n</sdf>\r\n~~~\r\n\r\nCompile (e.g., use the [listener example CMakeLists.txt](#!/osrf/gazebo/src/b2d2cf062c2b09177badd4a63a1aa5a4e6791485/examples/stand_alone/listener/CMakeLists.txt?at=default)) and run the following test program:\r\n\r\n~~~\r\n#include <gazebo/transport/transport.hh>\r\n#include <gazebo/msgs/msgs.hh>\r\n#include <gazebo/gazebo.hh>\r\n\r\nvoid cb(ConstImageStampedPtr &_msg)\r\n{ \r\n  std::cout << \"got message\" << std::endl;\r\n  // The following pause will cause data to backup, eventually\r\n  // making the publisher stop producing data.\r\n  pause();\r\n}\r\n\r\nint main(int _argc, char **_argv)\r\n{ \r\n  gazebo::load(_argc, _argv);\r\n  gazebo::run();\r\n  gazebo::transport::NodePtr node(new gazebo::transport::Node());\r\n  node->Init();\r\n  gazebo::transport::SubscriberPtr sub = node->Subscribe(\"~/model/link/camera/image\", cb);\r\n  while (true)\r\n    gazebo::common::Time::MSleep(10);\r\n  gazebo::transport::fini();\r\n} \r\n~~~\r\n\r\nIt'll get one message, then block, presumably causing data to back up in the socket and then the publisher queue.  At some point, the server will print this message:\r\n\r\n~~~\r\nWarning [Publisher.cc:144] Queue limit reached for topic /gazebo/default/model/link/camera/image, deleting message. This warning is printed only once.\r\n~~~\r\n\r\nAfter that, the publisher doesn't send out any more data.  Kill and restart the test program and it won't get any messages.  Same result if you open the Topic Visualization window and try to show the camera topic.", "markup": "markdown", "html": "<p>Run Gazebo with the following world:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span>\n<span class=\"nt\">&lt;sdf</span> <span class=\"na\">version=</span><span class=\"s\">&#39;1.4&#39;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;world</span> <span class=\"na\">name=</span><span class=\"s\">&quot;default&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;model&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;link</span> <span class=\"na\">name=</span><span class=\"s\">&quot;link&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;sensor</span> <span class=\"na\">name=</span><span class=\"s\">&quot;camera&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;camera&quot;</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/link&gt;</span>\n    <span class=\"nt\">&lt;/model&gt;</span>\n  <span class=\"nt\">&lt;/world&gt;</span>\n<span class=\"nt\">&lt;/sdf&gt;</span>\n</pre></div>\n\n\n<p>Compile (e.g., use the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/b2d2cf062c2b09177badd4a63a1aa5a4e6791485/examples/stand_alone/listener/CMakeLists.txt?at=default\" rel=\"nofollow\">listener example CMakeLists.txt</a>) and run the following test program:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/transport/transport.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/msgs/msgs.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/gazebo.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">cb</span><span class=\"p\">(</span><span class=\"n\">ConstImageStampedPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">_msg</span><span class=\"p\">)</span>\n<span class=\"p\">{</span> \n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;got message&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"c1\">// The following pause will cause data to backup, eventually</span>\n  <span class=\"c1\">// making the publisher stop producing data.</span>\n  <span class=\"n\">pause</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">_argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span> \n  <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">_argc</span><span class=\"p\">,</span> <span class=\"n\">_argv</span><span class=\"p\">);</span>\n  <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">run</span><span class=\"p\">();</span>\n  <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">NodePtr</span> <span class=\"n\">node</span><span class=\"p\">(</span><span class=\"n\">new</span> <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"p\">());</span>\n  <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">Init</span><span class=\"p\">();</span>\n  <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">SubscriberPtr</span> <span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"s\">&quot;~/model/link/camera/image&quot;</span><span class=\"p\">,</span> <span class=\"n\">cb</span><span class=\"p\">);</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span>\n    <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">MSleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n  <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">fini</span><span class=\"p\">();</span>\n<span class=\"p\">}</span> \n</pre></div>\n\n\n<p>It'll get one message, then block, presumably causing data to back up in the socket and then the publisher queue.  At some point, the server will print this message:</p>\n<div class=\"codehilite\"><pre><span></span>Warning [Publisher.cc:144] Queue limit reached for topic /gazebo/default/model/link/camera/image, deleting message. This warning is printed only once.\n</pre></div>\n\n\n<p>After that, the publisher doesn't send out any more data.  Kill and restart the test program and it won't get any messages.  Same result if you open the Topic Visualization window and try to show the camera topic.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2013-08-20T22:22:59.334136+00:00", "milestone": null, "updated_on": "2016-09-14T19:21:07.567000+00:00", "type": "issue", "id": 810}