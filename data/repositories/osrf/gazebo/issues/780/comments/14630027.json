{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/780/comments/14630027.json"}, "html": {"href": "#!/osrf/gazebo/issues/780#comment-14630027"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/780.json"}}, "type": "issue", "id": 780, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Provide torque-speed curve"}, "content": {"raw": "I'm working on a proof-of-concept plugin for this right now in branch actuator_plugin, in plugins/ActuatorPlugin.\n\nThe actuator plugin is a model plugin enforces a maximum torque based on the current velocity of the \"actuated\" joint. It sets up a callback on the `WorldUpdateBegin` event. In this callback, a maximum torque value is calculated from the torque-speed model, which is configurable by the user. The maximum torque value is enforced if the joint torque exceeds this value. I don't actually use `Joint::SetMaxForce` because it's buggy and doesn't work uniformly for each physics engine.\n\nI also set up a data collection example in examples/stand_alone/actuator/main.cc. It spawns two models that are identical except one has an actuated joint and the other has a passive joint. `Joint::SetForce` is used to enforce a constant force value on each joint for a fixed number of timesteps.\n\nHere are some plots. The maximum torque value for the actuator was set to 2, the maximum velocity was set to 20, and the power was set to 10 (arbitrarily chosen values that worked well together). The torque speed curve is calculated from torque = power/velocity.\n\n![actuator_pos_time.png](data/bitbucket.org/repo/jgXqbo/images/2909633983-actuator_pos_time.png)\n![actuator_vel_time.png](data/bitbucket.org/repo/jgXqbo/images/3474452747-actuator_vel_time.png)\n![actuator_torque_speed_passive.png](data/bitbucket.org/repo/jgXqbo/images/1921123406-actuator_torque_speed_passive.png)\n![actuator_torque_speed_actuated.png](data/bitbucket.org/repo/jgXqbo/images/3100399016-actuator_torque_speed_actuated.png)\n\nNote that in the torque/velocity curve for the actuated joint, the initial flat part of the curve is 2--I was lazy with my joint axes, sorry folks. The plugin doesn't actually enforce a maximum velocity right now, since `Joint::SetVelocity` has some weird behavior. Feedback on that is welcome...\n\n@hsu, @nkoenig: I'd like to pull request this work once it's finished, which Gazebo should I target? @scpeters suggested I pull request it into 4.1, since it's a DRCSim milestone, and make a design document for integrating an Actuator class into the physics library, perhaps for Gazebo 6. Using a plugin creates a lot of limitations for this concept, but I thought it would be good practice to prototype modularly and a plugin seemed convenient for that.", "markup": "markdown", "html": "<p>I'm working on a proof-of-concept plugin for this right now in branch actuator_plugin, in plugins/ActuatorPlugin.</p>\n<p>The actuator plugin is a model plugin enforces a maximum torque based on the current velocity of the \"actuated\" joint. It sets up a callback on the <code>WorldUpdateBegin</code> event. In this callback, a maximum torque value is calculated from the torque-speed model, which is configurable by the user. The maximum torque value is enforced if the joint torque exceeds this value. I don't actually use <code>Joint::SetMaxForce</code> because it's buggy and doesn't work uniformly for each physics engine.</p>\n<p>I also set up a data collection example in examples/stand_alone/actuator/main.cc. It spawns two models that are identical except one has an actuated joint and the other has a passive joint. <code>Joint::SetForce</code> is used to enforce a constant force value on each joint for a fixed number of timesteps.</p>\n<p>Here are some plots. The maximum torque value for the actuator was set to 2, the maximum velocity was set to 20, and the power was set to 10 (arbitrarily chosen values that worked well together). The torque speed curve is calculated from torque = power/velocity.</p>\n<p><img alt=\"actuator_pos_time.png\" src=\"data/bitbucket.org/repo/jgXqbo/images/2909633983-actuator_pos_time.png\" />\n<img alt=\"actuator_vel_time.png\" src=\"data/bitbucket.org/repo/jgXqbo/images/3474452747-actuator_vel_time.png\" />\n<img alt=\"actuator_torque_speed_passive.png\" src=\"data/bitbucket.org/repo/jgXqbo/images/1921123406-actuator_torque_speed_passive.png\" />\n<img alt=\"actuator_torque_speed_actuated.png\" src=\"data/bitbucket.org/repo/jgXqbo/images/3100399016-actuator_torque_speed_actuated.png\" /></p>\n<p>Note that in the torque/velocity curve for the actuated joint, the initial flat part of the curve is 2--I was lazy with my joint axes, sorry folks. The plugin doesn't actually enforce a maximum velocity right now, since <code>Joint::SetVelocity</code> has some weird behavior. Feedback on that is welcome...</p>\n<p>@hsu, @nkoenig: I'd like to pull request this work once it's finished, which Gazebo should I target? @scpeters suggested I pull request it into 4.1, since it's a DRCSim milestone, and make a design document for integrating an Actuator class into the physics library, perhaps for Gazebo 6. Using a plugin creates a lot of limitations for this concept, but I thought it would be good practice to prototype modularly and a plugin seemed convenient for that.</p>", "type": "rendered"}, "created_on": "2015-01-06T02:03:33.531819+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2015-01-06T02:04:23.824450+00:00", "type": "issue_comment", "id": 14630027}