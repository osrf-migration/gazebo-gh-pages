{"priority": "major", "kind": "task", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/310/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/310.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/310/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/310/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/310/manipulating-contactplugin-data"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/310/vote"}}, "reporter": null, "title": "Manipulating ContactPlugin Data", "component": null, "votes": 0, "watches": 2, "content": {"raw": "*Situation*: Trying to write a plugin to determine exernal contact forces on a link and publish to a ROS msg.\r\n\r\n*Status*: I have a custom SensorPlugin class written which takes the associated Contact sensor and I can access all the contact data from the gazebo msgs::Contacts. I've verified this some simple printfs.\r\n\r\n*Next Steps*: I'd like to accumulate all external forces/torques and publish a single external force wrench in the link coord frame to a ROS msg. Publishing to Ros is fairly straightforward and there are a number of good code examples to go on. My current issue is with manipulating data coming from the sensor.\r\n\r\nIn my ContactPlugin load fn I grab a ptr to the physics::Link\r\n\r\n```\r\n#!c++\r\nthis->world_ = physics::get_world(this->sensor_->GetWorldName());\r\nphysics::EntityPtr ent = this->world_->GetEntity(this->sensor_->GetParentName());\r\nphysics::Link * lnk = dynamic_cast<physics::Link*>(ent.get());\r\nthis->link_.reset(lnk);\r\n```\r\n\r\nIn my update function I can grab current pose and contact data from sensor as follows:\r\n\r\n```\r\n#!c++\r\nmsgs::Contacts contacts = this->sensor_->GetContacts();\r\nmath::Pose pose = this->link_->GetWorldPose();\r\n```\r\n\r\nFirst question:\r\nWhat cardinal point on my link does the pose correspond to, i.e. a point of (0,0,0) in the link frame would be where? At the cg or proximal at the output of the parent joint?\r\n\r\nSecond question:\r\nI could iterate through all contacts accumulating forces in the link frame\r\n\r\n```\r\n#!c++\r\nVector3 tot_force;\r\nVector3 tot_moment;\r\nfor (int i = 0; i < contacts.contact_size(); ++i)\r\n{\r\n\t//transorm force and moment to link frame\r\n\ttot_foce += new_force;\r\n\ttot_moment += new_moment;\r\n}\r\n```\r\n\r\nHowever, this seems like something that would've already been done by your physics engine and I ought to be able to access the accumulated results. There are some force/torque accessors as members of physics::Link\r\n\r\n```\r\n#!c++\r\nVector3 torque = this->link_->GetWorldForce();\r\nVector3 torque = this->link_->GetWorldTorque();\r\n```\r\n\r\nHowever, the results always seem to be zeros. Am I on the right track with this, is there an easier way?\r\n\r\nMany thanks,", "markup": "markdown", "html": "<p><em>Situation</em>: Trying to write a plugin to determine exernal contact forces on a link and publish to a ROS msg.</p>\n<p><em>Status</em>: I have a custom SensorPlugin class written which takes the associated Contact sensor and I can access all the contact data from the gazebo msgs::Contacts. I've verified this some simple printfs.</p>\n<p><em>Next Steps</em>: I'd like to accumulate all external forces/torques and publish a single external force wrench in the link coord frame to a ROS msg. Publishing to Ros is fairly straightforward and there are a number of good code examples to go on. My current issue is with manipulating data coming from the sensor.</p>\n<p>In my ContactPlugin load fn I grab a ptr to the physics::Link</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">world_</span> <span class=\"o\">=</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">get_world</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWorldName</span><span class=\"p\">());</span>\n<span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">EntityPtr</span> <span class=\"n\">ent</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">world_</span><span class=\"o\">-&gt;</span><span class=\"n\">GetEntity</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">GetParentName</span><span class=\"p\">());</span>\n<span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">Link</span> <span class=\"o\">*</span> <span class=\"n\">lnk</span> <span class=\"o\">=</span> <span class=\"k\">dynamic_cast</span><span class=\"o\">&lt;</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">Link</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">ent</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">());</span>\n<span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">link_</span><span class=\"p\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"n\">lnk</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>In my update function I can grab current pose and contact data from sensor as follows:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">Contacts</span> <span class=\"n\">contacts</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">GetContacts</span><span class=\"p\">();</span>\n<span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Pose</span> <span class=\"n\">pose</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">link_</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWorldPose</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>First question:\nWhat cardinal point on my link does the pose correspond to, i.e. a point of (0,0,0) in the link frame would be where? At the cg or proximal at the output of the parent joint?</p>\n<p>Second question:\nI could iterate through all contacts accumulating forces in the link frame</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">Vector3</span> <span class=\"n\">tot_force</span><span class=\"p\">;</span>\n<span class=\"n\">Vector3</span> <span class=\"n\">tot_moment</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">contacts</span><span class=\"p\">.</span><span class=\"n\">contact_size</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">//transorm force and moment to link frame</span>\n    <span class=\"n\">tot_foce</span> <span class=\"o\">+=</span> <span class=\"n\">new_force</span><span class=\"p\">;</span>\n    <span class=\"n\">tot_moment</span> <span class=\"o\">+=</span> <span class=\"n\">new_moment</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>However, this seems like something that would've already been done by your physics engine and I ought to be able to access the accumulated results. There are some force/torque accessors as members of physics::Link</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">Vector3</span> <span class=\"n\">torque</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">link_</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWorldForce</span><span class=\"p\">();</span>\n<span class=\"n\">Vector3</span> <span class=\"n\">torque</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">link_</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWorldTorque</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>However, the results always seem to be zeros. Am I on the right track with this, is there an easier way?</p>\n<p>Many thanks,</p>", "type": "rendered"}, "assignee": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2012-12-17T19:35:14.916058+00:00", "milestone": null, "updated_on": "2016-09-14T19:43:49.834568+00:00", "type": "issue", "id": 310}