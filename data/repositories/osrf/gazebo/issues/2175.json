{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2175/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2175.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2175/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2175/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2175/ode-contact-points-not-displaying-on"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2175/vote"}}, "reporter": {"display_name": "Jennifer Buehler", "uuid": "{5949baad-8c43-4d52-9a82-bb8c3511fed8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D"}, "html": {"href": "https://bitbucket.org/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/b28ae0e95eada6ee16f0860c1fa59fdcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJB-4.png"}}, "nickname": "JenniferBuehler", "type": "user", "account_id": "557058:96bd489a-ec14-4a06-8d31-7bb6d46d1209"}, "title": "ODE contact points not displaying on bodies which are not moving", "component": {"name": "physics::ODEPhysics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122883.json"}}}, "votes": 1, "watches": 2, "content": {"raw": "ODE has a nice feature to automatically disable bodies when they are not moving. This is great for performance. However there is one issue with this.\r\nODEPhysics skips disabled bodies in [ODEPhysics::CollisionCallback](#!/osrf/gazebo/src/d9caf6c36a9f78ce6ab2a1fa2f7ddef06084d889/gazebo/physics/ode/ODEPhysics.cc?at=default&fileviewer=file-view-default#ODEPhysics.cc-965) which is called from [ODEPhysics::UpdateCollision](#!/osrf/gazebo/src/d9caf6c36a9f78ce6ab2a1fa2f7ddef06084d889/gazebo/physics/ode/ODEPhysics.cc?at=default&fileviewer=file-view-default#ODEPhysics.cc-382).\r\n\r\nThis affects computation of the contact points in the function [ODEPhysics::Collide()](#!/osrf/gazebo/src/d9caf6c36a9f78ce6ab2a1fa2f7ddef06084d889/gazebo/physics/ode/ODEPhysics.cc?at=default&fileviewer=file-view-default#ODEPhysics.cc-1004) which is then called later for all bodies not skipped in CollisionCallback. So in effect, no contact points are computed for links which are not moving and which are in contact with other non-moving links. This is certainly done for performance reasons.\r\n\r\nThe issue with this is: ODEPhysics::Collide() adds the contact information to the physics::ContactManager. But Collide() is only called for enabled bodies. Now if there is a subscriber to the contact points topic, they would not receive the contact points between the not moving links. But depending on the application, subscribers may also need the contact points between still objects. Example: the gzclient visualization doesn't show objects which are still. This can be tested by:\r\n\r\n1. Starting gazebo in paused mode\r\n2. Putting a sphere on the ground\r\n3. Switching on Contacts visualization\r\n4. Hit Play\r\n5. Waiting until the object is still: The contact point will disappear.\r\n\r\nThis doesn't happen with Bullet.\r\n\r\nI found this can be solved by [some changes to ContactPointManager in my branch contact_manager_enforcable_additions](https://bitbucket.org/JenniferBuehler/gazebo/diff/gazebo/physics/ContactManager.hh?diff2=0098d8d9839f&at=contact_manager_enforcable_additions#Lgazebo/physics/ContactManager.hhT106) (see also pull request #2629) and changing following lines in ODEPhysics::CollisionCallback:\r\n\r\n```cpp\r\n    // Exit if both bodies are not enabled\r\n    if (dGeomGetCategoryBits(_o1) != GZ_SENSOR_COLLIDE &&\r\n        dGeomGetCategoryBits(_o2) != GZ_SENSOR_COLLIDE &&\r\n        !self->contactManager->ContactsEnforced() &&\r\n        !self->contactManager->SubscribersConnected(collision1, collision2) &&\r\n        ((b1 && b2 && !dBodyIsEnabled(b1) && !dBodyIsEnabled(b2)) ||\r\n        (!b2 && b1 && !dBodyIsEnabled(b1)) ||\r\n        (!b1 && b2 && !dBodyIsEnabled(b2))))\r\n    {\r\n      return;\r\n    }\r\n```\r\n\r\nEffectively this enforces the treatment of colliding objects if there are subscribers to the contact points (or if has been enforced for another reason).\r\n\r\nHowever my only concern with this is that ODEPhysics::Collide() does not only fill in the contact point feedback, but also [creates contact joints](#!/osrf/gazebo/src/d9caf6c36a9f78ce6ab2a1fa2f7ddef06084d889/gazebo/physics/ode/ODEPhysics.cc?at=default&fileviewer=file-view-default#ODEPhysics.cc-1280). I am not sure how they are used, and if this could badly impact performance while there are any contact point subscribers.\r\n\r\nAny feedback on this would be appreciated so I can try to fix this up.", "markup": "markdown", "html": "<p>ODE has a nice feature to automatically disable bodies when they are not moving. This is great for performance. However there is one issue with this.\nODEPhysics skips disabled bodies in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/d9caf6c36a9f78ce6ab2a1fa2f7ddef06084d889/gazebo/physics/ode/ODEPhysics.cc?at=default&amp;fileviewer=file-view-default#ODEPhysics.cc-965\" rel=\"nofollow\">ODEPhysics::CollisionCallback</a> which is called from <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/d9caf6c36a9f78ce6ab2a1fa2f7ddef06084d889/gazebo/physics/ode/ODEPhysics.cc?at=default&amp;fileviewer=file-view-default#ODEPhysics.cc-382\" rel=\"nofollow\">ODEPhysics::UpdateCollision</a>.</p>\n<p>This affects computation of the contact points in the function <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/d9caf6c36a9f78ce6ab2a1fa2f7ddef06084d889/gazebo/physics/ode/ODEPhysics.cc?at=default&amp;fileviewer=file-view-default#ODEPhysics.cc-1004\" rel=\"nofollow\">ODEPhysics::Collide()</a> which is then called later for all bodies not skipped in CollisionCallback. So in effect, no contact points are computed for links which are not moving and which are in contact with other non-moving links. This is certainly done for performance reasons.</p>\n<p>The issue with this is: ODEPhysics::Collide() adds the contact information to the physics::ContactManager. But Collide() is only called for enabled bodies. Now if there is a subscriber to the contact points topic, they would not receive the contact points between the not moving links. But depending on the application, subscribers may also need the contact points between still objects. Example: the gzclient visualization doesn't show objects which are still. This can be tested by:</p>\n<ol>\n<li>Starting gazebo in paused mode</li>\n<li>Putting a sphere on the ground</li>\n<li>Switching on Contacts visualization</li>\n<li>Hit Play</li>\n<li>Waiting until the object is still: The contact point will disappear.</li>\n</ol>\n<p>This doesn't happen with Bullet.</p>\n<p>I found this can be solved by <a data-is-external-link=\"true\" href=\"https://bitbucket.org/JenniferBuehler/gazebo/diff/gazebo/physics/ContactManager.hh?diff2=0098d8d9839f&amp;at=contact_manager_enforcable_additions#Lgazebo/physics/ContactManager.hhT106\" rel=\"nofollow\">some changes to ContactPointManager in my branch contact_manager_enforcable_additions</a> (see also <a href=\"#!/osrf/gazebo/pull-requests/2629/possibility-to-enforce-contact-addition-in\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2629</a>) and changing following lines in ODEPhysics::CollisionCallback:</p>\n<div class=\"codehilite language-cpp\"><pre><span></span>    <span class=\"c1\">// Exit if both bodies are not enabled</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dGeomGetCategoryBits</span><span class=\"p\">(</span><span class=\"n\">_o1</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">GZ_SENSOR_COLLIDE</span> <span class=\"o\">&amp;&amp;</span>\n        <span class=\"n\">dGeomGetCategoryBits</span><span class=\"p\">(</span><span class=\"n\">_o2</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">GZ_SENSOR_COLLIDE</span> <span class=\"o\">&amp;&amp;</span>\n        <span class=\"o\">!</span><span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">contactManager</span><span class=\"o\">-&gt;</span><span class=\"n\">ContactsEnforced</span><span class=\"p\">()</span> <span class=\"o\">&amp;&amp;</span>\n        <span class=\"o\">!</span><span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">contactManager</span><span class=\"o\">-&gt;</span><span class=\"n\">SubscribersConnected</span><span class=\"p\">(</span><span class=\"n\">collision1</span><span class=\"p\">,</span> <span class=\"n\">collision2</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n        <span class=\"p\">((</span><span class=\"n\">b1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">dBodyIsEnabled</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">dBodyIsEnabled</span><span class=\"p\">(</span><span class=\"n\">b2</span><span class=\"p\">))</span> <span class=\"o\">||</span>\n        <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">b2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">dBodyIsEnabled</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">))</span> <span class=\"o\">||</span>\n        <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">b1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">dBodyIsEnabled</span><span class=\"p\">(</span><span class=\"n\">b2</span><span class=\"p\">))))</span>\n    <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Effectively this enforces the treatment of colliding objects if there are subscribers to the contact points (or if has been enforced for another reason).</p>\n<p>However my only concern with this is that ODEPhysics::Collide() does not only fill in the contact point feedback, but also <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/d9caf6c36a9f78ce6ab2a1fa2f7ddef06084d889/gazebo/physics/ode/ODEPhysics.cc?at=default&amp;fileviewer=file-view-default#ODEPhysics.cc-1280\" rel=\"nofollow\">creates contact joints</a>. I am not sure how they are used, and if this could badly impact performance while there are any contact point subscribers.</p>\n<p>Any feedback on this would be appreciated so I can try to fix this up.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-02-01T00:39:41.074022+00:00", "milestone": null, "updated_on": "2018-12-07T21:19:14.537496+00:00", "type": "issue", "id": 2175}