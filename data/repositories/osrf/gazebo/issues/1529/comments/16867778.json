{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1529/comments/16867778.json"}, "html": {"href": "#!/osrf/gazebo/issues/1529#comment-16867778"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1529.json"}}, "type": "issue", "id": 1529, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Alternative approach to including ign-math (formerly pull request #1535)"}, "content": {"raw": "I'll respond to one point:\n\n* Option A: Con 1: \"We could keep the typedefs, and never change gazebo's api to use the ignition::math namespace. This would require more maintenance on our part, would eventually become technically impractical, and serves no purpose other than to hide ignition::math from users.\"\n\nI personally don't see the harm in keeping the typedefs. Without specific examples, these points (more maintenance, impracticality) sound hypothetical to me. Also, they wouldn't be serving \"no other purpose\", they would be providing a compatibility layer to minimize required changes in downstream code.\n\nI think the biggest downstream package that would be affected by this is [gazebo_ros_pkgs](https://github.com/ros-simulation/gazebo_ros_pkgs). If we choose Option B, we need to make sure the tick-tock aligns with ROS cycle. Also, it may make it impractical to support multiple gazebo versions `ros-jade-gazeboX-ros-pkgs` during the tick-tock without `ifdef`'s. I suspect that the majority of `gazebo_ros_pkgs` users use the default ROS version of gazebo, so this should affect a minority of users (not sure how big a minority).\n\nHere I'll include an example of how long-term migration could look with `gazebo::math::` typedefs:\n\n~~~\n// gazebo5 API\ngazebo::math::Vector3 vec;\nvec.z = -5.0;\n~~~\n\nSince ignition uses templates for Vector3, the `gazebo::math::Vector3` symbol would point to `ignition::math::Vector3d`, which should work. The API has changed, with attribute access removed, so this code would give warnings and should be changed:\n\n~~~\n// gazebo6 transition API\ngazebo::math::Vector3 vec;\nvec.Z() = -5.0;\n~~~\n\nIf the user wants to use the templated form of Vector3, they would need to use the `ignition::math::Vector3` class.\n\nIf this is too confusing to users, so be it; we can use Option B. I just want to have a fair discussion and give consideration to an option that may be easier to implement.", "markup": "markdown", "html": "<p>I'll respond to one point:</p>\n<ul>\n<li>Option A: Con 1: \"We could keep the typedefs, and never change gazebo's api to use the ignition::math namespace. This would require more maintenance on our part, would eventually become technically impractical, and serves no purpose other than to hide ignition::math from users.\"</li>\n</ul>\n<p>I personally don't see the harm in keeping the typedefs. Without specific examples, these points (more maintenance, impracticality) sound hypothetical to me. Also, they wouldn't be serving \"no other purpose\", they would be providing a compatibility layer to minimize required changes in downstream code.</p>\n<p>I think the biggest downstream package that would be affected by this is <a data-is-external-link=\"true\" href=\"https://github.com/ros-simulation/gazebo_ros_pkgs\" rel=\"nofollow\">gazebo_ros_pkgs</a>. If we choose Option B, we need to make sure the tick-tock aligns with ROS cycle. Also, it may make it impractical to support multiple gazebo versions <code>ros-jade-gazeboX-ros-pkgs</code> during the tick-tock without <code>ifdef</code>'s. I suspect that the majority of <code>gazebo_ros_pkgs</code> users use the default ROS version of gazebo, so this should affect a minority of users (not sure how big a minority).</p>\n<p>Here I'll include an example of how long-term migration could look with <code>gazebo::math::</code> typedefs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">//</span> <span class=\"nt\">gazebo5</span> <span class=\"nt\">API</span>\n<span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">math</span><span class=\"p\">::</span><span class=\"nd\">Vector3</span> <span class=\"nt\">vec</span><span class=\"o\">;</span>\n<span class=\"nt\">vec</span><span class=\"p\">.</span><span class=\"nc\">z</span> <span class=\"o\">=</span> <span class=\"nt\">-5</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<p>Since ignition uses templates for Vector3, the <code>gazebo::math::Vector3</code> symbol would point to <code>ignition::math::Vector3d</code>, which should work. The API has changed, with attribute access removed, so this code would give warnings and should be changed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">//</span> <span class=\"nt\">gazebo6</span> <span class=\"nt\">transition</span> <span class=\"nt\">API</span>\n<span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">math</span><span class=\"p\">::</span><span class=\"nd\">Vector3</span> <span class=\"nt\">vec</span><span class=\"o\">;</span>\n<span class=\"nt\">vec</span><span class=\"p\">.</span><span class=\"nc\">Z</span><span class=\"o\">()</span> <span class=\"o\">=</span> <span class=\"nt\">-5</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<p>If the user wants to use the templated form of Vector3, they would need to use the <code>ignition::math::Vector3</code> class.</p>\n<p>If this is too confusing to users, so be it; we can use Option B. I just want to have a fair discussion and give consideration to an option that may be easier to implement.</p>", "type": "rendered"}, "created_on": "2015-03-24T19:20:59.514365+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 16867778}