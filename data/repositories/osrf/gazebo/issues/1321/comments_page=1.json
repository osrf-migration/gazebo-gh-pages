{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/18284401.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-18284401"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2015-05-22T08:28:22.944631+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": null, "type": "issue_comment", "id": 18284401}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/20727037.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-20727037"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": "@traversaro: Did you implement the `GetForceTorque()` approach? We're currently also looking into the issue and I have not found a way of getting joint torque apart from using `GetForceTorque()` and wrapping computation for projection on the joint axis around it.\n", "markup": "markdown", "html": "<p>@traversaro: Did you implement the <code>GetForceTorque()</code> approach? We're currently also looking into the issue and I have not found a way of getting joint torque apart from using <code>GetForceTorque()</code> and wrapping computation for projection on the joint axis around it.</p>", "type": "rendered"}, "created_on": "2015-08-06T07:34:30.352311+00:00", "user": {"display_name": "Stefan Kohlbrecher", "uuid": "{db06b03e-7b31-4483-9018-534df5bd723f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb06b03e-7b31-4483-9018-534df5bd723f%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb06b03e-7b31-4483-9018-534df5bd723f%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/414f1c364e6406dde31a6ef70fbd3d21d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSK-6.png"}}, "nickname": "Stefan_Kohlbrecher", "type": "user", "account_id": "557058:e39b6a62-9eb0-45ca-b27e-4f6445009d3f"}, "updated_on": null, "type": "issue_comment", "id": 20727037}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/20728611.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-20728611"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": "@Stefan_Kohlbrecher\n Actually I did not progress further on this issue. \n\nCurrently we are simulating the low level torque control with just a simple call to `Joint::SetForce()`, even if in our real robot (the iCub humanoid) we have a joint torque control with \nfeedforward friction compensation and a feedback control closed on a measurement of the `joint torque`. \n\nAnyway I worked a bit on implementing some new tests for the `Joint::GetForceTorque()` as part of the implementation of fixed joints (in #!/osrf/gazebo/pull-requests/1747/support-for-fixed-joints/diff). \nUnfortunatly all this tests are in conditions where the bodies don't move. To actually asses the behaviour of  `Joint::GetForceTorque()` for getting `joint torques` the easiest way would be to set up a simple test scenario of a moving joint, for example a classical pendulum rigidly connected to the world in zero gravity. In that case we could control the joint to spin at constant velocity, and in this simple case we would know the analytical values for viscous friction, coulomb friction (and consequently `motor torque` and `joint torque`) and we could check the value returned by `Joint::GetForceTorque()`. Unfortunatly at the moment I don't have time to do this in the short term, but I would be happy to help if you want try to implement such a test. \n\nAnyway I saw that there is an ongoing gazebo_design document related to simulate transmission and motor properties at #!/osrf/gazebo_design/branch/transmission . I don't know if OSRF folks are already happy to receive a feedback on it, but it is definitly relevant to this issue. \n\nFYI, we are also tryng to understand to which extend we could simulate SEA joint torque control with the existing gazebo infrastructure, our (downstream) issue relevant to this topic is : https://github.com/robotology/gazebo-yarp-plugins/issues/192 .", "markup": "markdown", "html": "<p>@Stefan_Kohlbrecher\n Actually I did not progress further on this issue. </p>\n<p>Currently we are simulating the low level torque control with just a simple call to <code>Joint::SetForce()</code>, even if in our real robot (the iCub humanoid) we have a joint torque control with \nfeedforward friction compensation and a feedback control closed on a measurement of the <code>joint torque</code>. </p>\n<p>Anyway I worked a bit on implementing some new tests for the <code>Joint::GetForceTorque()</code> as part of the implementation of fixed joints (in <a href=\"#!/osrf/gazebo/pull-requests/1747/support-for-fixed-joints/diff\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/pull-requests/1747/support-for-fixed-joints/diff</a>). \nUnfortunatly all this tests are in conditions where the bodies don't move. To actually asses the behaviour of  <code>Joint::GetForceTorque()</code> for getting <code>joint torques</code> the easiest way would be to set up a simple test scenario of a moving joint, for example a classical pendulum rigidly connected to the world in zero gravity. In that case we could control the joint to spin at constant velocity, and in this simple case we would know the analytical values for viscous friction, coulomb friction (and consequently <code>motor torque</code> and <code>joint torque</code>) and we could check the value returned by <code>Joint::GetForceTorque()</code>. Unfortunatly at the moment I don't have time to do this in the short term, but I would be happy to help if you want try to implement such a test. </p>\n<p>Anyway I saw that there is an ongoing gazebo_design document related to simulate transmission and motor properties at <a href=\"#!/osrf/gazebo_design/branch/transmission\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo_design/branch/transmission</a> . I don't know if OSRF folks are already happy to receive a feedback on it, but it is definitly relevant to this issue. </p>\n<p>FYI, we are also tryng to understand to which extend we could simulate SEA joint torque control with the existing gazebo infrastructure, our (downstream) issue relevant to this topic is : <a href=\"https://github.com/robotology/gazebo-yarp-plugins/issues/192\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/robotology/gazebo-yarp-plugins/issues/192</a> .</p>", "type": "rendered"}, "created_on": "2015-08-06T08:43:06.449892+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": "2015-08-06T08:45:53.870702+00:00", "type": "issue_comment", "id": 20728611}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/24919081.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-24919081"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": "I tried using \n```\n#!c++\n\nJoint::GetForceTorque()\n```\n on the drcsim atlas robot version 5 without controllers to get the joint torques, but it returns 0 for all joints except the last x-joints in every limb, where it return ridiculously high values. So this does not look to me, as if it would work.", "markup": "markdown", "html": "<p>I tried using </p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">Joint</span><span class=\"o\">::</span><span class=\"n\">GetForceTorque</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>on the drcsim atlas robot version 5 without controllers to get the joint torques, but it returns 0 for all joints except the last x-joints in every limb, where it return ridiculously high values. So this does not look to me, as if it would work.</p>", "type": "rendered"}, "created_on": "2016-01-22T15:05:51.176308+00:00", "user": {"display_name": "Jonathan Vorndamme", "uuid": "{514987f5-ddb9-4e64-9cb0-498fc6431077}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B514987f5-ddb9-4e64-9cb0-498fc6431077%7D"}, "html": {"href": "https://bitbucket.org/%7B514987f5-ddb9-4e64-9cb0-498fc6431077%7D/"}, "avatar": {"href": "https://bitbucket.org/account/vorndamme/avatar/"}}, "nickname": "vorndamme", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 24919081}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/25086804.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-25086804"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": "I had to configure all joints to provide feedback (via Joint::SetProvideFeedback(true)) to get return values for all joints. I looked in the implementation of GetForceTorque() for odeHingeJoints, and i think, there is an error in the implementation, because the joint torque is calculated in the child link frame and subtracted in the parent link frame without transformation.\n\nAlso, when testing the approach, i recognized, that SetForce() sometimes has no effect (see #!/osrf/gazebo/issues/1848/setforce-on-joint-has-no-effect).", "markup": "markdown", "html": "<p>I had to configure all joints to provide feedback (via Joint::SetProvideFeedback(true)) to get return values for all joints. I looked in the implementation of GetForceTorque() for odeHingeJoints, and i think, there is an error in the implementation, because the joint torque is calculated in the child link frame and subtracted in the parent link frame without transformation.</p>\n<p>Also, when testing the approach, i recognized, that SetForce() sometimes has no effect (see <a href=\"#!/osrf/gazebo/issues/1848/setforce-on-joint-has-no-effect\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/issues/1848/setforce-on-joint-has-no-effect</a>).</p>", "type": "rendered"}, "created_on": "2016-01-29T11:01:27.889099+00:00", "user": {"display_name": "Jonathan Vorndamme", "uuid": "{514987f5-ddb9-4e64-9cb0-498fc6431077}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B514987f5-ddb9-4e64-9cb0-498fc6431077%7D"}, "html": {"href": "https://bitbucket.org/%7B514987f5-ddb9-4e64-9cb0-498fc6431077%7D/"}, "avatar": {"href": "https://bitbucket.org/account/vorndamme/avatar/"}}, "nickname": "vorndamme", "type": "user", "account_id": null}, "updated_on": "2016-01-29T11:01:58.473740+00:00", "type": "issue_comment", "id": 25086804}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/25091651.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-25091651"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": "@vorndamme can you link the line of code in which you think you found that problem? \n\nIt would not surprise me if there is a bug like that: the test case present in the moment are not checking really dynamic situations. \nI think that a simple test scenario of a moving joint, for example a classical pendulum rigidly connected to the world in zero gravity would be the best way of debug the problem. \n\n", "markup": "markdown", "html": "<p>@vorndamme can you link the line of code in which you think you found that problem? </p>\n<p>It would not surprise me if there is a bug like that: the test case present in the moment are not checking really dynamic situations. \nI think that a simple test scenario of a moving joint, for example a classical pendulum rigidly connected to the world in zero gravity would be the best way of debug the problem. </p>", "type": "rendered"}, "created_on": "2016-01-29T13:59:07.089216+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": null, "type": "issue_comment", "id": 25091651}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/25092148.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-25092148"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": "it's #!/osrf/gazebo/src/6e6665bf4ea289af724c87372e3d8d98c09aeca8/gazebo/physics/ode/ODEJoint.cc?at=default&fileviewer=file-view-default in line 656 and 657,\n```\n#!c++\n\n wrenchAppliedWorld.body2Torque =\n        this->GetForce(0u) * this->GetLocalAxis(0u);\n```\n the wrench according to the setted force is calculated in child link frame as it uses GetLocalAxis(), the negative value is set for the parent joint in line 663\n```\n#!c++\n\nwrenchAppliedWorld.body1Torque = -wrenchAppliedWorld.body2Torque;\n```\nand in line 825 this wrench is added to the overall result\n```\n#!c++\n\nthis->wrench = this->wrench - wrenchAppliedWorld;\n```\nbut the result is in the respective jointframes (see lines 711-717\n```\n#!c++\n\n// rotate resulting body2Force in world frame into link frame\n      this->wrench.body2Force = childPose.rot.RotateVectorReverse(\n        -this->wrench.body2Force);\n\n      // rotate resulting body2Torque in world frame into link frame\n      this->wrench.body2Torque = childPose.rot.RotateVectorReverse(\n        -this->wrench.body2Torque);\n```\nand lines 770-776\n```\n#!c++\n\n      // rotate resulting body1Force in world frame into link frame\n      this->wrench.body1Force = parentPose.rot.RotateVectorReverse(\n        -this->wrench.body1Force);\n\n      // rotate resulting body1Torque in world frame into link frame\n      this->wrench.body1Torque = parentPose.rot.RotateVectorReverse(\n        -this->wrench.body1Torque);\n```\n), which means in line 825 we add a torque expressed in child frame to a torque expressed in parent frame.", "markup": "markdown", "html": "<p>it's <a href=\"#!/osrf/gazebo/src/6e6665bf4ea289af724c87372e3d8d98c09aeca8/gazebo/physics/ode/ODEJoint.cc?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/6e6665bf4ea289af724c87372e3d8d98c09aeca8/gazebo/physics/ode/ODEJoint.cc?at=default&amp;fileviewer=file-view-default</a> in line 656 and 657,</p>\n<div class=\"codehilite language-c++\"><pre><span></span> <span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">.</span><span class=\"n\">body2Torque</span> <span class=\"o\">=</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetForce</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetLocalAxis</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>the wrench according to the setted force is calculated in child link frame as it uses GetLocalAxis(), the negative value is set for the parent joint in line 663</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">.</span><span class=\"n\">body1Torque</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">.</span><span class=\"n\">body2Torque</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>and in line 825 this wrench is added to the overall result</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span> <span class=\"o\">-</span> <span class=\"n\">wrenchAppliedWorld</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>but the result is in the respective jointframes (see lines 711-717</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// rotate resulting body2Force in world frame into link frame</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span><span class=\"p\">.</span><span class=\"n\">body2Force</span> <span class=\"o\">=</span> <span class=\"n\">childPose</span><span class=\"p\">.</span><span class=\"n\">rot</span><span class=\"p\">.</span><span class=\"n\">RotateVectorReverse</span><span class=\"p\">(</span>\n        <span class=\"o\">-</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span><span class=\"p\">.</span><span class=\"n\">body2Force</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// rotate resulting body2Torque in world frame into link frame</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span><span class=\"p\">.</span><span class=\"n\">body2Torque</span> <span class=\"o\">=</span> <span class=\"n\">childPose</span><span class=\"p\">.</span><span class=\"n\">rot</span><span class=\"p\">.</span><span class=\"n\">RotateVectorReverse</span><span class=\"p\">(</span>\n        <span class=\"o\">-</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span><span class=\"p\">.</span><span class=\"n\">body2Torque</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>and lines 770-776</p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"c1\">// rotate resulting body1Force in world frame into link frame</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span><span class=\"p\">.</span><span class=\"n\">body1Force</span> <span class=\"o\">=</span> <span class=\"n\">parentPose</span><span class=\"p\">.</span><span class=\"n\">rot</span><span class=\"p\">.</span><span class=\"n\">RotateVectorReverse</span><span class=\"p\">(</span>\n        <span class=\"o\">-</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span><span class=\"p\">.</span><span class=\"n\">body1Force</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// rotate resulting body1Torque in world frame into link frame</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span><span class=\"p\">.</span><span class=\"n\">body1Torque</span> <span class=\"o\">=</span> <span class=\"n\">parentPose</span><span class=\"p\">.</span><span class=\"n\">rot</span><span class=\"p\">.</span><span class=\"n\">RotateVectorReverse</span><span class=\"p\">(</span>\n        <span class=\"o\">-</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">wrench</span><span class=\"p\">.</span><span class=\"n\">body1Torque</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>), which means in line 825 we add a torque expressed in child frame to a torque expressed in parent frame.</p>", "type": "rendered"}, "created_on": "2016-01-29T14:18:50.773466+00:00", "user": {"display_name": "Jonathan Vorndamme", "uuid": "{514987f5-ddb9-4e64-9cb0-498fc6431077}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B514987f5-ddb9-4e64-9cb0-498fc6431077%7D"}, "html": {"href": "https://bitbucket.org/%7B514987f5-ddb9-4e64-9cb0-498fc6431077%7D/"}, "avatar": {"href": "https://bitbucket.org/account/vorndamme/avatar/"}}, "nickname": "vorndamme", "type": "user", "account_id": null}, "updated_on": "2016-01-29T15:08:07.394768+00:00", "type": "issue_comment", "id": 25092148}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/25101639.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-25101639"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": "pull request #2110", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo/pull-requests/2110/changed-the-calculation-of-force-torque-on\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2110</a></p>", "type": "rendered"}, "created_on": "2016-01-29T21:28:58.348240+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 25101639}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/25112525.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-25112525"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": "For the sake of precision: [pull request #2110](#!/osrf/gazebo/pull-requests/2110/changed-the-calculation-of-force-torque-on) is a PR that is solving a bug that was reported in this issue, but it is not solving the issue itself. I will write a brief recap for people that does not want to read all the issue. \n\nTL;DR: This issue is about the simulation of joint torque sensors that measure the torque exerted by the output shaft of the transmission to the robot, i.e. the `joint torque`. This sensors are usually implemented by measuring the deformation of an elastic element mounted between the trasmission and the robot. This deformation can be measured using a pair of encoders (as in Valkyrie [1] or iCub [3] ) or using straingauge sensors (as in the DLR LWR [2]). Depending on the elasticity of the deformed element and its effect on the robot dynamics, it could make sense to explicitly model the elastic element in the simulation as a joint elasticity. In this case, the `joint torque` can then be obtained from simulation using the measure of the two simulated encoders [4][5]. If the elastic element is too stiff to be efficiently simulated, it would then make to get the `joint torques` directly from the physics engine as the difference between the torque given as input to the joint (the `motor torque`) and the friction torques.  \n\n\n\n[1] : http://www.me.utexas.edu/~hcrl/publications/JFR-Valkyrie-Actuator-Control-Final.pdf \n\n[2] : http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1014788\n\n[3] : http://pasa.lira.dist.unige.it/pasapdf/1245_Parmiggiani_etal2012.pdf\n\n[4] : https://github.com/robotology/gazebo-yarp-plugins/issues/192\n\n[5] : #!/osrf/gazebo/pull-request/735/create-spring-damper-in-joints-issue-845/diff#comment-671487\n", "markup": "markdown", "html": "<p>For the sake of precision: <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/pull-requests/2110/changed-the-calculation-of-force-torque-on\" rel=\"nofollow\">pull request #2110</a> is a PR that is solving a bug that was reported in this issue, but it is not solving the issue itself. I will write a brief recap for people that does not want to read all the issue. </p>\n<p>TL;DR: This issue is about the simulation of joint torque sensors that measure the torque exerted by the output shaft of the transmission to the robot, i.e. the <code>joint torque</code>. This sensors are usually implemented by measuring the deformation of an elastic element mounted between the trasmission and the robot. This deformation can be measured using a pair of encoders (as in Valkyrie [1] or iCub [3] ) or using straingauge sensors (as in the DLR LWR [2]). Depending on the elasticity of the deformed element and its effect on the robot dynamics, it could make sense to explicitly model the elastic element in the simulation as a joint elasticity. In this case, the <code>joint torque</code> can then be obtained from simulation using the measure of the two simulated encoders [4][5]. If the elastic element is too stiff to be efficiently simulated, it would then make to get the <code>joint torques</code> directly from the physics engine as the difference between the torque given as input to the joint (the <code>motor torque</code>) and the friction torques.  </p>\n<p>[1] : <a href=\"http://www.me.utexas.edu/~hcrl/publications/JFR-Valkyrie-Actuator-Control-Final.pdf\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.me.utexas.edu/~hcrl/publications/JFR-Valkyrie-Actuator-Control-Final.pdf</a> </p>\n<p>[2] : <a href=\"http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1014788\" rel=\"nofollow\" class=\"ap-connect-link\">http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1014788</a></p>\n<p>[3] : <a href=\"http://pasa.lira.dist.unige.it/pasapdf/1245_Parmiggiani_etal2012.pdf\" rel=\"nofollow\" class=\"ap-connect-link\">http://pasa.lira.dist.unige.it/pasapdf/1245_Parmiggiani_etal2012.pdf</a></p>\n<p>[4] : <a href=\"https://github.com/robotology/gazebo-yarp-plugins/issues/192\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/robotology/gazebo-yarp-plugins/issues/192</a></p>\n<p>[5] : <a href=\"#!/osrf/gazebo/pull-request/735/create-spring-damper-in-joints-issue-845/diff#comment-671487\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/pull-request/735/create-spring-damper-in-joints-issue-845/diff#comment-671487</a></p>", "type": "rendered"}, "created_on": "2016-01-30T17:44:26.940253+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": "2016-01-30T17:51:36.467374+00:00", "type": "issue_comment", "id": 25112525}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/30611000.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-30611000"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:24:00.136059+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30611000}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321/comments/37253287.json"}, "html": {"href": "#!/osrf/gazebo/issues/1321#comment-37253287"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1321.json"}}, "type": "issue", "id": 1321, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Proper joint torque feedback"}, "content": {"raw": "+1 on this issue. I've actually been attempting to track down an answer on this topic for the past few weeks [1]. I too want to simulate SEA's to properly compute the amount of torque experienced by each joint, so I'm thrilled to find this issue and your links, @traversaro. @nkoenig and @scpeters, any thoughts on how to add SEA joint-torque feedback as a Gazebo plugin, or as part of the `gazebo_ros_control`'s `robot_hw_sim` `hardware_interface`?\n\n\n[1] : http://answers.gazebosim.org/question/15987/understanding-gazebophysicsjointgetforce-return-wrench/", "markup": "markdown", "html": "<p>+1 on this issue. I've actually been attempting to track down an answer on this topic for the past few weeks [1]. I too want to simulate SEA's to properly compute the amount of torque experienced by each joint, so I'm thrilled to find this issue and your links, @traversaro. @nkoenig and @scpeters, any thoughts on how to add SEA joint-torque feedback as a Gazebo plugin, or as part of the <code>gazebo_ros_control</code>'s <code>robot_hw_sim</code> <code>hardware_interface</code>?</p>\n<p>[1] : <a href=\"http://answers.gazebosim.org/question/15987/understanding-gazebophysicsjointgetforce-return-wrench/\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org/question/15987/understanding-gazebophysicsjointgetforce-return-wrench/</a></p>", "type": "rendered"}, "created_on": "2017-05-30T14:24:45.196735+00:00", "user": {"display_name": "Ian McMahon", "uuid": "{93545a49-be45-4652-b51b-4497d4610477}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B93545a49-be45-4652-b51b-4497d4610477%7D"}, "html": {"href": "https://bitbucket.org/%7B93545a49-be45-4652-b51b-4497d4610477%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/f151b1251ceeca20282ae19b547911e6d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIM-0.png"}}, "nickname": "IanTheEngineer", "type": "user", "account_id": "557058:3502452e-a096-45d7-940b-ff670cbcc77f"}, "updated_on": null, "type": "issue_comment", "id": 37253287}], "page": 1, "size": 11}