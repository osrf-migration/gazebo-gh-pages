{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965/comments/7070868.json"}, "html": {"href": "#!/osrf/gazebo/issues/965#comment-7070868"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965.json"}}, "type": "issue", "id": 965, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "physics::Base::childrenEnd causes failures with libc++"}, "content": {"raw": "To clarify, the failures I'm referring to are seg-faults.", "markup": "markdown", "html": "<p>To clarify, the failures I'm referring to are seg-faults.</p>", "type": "rendered"}, "created_on": "2013-11-26T20:46:03.015080+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7070868}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965/comments/7154292.json"}, "html": {"href": "#!/osrf/gazebo/issues/965#comment-7154292"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965.json"}}, "type": "issue", "id": 965, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "physics::Base::childrenEnd causes failures with libc++"}, "content": {"raw": "see pull request #857", "markup": "markdown", "html": "<p>see <a href=\"#!/osrf/gazebo/pull-requests/857/fix-memory-access-bugs-with-libc-on\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #857</a></p>", "type": "rendered"}, "created_on": "2013-12-03T01:44:00.724682+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7154292}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965/comments/7183375.json"}, "html": {"href": "#!/osrf/gazebo/issues/965#comment-7183375"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965.json"}}, "type": "issue", "id": 965, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "physics::Base::childrenEnd causes failures with libc++"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2013-12-04T17:45:28.978930+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7183375}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965/comments/7183457.json"}, "html": {"href": "#!/osrf/gazebo/issues/965#comment-7183457"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965.json"}}, "type": "issue", "id": 965, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "physics::Base::childrenEnd causes failures with libc++"}, "content": {"raw": "Here's a backtrace from running `gzserver` built from the 1.9 branch with build type RelWithDebInfo.\n~~~\nCore file '/cores/core.35043' (x86_64) was loaded.\nProcess 0 stopped\n* thread #1: tid = 0x0000, 0x00000001045f29e0 libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(boost::shared_ptr<gazebo::physics::World> const&) [inlined] boost::shared_ptr<gazebo::physics::Base>::operator->(this=0x0000000000000000) const + 2 at shared_ptr.hpp:653, stop reason = signal SIGSTOP\n    frame #0: 0x00000001045f29e0 libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(boost::shared_ptr<gazebo::physics::World> const&) [inlined] boost::shared_ptr<gazebo::physics::Base>::operator->(this=0x0000000000000000) const + 2 at shared_ptr.hpp:653\n   650 \t    // never throws (but has a BOOST_ASSERT in it, so not marked with BOOST_NOEXCEPT)\n   651 \t    typename boost::detail::sp_member_access< T >::type operator-> () const \n   652 \t    {\n-> 653 \t        BOOST_ASSERT( px != 0 );\n   654 \t        return px;\n   655 \t    }\n   656 \t    \n...\n(lldb) bt\n* thread #1: tid = 0x0000, 0x00000001045f29e0 libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(boost::shared_ptr<gazebo::physics::World> const&) [inlined] boost::shared_ptr<gazebo::physics::Base>::operator->(this=0x0000000000000000) const + 2 at shared_ptr.hpp:653, stop reason = signal SIGSTOP\n    frame #0: 0x00000001045f29e0 libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(boost::shared_ptr<gazebo::physics::World> const&) [inlined] boost::shared_ptr<gazebo::physics::Base>::operator->(this=0x0000000000000000) const + 2 at shared_ptr.hpp:653\n    frame #1: 0x00000001045f29de libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(this=0x00007fe835cbbf50, _newWorld=<unavailable>) + 110 at Base.cc:382\n    frame #2: 0x000000010467aec2 libgazebo_physics.1.dylib`gazebo::physics::World::Load(this=0x00007fe832831400, _sdf=<unavailable>) + 5506 at World.cc:214\n    frame #3: 0x00000001046662eb libgazebo_physics.1.dylib`gazebo::physics::load_world(_world=<unavailable>, _sdf=<unavailable>) + 59 at PhysicsIface.cc:119\n    frame #4: 0x00000001041e3df2 gzserver`gazebo::Server::LoadImpl(this=0x00007fe8325179b0, _elem=<unavailable>, _physics=<unavailable>) + 1618 at Server.cc:367\n    frame #5: 0x00000001041e2c6f gzserver`gazebo::Server::LoadFile(this=0x00007fe8325179b0, _filename=<unavailable>, _physics=0x00007fff5ba2e160) + 511 at Server.cc:290\n    frame #6: 0x00000001041e23a3 gzserver`gazebo::Server::ParseArgs(this=0x00007fe8325179b0, argc=1, argv=0x00007fe832517a30) + 8915 at Server.cc:247\n    frame #7: 0x00000001041ddc24 gzserver`main(argc=<unavailable>, argv=<unavailable>) + 500 at server_main.cc:40\n    frame #8: 0x00007fff970565fd libdyld.dylib`start + 1\n    frame #9: 0x00007fff970565fd libdyld.dylib`start + 1\n(lldb) \n~~~\n\nIt points to [Base.cc:382](#!/osrf/gazebo/src/gazebo_1.9/gazebo/physics/Base.cc#cl-382), which is the line inside the loop that contains `(*iter)->SetWorld(this->world);` in the Base::SetWorld function.\n~~~\nvoid Base::SetWorld(const WorldPtr &_newWorld)\n{\n  this->world = _newWorld;\n\n  Base_V::iterator iter;\n  for (iter = this->children.begin(); iter != this->childrenEnd; ++iter)\n  {\n    (*iter)->SetWorld(this->world);\n  }\n}\n~~~\nSeeing the failure in this loop made me suspect that `iter != this->childrenEnd` could be problematic. Replacing `childrenEnd` with `children.end()` fixes the problem in my testing on Mavericks and led to pull request #857.", "markup": "markdown", "html": "<p>Here's a backtrace from running <code>gzserver</code> built from the 1.9 branch with build type RelWithDebInfo.</p>\n<div class=\"codehilite\"><pre><span></span>Core file &#39;/cores/core.35043&#39; (x86_64) was loaded.\nProcess 0 stopped\n* thread #1: tid = 0x0000, 0x00000001045f29e0 libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(boost::shared_ptr&lt;gazebo::physics::World&gt; const&amp;) [inlined] boost::shared_ptr&lt;gazebo::physics::Base&gt;::operator-&gt;(this=0x0000000000000000) const + 2 at shared_ptr.hpp:653, stop reason = signal SIGSTOP\n    frame #0: 0x00000001045f29e0 libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(boost::shared_ptr&lt;gazebo::physics::World&gt; const&amp;) [inlined] boost::shared_ptr&lt;gazebo::physics::Base&gt;::operator-&gt;(this=0x0000000000000000) const + 2 at shared_ptr.hpp:653\n   650      // never throws (but has a BOOST_ASSERT in it, so not marked with BOOST_NOEXCEPT)\n   651      typename boost::detail::sp_member_access&lt; T &gt;::type operator-&gt; () const \n   652      {\n-&gt; 653          BOOST_ASSERT( px != 0 );\n   654          return px;\n   655      }\n   656      \n...\n(lldb) bt\n* thread #1: tid = 0x0000, 0x00000001045f29e0 libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(boost::shared_ptr&lt;gazebo::physics::World&gt; const&amp;) [inlined] boost::shared_ptr&lt;gazebo::physics::Base&gt;::operator-&gt;(this=0x0000000000000000) const + 2 at shared_ptr.hpp:653, stop reason = signal SIGSTOP\n    frame #0: 0x00000001045f29e0 libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(boost::shared_ptr&lt;gazebo::physics::World&gt; const&amp;) [inlined] boost::shared_ptr&lt;gazebo::physics::Base&gt;::operator-&gt;(this=0x0000000000000000) const + 2 at shared_ptr.hpp:653\n    frame #1: 0x00000001045f29de libgazebo_physics.1.dylib`gazebo::physics::Base::SetWorld(this=0x00007fe835cbbf50, _newWorld=&lt;unavailable&gt;) + 110 at Base.cc:382\n    frame #2: 0x000000010467aec2 libgazebo_physics.1.dylib`gazebo::physics::World::Load(this=0x00007fe832831400, _sdf=&lt;unavailable&gt;) + 5506 at World.cc:214\n    frame #3: 0x00000001046662eb libgazebo_physics.1.dylib`gazebo::physics::load_world(_world=&lt;unavailable&gt;, _sdf=&lt;unavailable&gt;) + 59 at PhysicsIface.cc:119\n    frame #4: 0x00000001041e3df2 gzserver`gazebo::Server::LoadImpl(this=0x00007fe8325179b0, _elem=&lt;unavailable&gt;, _physics=&lt;unavailable&gt;) + 1618 at Server.cc:367\n    frame #5: 0x00000001041e2c6f gzserver`gazebo::Server::LoadFile(this=0x00007fe8325179b0, _filename=&lt;unavailable&gt;, _physics=0x00007fff5ba2e160) + 511 at Server.cc:290\n    frame #6: 0x00000001041e23a3 gzserver`gazebo::Server::ParseArgs(this=0x00007fe8325179b0, argc=1, argv=0x00007fe832517a30) + 8915 at Server.cc:247\n    frame #7: 0x00000001041ddc24 gzserver`main(argc=&lt;unavailable&gt;, argv=&lt;unavailable&gt;) + 500 at server_main.cc:40\n    frame #8: 0x00007fff970565fd libdyld.dylib`start + 1\n    frame #9: 0x00007fff970565fd libdyld.dylib`start + 1\n(lldb) \n</pre></div>\n\n\n<p>It points to <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/gazebo_1.9/gazebo/physics/Base.cc#cl-382\" rel=\"nofollow\">Base.cc:382</a>, which is the line inside the loop that contains <code>(*iter)-&gt;SetWorld(this-&gt;world);</code> in the Base::SetWorld function.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">void</span> <span class=\"nt\">Base</span><span class=\"p\">::</span><span class=\"nd\">SetWorld</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">WorldPtr</span> <span class=\"o\">&amp;</span><span class=\"nt\">_newWorld</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">this-&gt;world</span> <span class=\"err\">=</span> <span class=\"err\">_newWorld</span><span class=\"p\">;</span>\n\n  <span class=\"n\">Base_V</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">iterator</span> <span class=\"n\">iter</span><span class=\"p\">;</span>\n  <span class=\"err\">for</span> <span class=\"err\">(iter</span> <span class=\"err\">=</span> <span class=\"err\">this-&gt;children.begin()</span><span class=\"p\">;</span> <span class=\"err\">iter</span> <span class=\"err\">!=</span> <span class=\"err\">this-&gt;childrenEnd</span><span class=\"p\">;</span> <span class=\"err\">++iter)</span>\n  <span class=\"err\">{</span>\n    <span class=\"err\">(*iter)-&gt;SetWorld(this-&gt;world)</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"err\">}</span>\n</pre></div>\n\n\n<p>Seeing the failure in this loop made me suspect that <code>iter != this-&gt;childrenEnd</code> could be problematic. Replacing <code>childrenEnd</code> with <code>children.end()</code> fixes the problem in my testing on Mavericks and led to <a href=\"#!/osrf/gazebo/pull-requests/857/fix-memory-access-bugs-with-libc-on\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #857</a>.</p>", "type": "rendered"}, "created_on": "2013-12-04T17:51:38.153035+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7183457}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965/comments/7285846.json"}, "html": {"href": "#!/osrf/gazebo/issues/965#comment-7285846"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965.json"}}, "type": "issue", "id": 965, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "physics::Base::childrenEnd causes failures with libc++"}, "content": {"raw": "pull request #857", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo/pull-requests/857/fix-memory-access-bugs-with-libc-on\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #857</a></p>", "type": "rendered"}, "created_on": "2013-12-12T01:03:25.943116+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7285846}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965/comments/7413579.json"}, "html": {"href": "#!/osrf/gazebo/issues/965#comment-7413579"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965.json"}}, "type": "issue", "id": 965, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "physics::Base::childrenEnd causes failures with libc++"}, "content": {"raw": "Note that I missed on in pull request #857, but it will be fixed by pull request #881", "markup": "markdown", "html": "<p>Note that I missed on in <a href=\"#!/osrf/gazebo/pull-requests/857/fix-memory-access-bugs-with-libc-on\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #857</a>, but it will be fixed by <a href=\"#!/osrf/gazebo/pull-requests/881/part-of-965-that-i-missed-in-pull-request\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #881</a></p>", "type": "rendered"}, "created_on": "2013-12-19T02:12:52.389640+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7413579}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965/comments/30609830.json"}, "html": {"href": "#!/osrf/gazebo/issues/965#comment-30609830"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965.json"}}, "type": "issue", "id": 965, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "physics::Base::childrenEnd causes failures with libc++"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:21:06.127894+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30609830}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965/comments/30612639.json"}, "html": {"href": "#!/osrf/gazebo/issues/965#comment-30612639"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/965.json"}}, "type": "issue", "id": 965, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "physics::Base::childrenEnd causes failures with libc++"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:45:12.270996+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30612639}], "page": 1, "size": 8}