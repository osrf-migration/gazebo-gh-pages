{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2351/comments/46531556.json"}, "html": {"href": "#!/osrf/gazebo/issues/2351#comment-46531556"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2351.json"}}, "type": "issue", "id": 2351, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Gazebo issues on Windows Subsystem for Linux (WSL)"}, "content": {"raw": "I found some notes on this from last September, and given that I am not working on this I will copy them here, so they can be useful if someone wants to work on this issue.\n\n# 400 ns resolution for `CLOCK_MONOTONIC` \nEven switching from using `CLOCK_REALTIME` to `CLOCK_MONOTONIC`, there is still a major difference between Ubuntu on Windows and the native Ubuntu, that is the resolution of the clock. This is the output of this example program https://gist.github.com/traversaro/e031b324dd278acbd033059e3604ed3f in native Ubuntu running on a Intel Core i7-6500U CPU : \n~~~\ntraversaro@turati:~/src/time_res_check/build$ ./time_res_check \n--> Testing POSIX APIs\n    Error macros values: \n    EINTR : 4\n    EINVAL: 22\n    ENOTSUP: 95\n    Testing CLOCK_MONOTONIC \n    clock_getres return value: 0 with errno 0, \n    resolution: 1 nanoseconds.\n    Testing CLOCK_REALTIME \n    clock_getres return value: 0 with errno 0, \n    resolution: 1 nanoseconds.\n    Testing CLOCK_PROCESS_CPUTIME_ID \n    clock_getres return value: 0 with errno 0, \n    resolution: 1 nanoseconds.\n    Testing CLOCK_THREAD_CPUTIME_ID  \n    clock_getres return value: 0 with errno 0, \n    resolution: 1 nanoseconds.\n--> Testing C++ APIs\n    Testing std::chrono::high_resolution_clock \n    resolution: 1 nanoseconds.\n    Testing std::chrono::system_clock \n    resolution: 1 nanoseconds.\n    Testing std::chrono::steady_clock \n    resolution: 1 nanoseconds.\n~~~\nThe same program running on WSL on the same processor returns:\n~~~\ntraversaro@LAPTOP-TO4SAKLB:~/src/time_res_check$ ./build/time_res_check\n--> Testing POSIX APIs\n    Error macros values:\n    EINTR : 4\n    EINVAL: 22\n    ENOTSUP: 95\n    Testing CLOCK_MONOTONIC\n    clock_getres return value: 0 with errno 0,\n    resolution: 400 nanoseconds.\n    Testing CLOCK_REALTIME\n    clock_getres return value: 0 with errno 0,\n    resolution: 400 nanoseconds.\n    Testing CLOCK_PROCESS_CPUTIME_ID\n    clock_getres return value: -1 with errno 22,\n    resolution: 0 nanoseconds.\n    Testing CLOCK_THREAD_CPUTIME_ID\n    clock_getres return value: -1 with errno 22,\n    resolution: 0 nanoseconds.\n--> Testing C++ APIs\n    Testing std::chrono::high_resolution_clock\n    resolution: 1 nanoseconds.\n    Testing std::chrono::system_clock\n    resolution: 1 nanoseconds.\n    Testing std::chrono::steady_clock\n    resolution: 1 nanoseconds.\n~~~\n\nIn a nutshell, the resolution of the clocks in Linux is reported to be 1ns, while on Linux on Windows is reported to be 400 ns. Interestingly the C++11 classes report a period of 1 ns in both cases, but I still have to investigate this. Back in September 2017, this was creating a lot of  warnings similar to `\"warning [Time.cc.205] Sleep time is larger than clock resolution, skipping sleep\"`, due to this line #!/osrf/gazebo/src/01c7f8b1d68448bc618b575ad1c7ec13fee2b87f/gazebo/common/Time.cc#lines-451 .\n\nRelated ROS2 issue: https://github.com/ros2/rcutils/issues/43#issuecomment-320954506 .", "markup": "markdown", "html": "<p>I found some notes on this from last September, and given that I am not working on this I will copy them here, so they can be useful if someone wants to work on this issue.</p>\n<h1 id=\"markdown-header-400-ns-resolution-for-clock_monotonic\">400 ns resolution for <code>CLOCK_MONOTONIC</code></h1>\n<p>Even switching from using <code>CLOCK_REALTIME</code> to <code>CLOCK_MONOTONIC</code>, there is still a major difference between Ubuntu on Windows and the native Ubuntu, that is the resolution of the clock. This is the output of this example program <a href=\"https://gist.github.com/traversaro/e031b324dd278acbd033059e3604ed3f\" rel=\"nofollow\" class=\"ap-connect-link\">https://gist.github.com/traversaro/e031b324dd278acbd033059e3604ed3f</a> in native Ubuntu running on a Intel Core i7-6500U CPU : </p>\n<div class=\"codehilite\"><pre><span></span>traversaro@turati:~/src/time_res_check/build$ ./time_res_check \n--&gt; Testing POSIX APIs\n    Error macros values: \n    EINTR : 4\n    EINVAL: 22\n    ENOTSUP: 95\n    Testing CLOCK_MONOTONIC \n    clock_getres return value: 0 with errno 0, \n    resolution: 1 nanoseconds.\n    Testing CLOCK_REALTIME \n    clock_getres return value: 0 with errno 0, \n    resolution: 1 nanoseconds.\n    Testing CLOCK_PROCESS_CPUTIME_ID \n    clock_getres return value: 0 with errno 0, \n    resolution: 1 nanoseconds.\n    Testing CLOCK_THREAD_CPUTIME_ID  \n    clock_getres return value: 0 with errno 0, \n    resolution: 1 nanoseconds.\n--&gt; Testing C++ APIs\n    Testing std::chrono::high_resolution_clock \n    resolution: 1 nanoseconds.\n    Testing std::chrono::system_clock \n    resolution: 1 nanoseconds.\n    Testing std::chrono::steady_clock \n    resolution: 1 nanoseconds.\n</pre></div>\n\n\n<p>The same program running on WSL on the same processor returns:</p>\n<div class=\"codehilite\"><pre><span></span>traversaro@LAPTOP-TO4SAKLB:~/src/time_res_check$ ./build/time_res_check\n--&gt; Testing POSIX APIs\n    Error macros values:\n    EINTR : 4\n    EINVAL: 22\n    ENOTSUP: 95\n    Testing CLOCK_MONOTONIC\n    clock_getres return value: 0 with errno 0,\n    resolution: 400 nanoseconds.\n    Testing CLOCK_REALTIME\n    clock_getres return value: 0 with errno 0,\n    resolution: 400 nanoseconds.\n    Testing CLOCK_PROCESS_CPUTIME_ID\n    clock_getres return value: -1 with errno 22,\n    resolution: 0 nanoseconds.\n    Testing CLOCK_THREAD_CPUTIME_ID\n    clock_getres return value: -1 with errno 22,\n    resolution: 0 nanoseconds.\n--&gt; Testing C++ APIs\n    Testing std::chrono::high_resolution_clock\n    resolution: 1 nanoseconds.\n    Testing std::chrono::system_clock\n    resolution: 1 nanoseconds.\n    Testing std::chrono::steady_clock\n    resolution: 1 nanoseconds.\n</pre></div>\n\n\n<p>In a nutshell, the resolution of the clocks in Linux is reported to be 1ns, while on Linux on Windows is reported to be 400 ns. Interestingly the C++11 classes report a period of 1 ns in both cases, but I still have to investigate this. Back in September 2017, this was creating a lot of  warnings similar to <code>\"warning [Time.cc.205] Sleep time is larger than clock resolution, skipping sleep\"</code>, due to this line <a href=\"#!/osrf/gazebo/src/01c7f8b1d68448bc618b575ad1c7ec13fee2b87f/gazebo/common/Time.cc#lines-451\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/01c7f8b1d68448bc618b575ad1c7ec13fee2b87f/gazebo/common/Time.cc#lines-451</a> .</p>\n<p>Related ROS2 issue: <a href=\"https://github.com/ros2/rcutils/issues/43#issuecomment-320954506\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ros2/rcutils/issues/43#issuecomment-320954506</a> .</p>", "type": "rendered"}, "created_on": "2018-07-02T11:11:20.057577+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": "2018-12-06T07:50:42.823023+00:00", "type": "issue_comment", "id": 46531556}