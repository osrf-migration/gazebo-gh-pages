{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2293/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2293.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2293/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2293/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2293/non-deterministic-image-render-frame"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2293/vote"}}, "reporter": {"display_name": "Kenny Sharma", "uuid": "{d7b75212-e3b1-42c9-b7a8-50aa42951ce8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd7b75212-e3b1-42c9-b7a8-50aa42951ce8%7D"}, "html": {"href": "https://bitbucket.org/%7Bd7b75212-e3b1-42c9-b7a8-50aa42951ce8%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/bd81e1cc5390928db838b229570537a4d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsKS-1.png"}}, "nickname": "kennysharma", "type": "user", "account_id": "557058:79f075d9-d7fb-4230-b1ac-6d9a545a4bdd"}, "title": "Non-deterministic image render/frame publication times between runs", "component": {"name": "rendering", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122881.json"}}}, "votes": 9, "watches": 9, "content": {"raw": "Gazebo does not always render/publish the same scene image frames between runs on the same test platform/hardware (even with the RNG seed set on the command line). This appears to be caused by non-deterministic rendering times for each camera image in OGRE.\r\n\r\nThis may be somewhat related to [Issue #1748](#!/osrf/gazebo/issues/1748), but I believe it is a distinct issue related to the rendering more than timestamps.\r\n\r\nWe (Neurorobotics Subproject of the EU Human Brain Project) are using Gazebo 7 (a slightly modified fork of gazebo7_7.2.0) and running headless using gzserver and gzweb for the frontend.\r\n\r\nSome of our experiments rely on processing Gazebo generated images to periodically stimulate spiking neural networks. For fully deterministic reproducibility, these images would need to be exactly the same view of the scene during each simulation run on any hardware platform. Some of the experiments are using really fine grain, pixel level values to generate stimulus.\r\n\r\nWhile debugging this issue, the following was observed:\r\n\r\n* the scene time for the first frame rendered in [sensors/CameraSensor.cc](#!/osrf/gazebo/src/42215f2019f5ae64fc8a0610ef804a0fc53b0740/gazebo/sensors/CameraSensor.cc?at=default&fileviewer=file-view-default#CameraSensor.cc-204) can vary by 1 simulation tick, so the first frame is not guaranteed to be exactly the same rendered scene\r\n\r\n* the actual rendering time for the Ogre::RenderTarget in [rendering/Camera.cc](#!/osrf/gazebo/src/42215f2019f5ae64fc8a0610ef804a0fc53b0740/gazebo/rendering/Camera.cc?at=default&fileviewer=file-view-default#Camera.cc-435) is non-deterministic even on the same hardware in subsequent runs, which impacts the actual scene time / render time of the subsequent frames\r\n\r\nFrom my understanding and debugging in [rendering/Scene.cc](#!/osrf/gazebo/src/42215f2019f5ae64fc8a0610ef804a0fc53b0740/gazebo/rendering/Scene.cc?fileviewer=file-view-default#Scene.cc-1687), the rendering scene is only timestamped/updated when the blocking rendering events are completed - while the physics data is correctly updated every tick. This means that while the physics side is deterministic at each tick, the rendering side is not by design and cannot be guaranteed.\r\n\r\nIs there any way to conceivably guarantee frame perfect image production in simulations? We are setting a defined rate in the SDF for camera sources (which led me to [Issue #1748](#!/osrf/gazebo/issues/1748) initially). Am I misunderstanding the issue (or have I failed to make it clear what the issue is from our perspective)?\r\n\r\nI imagine a solution would require the simulation control loop to be exactly aware of the scene times at which a Camera sensor *should* publish data, pausing the physics control loop until rendering is complete, and then resuming. This would guarantee exact replication on different hardware at the cost of a smoothly ticking physics simulation.\r\n\r\nI understand our use case is extremely specific, so I'm open to discussion if this is not technically a Gazebo issue but something we could potentially fix down the road in our own fork.", "markup": "markdown", "html": "<p>Gazebo does not always render/publish the same scene image frames between runs on the same test platform/hardware (even with the RNG seed set on the command line). This appears to be caused by non-deterministic rendering times for each camera image in OGRE.</p>\n<p>This may be somewhat related to <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issues/1748\" rel=\"nofollow\">Issue #1748</a>, but I believe it is a distinct issue related to the rendering more than timestamps.</p>\n<p>We (Neurorobotics Subproject of the EU Human Brain Project) are using Gazebo 7 (a slightly modified fork of gazebo7_7.2.0) and running headless using gzserver and gzweb for the frontend.</p>\n<p>Some of our experiments rely on processing Gazebo generated images to periodically stimulate spiking neural networks. For fully deterministic reproducibility, these images would need to be exactly the same view of the scene during each simulation run on any hardware platform. Some of the experiments are using really fine grain, pixel level values to generate stimulus.</p>\n<p>While debugging this issue, the following was observed:</p>\n<ul>\n<li>\n<p>the scene time for the first frame rendered in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/42215f2019f5ae64fc8a0610ef804a0fc53b0740/gazebo/sensors/CameraSensor.cc?at=default&amp;fileviewer=file-view-default#CameraSensor.cc-204\" rel=\"nofollow\">sensors/CameraSensor.cc</a> can vary by 1 simulation tick, so the first frame is not guaranteed to be exactly the same rendered scene</p>\n</li>\n<li>\n<p>the actual rendering time for the Ogre::RenderTarget in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/42215f2019f5ae64fc8a0610ef804a0fc53b0740/gazebo/rendering/Camera.cc?at=default&amp;fileviewer=file-view-default#Camera.cc-435\" rel=\"nofollow\">rendering/Camera.cc</a> is non-deterministic even on the same hardware in subsequent runs, which impacts the actual scene time / render time of the subsequent frames</p>\n</li>\n</ul>\n<p>From my understanding and debugging in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/42215f2019f5ae64fc8a0610ef804a0fc53b0740/gazebo/rendering/Scene.cc?fileviewer=file-view-default#Scene.cc-1687\" rel=\"nofollow\">rendering/Scene.cc</a>, the rendering scene is only timestamped/updated when the blocking rendering events are completed - while the physics data is correctly updated every tick. This means that while the physics side is deterministic at each tick, the rendering side is not by design and cannot be guaranteed.</p>\n<p>Is there any way to conceivably guarantee frame perfect image production in simulations? We are setting a defined rate in the SDF for camera sources (which led me to <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issues/1748\" rel=\"nofollow\">Issue #1748</a> initially). Am I misunderstanding the issue (or have I failed to make it clear what the issue is from our perspective)?</p>\n<p>I imagine a solution would require the simulation control loop to be exactly aware of the scene times at which a Camera sensor <em>should</em> publish data, pausing the physics control loop until rendering is complete, and then resuming. This would guarantee exact replication on different hardware at the cost of a smoothly ticking physics simulation.</p>\n<p>I understand our use case is extremely specific, so I'm open to discussion if this is not technically a Gazebo issue but something we could potentially fix down the road in our own fork.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "7.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242744.json"}}}, "edited_on": null, "created_on": "2017-06-06T10:22:36.249343+00:00", "milestone": null, "updated_on": "2017-06-28T17:32:19.641491+00:00", "type": "issue", "id": 2293}