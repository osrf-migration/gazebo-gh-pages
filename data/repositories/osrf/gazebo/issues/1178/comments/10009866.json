{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1178/comments/10009866.json"}, "html": {"href": "#!/osrf/gazebo/issues/1178#comment-10009866"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1178.json"}}, "type": "issue", "id": 1178, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "gazebo and gzserver return without error if gzserver is already running"}, "content": {"raw": "I think the important change would be in what is eventually returned to the system rather than what is returned internally.\n\nIt seem the problem would be more in server_main.cc and gazebo_main.cc in that server_main catches all exceptions and without changing the return value to the system:\n\n\n```\n#!c++\n\nint main(int argc, char **argv)\n{\n  gazebo::Server *server = NULL;\n\n  try\n  {\n   ...\n  }\n  catch(gazebo::common::Exception &_e)\n  {\n    _e.Print();\n\n    server->Fini();\n    delete server;\n  }\n\n  return 0;\n}\n```\n\nI think adjusting the catch to change the return value to -1 or some other specific error code could be part of a solution which would not break ABI. Though it is unclear if there are any users currently depending on the system to return a 0 even if a server is already running.", "markup": "markdown", "html": "<p>I think the important change would be in what is eventually returned to the system rather than what is returned internally.</p>\n<p>It seem the problem would be more in server_main.cc and gazebo_main.cc in that server_main catches all exceptions and without changing the return value to the system:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">Server</span> <span class=\"o\">*</span><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n  <span class=\"k\">try</span>\n  <span class=\"p\">{</span>\n   <span class=\"p\">...</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Exception</span> <span class=\"o\">&amp;</span><span class=\"n\">_e</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">_e</span><span class=\"p\">.</span><span class=\"n\">Print</span><span class=\"p\">();</span>\n\n    <span class=\"n\">server</span><span class=\"o\">-&gt;</span><span class=\"n\">Fini</span><span class=\"p\">();</span>\n    <span class=\"k\">delete</span> <span class=\"n\">server</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I think adjusting the catch to change the return value to -1 or some other specific error code could be part of a solution which would not break ABI. Though it is unclear if there are any users currently depending on the system to return a 0 even if a server is already running.</p>", "type": "rendered"}, "created_on": "2014-05-06T19:25:52.376970+00:00", "user": {"display_name": "andy_somerville", "uuid": "{09fd5d4b-d90e-4416-9a6a-2e5cd638472c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B09fd5d4b-d90e-4416-9a6a-2e5cd638472c%7D"}, "html": {"href": "https://bitbucket.org/%7B09fd5d4b-d90e-4416-9a6a-2e5cd638472c%7D/"}, "avatar": {"href": "https://bitbucket.org/account/andy_somerville/avatar/"}}, "nickname": "andy_somerville", "type": "user", "account_id": null}, "updated_on": "2014-05-06T19:27:23.600008+00:00", "type": "issue_comment", "id": 10009866}