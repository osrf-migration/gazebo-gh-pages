{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/12937465.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-12937465"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "Thanks for spearheading this conversation! \n\nMy comments were mainly motivated by working with data fusion, localization and GNSS modelling. Gazebo has been an extremely useful tool for CRATES, which is a work in progress: it's currently undergoing a refactor, while I push whatever the Gazebo project finds useful upstream. \n\nWhile developing CRATES what I noticed however, is that the following sorts of things are quite difficult to model in Gazebo using default `<sensor>` options:\n\n* A barometric altimeter that drifts with atmospheric pressure changes\n* A GPS waypoint that drifts with changes in ionospheric and tropospheric conditions\n* A gyroscope that drifts in response to temperature\n\nThe thing that links all of these is that the noise is correlated in space and time: in other words the current error perturbation is related to (not independent from) to perturbations drawn at locations close by, or at epochs close to each other in time.\n\nHaving looked through the Gazebo source a bit, what I'd like to tentatively propose are the following three usage patterns for error modelling:\n\n1. Easy: Basic assumption is a deterministic measurement. Not very realistic, but useful if you are trying to validate some analytic model of the world.\n2. Intermediate: Standardised `<noise>` tag which provides independently-drawn error perturbations, or simple time-correlated perturbations (see below).\n3. Advanced: A custom SensorPlugin, in which sensor signals may be correlated with each other, or with some other quantity (examples: its own or another entity's location, temperature, humidity, pressure, ionospheric conditions, etc. These would be distributed as separate ROS packages providing SensorPlugins and WorldPlugins , dependent on gazebo_ros_pkgs. This also has the benefit that Gazebo itself need not link against many sensor-specific third party libraries.\n\nThe course of action I have chosen is to first propose Easy / Intermediate implementations for sensors not already described in SDF / supported by Gazebo. Namely, magnetometers in issue #1294 and altimeters in issue #1297. I also proposed a nomenclature update from GPS to GNSS in issue #1297.\n\nWhat I would like to do next is propose that the Ornstein-Uhlenbeck distribution be supported in the `<noise>` tag. It's a good start for modelling noise that drifts with time, but periodically reverts back to a mean quantity. It may be useful as a model for short-term IMU orientation error (fast corrections of integrated gyro readings) or long-term barometric altimeter error (slow changes in atmospheric pressure).\n\nOn a related note, we also need to think (a) whether **all** sensors can be supported by a common `<noise>` tag / set of distributions, and (b) whether a  `<noise>` tag should be defined for each sensor signal. What I mean by this is should, for example, GPS position_x, position_y and position_z have separate noise distributions, because typical satellite vehicle geometry with respect to the receiver position causes a much greater error in Z than in X or Y.\n\nOnce the Basic/Intermediate framework is in place, I can repackage my code in CRATES as a separate ROS package (providing SensorPlugins and WorldPlugins) with a gazebo_ros_pkgs dependency. \n\nI'm almost certain @SJulier will have some valuable input to this conversation.\n\n\n\n\n\n", "markup": "markdown", "html": "<p>Thanks for spearheading this conversation! </p>\n<p>My comments were mainly motivated by working with data fusion, localization and GNSS modelling. Gazebo has been an extremely useful tool for CRATES, which is a work in progress: it's currently undergoing a refactor, while I push whatever the Gazebo project finds useful upstream. </p>\n<p>While developing CRATES what I noticed however, is that the following sorts of things are quite difficult to model in Gazebo using default <code>&lt;sensor&gt;</code> options:</p>\n<ul>\n<li>A barometric altimeter that drifts with atmospheric pressure changes</li>\n<li>A GPS waypoint that drifts with changes in ionospheric and tropospheric conditions</li>\n<li>A gyroscope that drifts in response to temperature</li>\n</ul>\n<p>The thing that links all of these is that the noise is correlated in space and time: in other words the current error perturbation is related to (not independent from) to perturbations drawn at locations close by, or at epochs close to each other in time.</p>\n<p>Having looked through the Gazebo source a bit, what I'd like to tentatively propose are the following three usage patterns for error modelling:</p>\n<ol>\n<li>Easy: Basic assumption is a deterministic measurement. Not very realistic, but useful if you are trying to validate some analytic model of the world.</li>\n<li>Intermediate: Standardised <code>&lt;noise&gt;</code> tag which provides independently-drawn error perturbations, or simple time-correlated perturbations (see below).</li>\n<li>Advanced: A custom SensorPlugin, in which sensor signals may be correlated with each other, or with some other quantity (examples: its own or another entity's location, temperature, humidity, pressure, ionospheric conditions, etc. These would be distributed as separate ROS packages providing SensorPlugins and WorldPlugins , dependent on gazebo_ros_pkgs. This also has the benefit that Gazebo itself need not link against many sensor-specific third party libraries.</li>\n</ol>\n<p>The course of action I have chosen is to first propose Easy / Intermediate implementations for sensors not already described in SDF / supported by Gazebo. Namely, magnetometers in issue <a href=\"#!/osrf/gazebo/issues/1294/inclusion-of-magnetic-field-strength\" rel=\"nofollow\" title=\"Inclusion of magnetic field strength sensor\" class=\"ap-connect-link\">#1294</a> and altimeters in issue <a href=\"#!/osrf/gazebo/issues/1297/inclusion-of-an-altimeter-sensor\" rel=\"nofollow\" title=\"Inclusion of an altimeter sensor\" class=\"ap-connect-link\"><s>#1297</s></a>. I also proposed a nomenclature update from GPS to GNSS in issue <a href=\"#!/osrf/gazebo/issues/1297/inclusion-of-an-altimeter-sensor\" rel=\"nofollow\" title=\"Inclusion of an altimeter sensor\" class=\"ap-connect-link\"><s>#1297</s></a>.</p>\n<p>What I would like to do next is propose that the Ornstein-Uhlenbeck distribution be supported in the <code>&lt;noise&gt;</code> tag. It's a good start for modelling noise that drifts with time, but periodically reverts back to a mean quantity. It may be useful as a model for short-term IMU orientation error (fast corrections of integrated gyro readings) or long-term barometric altimeter error (slow changes in atmospheric pressure).</p>\n<p>On a related note, we also need to think (a) whether <strong>all</strong> sensors can be supported by a common <code>&lt;noise&gt;</code> tag / set of distributions, and (b) whether a  <code>&lt;noise&gt;</code> tag should be defined for each sensor signal. What I mean by this is should, for example, GPS position_x, position_y and position_z have separate noise distributions, because typical satellite vehicle geometry with respect to the receiver position causes a much greater error in Z than in X or Y.</p>\n<p>Once the Basic/Intermediate framework is in place, I can repackage my code in CRATES as a separate ROS package (providing SensorPlugins and WorldPlugins) with a gazebo_ros_pkgs dependency. </p>\n<p>I'm almost certain @SJulier will have some valuable input to this conversation.</p>", "type": "rendered"}, "created_on": "2014-10-13T15:12:53.608904+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2014-10-13T15:14:55.738084+00:00", "type": "issue_comment", "id": 12937465}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/13090063.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-13090063"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "@scpeters, I've coded up Wiener and Ornstein-Uhlenbeck noise models along the same lines as the Gaussian noise model already in Gazebo. However, since these are stochastic noise processes, I needed to modify the ```Noise::Apply``` and ```Noise:ApplyImpl``` prototype functions to accept a time epoch for the noise perturbation:\n\n```c++\n    /// \\class Noise Noise.hh\n    /// \\brief Noise models for sensor output signals.\n    class GAZEBO_VISIBLE Noise\n    {\n\n      ...\n\n      /// \\brief Apply noise to input data value.\n      /// \\param[in] _in Input data value.\n      /// \\param[t] _t Elapsed simulation time\n      /// \\return Data with noise applied.\n      public: double Apply(double _in, const common::Time &_t = common::Time::Zero);\n\n      /// \\brief Apply noise to input data value. This gets overriden by\n      /// derived classes, and called by Apply.\n      /// \\param[in] _in Input data value.\n      /// \\param[t] _t Elapsed simulation time\n      /// \\return Data with noise applied.\n      public: virtual double ApplyImpl(double _in, const common::Time &_t);\n\n      ...\n\n};\n\n```\n\nI'm not yet ready to do a pull request, but you can see my work in progress here:\n\n* [Gazebo changes](https://bitbucket.org/asymingt/gazebo/branch/time_correlated_noise)\n\n* [SDFormat changes](https://bitbucket.org/asymingt/sdformat/branch/time_correlated_noise) \n\n\nMy intention is to also write unit tests for both models, but I seem to be getting stuck every time at this point (for both Wiener and Ornstein)\n\n```c++\n  // Make sure that we have a valid noise model\n  sensors::OrnsteinNoiseModelPtr noiseModel =\n      boost::dynamic_pointer_cast<sensors::OrnsteinNoiseModel>(_noise);\n  ASSERT_TRUE(noiseModel);\n```\n\nFor some reason ```noiseModel``` is always evaluated as false. \n\nFinally, we need to think whether or not it makes sense to include the epoch inside the noise callback for custom types. I didn't change this, because I imagine that there already exist many SensorPlugins which use the current callback that takes only the current sensor value ```_in```. Including a second epoch argument ```_t``` would likely break compatibility, which is a bad thing...", "markup": "markdown", "html": "<p>@scpeters, I've coded up Wiener and Ornstein-Uhlenbeck noise models along the same lines as the Gaussian noise model already in Gazebo. However, since these are stochastic noise processes, I needed to modify the <code>Noise::Apply</code> and <code>Noise:ApplyImpl</code> prototype functions to accept a time epoch for the noise perturbation:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>    <span class=\"c1\">/// \\class Noise Noise.hh</span>\n    <span class=\"c1\">/// \\brief Noise models for sensor output signals.</span>\n    <span class=\"k\">class</span> <span class=\"nc\">GAZEBO_VISIBLE</span> <span class=\"n\">Noise</span>\n    <span class=\"p\">{</span>\n\n      <span class=\"p\">...</span>\n\n      <span class=\"c1\">/// \\brief Apply noise to input data value.</span>\n      <span class=\"c1\">/// \\param[in] _in Input data value.</span>\n      <span class=\"c1\">/// \\param[t] _t Elapsed simulation time</span>\n      <span class=\"c1\">/// \\return Data with noise applied.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"kt\">double</span> <span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">_in</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"o\">&amp;</span><span class=\"n\">_t</span> <span class=\"o\">=</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">Zero</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">/// \\brief Apply noise to input data value. This gets overriden by</span>\n      <span class=\"c1\">/// derived classes, and called by Apply.</span>\n      <span class=\"c1\">/// \\param[in] _in Input data value.</span>\n      <span class=\"c1\">/// \\param[t] _t Elapsed simulation time</span>\n      <span class=\"c1\">/// \\return Data with noise applied.</span>\n      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">virtual</span> <span class=\"kt\">double</span> <span class=\"n\">ApplyImpl</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">_in</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"o\">&amp;</span><span class=\"n\">_t</span><span class=\"p\">);</span>\n\n      <span class=\"p\">...</span>\n\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>I'm not yet ready to do a pull request, but you can see my work in progress here:</p>\n<ul>\n<li>\n<p><a data-is-external-link=\"true\" href=\"https://bitbucket.org/asymingt/gazebo/branch/time_correlated_noise\" rel=\"nofollow\">Gazebo changes</a></p>\n</li>\n<li>\n<p><a data-is-external-link=\"true\" href=\"https://bitbucket.org/asymingt/sdformat/branch/time_correlated_noise\" rel=\"nofollow\">SDFormat changes</a> </p>\n</li>\n</ul>\n<p>My intention is to also write unit tests for both models, but I seem to be getting stuck every time at this point (for both Wiener and Ornstein)</p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"c1\">// Make sure that we have a valid noise model</span>\n  <span class=\"n\">sensors</span><span class=\"o\">::</span><span class=\"n\">OrnsteinNoiseModelPtr</span> <span class=\"n\">noiseModel</span> <span class=\"o\">=</span>\n      <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">dynamic_pointer_cast</span><span class=\"o\">&lt;</span><span class=\"n\">sensors</span><span class=\"o\">::</span><span class=\"n\">OrnsteinNoiseModel</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_noise</span><span class=\"p\">);</span>\n  <span class=\"n\">ASSERT_TRUE</span><span class=\"p\">(</span><span class=\"n\">noiseModel</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>For some reason <code>noiseModel</code> is always evaluated as false. </p>\n<p>Finally, we need to think whether or not it makes sense to include the epoch inside the noise callback for custom types. I didn't change this, because I imagine that there already exist many SensorPlugins which use the current callback that takes only the current sensor value <code>_in</code>. Including a second epoch argument <code>_t</code> would likely break compatibility, which is a bad thing...</p>", "type": "rendered"}, "created_on": "2014-10-20T11:43:04.869062+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2014-10-20T11:58:31.698174+00:00", "type": "issue_comment", "id": 13090063}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/13098337.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-13098337"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "I'll try building your branches to see if I can reproduce the unit test failure.\n\nI'll have to think about the ApplyImpl issue...", "markup": "markdown", "html": "<p>I'll try building your branches to see if I can reproduce the unit test failure.</p>\n<p>I'll have to think about the ApplyImpl issue...</p>", "type": "rendered"}, "created_on": "2014-10-20T17:22:18.836425+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 13098337}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/13098841.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-13098841"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "Thanks!\n\nWe could get around the issue by allowing child classes of ```Noise``` to observe the world directly, and hence access global time. This would allow us to retain a single argument ```_in``` to both the callback and ```Apply``` / ```ApplyImpl```. \n\nA semi-related issue that I also foresee is that a ```SensorPlugin``` seems to have no access to the world, according to [API 4.0.0](http://osrf-distributions.s3.amazonaws.com/gazebo/api/4.0.0/classgazebo_1_1SensorPlugin.html). This will present a similar problem if one wishes to implement a different noise model that requires knowledge of simulated time.", "markup": "markdown", "html": "<p>Thanks!</p>\n<p>We could get around the issue by allowing child classes of <code>Noise</code> to observe the world directly, and hence access global time. This would allow us to retain a single argument <code>_in</code> to both the callback and <code>Apply</code> / <code>ApplyImpl</code>. </p>\n<p>A semi-related issue that I also foresee is that a <code>SensorPlugin</code> seems to have no access to the world, according to <a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/gazebo/api/4.0.0/classgazebo_1_1SensorPlugin.html\" rel=\"nofollow\">API 4.0.0</a>. This will present a similar problem if one wishes to implement a different noise model that requires knowledge of simulated time.</p>", "type": "rendered"}, "created_on": "2014-10-20T17:40:42.932394+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2014-10-20T17:41:02.092186+00:00", "type": "issue_comment", "id": 13098841}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/13098986.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-13098986"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "There is a way to get a world pointer from a SensorPlugin (see [PressurePlugin::Load](#!/osrf/gazebo/src/45b20b079f1ee38b6a4cfc65b74f74ace9f9bef6/plugins/PressurePlugin.cc?at=default#cl-58)), but it is a bit tortured.", "markup": "markdown", "html": "<p>There is a way to get a world pointer from a SensorPlugin (see <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/45b20b079f1ee38b6a4cfc65b74f74ace9f9bef6/plugins/PressurePlugin.cc?at=default#cl-58\" rel=\"nofollow\">PressurePlugin::Load</a>), but it is a bit tortured.</p>", "type": "rendered"}, "created_on": "2014-10-20T17:47:41.244579+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 13098986}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/13100911.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-13100911"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "~~The test failure may be caused by a missing `virtual` keyword before the `ApplyImpl` in the new `*NoiseModel` classes. I'm testing a fix.~~ Nope", "markup": "markdown", "html": "<p><del>The test failure may be caused by a missing <code>virtual</code> keyword before the <code>ApplyImpl</code> in the new <code>*NoiseModel</code> classes. I'm testing a fix.</del> Nope</p>", "type": "rendered"}, "created_on": "2014-10-20T19:14:48.284482+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2014-10-20T19:18:15.630715+00:00", "type": "issue_comment", "id": 13100911}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/13101519.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-13101519"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "By the way, in case you are interested, here is a little diagram illustrating the difference between the three noise processes -- Gaussian, (drift-free) Wiener and Ornstein-Uhlenbeck. Note how the O-U process reverts periodically back to its mean of 10, while the Wiener process is really just a totally random walk.\n\n![noiseprocesses.png](data/bitbucket.org/repo/jgXqbo/images/1636795808-noiseprocesses.png)\n\nIt was generated using the MATLAB code below, which I used to code the processes up in C++ for Gazebo.\n\n```matlab\nr = 10;     % Reversion time (O-U)\nm = 10;     % Mean (O-U, Gaussian, Wiener)\nx = m;      % Starting estimate (O-U, Wiener)\no = 0;      % Bias offset (for Wiener) \nv = 2;      % Variance (O-U, Wiener, Gaussian)\nT = 100;    % Time\nN = 1000;   % Epochs\nd = T/N;    % deltaT\nM = 1000;   % Samples\n\n% For storing sample traces\ns_g = m + sqrt(v) * randn(1,N);\ns_w = zeros(1,N);\ns_o = zeros(1,N);\n\n% Wiener\nb = zeros(1,M);\nfor j = 1:M\n    s_w(1) = x;\n    for i = 2:N\n        s_w(i) = s_w(i-1) + d*o + sqrt(d*v) * randn();\n    end\n    b(j) = s_w(end);\nend\ndisp('WIENER PROCESS');\ndisp('*********************************');\ndisp('Measured vs analytic mean:');\n[mean(b) x+o*T]\ndisp('Measured vs analytic deviation:');\n[var(b)  v*T]\n\n% Ornstein-Uhlenbeck\nc = zeros(1,M);\nfor j = 1:M\n    s_o(1) = x;\n    for i = 2:N\n        k = exp(-d/r);\n        s_o(i) = k*s_o(i-1) + (1-k)*m + sqrt(v*(1-k*k)*r/2) * randn();\n    end\n    c(j) = s_o(end);\nend\nk = exp(-T/r);\ndisp('ORNSTEIN-UHLENBECK PROCESS');\ndisp('*********************************');\ndisp('Measured vs analytic mean:');\n[mean(c) m+(x-m)*k]\ndisp('Measured vs analytic deviation:');\n[var(c)  v*r/2*(1-k*k)]\n\nfigure; hold on; grid on;\nplot(s_g,'r-');\nplot(s_w,'b-');\nplot(s_o,'k-');\nlegend('Gaussian','Wiener','Ornstein-Uhlenbeck');\n\n```", "markup": "markdown", "html": "<p>By the way, in case you are interested, here is a little diagram illustrating the difference between the three noise processes -- Gaussian, (drift-free) Wiener and Ornstein-Uhlenbeck. Note how the O-U process reverts periodically back to its mean of 10, while the Wiener process is really just a totally random walk.</p>\n<p><img alt=\"noiseprocesses.png\" src=\"data/bitbucket.org/repo/jgXqbo/images/1636795808-noiseprocesses.png\" /></p>\n<p>It was generated using the MATLAB code below, which I used to code the processes up in C++ for Gazebo.</p>\n<div class=\"codehilite language-matlab\"><pre><span></span><span class=\"n\">r</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>     <span class=\"c\">% Reversion time (O-U)</span>\n<span class=\"n\">m</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>     <span class=\"c\">% Mean (O-U, Gaussian, Wiener)</span>\n<span class=\"n\">x</span> <span class=\"p\">=</span> <span class=\"n\">m</span><span class=\"p\">;</span>      <span class=\"c\">% Starting estimate (O-U, Wiener)</span>\n<span class=\"n\">o</span> <span class=\"p\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>      <span class=\"c\">% Bias offset (for Wiener) </span>\n<span class=\"n\">v</span> <span class=\"p\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>      <span class=\"c\">% Variance (O-U, Wiener, Gaussian)</span>\n<span class=\"n\">T</span> <span class=\"p\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>    <span class=\"c\">% Time</span>\n<span class=\"n\">N</span> <span class=\"p\">=</span> <span class=\"mi\">1000</span><span class=\"p\">;</span>   <span class=\"c\">% Epochs</span>\n<span class=\"n\">d</span> <span class=\"p\">=</span> <span class=\"n\">T</span><span class=\"o\">/</span><span class=\"n\">N</span><span class=\"p\">;</span>    <span class=\"c\">% deltaT</span>\n<span class=\"n\">M</span> <span class=\"p\">=</span> <span class=\"mi\">1000</span><span class=\"p\">;</span>   <span class=\"c\">% Samples</span>\n\n<span class=\"c\">% For storing sample traces</span>\n<span class=\"n\">s_g</span> <span class=\"p\">=</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"nb\">sqrt</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nb\">randn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">);</span>\n<span class=\"n\">s_w</span> <span class=\"p\">=</span> <span class=\"nb\">zeros</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">);</span>\n<span class=\"n\">s_o</span> <span class=\"p\">=</span> <span class=\"nb\">zeros</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">);</span>\n\n<span class=\"c\">% Wiener</span>\n<span class=\"n\">b</span> <span class=\"p\">=</span> <span class=\"nb\">zeros</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">M</span><span class=\"p\">);</span>\n<span class=\"k\">for</span> <span class=\"nb\">j</span> <span class=\"p\">=</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">M</span>\n    <span class=\"n\">s_w</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"nb\">i</span> <span class=\"p\">=</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"n\">N</span>\n        <span class=\"n\">s_w</span><span class=\"p\">(</span><span class=\"nb\">i</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">s_w</span><span class=\"p\">(</span><span class=\"nb\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">d</span><span class=\"o\">*</span><span class=\"n\">o</span> <span class=\"o\">+</span> <span class=\"nb\">sqrt</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nb\">randn</span><span class=\"p\">();</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">b</span><span class=\"p\">(</span><span class=\"nb\">j</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">s_w</span><span class=\"p\">(</span><span class=\"k\">end</span><span class=\"p\">);</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"s\">&#39;WIENER PROCESS&#39;</span><span class=\"p\">);</span>\n<span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"s\">&#39;*********************************&#39;</span><span class=\"p\">);</span>\n<span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"s\">&#39;Measured vs analytic mean:&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">[</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">o</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">]</span>\n<span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"s\">&#39;Measured vs analytic deviation:&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"n\">v</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">]</span>\n\n<span class=\"c\">% Ornstein-Uhlenbeck</span>\n<span class=\"n\">c</span> <span class=\"p\">=</span> <span class=\"nb\">zeros</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">M</span><span class=\"p\">);</span>\n<span class=\"k\">for</span> <span class=\"nb\">j</span> <span class=\"p\">=</span> <span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">M</span>\n    <span class=\"n\">s_o</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"nb\">i</span> <span class=\"p\">=</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"n\">N</span>\n        <span class=\"n\">k</span> <span class=\"p\">=</span> <span class=\"nb\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"n\">s_o</span><span class=\"p\">(</span><span class=\"nb\">i</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">s_o</span><span class=\"p\">(</span><span class=\"nb\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"nb\">sqrt</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">r</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nb\">randn</span><span class=\"p\">();</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"nb\">j</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">s_o</span><span class=\"p\">(</span><span class=\"k\">end</span><span class=\"p\">);</span>\n<span class=\"k\">end</span>\n<span class=\"n\">k</span> <span class=\"p\">=</span> <span class=\"nb\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">T</span><span class=\"o\">/</span><span class=\"n\">r</span><span class=\"p\">);</span>\n<span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"s\">&#39;ORNSTEIN-UHLENBECK PROCESS&#39;</span><span class=\"p\">);</span>\n<span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"s\">&#39;*********************************&#39;</span><span class=\"p\">);</span>\n<span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"s\">&#39;Measured vs analytic mean:&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">[</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"n\">m</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"p\">]</span>\n<span class=\"nb\">disp</span><span class=\"p\">(</span><span class=\"s\">&#39;Measured vs analytic deviation:&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>  <span class=\"n\">v</span><span class=\"o\">*</span><span class=\"n\">r</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"p\">)]</span>\n\n<span class=\"n\">figure</span><span class=\"p\">;</span> <span class=\"n\">hold</span> <span class=\"n\">on</span><span class=\"p\">;</span> <span class=\"n\">grid</span> <span class=\"n\">on</span><span class=\"p\">;</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">s_g</span><span class=\"p\">,</span><span class=\"s\">&#39;r-&#39;</span><span class=\"p\">);</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">s_w</span><span class=\"p\">,</span><span class=\"s\">&#39;b-&#39;</span><span class=\"p\">);</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">s_o</span><span class=\"p\">,</span><span class=\"s\">&#39;k-&#39;</span><span class=\"p\">);</span>\n<span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"s\">&#39;Gaussian&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;Wiener&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;Ornstein-Uhlenbeck&#39;</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "created_on": "2014-10-20T19:48:27.138043+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": null, "type": "issue_comment", "id": 13101519}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/13102241.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-13102241"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "Here's one issue that was causing the test failure:\n~~~\ndiff -r d72368b5c665 gazebo/sensors/Noise.cc\n--- a/gazebo/sensors/Noise.cc\tMon Oct 20 12:33:03 2014 +0100\n+++ b/gazebo/sensors/Noise.cc\tMon Oct 20 13:25:01 2014 -0700\n@@ -55,7 +55,7 @@\n   }\n   else if (typeString == \"wiener\")\n   {\n-    noise.reset(new Noise(Noise::WIENER));\n+    noise.reset(new WienerNoiseModel());\n     GZ_ASSERT(noise->GetNoiseType() == Noise::WIENER,\n         \"Noise type should be 'wiener'\");\n   }\n~~~", "markup": "markdown", "html": "<p>Here's one issue that was causing the test failure:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r d72368b5c665 gazebo/sensors/Noise.cc</span>\n<span class=\"gd\">--- a/gazebo/sensors/Noise.cc   Mon Oct 20 12:33:03 2014 +0100</span>\n<span class=\"gi\">+++ b/gazebo/sensors/Noise.cc   Mon Oct 20 13:25:01 2014 -0700</span>\n<span class=\"gu\">@@ -55,7 +55,7 @@</span>\n   }\n   else if (typeString == &quot;wiener&quot;)\n   {\n<span class=\"gd\">-    noise.reset(new Noise(Noise::WIENER));</span>\n<span class=\"gi\">+    noise.reset(new WienerNoiseModel());</span>\n     GZ_ASSERT(noise-&gt;GetNoiseType() == Noise::WIENER,\n         &quot;Noise type should be &#39;wiener&#39;&quot;);\n   }\n</pre></div>", "type": "rendered"}, "created_on": "2014-10-20T20:26:26.185541+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 13102241}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/13103693.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-13103693"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "Great -- works my side. I will debug the remainder of the tests now.  Thanks for picking my error up!", "markup": "markdown", "html": "<p>Great -- works my side. I will debug the remainder of the tests now.  Thanks for picking my error up!</p>", "type": "rendered"}, "created_on": "2014-10-20T22:00:25.852814+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2014-10-20T22:00:50.788428+00:00", "type": "issue_comment", "id": 13103693}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/19215262.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-19215262"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2015-06-23T00:32:02.425972+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 19215262}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/30156074.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-30156074"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "Any progress on this? I think it would be great to get random walk processes as part of gazebo built-in  noise models.", "markup": "markdown", "html": "<p>Any progress on this? I think it would be great to get random walk processes as part of gazebo built-in  noise models.</p>", "type": "rendered"}, "created_on": "2016-08-26T19:45:48.731674+00:00", "user": {"display_name": "James Goppert", "uuid": "{b618f3e0-62ee-44c4-bc34-e54b9f05b140}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D"}, "html": {"href": "https://bitbucket.org/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331/c1565592-9846-41bd-836a-8421cebab1f4/128"}}, "nickname": "jgoppert", "type": "user", "account_id": "557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331"}, "updated_on": null, "type": "issue_comment", "id": 30156074}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/30609429.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-30609429"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:19:59.560177+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30609429}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/35463567.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-35463567"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "I'm going to tackle this. My plan is to add dt as a parameter to noise apply method and then add a new random walk nosie model. My goal is to match the noise model here so it doesn't have to be maintained anymore: https://github.com/ethz-asl/rotors_simulator/blob/master/rotors_gazebo_plugins/src/gazebo_imu_plugin.cpp.", "markup": "markdown", "html": "<p>I'm going to tackle this. My plan is to add dt as a parameter to noise apply method and then add a new random walk nosie model. My goal is to match the noise model here so it doesn't have to be maintained anymore: <a href=\"https://github.com/ethz-asl/rotors_simulator/blob/master/rotors_gazebo_plugins/src/gazebo_imu_plugin.cpp\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ethz-asl/rotors_simulator/blob/master/rotors_gazebo_plugins/src/gazebo_imu_plugin.cpp</a>.</p>", "type": "rendered"}, "created_on": "2017-03-29T22:45:02.657122+00:00", "user": {"display_name": "James Goppert", "uuid": "{b618f3e0-62ee-44c4-bc34-e54b9f05b140}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D"}, "html": {"href": "https://bitbucket.org/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331/c1565592-9846-41bd-836a-8421cebab1f4/128"}}, "nickname": "jgoppert", "type": "user", "account_id": "557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331"}, "updated_on": null, "type": "issue_comment", "id": 35463567}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/35463953.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-35463953"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "```\n#!c++\n\n+++ b/gazebo/sensors/Noise.hh\tWed Mar 29 19:31:11 2017 -0400\n@@ -59,7 +59,8 @@\n       {\n         NONE,\n         CUSTOM,\n-        GAUSSIAN\n+        GAUSSIAN,\n+        GAUSSIAN_WALK\n       };\n \n       /// \\brief Constructor. This should not be called directly unless creating\n@@ -79,14 +80,16 @@\n \n       /// \\brief Apply noise to input data value.\n       /// \\param[in] _in Input data value.\n+      /// \\param[in] _dt Elapsed time since last measurement.\n       /// \\return Data with noise applied.\n-      public: double Apply(double _in);\n+      public: double Apply(double _in, double _dt);\n \n       /// \\brief Apply noise to input data value. This gets overriden by\n       /// derived classes, and called by Apply.\n       /// \\param[in] _in Input data value.\n+      /// \\param[in] _dt Elapsed time since last measurement.\n       /// \\return Data with noise applied.\n-      public: virtual double ApplyImpl(double _in);\n+      public: virtual double ApplyImpl(double _in, double _dt);\n\n```", "markup": "markdown", "html": "<div class=\"codehilite language-c++\"><pre><span></span><span class=\"o\">+++</span> <span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">gazebo</span><span class=\"o\">/</span><span class=\"n\">sensors</span><span class=\"o\">/</span><span class=\"n\">Noise</span><span class=\"p\">.</span><span class=\"n\">hh</span>   <span class=\"n\">Wed</span> <span class=\"n\">Mar</span> <span class=\"mi\">29</span> <span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">11</span> <span class=\"mi\">2017</span> <span class=\"o\">-</span><span class=\"mo\">0400</span>\n<span class=\"err\">@@</span> <span class=\"o\">-</span><span class=\"mi\">59</span><span class=\"p\">,</span><span class=\"mi\">7</span> <span class=\"o\">+</span><span class=\"mi\">59</span><span class=\"p\">,</span><span class=\"mi\">8</span> <span class=\"err\">@@</span>\n       <span class=\"p\">{</span>\n         <span class=\"n\">NONE</span><span class=\"p\">,</span>\n         <span class=\"n\">CUSTOM</span><span class=\"p\">,</span>\n<span class=\"o\">-</span>        <span class=\"n\">GAUSSIAN</span>\n<span class=\"o\">+</span>        <span class=\"n\">GAUSSIAN</span><span class=\"p\">,</span>\n<span class=\"o\">+</span>        <span class=\"n\">GAUSSIAN_WALK</span>\n       <span class=\"p\">};</span>\n\n       <span class=\"c1\">/// \\brief Constructor. This should not be called directly unless creating</span>\n<span class=\"err\">@@</span> <span class=\"o\">-</span><span class=\"mi\">79</span><span class=\"p\">,</span><span class=\"mi\">14</span> <span class=\"o\">+</span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"mi\">16</span> <span class=\"err\">@@</span>\n\n       <span class=\"c1\">/// \\brief Apply noise to input data value.</span>\n       <span class=\"c1\">/// \\param[in] _in Input data value.</span>\n<span class=\"o\">+</span>      <span class=\"c1\">/// \\param[in] _dt Elapsed time since last measurement.</span>\n       <span class=\"c1\">/// \\return Data with noise applied.</span>\n<span class=\"o\">-</span>      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"kt\">double</span> <span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">_in</span><span class=\"p\">);</span>\n<span class=\"o\">+</span>      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"kt\">double</span> <span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">_in</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">_dt</span><span class=\"p\">);</span>\n\n       <span class=\"c1\">/// \\brief Apply noise to input data value. This gets overriden by</span>\n       <span class=\"c1\">/// derived classes, and called by Apply.</span>\n       <span class=\"c1\">/// \\param[in] _in Input data value.</span>\n<span class=\"o\">+</span>      <span class=\"c1\">/// \\param[in] _dt Elapsed time since last measurement.</span>\n       <span class=\"c1\">/// \\return Data with noise applied.</span>\n<span class=\"o\">-</span>      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">virtual</span> <span class=\"kt\">double</span> <span class=\"n\">ApplyImpl</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">_in</span><span class=\"p\">);</span>\n<span class=\"o\">+</span>      <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">virtual</span> <span class=\"kt\">double</span> <span class=\"n\">ApplyImpl</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">_in</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">_dt</span><span class=\"p\">);</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-03-29T23:31:37.924378+00:00", "user": {"display_name": "James Goppert", "uuid": "{b618f3e0-62ee-44c4-bc34-e54b9f05b140}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D"}, "html": {"href": "https://bitbucket.org/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331/c1565592-9846-41bd-836a-8421cebab1f4/128"}}, "nickname": "jgoppert", "type": "user", "account_id": "557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331"}, "updated_on": null, "type": "issue_comment", "id": 35463953}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/35463969.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-35463969"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "There is also a difference in how noise is handled. rotors currently uses  noise density. Noise Density * dt = Variance, so the effect is that if the current gazebo sensors are over sampled, you will be able to achieve more accuracy than actually possible form the sensor and if you under sample, you will have less accuracy, so this probably is better how it is handled in rotors. The issue is that the current parameters all ask for standard deviation, so what you prefer for the new model, standard deviation or noise density. I want to be able to support noise density curently. I could just have the GAUSSIAN_WALK model use noise density and leave the GAUSSIAN model as is. That is probably the most straight forward, but not consistent.", "markup": "markdown", "html": "<p>There is also a difference in how noise is handled. rotors currently uses  noise density. Noise Density * dt = Variance, so the effect is that if the current gazebo sensors are over sampled, you will be able to achieve more accuracy than actually possible form the sensor and if you under sample, you will have less accuracy, so this probably is better how it is handled in rotors. The issue is that the current parameters all ask for standard deviation, so what you prefer for the new model, standard deviation or noise density. I want to be able to support noise density curently. I could just have the GAUSSIAN_WALK model use noise density and leave the GAUSSIAN model as is. That is probably the most straight forward, but not consistent.</p>", "type": "rendered"}, "created_on": "2017-03-29T23:35:14.094095+00:00", "user": {"display_name": "James Goppert", "uuid": "{b618f3e0-62ee-44c4-bc34-e54b9f05b140}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D"}, "html": {"href": "https://bitbucket.org/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331/c1565592-9846-41bd-836a-8421cebab1f4/128"}}, "nickname": "jgoppert", "type": "user", "account_id": "557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331"}, "updated_on": null, "type": "issue_comment", "id": 35463969}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/35464002.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-35464002"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "Another question, where best to recover dt. ImuSensor already computes it using the incoming message. This is probably best, but how to generalize it to the other sensors. Will all sensor msgs have a timestamp, and can I somehow access this timestamp in the sensor base class and set dt for all derived sensors so I don't have to repeat the code?", "markup": "markdown", "html": "<p>Another question, where best to recover dt. ImuSensor already computes it using the incoming message. This is probably best, but how to generalize it to the other sensors. Will all sensor msgs have a timestamp, and can I somehow access this timestamp in the sensor base class and set dt for all derived sensors so I don't have to repeat the code?</p>", "type": "rendered"}, "created_on": "2017-03-29T23:38:10.194055+00:00", "user": {"display_name": "James Goppert", "uuid": "{b618f3e0-62ee-44c4-bc34-e54b9f05b140}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D"}, "html": {"href": "https://bitbucket.org/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331/c1565592-9846-41bd-836a-8421cebab1f4/128"}}, "nickname": "jgoppert", "type": "user", "account_id": "557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331"}, "updated_on": null, "type": "issue_comment", "id": 35464002}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/35464073.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-35464073"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "PR: #!/osrf/gazebo/pull-requests/2670", "markup": "markdown", "html": "<p>PR: <a href=\"#!/osrf/gazebo/pull-requests/2670\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/pull-requests/2670</a></p>", "type": "rendered"}, "created_on": "2017-03-29T23:45:28.327084+00:00", "user": {"display_name": "James Goppert", "uuid": "{b618f3e0-62ee-44c4-bc34-e54b9f05b140}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D"}, "html": {"href": "https://bitbucket.org/%7Bb618f3e0-62ee-44c4-bc34-e54b9f05b140%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331/c1565592-9846-41bd-836a-8421cebab1f4/128"}}, "nickname": "jgoppert", "type": "user", "account_id": "557058:169ff364-18d4-4ba3-bf5a-4fd0ab88c331"}, "updated_on": "2017-03-29T23:46:34.399616+00:00", "type": "issue_comment", "id": 35464073}], "page": 1, "size": 17}