{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285/comments/12937465.json"}, "html": {"href": "#!/osrf/gazebo/issues/1285#comment-12937465"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1285.json"}}, "type": "issue", "id": 1285, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Improve sensor noise modeling"}, "content": {"raw": "Thanks for spearheading this conversation! \n\nMy comments were mainly motivated by working with data fusion, localization and GNSS modelling. Gazebo has been an extremely useful tool for CRATES, which is a work in progress: it's currently undergoing a refactor, while I push whatever the Gazebo project finds useful upstream. \n\nWhile developing CRATES what I noticed however, is that the following sorts of things are quite difficult to model in Gazebo using default `<sensor>` options:\n\n* A barometric altimeter that drifts with atmospheric pressure changes\n* A GPS waypoint that drifts with changes in ionospheric and tropospheric conditions\n* A gyroscope that drifts in response to temperature\n\nThe thing that links all of these is that the noise is correlated in space and time: in other words the current error perturbation is related to (not independent from) to perturbations drawn at locations close by, or at epochs close to each other in time.\n\nHaving looked through the Gazebo source a bit, what I'd like to tentatively propose are the following three usage patterns for error modelling:\n\n1. Easy: Basic assumption is a deterministic measurement. Not very realistic, but useful if you are trying to validate some analytic model of the world.\n2. Intermediate: Standardised `<noise>` tag which provides independently-drawn error perturbations, or simple time-correlated perturbations (see below).\n3. Advanced: A custom SensorPlugin, in which sensor signals may be correlated with each other, or with some other quantity (examples: its own or another entity's location, temperature, humidity, pressure, ionospheric conditions, etc. These would be distributed as separate ROS packages providing SensorPlugins and WorldPlugins , dependent on gazebo_ros_pkgs. This also has the benefit that Gazebo itself need not link against many sensor-specific third party libraries.\n\nThe course of action I have chosen is to first propose Easy / Intermediate implementations for sensors not already described in SDF / supported by Gazebo. Namely, magnetometers in issue #1294 and altimeters in issue #1297. I also proposed a nomenclature update from GPS to GNSS in issue #1297.\n\nWhat I would like to do next is propose that the Ornstein-Uhlenbeck distribution be supported in the `<noise>` tag. It's a good start for modelling noise that drifts with time, but periodically reverts back to a mean quantity. It may be useful as a model for short-term IMU orientation error (fast corrections of integrated gyro readings) or long-term barometric altimeter error (slow changes in atmospheric pressure).\n\nOn a related note, we also need to think (a) whether **all** sensors can be supported by a common `<noise>` tag / set of distributions, and (b) whether a  `<noise>` tag should be defined for each sensor signal. What I mean by this is should, for example, GPS position_x, position_y and position_z have separate noise distributions, because typical satellite vehicle geometry with respect to the receiver position causes a much greater error in Z than in X or Y.\n\nOnce the Basic/Intermediate framework is in place, I can repackage my code in CRATES as a separate ROS package (providing SensorPlugins and WorldPlugins) with a gazebo_ros_pkgs dependency. \n\nI'm almost certain @SJulier will have some valuable input to this conversation.\n\n\n\n\n\n", "markup": "markdown", "html": "<p>Thanks for spearheading this conversation! </p>\n<p>My comments were mainly motivated by working with data fusion, localization and GNSS modelling. Gazebo has been an extremely useful tool for CRATES, which is a work in progress: it's currently undergoing a refactor, while I push whatever the Gazebo project finds useful upstream. </p>\n<p>While developing CRATES what I noticed however, is that the following sorts of things are quite difficult to model in Gazebo using default <code>&lt;sensor&gt;</code> options:</p>\n<ul>\n<li>A barometric altimeter that drifts with atmospheric pressure changes</li>\n<li>A GPS waypoint that drifts with changes in ionospheric and tropospheric conditions</li>\n<li>A gyroscope that drifts in response to temperature</li>\n</ul>\n<p>The thing that links all of these is that the noise is correlated in space and time: in other words the current error perturbation is related to (not independent from) to perturbations drawn at locations close by, or at epochs close to each other in time.</p>\n<p>Having looked through the Gazebo source a bit, what I'd like to tentatively propose are the following three usage patterns for error modelling:</p>\n<ol>\n<li>Easy: Basic assumption is a deterministic measurement. Not very realistic, but useful if you are trying to validate some analytic model of the world.</li>\n<li>Intermediate: Standardised <code>&lt;noise&gt;</code> tag which provides independently-drawn error perturbations, or simple time-correlated perturbations (see below).</li>\n<li>Advanced: A custom SensorPlugin, in which sensor signals may be correlated with each other, or with some other quantity (examples: its own or another entity's location, temperature, humidity, pressure, ionospheric conditions, etc. These would be distributed as separate ROS packages providing SensorPlugins and WorldPlugins , dependent on gazebo_ros_pkgs. This also has the benefit that Gazebo itself need not link against many sensor-specific third party libraries.</li>\n</ol>\n<p>The course of action I have chosen is to first propose Easy / Intermediate implementations for sensors not already described in SDF / supported by Gazebo. Namely, magnetometers in issue <a href=\"#!/osrf/gazebo/issues/1294/inclusion-of-magnetic-field-strength\" rel=\"nofollow\" title=\"Inclusion of magnetic field strength sensor\" class=\"ap-connect-link\">#1294</a> and altimeters in issue <a href=\"#!/osrf/gazebo/issues/1297/inclusion-of-an-altimeter-sensor\" rel=\"nofollow\" title=\"Inclusion of an altimeter sensor\" class=\"ap-connect-link\"><s>#1297</s></a>. I also proposed a nomenclature update from GPS to GNSS in issue <a href=\"#!/osrf/gazebo/issues/1297/inclusion-of-an-altimeter-sensor\" rel=\"nofollow\" title=\"Inclusion of an altimeter sensor\" class=\"ap-connect-link\"><s>#1297</s></a>.</p>\n<p>What I would like to do next is propose that the Ornstein-Uhlenbeck distribution be supported in the <code>&lt;noise&gt;</code> tag. It's a good start for modelling noise that drifts with time, but periodically reverts back to a mean quantity. It may be useful as a model for short-term IMU orientation error (fast corrections of integrated gyro readings) or long-term barometric altimeter error (slow changes in atmospheric pressure).</p>\n<p>On a related note, we also need to think (a) whether <strong>all</strong> sensors can be supported by a common <code>&lt;noise&gt;</code> tag / set of distributions, and (b) whether a  <code>&lt;noise&gt;</code> tag should be defined for each sensor signal. What I mean by this is should, for example, GPS position_x, position_y and position_z have separate noise distributions, because typical satellite vehicle geometry with respect to the receiver position causes a much greater error in Z than in X or Y.</p>\n<p>Once the Basic/Intermediate framework is in place, I can repackage my code in CRATES as a separate ROS package (providing SensorPlugins and WorldPlugins) with a gazebo_ros_pkgs dependency. </p>\n<p>I'm almost certain @SJulier will have some valuable input to this conversation.</p>", "type": "rendered"}, "created_on": "2014-10-13T15:12:53.608904+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2014-10-13T15:14:55.738084+00:00", "type": "issue_comment", "id": 12937465}