{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/894/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/894.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/894/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/894/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/894/common-get_sha1-doesnt-always-return-40"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/894/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "common::get_sha1 doesn't always return 40 characters", "component": {"name": "common", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/138866.json"}}}, "votes": 0, "watches": 2, "content": {"raw": "SHA1 hashes are supposed to be 20 bytes, with a hex string of 40 characters. Our common::get_sha1 function does not always return a string of 40 characters, however. The following addition to the test currently fails for about 20% of new hashes:\r\n~~~\r\n\r\ndiff -r c03eacb07e69 gazebo/common/CommonIface_TEST.cc\r\n--- a/gazebo/common/CommonIface_TEST.cc\tSat Oct 12 12:49:34 2013 -0700\r\n+++ b/gazebo/common/CommonIface_TEST.cc\tTue Oct 15 02:38:46 2013 -0400\r\n@@ -17,6 +17,8 @@\r\n \r\n #include <stdlib.h>\r\n #include <gtest/gtest.h>\r\n+#include <string>\r\n+#include <sstream>\r\n \r\n #include \"gazebo/common/CommonIface.hh\"\r\n \r\n@@ -54,6 +56,15 @@\r\n   computedSHA1 = common::get_sha1<std::string>(s);\r\n   precomputedSHA1 = \"da39a3ee5e6b4b0d3255bfef95601890afd80709\";\r\n   EXPECT_EQ(precomputedSHA1, computedSHA1);\r\n+\r\n+  // Compute a bunch of SHA1's to verify consistent length\r\n+  for (unsigned i = 0; i < 100; ++i)\r\n+  {\r\n+    std::stringstream stream;\r\n+    stream << i << '\\n';\r\n+    std::string sha = common::get_sha1<std::string>(stream.str());\r\n+    EXPECT_EQ(sha.length(), 40u);\r\n+  }\r\n }\r\n \r\n /////////////////////////////////////////////////\r\n~~~", "markup": "markdown", "html": "<p>SHA1 hashes are supposed to be 20 bytes, with a hex string of 40 characters. Our common::get_sha1 function does not always return a string of 40 characters, however. The following addition to the test currently fails for about 20% of new hashes:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r c03eacb07e69 gazebo/common/CommonIface_TEST.cc</span>\n<span class=\"gd\">--- a/gazebo/common/CommonIface_TEST.cc Sat Oct 12 12:49:34 2013 -0700</span>\n<span class=\"gi\">+++ b/gazebo/common/CommonIface_TEST.cc Tue Oct 15 02:38:46 2013 -0400</span>\n<span class=\"gu\">@@ -17,6 +17,8 @@</span>\n\n #include &lt;stdlib.h&gt;\n #include &lt;gtest/gtest.h&gt;\n<span class=\"gi\">+#include &lt;string&gt;</span>\n<span class=\"gi\">+#include &lt;sstream&gt;</span>\n\n #include &quot;gazebo/common/CommonIface.hh&quot;\n\n<span class=\"gu\">@@ -54,6 +56,15 @@</span>\n   computedSHA1 = common::get_sha1&lt;std::string&gt;(s);\n   precomputedSHA1 = &quot;da39a3ee5e6b4b0d3255bfef95601890afd80709&quot;;\n   EXPECT_EQ(precomputedSHA1, computedSHA1);\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  // Compute a bunch of SHA1&#39;s to verify consistent length</span>\n<span class=\"gi\">+  for (unsigned i = 0; i &lt; 100; ++i)</span>\n<span class=\"gi\">+  {</span>\n<span class=\"gi\">+    std::stringstream stream;</span>\n<span class=\"gi\">+    stream &lt;&lt; i &lt;&lt; &#39;\\n&#39;;</span>\n<span class=\"gi\">+    std::string sha = common::get_sha1&lt;std::string&gt;(stream.str());</span>\n<span class=\"gi\">+    EXPECT_EQ(sha.length(), 40u);</span>\n<span class=\"gi\">+  }</span>\n }\n\n /////////////////////////////////////////////////\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2013-10-15T06:43:01.656418+00:00", "milestone": null, "updated_on": "2016-09-14T19:44:41.843909+00:00", "type": "issue", "id": 894}