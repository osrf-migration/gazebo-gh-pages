{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1720/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1720.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1720/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1720/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1720/race-condition-in-transport-library"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1720/vote"}}, "reporter": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "title": "Race condition in transport library", "component": {"name": "transport", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122882.json"}}}, "votes": 0, "watches": 2, "content": {"raw": "For days I've been struggling with random errors and crashes from the transport library, errors like,\r\n\r\n```\r\nError [Connection.hh:264] Header is empty\r\nError [Master.cc:124] Master got empty data message from[37128]\r\nError [Connection.hh:264] Header is empty\r\nError [Master.cc:124] Master got empty data message from[37128]\r\nError [Connection.hh:264] Header is empty\r\nError [Master.cc:124] Master got empty data message from[37128]\r\nError [Connection.hh:264] Header is empty\r\nMaster Unknown message type[] From[37128]\r\nMaster Unknown message type[] From[37128]\r\nMaster Unknown message type[] From[37128]\r\nlibprotobuf ERROR google/protobuf/message_lite.cc:123] Can't parse message of type \"gazebo.msgs.Packet\" because it is missing required fields: stamp, type, serialized_data\r\nMaster Unknown message type[] From[37128]\r\n...........etc\r\n```\r\n\r\nThese are similar to what is seen in issue #821, but that one is so old I figured I'd create a new issue (possible duplicate though). The culprit of this problem can be found in `Connection::EnqueueMsg()`. Each `Connection` instance has a shared buffer that's used to write the length of the header to. However, if we look at [this line](#!/osrf/gazebo/src/348b3de008a00cc7b73ad95ad1b8ce00c9d22024/gazebo/transport/Connection.cc?at=default#Connection.cc-304), this header buffer is being written to without locking the `writeMutex`. This means that if several `EnqueueMsg()` calls come in while the mutex is locked, all these messages will get the length header of the last write. Once a wrong header length is written on a connection all further reads will obviously be bogus, and with the wrong amounts of characters huge buffers might be allocated for messages.\r\n\r\nI have been able to confirm that the buffer can indeed at times be wrong by adding a buffer local to the function that should contain the same value but is different right before the errors start coming in. Moving line 304 inside the mutex block solves the problem. I'd create a pull request, but I must admit I'm new to Mercurial so I figured I'd report this right away.", "markup": "markdown", "html": "<p>For days I've been struggling with random errors and crashes from the transport library, errors like,</p>\n<div class=\"codehilite\"><pre><span></span>Error [Connection.hh:264] Header is empty\nError [Master.cc:124] Master got empty data message from[37128]\nError [Connection.hh:264] Header is empty\nError [Master.cc:124] Master got empty data message from[37128]\nError [Connection.hh:264] Header is empty\nError [Master.cc:124] Master got empty data message from[37128]\nError [Connection.hh:264] Header is empty\nMaster Unknown message type[] From[37128]\nMaster Unknown message type[] From[37128]\nMaster Unknown message type[] From[37128]\nlibprotobuf ERROR google/protobuf/message_lite.cc:123] Can&#39;t parse message of type &quot;gazebo.msgs.Packet&quot; because it is missing required fields: stamp, type, serialized_data\nMaster Unknown message type[] From[37128]\n...........etc\n</pre></div>\n\n\n<p>These are similar to what is seen in issue <a href=\"#!/osrf/gazebo/issues/821/apparent-transport-race-condition-on\" rel=\"nofollow\" title=\"Apparent transport race condition on startup\" class=\"ap-connect-link\">#821</a>, but that one is so old I figured I'd create a new issue (possible duplicate though). The culprit of this problem can be found in <code>Connection::EnqueueMsg()</code>. Each <code>Connection</code> instance has a shared buffer that's used to write the length of the header to. However, if we look at <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/348b3de008a00cc7b73ad95ad1b8ce00c9d22024/gazebo/transport/Connection.cc?at=default#Connection.cc-304\" rel=\"nofollow\">this line</a>, this header buffer is being written to without locking the <code>writeMutex</code>. This means that if several <code>EnqueueMsg()</code> calls come in while the mutex is locked, all these messages will get the length header of the last write. Once a wrong header length is written on a connection all further reads will obviously be bogus, and with the wrong amounts of characters huge buffers might be allocated for messages.</p>\n<p>I have been able to confirm that the buffer can indeed at times be wrong by adding a buffer local to the function that should contain the same value but is different right before the errors start coming in. Moving line 304 inside the mutex block solves the problem. I'd create a pull request, but I must admit I'm new to Mercurial so I figured I'd report this right away.</p>", "type": "rendered"}, "assignee": null, "state": "duplicate", "version": {"name": "6.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/170782.json"}}}, "edited_on": null, "created_on": "2015-08-28T12:23:58.137048+00:00", "milestone": null, "updated_on": "2016-08-03T11:45:30.876753+00:00", "type": "issue", "id": 1720}