{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/20/comments/3100140.json"}, "html": {"href": "#!/osrf/gazebo/issues/20#comment-3100140"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/20.json"}}, "type": "issue", "id": 20, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Laser scan (ray sensor) updates erratic and slower than desired"}, "content": {"raw": "Regarding 1)\n\nrostopic uses the time published on the `/clock` topic by the gazebo_ros_api plugin in the gazebo ROS package. So the rates displayed in `rostopic hz` should always correspond to the intended publishing rates, no matter at which update rate Gazebo is running.\n\nWhen throttling Gazebo (version 1.3) to 0.1x real-time, `rostopic hz` and `gztopic view` still displays the correct rate of 40.0 Hz for the laser (using simulated time), while `gztopic hz` falls back to 4 Hz. This is what I would expect. Running in real-time, `rostopic hz` decreases to approximately 37 Hz on my machine, which might be caused by message loss in the ROS publisher/subscriber pipeline on high CPU loads.\n\nLet's see if the threaded sensor implementation brings some improvements here. In general, I would expect that the update rate decreases if the computing resources are exhausted, but the publishing rates measured in simulated time should not degrade.", "markup": "markdown", "html": "<p>Regarding 1)</p>\n<p>rostopic uses the time published on the <code>/clock</code> topic by the gazebo_ros_api plugin in the gazebo ROS package. So the rates displayed in <code>rostopic hz</code> should always correspond to the intended publishing rates, no matter at which update rate Gazebo is running.</p>\n<p>When throttling Gazebo (version 1.3) to 0.1x real-time, <code>rostopic hz</code> and <code>gztopic view</code> still displays the correct rate of 40.0 Hz for the laser (using simulated time), while <code>gztopic hz</code> falls back to 4 Hz. This is what I would expect. Running in real-time, <code>rostopic hz</code> decreases to approximately 37 Hz on my machine, which might be caused by message loss in the ROS publisher/subscriber pipeline on high CPU loads.</p>\n<p>Let's see if the threaded sensor implementation brings some improvements here. In general, I would expect that the update rate decreases if the computing resources are exhausted, but the publishing rates measured in simulated time should not degrade.</p>", "type": "rendered"}, "created_on": "2013-02-11T13:05:33.228884+00:00", "user": {"display_name": "Johannes Meyer", "uuid": "{58d19163-cefc-479b-b80a-d78fb811b533}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B58d19163-cefc-479b-b80a-d78fb811b533%7D"}, "html": {"href": "https://bitbucket.org/%7B58d19163-cefc-479b-b80a-d78fb811b533%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1363fb056a859ce072c21fdb8da3a710d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJM-6.png"}}, "nickname": "johmeyer", "type": "user", "account_id": "557058:7237c8c3-e637-4ea0-ab9c-d45f303d8fb9"}, "updated_on": null, "type": "issue_comment", "id": 3100140}