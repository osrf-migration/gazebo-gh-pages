{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2262/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2262.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2262/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2262/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2262/symbol-visibility-issues-in-windows"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2262/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "Symbol visibility issues in Windows", "component": null, "votes": 0, "watches": 1, "content": {"raw": "While working on #!/osrf/gazebo/issues/2129/visual-studio-2015-compatibility , I noticed several issues on the macros used to define symbol visibility on Windows in Gazebo, in SDFormat and in the Ignition projects (see the declined PR: #!/osrf/gazebo/pull-requests/2700 ). \r\n\r\nAll Windows shared libraries that export their classes with `_declspec(dllexport)`/`_declspec(dllimport)` [1] should decorate their classes with `_declspec(dllexport)` only when compiling the shared library itself, while when the headers of the library are used by other libraries or binaries, the class should be decorated with `_declspec(dllimport)`. This is typically obtained  by defining a project-specific preprocessor macro (on CMake it is tipically `<target_name>_EXPORTS`) **only for the compilation units of the shared library**. \r\nHowever in Gazebo the same `BUILDING_DLL` macro is used in the several Gazebo libraries [2] (even if most of the Gazebo libraries are compiled statically), SDFormat [3] and in different Ignition projects [4,5]. This means that when in Gazebo  `BUILDING_DLL`  is defined (not only for the shared libraries, but for all targets) it changes the intended behavior of all the SDFormat and Ignition headers. A similar problem arises also with the `BUILDING_STATIC_LIBS` macro, shared as well across different projects. \r\n\r\nOne possible solution for this is that each library defines its library specific symbols, for example using the [`GenerateExportHeader`](https://cmake.org/cmake/help/v3.0/module/GenerateExportHeader.html) CMake module. This would also simplify supporting the building of the libraries both as static or shared libraries. I started working on that for ign-math, but then I realized that it would break non-CMake builds of the library, such as the one using Bazel in https://github.com/RobotLocomotion/drake/blob/master/tools/ignition_math.BUILD . For this reason, for now I will just rename the `BUILDING_DLL` macros to have projects specific names, as it should be sufficient to solve the compiling problems reported in #!/osrf/gazebo/pull-requests/2700/remove-preprocessor-definition-of/diff#comment-35964459 .\r\n\r\nRelated console_bridge PR discussion : https://github.com/ros/console_bridge/pull/42 .\r\n\r\n\r\n\r\n[1] https://msdn.microsoft.com/en-us/library/a90k134d.aspx\r\n\r\n[2] #!/osrf/gazebo/src/02c86f6d70d7fd8207043cb97d17c4917b77db20/gazebo/util/system.hh?at=default&fileviewer=file-view-default#system.hh-39\r\n\r\n[3] https://bitbucket.org/osrf/sdformat/src/e52c48cc0820a96771cd987eb8f5ddd5c94cb36c/include/sdf/system_util.hh?at=default&fileviewer=file-view-default#system_util.hh-29\r\n\r\n[4] https://bitbucket.org/ignitionrobotics/ign-math/src/5d674fbadeaf04fca7f588b1b2d9cd46a9785324/include/ignition/math/System.hh?at=default&fileviewer=file-view-default#System.hh-40\r\n\r\n[5] https://bitbucket.org/ignitionrobotics/ign-transport/src/75756e6cd1e769625122eb52be1f61d9356985d7/include/ignition/transport/Helpers.hh?at=default&fileviewer=file-view-default#Helpers.hh-38", "markup": "markdown", "html": "<p>While working on <a href=\"#!/osrf/gazebo/issues/2129/visual-studio-2015-compatibility\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/issues/2129/visual-studio-2015-compatibility</a> , I noticed several issues on the macros used to define symbol visibility on Windows in Gazebo, in SDFormat and in the Ignition projects (see the declined PR: <a href=\"#!/osrf/gazebo/pull-requests/2700\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/pull-requests/2700</a> ). </p>\n<p>All Windows shared libraries that export their classes with <code>_declspec(dllexport)</code>/<code>_declspec(dllimport)</code> [1] should decorate their classes with <code>_declspec(dllexport)</code> only when compiling the shared library itself, while when the headers of the library are used by other libraries or binaries, the class should be decorated with <code>_declspec(dllimport)</code>. This is typically obtained  by defining a project-specific preprocessor macro (on CMake it is tipically <code>&lt;target_name&gt;_EXPORTS</code>) <strong>only for the compilation units of the shared library</strong>. \nHowever in Gazebo the same <code>BUILDING_DLL</code> macro is used in the several Gazebo libraries [2] (even if most of the Gazebo libraries are compiled statically), SDFormat [3] and in different Ignition projects [4,5]. This means that when in Gazebo  <code>BUILDING_DLL</code>  is defined (not only for the shared libraries, but for all targets) it changes the intended behavior of all the SDFormat and Ignition headers. A similar problem arises also with the <code>BUILDING_STATIC_LIBS</code> macro, shared as well across different projects. </p>\n<p>One possible solution for this is that each library defines its library specific symbols, for example using the <a data-is-external-link=\"true\" href=\"https://cmake.org/cmake/help/v3.0/module/GenerateExportHeader.html\" rel=\"nofollow\"><code>GenerateExportHeader</code></a> CMake module. This would also simplify supporting the building of the libraries both as static or shared libraries. I started working on that for ign-math, but then I realized that it would break non-CMake builds of the library, such as the one using Bazel in <a href=\"https://github.com/RobotLocomotion/drake/blob/master/tools/ignition_math.BUILD\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/RobotLocomotion/drake/blob/master/tools/ignition_math.BUILD</a> . For this reason, for now I will just rename the <code>BUILDING_DLL</code> macros to have projects specific names, as it should be sufficient to solve the compiling problems reported in <a href=\"#!/osrf/gazebo/pull-requests/2700/remove-preprocessor-definition-of/diff#comment-35964459\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/pull-requests/2700/remove-preprocessor-definition-of/diff#comment-35964459</a> .</p>\n<p>Related console_bridge PR discussion : <a href=\"https://github.com/ros/console_bridge/pull/42\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ros/console_bridge/pull/42</a> .</p>\n<p>[1] <a href=\"https://msdn.microsoft.com/en-us/library/a90k134d.aspx\" rel=\"nofollow\" class=\"ap-connect-link\">https://msdn.microsoft.com/en-us/library/a90k134d.aspx</a></p>\n<p>[2] <a href=\"#!/osrf/gazebo/src/02c86f6d70d7fd8207043cb97d17c4917b77db20/gazebo/util/system.hh?at=default&amp;fileviewer=file-view-default#system.hh-39\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/02c86f6d70d7fd8207043cb97d17c4917b77db20/gazebo/util/system.hh?at=default&amp;fileviewer=file-view-default#system.hh-39</a></p>\n<p>[3] <a href=\"https://bitbucket.org/osrf/sdformat/src/e52c48cc0820a96771cd987eb8f5ddd5c94cb36c/include/sdf/system_util.hh?at=default&amp;fileviewer=file-view-default#system_util.hh-29\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/sdformat/src/e52c48cc0820a96771cd987eb8f5ddd5c94cb36c/include/sdf/system_util.hh?at=default&amp;fileviewer=file-view-default#system_util.hh-29</a></p>\n<p>[4] <a href=\"https://bitbucket.org/ignitionrobotics/ign-math/src/5d674fbadeaf04fca7f588b1b2d9cd46a9785324/include/ignition/math/System.hh?at=default&amp;fileviewer=file-view-default#System.hh-40\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/ignitionrobotics/ign-math/src/5d674fbadeaf04fca7f588b1b2d9cd46a9785324/include/ignition/math/System.hh?at=default&amp;fileviewer=file-view-default#System.hh-40</a></p>\n<p>[5] <a href=\"https://bitbucket.org/ignitionrobotics/ign-transport/src/75756e6cd1e769625122eb52be1f61d9356985d7/include/ignition/transport/Helpers.hh?at=default&amp;fileviewer=file-view-default#Helpers.hh-38\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/ignitionrobotics/ign-transport/src/75756e6cd1e769625122eb52be1f61d9356985d7/include/ignition/transport/Helpers.hh?at=default&amp;fileviewer=file-view-default#Helpers.hh-38</a></p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-30T21:30:19.313797+00:00", "milestone": null, "updated_on": "2019-04-04T08:43:06.628189+00:00", "type": "issue", "id": 2262}