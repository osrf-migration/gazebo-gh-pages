{"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2222/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2222.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2222/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2222/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2222/bullet-contact-points-with-positive"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2222/vote"}}, "reporter": {"display_name": "Jennifer Buehler", "uuid": "{5949baad-8c43-4d52-9a82-bb8c3511fed8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D"}, "html": {"href": "https://bitbucket.org/%7B5949baad-8c43-4d52-9a82-bb8c3511fed8%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/b28ae0e95eada6ee16f0860c1fa59fdcd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJB-4.png"}}, "nickname": "JenniferBuehler", "type": "user", "account_id": "557058:96bd489a-ec14-4a06-8d31-7bb6d46d1209"}, "title": "BULLET contact points with positive distance should be ignored", "component": {"name": "physics::BulletPhysics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122884.json"}}}, "votes": 0, "watches": 2, "content": {"raw": "In BULLET, sometimes it can happen that contact points are returned with a positive distance. This would mean that the objects are actually not intersecting. This does intuitively not make sense, as one would expect contacts to happen only on actual collision.\r\n\r\nThe reason this happens in Bullet is explained in [this post](http://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?f=9&t=5831): \r\n\r\n*\"Contacts are created when the associated AABBs of the bodies overlap. So a contact is created when two bodies are in close proximity. This doesn't mean necessarily that two objects are touching. This only happens if the closest points distance is less then some user defined margin (e.g. 0.04 m) and in this case the contact point count is greater zero.\"*\r\n\r\nI assume this is the reason why contacts are published only upon negative distance in [BulletPhysics::InternalTickCallback](#!/osrf/gazebo/src/cd526975bc8bdf3813e0600e3ece180870602471/gazebo/physics/bullet/BulletPhysics.cc?at=default&fileviewer=file-view-default#BulletPhysics.cc-171):\r\n\r\n```cpp\r\n    Contact *contactFeedback = bulletPhysics->GetContactManager()->NewContact(\r\n        collisionPtr1.get(), collisionPtr2.get(),\r\n        collisionPtr1->GetWorld()->SimTime());\r\n\r\n    [...]\r\n\r\n    int numContacts = contactManifold->getNumContacts();\r\n    for (int j = 0; j < numContacts; ++j)\r\n    {\r\n      btManifoldPoint &pt = contactManifold->getContactPoint(j);\r\n      if (pt.getDistance() <= 0.f)\r\n      {\r\n           ... contactFeedback initialization happens\r\n           ... publishing happens\r\n```\r\n\r\nOne issue with this: While this works nicely for the published contacts, the contact points with positive distance (which should be ignored) will still pop up when queried via the contact manager, because [ContactManager::NewContact was called](#!/osrf/gazebo/src/cd526975bc8bdf3813e0600e3ece180870602471/gazebo/physics/bullet/BulletPhysics.cc?at=default&fileviewer=file-view-default#BulletPhysics.cc-151) and therefore already has a contact point. Such contacts will turn up with no actual contacts assigned to hem, only the model names will be initialized, and ``Contact::count`` will be zero.\r\n\r\nWhile it can be certainly verified that this is an invalid contact by checking ``Contact::count==0``, it would be nicer to avoid such contacts to be added to the contact manager altogether in the first place. This would require to check whether the distance is positive *before* calling ``NewContact``, not after. So we'd have to iterate through all the contacts returned by bullet first and throw away the ones which have positive distance. This means iterating through the points twice - once to filter, then (if there are any points left) calling NewContact, and then adding all the remaining points to the contact feedback. While this is linear complexity and should not be dramatic, it is still a computational increase, though it may be mitigated by saving some calls of NewContact().\r\n\r\nWhat do you think - should we fix this, or leave it as is? I am happy to send a PR.", "markup": "markdown", "html": "<p>In BULLET, sometimes it can happen that contact points are returned with a positive distance. This would mean that the objects are actually not intersecting. This does intuitively not make sense, as one would expect contacts to happen only on actual collision.</p>\n<p>The reason this happens in Bullet is explained in <a data-is-external-link=\"true\" href=\"http://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?f=9&amp;t=5831\" rel=\"nofollow\">this post</a>: </p>\n<p><em>\"Contacts are created when the associated AABBs of the bodies overlap. So a contact is created when two bodies are in close proximity. This doesn't mean necessarily that two objects are touching. This only happens if the closest points distance is less then some user defined margin (e.g. 0.04 m) and in this case the contact point count is greater zero.\"</em></p>\n<p>I assume this is the reason why contacts are published only upon negative distance in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/cd526975bc8bdf3813e0600e3ece180870602471/gazebo/physics/bullet/BulletPhysics.cc?at=default&amp;fileviewer=file-view-default#BulletPhysics.cc-171\" rel=\"nofollow\">BulletPhysics::InternalTickCallback</a>:</p>\n<div class=\"codehilite language-cpp\"><pre><span></span>    <span class=\"n\">Contact</span> <span class=\"o\">*</span><span class=\"n\">contactFeedback</span> <span class=\"o\">=</span> <span class=\"n\">bulletPhysics</span><span class=\"o\">-&gt;</span><span class=\"n\">GetContactManager</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">NewContact</span><span class=\"p\">(</span>\n        <span class=\"n\">collisionPtr1</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span> <span class=\"n\">collisionPtr2</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>\n        <span class=\"n\">collisionPtr1</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWorld</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">SimTime</span><span class=\"p\">());</span>\n\n    <span class=\"p\">[...]</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">numContacts</span> <span class=\"o\">=</span> <span class=\"n\">contactManifold</span><span class=\"o\">-&gt;</span><span class=\"n\">getNumContacts</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">numContacts</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">btManifoldPoint</span> <span class=\"o\">&amp;</span><span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">contactManifold</span><span class=\"o\">-&gt;</span><span class=\"n\">getContactPoint</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"p\">.</span><span class=\"n\">getDistance</span><span class=\"p\">()</span> <span class=\"o\">&lt;=</span> <span class=\"mf\">0.f</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n           <span class=\"p\">...</span> <span class=\"n\">contactFeedback</span> <span class=\"n\">initialization</span> <span class=\"n\">happens</span>\n           <span class=\"p\">...</span> <span class=\"n\">publishing</span> <span class=\"n\">happens</span>\n</pre></div>\n\n\n<p>One issue with this: While this works nicely for the published contacts, the contact points with positive distance (which should be ignored) will still pop up when queried via the contact manager, because <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/cd526975bc8bdf3813e0600e3ece180870602471/gazebo/physics/bullet/BulletPhysics.cc?at=default&amp;fileviewer=file-view-default#BulletPhysics.cc-151\" rel=\"nofollow\">ContactManager::NewContact was called</a> and therefore already has a contact point. Such contacts will turn up with no actual contacts assigned to hem, only the model names will be initialized, and <code>Contact::count</code> will be zero.</p>\n<p>While it can be certainly verified that this is an invalid contact by checking <code>Contact::count==0</code>, it would be nicer to avoid such contacts to be added to the contact manager altogether in the first place. This would require to check whether the distance is positive <em>before</em> calling <code>NewContact</code>, not after. So we'd have to iterate through all the contacts returned by bullet first and throw away the ones which have positive distance. This means iterating through the points twice - once to filter, then (if there are any points left) calling NewContact, and then adding all the remaining points to the contact feedback. While this is linear complexity and should not be dramatic, it is still a computational increase, though it may be mitigated by saving some calls of NewContact().</p>\n<p>What do you think - should we fix this, or leave it as is? I am happy to send a PR.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-03-10T04:30:19.136323+00:00", "milestone": null, "updated_on": "2017-03-10T04:30:19.136323+00:00", "type": "issue", "id": 2222}