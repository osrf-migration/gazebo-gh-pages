{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1865/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1865.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1865/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1865/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1865/rendering-depthcamera-does-not-output"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1865/vote"}}, "reporter": {"display_name": "Paul D'Angio", "uuid": "{7e4eaee6-2565-46c4-b220-e8c5d4fd600b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e4eaee6-2565-46c4-b220-e8c5d4fd600b%7D"}, "html": {"href": "https://bitbucket.org/%7B7e4eaee6-2565-46c4-b220-e8c5d4fd600b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/78f89e931a7299e2c53796ab056a4cc3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPD-0.png"}}, "nickname": "pcdangio", "type": "user", "account_id": "557058:b19bbfb5-cba3-4b6a-b9ae-84d6bb33ca3a"}, "title": "rendering::DepthCamera does not output colors properly for an RGB PointCloud.", "component": {"name": "rendering", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122881.json"}}}, "votes": 1, "watches": 2, "content": {"raw": "The DepthCamera::PostRender() method of the rendering::DepthCamera class in gazebo/rendering/DepthCamera.cc does not output proper RGB colors for each point.  In the PostRender method, if the <depth_camera>/<output> SDF element is set to \"points\", it creates a float array containing an RGB point cloud and outputs it through the newRGBPointCloud event.  The format of the float array is X, Y, Z, RGB repeated for all points. (pixels really).  The X, Y, and Z floats for all pixels are fine, but the RGB float for all pixels is incorrect.  The RGB float value always comes out to either:\r\n\r\n0x3F800000 if no object is seen by the point (aka X = Y = Z = 0)\r\n\r\n0x4AA00000 otherwise, no matter what color the object is that is being seen by that point\r\n\r\nI took a look at the gazebo_ros_depth_camera.cc plugin source code written by John Hsu for gazebo_ros_pkgs.  I can tell he had the exact same problem here in trying to use the newRGBPointCloud event, and was forced to instead make a computationally expensive workaround by calculating the RGB point cloud from a depth frame after a newDepthFrame event.  You can even see his attempts at debugging the RGB float problem in his \"OnNewRGBPointCloud\" method, which was abandoned but never removed from the source code.\r\n\r\nThe same behavior is made evident [in this post](http://answers.gazebosim.org/question/5469/does-gazebo_ros_depth_camera-with-points-output-produce-a-color-point-cloud/).", "markup": "markdown", "html": "<p>The DepthCamera::PostRender() method of the rendering::DepthCamera class in gazebo/rendering/DepthCamera.cc does not output proper RGB colors for each point.  In the PostRender method, if the &lt;depth_camera&gt;/&lt;output&gt; SDF element is set to \"points\", it creates a float array containing an RGB point cloud and outputs it through the newRGBPointCloud event.  The format of the float array is X, Y, Z, RGB repeated for all points. (pixels really).  The X, Y, and Z floats for all pixels are fine, but the RGB float for all pixels is incorrect.  The RGB float value always comes out to either:</p>\n<p>0x3F800000 if no object is seen by the point (aka X = Y = Z = 0)</p>\n<p>0x4AA00000 otherwise, no matter what color the object is that is being seen by that point</p>\n<p>I took a look at the gazebo_ros_depth_camera.cc plugin source code written by John Hsu for gazebo_ros_pkgs.  I can tell he had the exact same problem here in trying to use the newRGBPointCloud event, and was forced to instead make a computationally expensive workaround by calculating the RGB point cloud from a depth frame after a newDepthFrame event.  You can even see his attempts at debugging the RGB float problem in his \"OnNewRGBPointCloud\" method, which was abandoned but never removed from the source code.</p>\n<p>The same behavior is made evident <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/5469/does-gazebo_ros_depth_camera-with-points-output-produce-a-color-point-cloud/\" rel=\"nofollow\">in this post</a>.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "6.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/170782.json"}}}, "edited_on": null, "created_on": "2016-03-01T05:43:38.786206+00:00", "milestone": null, "updated_on": "2016-11-07T19:35:36.377496+00:00", "type": "issue", "id": 1865}