{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2078/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2078.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2078/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2078/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2078/add-timeout-to-synchronous-transport"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2078/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Add timeout to synchronous transport::request", "component": {"name": "transport", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122882.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "As it is now, it will hang forever if no one replies to the request.\r\n\r\nA possible implementation:\r\n\r\n~~~\r\ndiff -r ff4e2ba985d6 gazebo/transport/TransportIface.cc\r\n--- a/gazebo/transport/TransportIface.cc\tMon Oct 24 11:05:19 2016 -0700\r\n+++ b/gazebo/transport/TransportIface.cc\tTue Oct 25 10:28:57 2016 -0700\r\n@@ -193,7 +193,7 @@\r\n /////////////////////////////////////////////////\r\n boost::shared_ptr<msgs::Response> transport::request(\r\n     const std::string &_worldName, const std::string &_request,\r\n-    const std::string &_data)\r\n+    const std::string &_data, const common::Time &_timeout)\r\n {\r\n   msgs::Request *request = msgs::CreateRequest(_request, _data);\r\n \r\n@@ -214,7 +214,9 @@\r\n   std::list<boost::shared_ptr<msgs::Response> >::iterator iter;\r\n \r\n   bool valid = false;\r\n-  while (!valid && !g_stopped)\r\n+  auto startTime = common::Time::GetWallTime();\r\n+  while (!valid && !g_stopped &&\r\n+      common::Time::GetWallTime() - startTime < _timeout)\r\n   {\r\n     // Wait for a response\r\n     g_responseCondition.wait(lock);\r\ndiff -r ff4e2ba985d6 gazebo/transport/TransportIface.hh\r\n--- a/gazebo/transport/TransportIface.hh\tMon Oct 24 11:05:19 2016 -0700\r\n+++ b/gazebo/transport/TransportIface.hh\tTue Oct 25 10:28:57 2016 -0700\r\n@@ -92,16 +92,18 @@\r\n     void pause_incoming(bool _pause);\r\n \r\n     /// \\brief Send a request and receive a response.  This call will block\r\n-    /// until a response is received.\r\n+    /// until a response is received or timeout is reached.\r\n     /// \\param[in] _worldName The name of the world to which the request\r\n     /// should be sent\r\n     /// \\param[in] _request The type request.\r\n     /// \\param[in] _data Optional data string.\r\n+    /// \\param[in] _data Optional timeout, 10 s by default.\r\n     /// \\return The response to the request.  Can be empty.\r\n     GZ_TRANSPORT_VISIBLE\r\n     boost::shared_ptr<msgs::Response> request(const std::string &_worldName,\r\n-                                              const std::string &_request,\r\n-                                              const std::string &_data = \"\");\r\n+        const std::string &_request,\r\n+        const std::string &_data = \"\",\r\n+        const common::Time &_timeout = common::Time(10));\r\n \r\n     /// \\brief Send a request and don't wait for a response. This is\r\n     /// non-blocking.\r\n~~~\r\n\r\nIssueForNewDevelopers", "markup": "markdown", "html": "<p>As it is now, it will hang forever if no one replies to the request.</p>\n<p>A possible implementation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r ff4e2ba985d6 gazebo/transport/TransportIface.cc</span>\n<span class=\"gd\">--- a/gazebo/transport/TransportIface.cc    Mon Oct 24 11:05:19 2016 -0700</span>\n<span class=\"gi\">+++ b/gazebo/transport/TransportIface.cc    Tue Oct 25 10:28:57 2016 -0700</span>\n<span class=\"gu\">@@ -193,7 +193,7 @@</span>\n /////////////////////////////////////////////////\n boost::shared_ptr&lt;msgs::Response&gt; transport::request(\n     const std::string &amp;_worldName, const std::string &amp;_request,\n<span class=\"gd\">-    const std::string &amp;_data)</span>\n<span class=\"gi\">+    const std::string &amp;_data, const common::Time &amp;_timeout)</span>\n {\n   msgs::Request *request = msgs::CreateRequest(_request, _data);\n\n<span class=\"gu\">@@ -214,7 +214,9 @@</span>\n   std::list&lt;boost::shared_ptr&lt;msgs::Response&gt; &gt;::iterator iter;\n\n   bool valid = false;\n<span class=\"gd\">-  while (!valid &amp;&amp; !g_stopped)</span>\n<span class=\"gi\">+  auto startTime = common::Time::GetWallTime();</span>\n<span class=\"gi\">+  while (!valid &amp;&amp; !g_stopped &amp;&amp;</span>\n<span class=\"gi\">+      common::Time::GetWallTime() - startTime &lt; _timeout)</span>\n   {\n     // Wait for a response\n     g_responseCondition.wait(lock);\n<span class=\"gh\">diff -r ff4e2ba985d6 gazebo/transport/TransportIface.hh</span>\n<span class=\"gd\">--- a/gazebo/transport/TransportIface.hh    Mon Oct 24 11:05:19 2016 -0700</span>\n<span class=\"gi\">+++ b/gazebo/transport/TransportIface.hh    Tue Oct 25 10:28:57 2016 -0700</span>\n<span class=\"gu\">@@ -92,16 +92,18 @@</span>\n     void pause_incoming(bool _pause);\n\n     /// \\brief Send a request and receive a response.  This call will block\n<span class=\"gd\">-    /// until a response is received.</span>\n<span class=\"gi\">+    /// until a response is received or timeout is reached.</span>\n     /// \\param[in] _worldName The name of the world to which the request\n     /// should be sent\n     /// \\param[in] _request The type request.\n     /// \\param[in] _data Optional data string.\n<span class=\"gi\">+    /// \\param[in] _data Optional timeout, 10 s by default.</span>\n     /// \\return The response to the request.  Can be empty.\n     GZ_TRANSPORT_VISIBLE\n     boost::shared_ptr&lt;msgs::Response&gt; request(const std::string &amp;_worldName,\n<span class=\"gd\">-                                              const std::string &amp;_request,</span>\n<span class=\"gd\">-                                              const std::string &amp;_data = &quot;&quot;);</span>\n<span class=\"gi\">+        const std::string &amp;_request,</span>\n<span class=\"gi\">+        const std::string &amp;_data = &quot;&quot;,</span>\n<span class=\"gi\">+        const common::Time &amp;_timeout = common::Time(10));</span>\n\n     /// \\brief Send a request and don&#39;t wait for a response. This is\n     /// non-blocking.\n</pre></div>\n\n\n<p>IssueForNewDevelopers</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2016-10-25T17:33:52.707965+00:00", "milestone": null, "updated_on": "2016-10-25T17:33:52.707965+00:00", "type": "issue", "id": 2078}