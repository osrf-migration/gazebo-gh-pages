{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1613/comments/18181016.json"}, "html": {"href": "#!/osrf/gazebo/issues/1613#comment-18181016"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1613.json"}}, "type": "issue", "id": 1613, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "PhysicsLinkTest.AddForce/0 race condition, uninitialized variable"}, "content": {"raw": "Ok, I managed to track it down a bit further using `--track-origins=yes`:\n~~~\nvalgrind --verbose --tool=memcheck --track-origins=yes \\\n  test/integration/INTEGRATION_physics_link --gtest_filter=\"*AddForce/0\"\n~~~\n\nIt looks like the problem is caused by ODE's heap management ([ode.cpp:1998](#!/osrf/gazebo/src/9abf731199fcee360ae2f7756c567fb37c176306/deps/opende/src/ode.cpp#cl-1998)), and I would guess that `dxEstimateQuickStepMemoryRequirements` is the likely culprit, since that has been touched somewhat recently by @rosebudflyaway and @hsu .\n~~~\n==6174==  Uninitialised value was created by a heap allocation\n==6174==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==6174==    by 0xEAB359F: InternalReallocateWorldProcessContext(dxWorldProcessContext*, unsigned long, dxWorldProcessMemoryManager const*, float, unsigned int) (util.cpp:772)\n==6174==    by 0xEAB4495: dxReallocateWorldProcessContext(dxWorld*, double, unsigned long (*)(dxBody* const*, int, dxJoint* const*, int)) (util.cpp:881)\n==6174==    by 0xEA8F0BD: dWorldQuickStep (ode.cpp:1998)\n==6174==    by 0x8262B43: gazebo::physics::ODEPhysics::UpdatePhysics() (ODEPhysics.cc:427)\n==6174==    by 0x4F336A8: gazebo::physics::World::Update() (World.cc:721)\n==6174==    by 0x4F3D52A: gazebo::physics::World::Step() (World.cc:620)\n==6174==    by 0x4F3D9EC: gazebo::physics::World::RunLoop() (World.cc:464)\n==6174==    by 0x6DA1A49: ??? (in /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.54.0)\n==6174==    by 0x56D2181: start_thread (pthread_create.c:312)\n==6174==    by 0x7CE047C: clone (clone.S:111)\n~~~", "markup": "markdown", "html": "<p>Ok, I managed to track it down a bit further using <code>--track-origins=yes</code>:</p>\n<div class=\"codehilite\"><pre><span></span>valgrind --verbose --tool=memcheck --track-origins=yes \\\n  test/integration/INTEGRATION_physics_link --gtest_filter=&quot;*AddForce/0&quot;\n</pre></div>\n\n\n<p>It looks like the problem is caused by ODE's heap management (<a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/9abf731199fcee360ae2f7756c567fb37c176306/deps/opende/src/ode.cpp#cl-1998\" rel=\"nofollow\">ode.cpp:1998</a>), and I would guess that <code>dxEstimateQuickStepMemoryRequirements</code> is the likely culprit, since that has been touched somewhat recently by @rosebudflyaway and @hsu .</p>\n<div class=\"codehilite\"><pre><span></span>==6174==  Uninitialised value was created by a heap allocation\n==6174==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==6174==    by 0xEAB359F: InternalReallocateWorldProcessContext(dxWorldProcessContext*, unsigned long, dxWorldProcessMemoryManager const*, float, unsigned int) (util.cpp:772)\n==6174==    by 0xEAB4495: dxReallocateWorldProcessContext(dxWorld*, double, unsigned long (*)(dxBody* const*, int, dxJoint* const*, int)) (util.cpp:881)\n==6174==    by 0xEA8F0BD: dWorldQuickStep (ode.cpp:1998)\n==6174==    by 0x8262B43: gazebo::physics::ODEPhysics::UpdatePhysics() (ODEPhysics.cc:427)\n==6174==    by 0x4F336A8: gazebo::physics::World::Update() (World.cc:721)\n==6174==    by 0x4F3D52A: gazebo::physics::World::Step() (World.cc:620)\n==6174==    by 0x4F3D9EC: gazebo::physics::World::RunLoop() (World.cc:464)\n==6174==    by 0x6DA1A49: ??? (in /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.54.0)\n==6174==    by 0x56D2181: start_thread (pthread_create.c:312)\n==6174==    by 0x7CE047C: clone (clone.S:111)\n</pre></div>", "type": "rendered"}, "created_on": "2015-05-18T19:02:19.683137+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 18181016}