{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2339/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2339.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2339/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2339/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2339/pr2-with-dart-physics"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2339/vote"}}, "reporter": {"display_name": "Peter Horak", "uuid": "{c72abe74-c12a-4128-a6fc-94f3844ac8ef}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D"}, "html": {"href": "https://bitbucket.org/%7Bc72abe74-c12a-4128-a6fc-94f3844ac8ef%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a/87d803b7-3e50-40c1-8159-a5c20abd84ea/128"}}, "nickname": "pchorak", "type": "user", "account_id": "557058:451ed60b-3cfa-4a97-b4d3-a3fc34c2b21a"}, "title": "PR2 with DART physics", "component": null, "votes": 0, "watches": 1, "content": {"raw": "If you load the PR2 model while using DART physics, the model eventually collapses (`inf` or `nan` pose values) and the simulation may crash. The problem has to do with the weld constraints added to simulate the kinematic loops in the PR2 (see pull request #2756). Part of the cause is the LCP solver ([issue #892](https://github.com/dartsim/dart/issues/892)). However, even if using the projected Gauss-Seidel solver, the simulation still fails albeit after more time.\r\n\r\nThe main problem is that some of the weld constraints are set with non-identity [relative transforms](https://github.com/dartsim/dart/blob/master/dart/constraint/WeldJointConstraint.cpp#L64) because [an assumption](#!/osrf/gazebo/src/1054201b80f7768d4f163a73df137a7ecc9e2e3e/gazebo/physics/dart/DARTModelPrivate.hh?at=default&fileviewer=file-view-default#DARTModelPrivate.hh-160) in the code for creating loop joints is violated. Part of the assumption is true: if a link has multiple parent joints, it will not have a free joint parent (which may have an initialized/non-identity transform). However, the pose of the link also depends on any earlier ancestor joints, which may include free joints with initialized transforms.\r\n\r\nSometimes a model only has one kinematic tree (and thus one root/free joint). In this case, all parent joints of the link share that one free joint as an ancestor, so the weld constraint relative transforms are identity as they should be. However, the `*_gripper_*_parallel_link` links of the PR2 have no parents links, so they are all given free joints initialized with different transforms  by the time that weld constraints are created for their shared children (which form kinematic loops). Later, once all the normal joints (revolute, prismatic, etc.) are initialized, the constraints are violated before the simulation even begins.\r\n\r\n* The bug could be solved by initializing the free joints with all the other joints instead of [when first created](#!/osrf/gazebo/src/1054201b80f7768d4f163a73df137a7ecc9e2e3e/gazebo/physics/dart/DARTModelPrivate.hh?at=default&fileviewer=file-view-default#DARTModelPrivate.hh-189). This would require keeping track of the free joints after they are created.\r\n\r\n* I believe a more elegant solution would be to explicitly set the relative transforms of any weld constraints to identity. This would ensure that they are set correctly regardless of the poses of body nodes at the time of creation. However, this would require a change to DART (proposed in [issue #903](https://github.com/dartsim/dart/issues/903)).", "markup": "markdown", "html": "<p>If you load the PR2 model while using DART physics, the model eventually collapses (<code>inf</code> or <code>nan</code> pose values) and the simulation may crash. The problem has to do with the weld constraints added to simulate the kinematic loops in the PR2 (see <a href=\"#!/osrf/gazebo/pull-requests/2756/dart-kinematic-loops\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2756</a>). Part of the cause is the LCP solver (<a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/issues/892\" rel=\"nofollow\">issue #892</a>). However, even if using the projected Gauss-Seidel solver, the simulation still fails albeit after more time.</p>\n<p>The main problem is that some of the weld constraints are set with non-identity <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/blob/master/dart/constraint/WeldJointConstraint.cpp#L64\" rel=\"nofollow\">relative transforms</a> because <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/1054201b80f7768d4f163a73df137a7ecc9e2e3e/gazebo/physics/dart/DARTModelPrivate.hh?at=default&amp;fileviewer=file-view-default#DARTModelPrivate.hh-160\" rel=\"nofollow\">an assumption</a> in the code for creating loop joints is violated. Part of the assumption is true: if a link has multiple parent joints, it will not have a free joint parent (which may have an initialized/non-identity transform). However, the pose of the link also depends on any earlier ancestor joints, which may include free joints with initialized transforms.</p>\n<p>Sometimes a model only has one kinematic tree (and thus one root/free joint). In this case, all parent joints of the link share that one free joint as an ancestor, so the weld constraint relative transforms are identity as they should be. However, the <code>*_gripper_*_parallel_link</code> links of the PR2 have no parents links, so they are all given free joints initialized with different transforms  by the time that weld constraints are created for their shared children (which form kinematic loops). Later, once all the normal joints (revolute, prismatic, etc.) are initialized, the constraints are violated before the simulation even begins.</p>\n<ul>\n<li>\n<p>The bug could be solved by initializing the free joints with all the other joints instead of <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/1054201b80f7768d4f163a73df137a7ecc9e2e3e/gazebo/physics/dart/DARTModelPrivate.hh?at=default&amp;fileviewer=file-view-default#DARTModelPrivate.hh-189\" rel=\"nofollow\">when first created</a>. This would require keeping track of the free joints after they are created.</p>\n</li>\n<li>\n<p>I believe a more elegant solution would be to explicitly set the relative transforms of any weld constraints to identity. This would ensure that they are set correctly regardless of the poses of body nodes at the time of creation. However, this would require a change to DART (proposed in <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/issues/903\" rel=\"nofollow\">issue #903</a>).</p>\n</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "9.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242746.json"}}}, "edited_on": null, "created_on": "2017-08-24T23:09:53.279803+00:00", "milestone": null, "updated_on": "2017-08-25T00:14:03.014726+00:00", "type": "issue", "id": 2339}