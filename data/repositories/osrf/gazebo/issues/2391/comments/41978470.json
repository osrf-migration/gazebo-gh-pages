{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2391/comments/41978470.json"}, "html": {"href": "#!/osrf/gazebo/issues/2391#comment-41978470"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2391.json"}}, "type": "issue", "id": 2391, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Classes not using PIMPL"}, "content": {"raw": "I wanted to make a suggestion, because I think it could allow a much cleaner diff and save a lot of work. We could define some macros:\n\n```\n#ifdef __MSC_VER\n\n#define INTERNAL_GAZEBO_IGNORE_DLL_EXPORT \\\n  __pragma(warning(push)) \\\n  __pragma(warning(disable: 4251))\n\n#define INTERNAL_GAZEBO_RESUME_DLL_EXPORT \\\n  __pragma(warning(pop))\n\n#else\n\n#define INTERNAL_GAZEBO_IGNORE_DLL_EXPORT\n\n#define INTERNAL_GAZEBO_RESUME_DLL_EXPORT\n\n#endif\n\n#define INTERNAL_GAZEBO_DATAPTR \\\n  class Implementation; \\\n  INTERNAL_GAZEBO_IGNORE_DLL_EXPORT \\\n  std::unique_ptr<Implementation> dataPtr; \\\n  INTERNAL_GAZEBO_RESUME_DLL_EXPORT\n```\n\nThen we can just put a single `INTERNAL_GAZEBO_DATAPTR` in each class that violates PIMPL to forward declare the implementation class, add the `dataPtr` field, and suppress the DLL interface warnings that will be emitted by Visual Studio.\n\nTo define the implementation class, in a source file we can put:\n\n```\nclass Xxx::Implementation\n{\n  // Data fields of implementation class go here\n};\n```\n\nwhere `Xxx` is the name of the class that is being PIMPLed.\n\n(For the record, I'm writing all of this from my phone in the airport, so I apologize in advance for any mistakes.)", "markup": "markdown", "html": "<p>I wanted to make a suggestion, because I think it could allow a much cleaner diff and save a lot of work. We could define some macros:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#ifdef __MSC_VER</span>\n\n<span class=\"cp\">#define INTERNAL_GAZEBO_IGNORE_DLL_EXPORT \\</span>\n<span class=\"cp\">  __pragma(warning(push)) \\</span>\n<span class=\"cp\">  __pragma(warning(disable: 4251))</span>\n\n<span class=\"cp\">#define INTERNAL_GAZEBO_RESUME_DLL_EXPORT \\</span>\n<span class=\"cp\">  __pragma(warning(pop))</span>\n\n<span class=\"cp\">#else</span>\n\n<span class=\"cp\">#define INTERNAL_GAZEBO_IGNORE_DLL_EXPORT</span>\n\n<span class=\"cp\">#define INTERNAL_GAZEBO_RESUME_DLL_EXPORT</span>\n\n<span class=\"cp\">#endif</span>\n\n<span class=\"cp\">#define INTERNAL_GAZEBO_DATAPTR \\</span>\n<span class=\"cp\">  class Implementation; \\</span>\n<span class=\"cp\">  INTERNAL_GAZEBO_IGNORE_DLL_EXPORT \\</span>\n<span class=\"cp\">  std::unique_ptr&lt;Implementation&gt; dataPtr; \\</span>\n<span class=\"cp\">  INTERNAL_GAZEBO_RESUME_DLL_EXPORT</span>\n</pre></div>\n\n\n<p>Then we can just put a single <code>INTERNAL_GAZEBO_DATAPTR</code> in each class that violates PIMPL to forward declare the implementation class, add the <code>dataPtr</code> field, and suppress the DLL interface warnings that will be emitted by Visual Studio.</p>\n<p>To define the implementation class, in a source file we can put:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">class</span> <span class=\"nx\">Xxx</span><span class=\"o\">::</span><span class=\"nx\">Implementation</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Data fields of implementation class go here</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>where <code>Xxx</code> is the name of the class that is being PIMPLed.</p>\n<p>(For the record, I'm writing all of this from my phone in the airport, so I apologize in advance for any mistakes.)</p>", "type": "rendered"}, "created_on": "2017-12-18T23:33:34.697718+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": "2017-12-18T23:52:11.500858+00:00", "type": "issue_comment", "id": 41978470}