{"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1088/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1088.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1088/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1088/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1088/dynamically-created-joints-act-weird-after"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1088/vote"}}, "reporter": {"display_name": "Andrei Haidu", "uuid": "{825ae8d9-4737-437d-9090-c0b932f32bf2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D"}, "html": {"href": "https://bitbucket.org/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1a5e83c62729680f092d723cd0bf4c57d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAH-4.png"}}, "nickname": "ahaidu", "type": "user", "account_id": "557058:7ed02d0b-401c-4f0c-8500-f87172d5477d"}, "title": "Dynamically created joints act weird after version 1.8.0", "component": null, "votes": 0, "watches": 3, "content": {"raw": "Hi,\r\n\r\nI had this issue before ( [issue1](http://answers.gazebosim.org/question/3117/problems-creating-multiple-joints-dynamically/) , [issue2](http://answers.gazebosim.org/question/5075/after-version-180-currently-210-dynamically/) ), however I didn't have the time until now to look into it in more detail.\r\n\r\nIn the older version >1.8.0 I used to spawn objects in the world and then connect them via dynamically created joints, however in later versions they act unnatural. I spawn the objects either from a plugin where I create an sdf from string and then insert it via `World::InsertModelSDF(const sdf::SDF &_sdf)` , I also tested it by including them from the .world file as a model.\r\n\r\nI simplified the creation of the dynamic joints, took out all the physics parameters, and tried it in two ways, as a fixed joint and and a movable one (changing high and low stop).\r\n\r\n\r\n```\r\n#!c++\r\nvoid Plugin::CreateDynamicJoint(physics::LinkPtr _center_link, physics::LinkPtr _ext_link)\r\n{\r\n\tphysics::JointPtr joint;\r\n\r\n\tjoint = this->world->GetPhysicsEngine()->CreateJoint(\"revolute\", this->myModel);\r\n\r\n        // tried both versions by switching parent and child\r\n\tjoint->Load(_center_link, _ext_link, math::Pose());\r\n\tjoint->Attach(_center_link, _ext_link);\r\n\r\n\tjoint->SetAxis(0, math::Vector3(0.0, 0.0, 1.0));\r\n\r\n\tjoint->SetHighStop(0, 0);\r\n\tjoint->SetLowStop(0, -0);\r\n}\r\n```\r\n\r\nHere are some videos with how the models act after the joints are created ( I added some hardcoded visuals to it as well since dynamically created joints don't support visuals, see [Issue #1077](#!/osrf/gazebo/issue/1077/visualizing-dynamically-created-joints) , where, the green marked boxes are the `_ext_links`, and the blue marked box is the `_center_link`).\r\n\r\nVideos with static joints ( high/low stop = 0 ):\r\n\r\n[5 links](https://vimeo.com/88245296)\r\n\r\n[7 links](https://vimeo.com/88245298)\r\n\r\n[17 links](https://vimeo.com/88245300)\r\n\r\n[35 links](https://vimeo.com/88245302)\r\n\r\n[225 links](https://vimeo.com/88245303)\r\n\r\n\r\nVideos with movable joints ( high/low stop = ~ +/- 0.3 ):\r\n\r\n[5 moving links](https://vimeo.com/88245380)\r\n\r\n[7 moving links](https://vimeo.com/88245377)\r\n\r\n[14 moving links](https://vimeo.com/88245379)\r\n\r\n[35 moving links](https://vimeo.com/88245378)\r\n\r\nIn the videos the hand touches the boxes first, then it creates a fixed joint with it to lift it up, sometimes they explode only when touching, other times when moving or dropping them.\r\n\r\nDuring the tests I switched between child and parent links, meaning in one case `_ext_links` were the children, all connecting to the `_center_link` parent, and vice versa when all `_ext_links` were parents, and the only child, `_center_link`, was connecting to them.\r\n\r\nWhich brings up another question, the only difference between child and parent links is that the pose and axis when creating them is relative to the child, but it has nothing to do with the idea that a child link should have only one parent, so it should work both ways?\r\n\r\nHere I have a video when multiple joints are already created in an SDF file, and this works without any problem.\r\n\r\n[sdf joints](https://vimeo.com/88258797)\r\n\r\nIn the video when visualizing the joint you can only notice one, since they are all in one position. However after changing the parent with children, all the joints were visible on the external spheres, and it still worked.\r\n\r\nI couldn't see the difference between creating the joints from sdf or dynamically, one calls [void Joint::Load(LinkPtr _parent, LinkPtr _child, const math::Pose &_pose)](#!/osrf/gazebo/src/bb512e8b7dcc77016370f47520b3183fdb9e27cf/gazebo/physics/Joint.cc?at=default#cl-94) and the other [void Joint::Load(sdf::ElementPtr _sdf)](#!/osrf/gazebo/src/bb512e8b7dcc77016370f47520b3183fdb9e27cf/gazebo/physics/Joint.cc?at=default#cl-120) which both then call with the given pose [void Joint::LoadImpl(const math::Pose &_pose)](#!/osrf/gazebo/src/bb512e8b7dcc77016370f47520b3183fdb9e27cf/gazebo/physics/Joint.cc?at=default#cl-209)\r\n\r\nAm I doing something wrong, or this is just some kind of weird bug?\r\n\r\nI will try now to create an sdf string dynamically regarding the positions of the links, add the joints there, delete the model and then spawn it from the sdf string, see how that behaves, I will keep you posted when that is finished.\r\n\r\n==========================UPDATE!!!==================================\r\n\r\nSo it seems the problem is not with loading an SDF or not, I created a plugin which deletes the model, and creates a new one in SDF string form, with joints between the links, here are two videos with it (when the boxes turn green/blue the model has been deleted and re-spawned as SDF with joints) :\r\n\r\n[center_parent](https://vimeo.com/88350985)\r\n\r\n[center_child](https://vimeo.com/88350986)\r\n\r\nAs a next step I outputed the SDF string into a file and loaded it from the world:\r\n\r\n[load from world](https://vimeo.com/88352832)\r\n\r\nSo it's obvious it has nothing to do with the way the joints are loaded, I am definitely doing something wrong, but I cannot figure it out what, maybe the joint axis counts, but that wouldn't be the case for fixed joints, plus the code worked for versions before 1.8.0.\r\n\r\nHere are the sdf files of the working model (the pancake spheres), and the one that crashes (boxes).\r\n\r\n[working_model](http://pastebin.com/3Twgb1SK)\r\n\r\n[NOT_working](http://pastebin.com/8BsuKH8y)\r\n\r\n==========================UPDATE!!!==================================\r\n\r\nAfter some more testing and comparing I noticed that this happens because of the axis vector, it doesn't like all values, but this shouldn't really influence it in case it's a fixed joint. \r\n\r\nAnd if I put the value 0 0 1 it should rotate around the Z axis, I don't see why this should lead to such unstable situations.\r\n\r\n==========================UPDATE!!!==================================\r\n\r\njoints working in under version 1.8.0 [video](https://vimeo.com/88647429)\r\n", "markup": "markdown", "html": "<p>Hi,</p>\n<p>I had this issue before ( <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/3117/problems-creating-multiple-joints-dynamically/\" rel=\"nofollow\">issue1</a> , <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/5075/after-version-180-currently-210-dynamically/\" rel=\"nofollow\">issue2</a> ), however I didn't have the time until now to look into it in more detail.</p>\n<p>In the older version &gt;1.8.0 I used to spawn objects in the world and then connect them via dynamically created joints, however in later versions they act unnatural. I spawn the objects either from a plugin where I create an sdf from string and then insert it via <code>World::InsertModelSDF(const sdf::SDF &amp;_sdf)</code> , I also tested it by including them from the .world file as a model.</p>\n<p>I simplified the creation of the dynamic joints, took out all the physics parameters, and tried it in two ways, as a fixed joint and and a movable one (changing high and low stop).</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"n\">Plugin</span><span class=\"o\">::</span><span class=\"n\">CreateDynamicJoint</span><span class=\"p\">(</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">LinkPtr</span> <span class=\"n\">_center_link</span><span class=\"p\">,</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">LinkPtr</span> <span class=\"n\">_ext_link</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">JointPtr</span> <span class=\"n\">joint</span><span class=\"p\">;</span>\n\n    <span class=\"n\">joint</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">world</span><span class=\"o\">-&gt;</span><span class=\"n\">GetPhysicsEngine</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">CreateJoint</span><span class=\"p\">(</span><span class=\"s\">&quot;revolute&quot;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">myModel</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// tried both versions by switching parent and child</span>\n    <span class=\"n\">joint</span><span class=\"o\">-&gt;</span><span class=\"n\">Load</span><span class=\"p\">(</span><span class=\"n\">_center_link</span><span class=\"p\">,</span> <span class=\"n\">_ext_link</span><span class=\"p\">,</span> <span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Pose</span><span class=\"p\">());</span>\n    <span class=\"n\">joint</span><span class=\"o\">-&gt;</span><span class=\"n\">Attach</span><span class=\"p\">(</span><span class=\"n\">_center_link</span><span class=\"p\">,</span> <span class=\"n\">_ext_link</span><span class=\"p\">);</span>\n\n    <span class=\"n\">joint</span><span class=\"o\">-&gt;</span><span class=\"n\">SetAxis</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">));</span>\n\n    <span class=\"n\">joint</span><span class=\"o\">-&gt;</span><span class=\"n\">SetHighStop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">joint</span><span class=\"o\">-&gt;</span><span class=\"n\">SetLowStop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Here are some videos with how the models act after the joints are created ( I added some hardcoded visuals to it as well since dynamically created joints don't support visuals, see <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issue/1077/visualizing-dynamically-created-joints\" rel=\"nofollow\">Issue #1077</a> , where, the green marked boxes are the <code>_ext_links</code>, and the blue marked box is the <code>_center_link</code>).</p>\n<p>Videos with static joints ( high/low stop = 0 ):</p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88245296\" rel=\"nofollow\">5 links</a></p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88245298\" rel=\"nofollow\">7 links</a></p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88245300\" rel=\"nofollow\">17 links</a></p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88245302\" rel=\"nofollow\">35 links</a></p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88245303\" rel=\"nofollow\">225 links</a></p>\n<p>Videos with movable joints ( high/low stop = ~ +/- 0.3 ):</p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88245380\" rel=\"nofollow\">5 moving links</a></p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88245377\" rel=\"nofollow\">7 moving links</a></p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88245379\" rel=\"nofollow\">14 moving links</a></p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88245378\" rel=\"nofollow\">35 moving links</a></p>\n<p>In the videos the hand touches the boxes first, then it creates a fixed joint with it to lift it up, sometimes they explode only when touching, other times when moving or dropping them.</p>\n<p>During the tests I switched between child and parent links, meaning in one case <code>_ext_links</code> were the children, all connecting to the <code>_center_link</code> parent, and vice versa when all <code>_ext_links</code> were parents, and the only child, <code>_center_link</code>, was connecting to them.</p>\n<p>Which brings up another question, the only difference between child and parent links is that the pose and axis when creating them is relative to the child, but it has nothing to do with the idea that a child link should have only one parent, so it should work both ways?</p>\n<p>Here I have a video when multiple joints are already created in an SDF file, and this works without any problem.</p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88258797\" rel=\"nofollow\">sdf joints</a></p>\n<p>In the video when visualizing the joint you can only notice one, since they are all in one position. However after changing the parent with children, all the joints were visible on the external spheres, and it still worked.</p>\n<p>I couldn't see the difference between creating the joints from sdf or dynamically, one calls <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/bb512e8b7dcc77016370f47520b3183fdb9e27cf/gazebo/physics/Joint.cc?at=default#cl-94\" rel=\"nofollow\">void Joint::Load(LinkPtr _parent, LinkPtr _child, const math::Pose &amp;_pose)</a> and the other <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/bb512e8b7dcc77016370f47520b3183fdb9e27cf/gazebo/physics/Joint.cc?at=default#cl-120\" rel=\"nofollow\">void Joint::Load(sdf::ElementPtr _sdf)</a> which both then call with the given pose <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/bb512e8b7dcc77016370f47520b3183fdb9e27cf/gazebo/physics/Joint.cc?at=default#cl-209\" rel=\"nofollow\">void Joint::LoadImpl(const math::Pose &amp;_pose)</a></p>\n<p>Am I doing something wrong, or this is just some kind of weird bug?</p>\n<p>I will try now to create an sdf string dynamically regarding the positions of the links, add the joints there, delete the model and then spawn it from the sdf string, see how that behaves, I will keep you posted when that is finished.</p>\n<p>==========================UPDATE!!!==================================</p>\n<p>So it seems the problem is not with loading an SDF or not, I created a plugin which deletes the model, and creates a new one in SDF string form, with joints between the links, here are two videos with it (when the boxes turn green/blue the model has been deleted and re-spawned as SDF with joints) :</p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88350985\" rel=\"nofollow\">center_parent</a></p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88350986\" rel=\"nofollow\">center_child</a></p>\n<p>As a next step I outputed the SDF string into a file and loaded it from the world:</p>\n<p><a data-is-external-link=\"true\" href=\"https://vimeo.com/88352832\" rel=\"nofollow\">load from world</a></p>\n<p>So it's obvious it has nothing to do with the way the joints are loaded, I am definitely doing something wrong, but I cannot figure it out what, maybe the joint axis counts, but that wouldn't be the case for fixed joints, plus the code worked for versions before 1.8.0.</p>\n<p>Here are the sdf files of the working model (the pancake spheres), and the one that crashes (boxes).</p>\n<p><a data-is-external-link=\"true\" href=\"http://pastebin.com/3Twgb1SK\" rel=\"nofollow\">working_model</a></p>\n<p><a data-is-external-link=\"true\" href=\"http://pastebin.com/8BsuKH8y\" rel=\"nofollow\">NOT_working</a></p>\n<p>==========================UPDATE!!!==================================</p>\n<p>After some more testing and comparing I noticed that this happens because of the axis vector, it doesn't like all values, but this shouldn't really influence it in case it's a fixed joint. </p>\n<p>And if I put the value 0 0 1 it should rotate around the Z axis, I don't see why this should lead to such unstable situations.</p>\n<p>==========================UPDATE!!!==================================</p>\n<p>joints working in under version 1.8.0 <a data-is-external-link=\"true\" href=\"https://vimeo.com/88647429\" rel=\"nofollow\">video</a></p>", "type": "rendered"}, "assignee": null, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2014-03-06T10:13:59.202370+00:00", "milestone": null, "updated_on": "2016-09-14T19:45:05.693914+00:00", "type": "issue", "id": 1088}