{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1072/comments/9721245.json"}, "html": {"href": "#!/osrf/gazebo/issues/1072#comment-9721245"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1072.json"}}, "type": "issue", "id": 1072, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Allow to set initial joint pose in SDF"}, "content": {"raw": "At the minimum, we need the joint to be spawned within the joint limits so to avoid violent corrections on startup.\n\nA pass through the robot after spawning (in `Init`) to set joint positions could do it.  But we also need to check for invalid configurations in case the robot kinematics is not a tree.", "markup": "markdown", "html": "<p>At the minimum, we need the joint to be spawned within the joint limits so to avoid violent corrections on startup.</p>\n<p>A pass through the robot after spawning (in <code>Init</code>) to set joint positions could do it.  But we also need to check for invalid configurations in case the robot kinematics is not a tree.</p>", "type": "rendered"}, "created_on": "2014-04-17T17:27:16.248564+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 9721245}