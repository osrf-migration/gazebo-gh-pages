{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2228/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2228.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2228/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2228/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2228/inconsistent-behavior-in-scoped-name"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2228/vote"}}, "reporter": {"display_name": "Michael Beardsworth", "uuid": "{6d29b10b-98d1-40a8-9074-c9bbc5ad7a39}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6d29b10b-98d1-40a8-9074-c9bbc5ad7a39%7D"}, "html": {"href": "https://bitbucket.org/%7B6d29b10b-98d1-40a8-9074-c9bbc5ad7a39%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/15c2fe64bea15ed9be13a4bdb5856938d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMB-1.png"}}, "nickname": "mbeards", "type": "user", "account_id": "557058:c7b66d98-2604-4316-9362-ddbfe8280c39"}, "title": "Inconsistent behavior in scoped name accessors between physics::Base and sensors::Sensor", "component": null, "votes": 0, "watches": 1, "content": {"raw": "While working on a sensor plugin, I discovered that the scoped name behavior is different between physics::Base and sensors::Sensor.\r\n\r\nIn physics::Base, you get the scoped name with std::string Base::GetScopedName(bool _prependWorldName=false) const ([Base.hh:283](#!/osrf/gazebo/src/cd526975bc8bdf3813e0600e3ece180870602471/gazebo/physics/Base.hh?at=default&fileviewer=file-view-default#Base.hh-283)).  In sensors::Sensor, you get the scoped name with std::string ScopedName() const ([Sensor.hh:104](#!/osrf/gazebo/src/cd526975bc8bdf3813e0600e3ece180870602471/gazebo/sensors/Sensor.hh?at=default&fileviewer=file-view-default#Sensor.hh-104)).  The physics::Base version allows you to choose if the world name is prepended (but defaults to false), while the sensors::Sensor version does not allow you to choose (and always prepends the world name).\r\n\r\nIs this current behavior desired?  \r\n\r\nIf not, a patch adding matching the options and naming would be extremely straightforward, but introducing a common interface for named things would be cleaner.  Currently Sensor is derived from std::enable_shared_from_this<Sensor>, and Base is derived from boost::enable_shared_from_this<Base>.  By introducing a common base class \"NamedEntity\" (though a better name would be good...), we could provide a single interface for name interactions (hopefully for all named things, not just sensors and physics entities).  \r\n\r\nAny thoughts on whether this approach is worthwhile to pursue?  Other suggested approaches?", "markup": "markdown", "html": "<p>While working on a sensor plugin, I discovered that the scoped name behavior is different between physics::Base and sensors::Sensor.</p>\n<p>In physics::Base, you get the scoped name with std::string Base::GetScopedName(bool _prependWorldName=false) const (<a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/cd526975bc8bdf3813e0600e3ece180870602471/gazebo/physics/Base.hh?at=default&amp;fileviewer=file-view-default#Base.hh-283\" rel=\"nofollow\">Base.hh:283</a>).  In sensors::Sensor, you get the scoped name with std::string ScopedName() const (<a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/cd526975bc8bdf3813e0600e3ece180870602471/gazebo/sensors/Sensor.hh?at=default&amp;fileviewer=file-view-default#Sensor.hh-104\" rel=\"nofollow\">Sensor.hh:104</a>).  The physics::Base version allows you to choose if the world name is prepended (but defaults to false), while the sensors::Sensor version does not allow you to choose (and always prepends the world name).</p>\n<p>Is this current behavior desired?  </p>\n<p>If not, a patch adding matching the options and naming would be extremely straightforward, but introducing a common interface for named things would be cleaner.  Currently Sensor is derived from std::enable_shared_from_this&lt;Sensor&gt;, and Base is derived from boost::enable_shared_from_this&lt;Base&gt;.  By introducing a common base class \"NamedEntity\" (though a better name would be good...), we could provide a single interface for name interactions (hopefully for all named things, not just sensors and physics entities).  </p>\n<p>Any thoughts on whether this approach is worthwhile to pursue?  Other suggested approaches?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-03-15T18:32:41.033159+00:00", "milestone": null, "updated_on": "2017-04-06T23:25:54.700744+00:00", "type": "issue", "id": 2228}