{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2392/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2392.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2392/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2392/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2392/gazebo-8-depthcamera-imagedata-returns-all"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2392/vote"}}, "reporter": {"display_name": "Andrew Somerville", "uuid": "{6e688fce-ecd5-4517-a670-db13bbe74734}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6e688fce-ecd5-4517-a670-db13bbe74734%7D"}, "html": {"href": "https://bitbucket.org/%7B6e688fce-ecd5-4517-a670-db13bbe74734%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2cd9d402946952185010cdb5e8b9de0dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAS-3.png"}}, "nickname": "catskul", "type": "user", "account_id": "557058:f57b46a1-f72f-42ee-8288-cb96fee71a8c"}, "title": "Gazebo 8 DepthCamera ImageData returns all gray image for config and code that worked in gazebo7", "component": {"name": "sensors", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122877.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "In Gazebo8 Calls to DepthCamera()->ImageData() (DepthCameraSensor::ImageData) from a  return an image with values that hover around 128.\r\n\r\nIdentical configuration and code using Gazebo7 returned a valid image which is the same as it would be with a normal CameraSensor.\r\n\r\nDuplicating the camera in the sdf (one as type \"camera\" and one as type \"depth\") results in functional camera which works as a workaround to the apparently broken ImageData interface of the DepthCameraSensor.\r\n\r\nI checked the history of rendering/DepthCamera.cc and rendering/Camera.cc and didn't see any smoking guns. sensors/DepthCameraSensor.cc and sensors/CameraSensor.cc were harder \r\n\r\nBug can be exercised by adding \"<save enabled=1><path>./images</path></save>\" below the \"camera\" tag of any currently working sdf sensor type=\"depth\". Saved images will all be gray.", "markup": "markdown", "html": "<p>In Gazebo8 Calls to DepthCamera()-&gt;ImageData() (DepthCameraSensor::ImageData) from a  return an image with values that hover around 128.</p>\n<p>Identical configuration and code using Gazebo7 returned a valid image which is the same as it would be with a normal CameraSensor.</p>\n<p>Duplicating the camera in the sdf (one as type \"camera\" and one as type \"depth\") results in functional camera which works as a workaround to the apparently broken ImageData interface of the DepthCameraSensor.</p>\n<p>I checked the history of rendering/DepthCamera.cc and rendering/Camera.cc and didn't see any smoking guns. sensors/DepthCameraSensor.cc and sensors/CameraSensor.cc were harder </p>\n<p>Bug can be exercised by adding \"&lt;save enabled=1&gt;&lt;path&gt;./images&lt;/path&gt;&lt;/save&gt;\" below the \"camera\" tag of any currently working sdf sensor type=\"depth\". Saved images will all be gray.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "8.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242745.json"}}}, "edited_on": null, "created_on": "2017-12-20T03:52:10.459877+00:00", "milestone": null, "updated_on": "2018-01-17T05:28:21.743606+00:00", "type": "issue", "id": 2392}