{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2663/comments/54294490.json"}, "html": {"href": "#!/osrf/gazebo/issues/2663#comment-54294490"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2663.json"}}, "type": "issue", "id": 2663, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Build error: gazebo9 and dart"}, "content": {"raw": "I think I found out why the buildfarm hasn\u2019t noticed this problem and me neither before\u2026 I accidentally built gazebo using CMake 3.15, which doesn\u2019t pass the c\\+\\+14 flag to the compile commands. When I build it again with the stock cmake 3.10.5 from bionic, it adds `-std=c++14` at the end of `CXX_FLAGS` in each `flags.make` generated file. I wasn\u2019t able to figure out why the older CMake puts the flag there and the newer one does not. \n\nEven if I look to the CI builds on Xenial \\(haven\u2019t found any recent on Bionic\\), I see the c\\+\\+14 flag is set there somehow:\n\n`cc1: warning: command line option \u2018-std=c++14\u2019 is valid for C++/ObjC++ but not for C`\n\ne.g. in [https://build.osrfoundation.org/view/main/view/gazebo/job/gazebo-ci-pr\\_any-xenial-amd64-gpu-none/1122/consoleText](https://build.osrfoundation.org/view/main/view/gazebo/job/gazebo-ci-pr_any-xenial-amd64-gpu-none/1122/consoleText) .\n\nSo it seems to me Gazebo is silently being built with the c\\+\\+14 flag without anyone knowing about this, and I only figured it out because I used a newer version of CMake\u2026\n\nCan somebody verify on his local build the presence of the c\\+\\+14 flag?\n\n\u200c\n\nI also tried forcefully getting rid of the c\\+\\+14 flag, and the only thing that worked is something I wouldn\u2019t consider a solution, but a hack:\n\n```\nset(CMAKE_CXX14_STANDARD_COMPILE_OPTION \"-std=c++11\")\n```\n\n\u200c\n\nThe other settings like the following had no effect on the resulting flag:\n\n```\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_DEFAULT 11)\nset(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n\u200c\n\nWhen I forced the C\\+\\+11 standard, Gazebo compiles fine with the above-mentioned hack for Dart. If I compile it with c\\+\\+14, the Dart hack makes compilation fail. But when I remove the hack, compilation with c\\+\\+14 also succeeds.", "markup": "markdown", "html": "<p>I think I found out why the buildfarm hasn\u2019t noticed this problem and me neither before\u2026 I accidentally built gazebo using CMake 3.15, which doesn\u2019t pass the c++14 flag to the compile commands. When I build it again with the stock cmake 3.10.5 from bionic, it adds <code>-std=c++14</code> at the end of <code>CXX_FLAGS</code> in each <code>flags.make</code> generated file. I wasn\u2019t able to figure out why the older CMake puts the flag there and the newer one does not. </p>\n<p>Even if I look to the CI builds on Xenial (haven\u2019t found any recent on Bionic), I see the c++14 flag is set there somehow:</p>\n<p><code>cc1: warning: command line option \u2018-std=c++14\u2019 is valid for C++/ObjC++ but not for C</code></p>\n<p>e.g. in <a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/view/main/view/gazebo/job/gazebo-ci-pr_any-xenial-amd64-gpu-none/1122/consoleText\" rel=\"nofollow\">https://build.osrfoundation.org/view/main/view/gazebo/job/gazebo-ci-pr_any-xenial-amd64-gpu-none/1122/consoleText</a> .</p>\n<p>So it seems to me Gazebo is silently being built with the c++14 flag without anyone knowing about this, and I only figured it out because I used a newer version of CMake\u2026</p>\n<p>Can somebody verify on his local build the presence of the c++14 flag?</p>\n<p>\u200c</p>\n<p>I also tried forcefully getting rid of the c++14 flag, and the only thing that worked is something I wouldn\u2019t consider a solution, but a hack:</p>\n<div class=\"codehilite\"><pre><span></span>set(CMAKE_CXX14_STANDARD_COMPILE_OPTION &quot;-std=c++11&quot;)\n</pre></div>\n\n\n<p>\u200c</p>\n<p>The other settings like the following had no effect on the resulting flag:</p>\n<div class=\"codehilite\"><pre><span></span>set(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_DEFAULT 11)\nset(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n</pre></div>\n\n\n<p>\u200c</p>\n<p>When I forced the C++11 standard, Gazebo compiles fine with the above-mentioned hack for Dart. If I compile it with c++14, the Dart hack makes compilation fail. But when I remove the hack, compilation with c++14 also succeeds.</p>", "type": "rendered"}, "created_on": "2019-10-10T16:41:56.013878+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": null, "type": "issue_comment", "id": 54294490}