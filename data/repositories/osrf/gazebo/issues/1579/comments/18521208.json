{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1579/comments/18521208.json"}, "html": {"href": "#!/osrf/gazebo/issues/1579#comment-18521208"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1579.json"}}, "type": "issue", "id": 1579, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Sky consumes significant portion of CPU, even when clouds disable."}, "content": {"raw": "I'm having some fun days trying to discover how to connect the SDF data, read by the gzserver, with gzclient which the one that starts the sky generation unconditionally. Here is the situation:\n\n## Approach 1: pass sdf data to gzclient and create the sky only if sdf enable it  ##\n\nBoth, gzserver and gzclient call RenderEngine, which seems to be a singleton so my approach would try to get the enable/disable sky flag into the RenderEngine. \n\n**gzserver** (read bottom to up, gdb bt)\n\n```\ngazebo::rendering::RenderEngine::Init \ngazebo::rendering::init \ngazebo::sensors::init \ngazebo::setupServer\ngazebo::Server::PreLoad\ngazebo::Server::ParseArgs (sdf could be read here)\n```\n\n**gzclient** (read bottom to up, gdb bt)\n\n```\ngazebo::rendering::Scene::Init\ngazebo::rendering::RenderEngine::CreateScene \ngazebo::rendering::create_scene\ngazebo::gui::GLWidget::GLWidget\n```\nGoing with this approach would imply to modify API calls between `gazebo::Server::ParseArgs` -> `gazebo::Server::PreLoad` -> `gazebo::setupServer`, which seems not very elegant to me.\n\n## Approach 2: use scene message to disable sky if not present  ##\n\nWhen gzclient is starting there is a scene msg that contains data about the whole scene, including the sky. The message is processed by `Scene::ProcessSceneMsg(ConstScenePtr &_msg)`.\n\nMy approach here was to leave the sky to be created but if the message lacks of the sky information, then disable and remove the sky on the `Scene::ProcessSceneMsg` method. Not very nice but seems to work. \n\nCallgrind shows a decrease of 80% the time spend on skyx (and probably it could decrease even more if I leave gzclient open more time).\n\nAny other idea? Should I test more the second approach and go with it? @nkoenig @iche033 @chapulina ", "markup": "markdown", "html": "<p>I'm having some fun days trying to discover how to connect the SDF data, read by the gzserver, with gzclient which the one that starts the sky generation unconditionally. Here is the situation:</p>\n<h2 id=\"markdown-header-approach-1-pass-sdf-data-to-gzclient-and-create-the-sky-only-if-sdf-enable-it\">Approach 1: pass sdf data to gzclient and create the sky only if sdf enable it</h2>\n<p>Both, gzserver and gzclient call RenderEngine, which seems to be a singleton so my approach would try to get the enable/disable sky flag into the RenderEngine. </p>\n<p><strong>gzserver</strong> (read bottom to up, gdb bt)</p>\n<div class=\"codehilite\"><pre><span></span>gazebo::rendering::RenderEngine::Init \ngazebo::rendering::init \ngazebo::sensors::init \ngazebo::setupServer\ngazebo::Server::PreLoad\ngazebo::Server::ParseArgs (sdf could be read here)\n</pre></div>\n\n\n<p><strong>gzclient</strong> (read bottom to up, gdb bt)</p>\n<div class=\"codehilite\"><pre><span></span>gazebo::rendering::Scene::Init\ngazebo::rendering::RenderEngine::CreateScene \ngazebo::rendering::create_scene\ngazebo::gui::GLWidget::GLWidget\n</pre></div>\n\n\n<p>Going with this approach would imply to modify API calls between <code>gazebo::Server::ParseArgs</code> -&gt; <code>gazebo::Server::PreLoad</code> -&gt; <code>gazebo::setupServer</code>, which seems not very elegant to me.</p>\n<h2 id=\"markdown-header-approach-2-use-scene-message-to-disable-sky-if-not-present\">Approach 2: use scene message to disable sky if not present</h2>\n<p>When gzclient is starting there is a scene msg that contains data about the whole scene, including the sky. The message is processed by <code>Scene::ProcessSceneMsg(ConstScenePtr &amp;_msg)</code>.</p>\n<p>My approach here was to leave the sky to be created but if the message lacks of the sky information, then disable and remove the sky on the <code>Scene::ProcessSceneMsg</code> method. Not very nice but seems to work. </p>\n<p>Callgrind shows a decrease of 80% the time spend on skyx (and probably it could decrease even more if I leave gzclient open more time).</p>\n<p>Any other idea? Should I test more the second approach and go with it? @nkoenig @iche033 @chapulina </p>", "type": "rendered"}, "created_on": "2015-06-02T00:35:03.627388+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 18521208}