{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/923/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/923.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/923/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/923/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/923/provide-seteffortlimit-in-joint"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/923/vote"}}, "reporter": {"display_name": "Jesper Smith", "uuid": "{61d9fe7d-e554-408c-99fb-faefa9c96114}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D"}, "html": {"href": "https://bitbucket.org/%7B61d9fe7d-e554-408c-99fb-faefa9c96114%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/56b6560717cfbb0f4a2cc0af6e638650d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJS-4.png"}}, "nickname": "jespersmith", "type": "user", "account_id": "557058:2e842f1c-d9d5-48b1-88ae-5dd9e81a6f77"}, "title": "Provide SetEffortLimit in Joint", "component": null, "votes": 0, "watches": 2, "content": {"raw": "I'm working on programmatically setting the effort limit, for example to limit based on a curve. It would be nice to have physics::joint::SetEffortLimit(int _index, double value) implemented in a future version of Gazebo. \r\n\r\nCurrently, I use the following hack that makes me cry on the inside\r\n\r\n\r\n```\r\n#!c++\r\nclass EffortSettableJoint : public physics::Joint\r\n\t{\r\n\tpublic:\r\n\t\tvoid SetEffortLimit(int _index, double value)\r\n\t\t{\r\n\t\t\tif (_index >= 0 && static_cast<unsigned int>(_index) < this->GetAngleCount())\r\n\t\t\t{\r\n\t\t\t\tthis->effortLimit[_index] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n(boost::static_pointer_cast<EffortSettableJoint>(joint))->SetEffortLimit(0, jointInitial.maximumforce());\r\n\r\n```", "markup": "markdown", "html": "<p>I'm working on programmatically setting the effort limit, for example to limit based on a curve. It would be nice to have physics::joint::SetEffortLimit(int _index, double value) implemented in a future version of Gazebo. </p>\n<p>Currently, I use the following hack that makes me cry on the inside</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">EffortSettableJoint</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">Joint</span>\n    <span class=\"p\">{</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span>\n        <span class=\"kt\">void</span> <span class=\"n\">SetEffortLimit</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_index</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_index</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_index</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetAngleCount</span><span class=\"p\">())</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">effortLimit</span><span class=\"p\">[</span><span class=\"n\">_index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n\n<span class=\"p\">(</span><span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">static_pointer_cast</span><span class=\"o\">&lt;</span><span class=\"n\">EffortSettableJoint</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">joint</span><span class=\"p\">))</span><span class=\"o\">-&gt;</span><span class=\"n\">SetEffortLimit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">jointInitial</span><span class=\"p\">.</span><span class=\"n\">maximumforce</span><span class=\"p\">());</span>\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2013-10-28T23:49:21.100149+00:00", "milestone": null, "updated_on": "2016-09-14T19:44:16.384027+00:00", "type": "issue", "id": 923}