{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/354/comments/15505131.json"}, "html": {"href": "#!/osrf/gazebo/issues/354#comment-15505131"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/354.json"}}, "type": "issue", "id": 354, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "SetForce/SetTorque in class ODELink / Point of application of forces and torques"}, "content": {"raw": "If I may add a couple of functions which would be nice to have for the force/torque GUI, something like:\n\n~~~\n      /// \\brief Apply an impulse to the body.\n      /// \\param[in] _force Force value in N.\n      /// \\param[in] _time Time interval in s.\n      public: virtual void ApplyImpulse(const math::Vector3 &_force, const double &_time) = 0;\n~~~\n\n* I think the name is pretty clear. Maybe it could take only an impulse argument in `Ns`, but I think separating force and time is friendlier.\n\n~~~\n      /// \\brief Add a persistent force to the body.\n      /// \\param[in] _force Force value in N.\n      public: virtual void AddPersistentForce(const math::Vector3 &_force) = 0;\n~~~\n\n* This would be a force that gets added at every time-step indefinitely, perhaps only cancelled by `SetForce(0)`", "markup": "markdown", "html": "<p>If I may add a couple of functions which would be nice to have for the force/torque GUI, something like:</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">brief</span> <span class=\"nt\">Apply</span> <span class=\"nt\">an</span> <span class=\"nt\">impulse</span> <span class=\"nt\">to</span> <span class=\"nt\">the</span> <span class=\"nt\">body</span><span class=\"o\">.</span>\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">param</span><span class=\"cp\">[</span><span class=\"k\">in</span><span class=\"cp\">]</span> <span class=\"nt\">_force</span> <span class=\"nt\">Force</span> <span class=\"nt\">value</span> <span class=\"nt\">in</span> <span class=\"nt\">N</span><span class=\"o\">.</span>\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">param</span><span class=\"cp\">[</span><span class=\"k\">in</span><span class=\"cp\">]</span> <span class=\"nt\">_time</span> <span class=\"nt\">Time</span> <span class=\"nt\">interval</span> <span class=\"nt\">in</span> <span class=\"nt\">s</span><span class=\"o\">.</span>\n      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">virtual</span> <span class=\"nt\">void</span> <span class=\"nt\">ApplyImpulse</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Vector3</span> <span class=\"o\">&amp;</span><span class=\"nt\">_force</span><span class=\"o\">,</span> <span class=\"nt\">const</span> <span class=\"nt\">double</span> <span class=\"o\">&amp;</span><span class=\"nt\">_time</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"nt\">0</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<ul>\n<li>I think the name is pretty clear. Maybe it could take only an impulse argument in <code>Ns</code>, but I think separating force and time is friendlier.</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">brief</span> <span class=\"nt\">Add</span> <span class=\"nt\">a</span> <span class=\"nt\">persistent</span> <span class=\"nt\">force</span> <span class=\"nt\">to</span> <span class=\"nt\">the</span> <span class=\"nt\">body</span><span class=\"o\">.</span>\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">param</span><span class=\"cp\">[</span><span class=\"k\">in</span><span class=\"cp\">]</span> <span class=\"nt\">_force</span> <span class=\"nt\">Force</span> <span class=\"nt\">value</span> <span class=\"nt\">in</span> <span class=\"nt\">N</span><span class=\"o\">.</span>\n      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">virtual</span> <span class=\"nt\">void</span> <span class=\"nt\">AddPersistentForce</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Vector3</span> <span class=\"o\">&amp;</span><span class=\"nt\">_force</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"nt\">0</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<ul>\n<li>This would be a force that gets added at every time-step indefinitely, perhaps only cancelled by <code>SetForce(0)</code></li>\n</ul>", "type": "rendered"}, "created_on": "2015-02-05T19:50:18.774962+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 15505131}