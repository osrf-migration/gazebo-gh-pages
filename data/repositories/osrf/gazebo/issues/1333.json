{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1333/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1333.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1333/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1333/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1333/maxwaitcount-in-gazebocc-prevents-worlds"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1333/vote"}}, "reporter": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "title": "maxWaitCount in gazebo.cc prevents worlds from loading", "component": {"name": "transport", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122882.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "In gazebo.cc, setupClient waits for a hard-coded maximum of 10 seconds before giving up on receiving namespaces (lines 178-194):\r\n\r\n```\r\n#!c++\r\n  common::Time waitTime(1, 0);\r\n  int waitCount = 0;\r\n  int maxWaitCount = 10;\r\n\r\n  // Wait for namespaces.\r\n  while (!gazebo::transport::waitForNamespaces(waitTime) &&\r\n      (waitCount++) < maxWaitCount)\r\n  {\r\n    gzwarn << \"Waited \" << waitTime.Double() << \"seconds for namespaces.\\n\";\r\n  }\r\n\r\n  if (waitCount >= maxWaitCount)\r\n  {\r\n    gzerr << \"Waited \" << (waitTime * waitCount).Double()\r\n      << \" seconds for namespaces. Giving up.\\n\";\r\n  }\r\n```\r\n\r\nThis is problematic for some users trying to load and render large worlds (e.g. drc_practice_task_2.world in drcsim). If gzserver spends more than 10 seconds loading model data, then gzclient will time out and the user is left hanging. One hack around this is to launch gzserver, then launch gzclient after some time has passed (12 seconds in the case of DRC task 2). Another is to simply increase the maxWaitTime.\r\n\r\nHowever, a better long-term solution may be to add more communication between client and server at this stage in gazebo intialization. The server should be able to send a message to the client to keep waiting for topic namespaces.", "markup": "markdown", "html": "<p>In gazebo.cc, setupClient waits for a hard-coded maximum of 10 seconds before giving up on receiving namespaces (lines 178-194):</p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"n\">waitTime</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"kt\">int</span> <span class=\"n\">waitCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">maxWaitCount</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Wait for namespaces.</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">waitForNamespaces</span><span class=\"p\">(</span><span class=\"n\">waitTime</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n      <span class=\"p\">(</span><span class=\"n\">waitCount</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">maxWaitCount</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">gzwarn</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Waited &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">waitTime</span><span class=\"p\">.</span><span class=\"n\">Double</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;seconds for namespaces.</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">waitCount</span> <span class=\"o\">&gt;=</span> <span class=\"n\">maxWaitCount</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">gzerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Waited &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">waitTime</span> <span class=\"o\">*</span> <span class=\"n\">waitCount</span><span class=\"p\">).</span><span class=\"n\">Double</span><span class=\"p\">()</span>\n      <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; seconds for namespaces. Giving up.</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This is problematic for some users trying to load and render large worlds (e.g. drc_practice_task_2.world in drcsim). If gzserver spends more than 10 seconds loading model data, then gzclient will time out and the user is left hanging. One hack around this is to launch gzserver, then launch gzclient after some time has passed (12 seconds in the case of DRC task 2). Another is to simply increase the maxWaitTime.</p>\n<p>However, a better long-term solution may be to add more communication between client and server at this stage in gazebo intialization. The server should be able to send a message to the client to keep waiting for topic namespaces.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2014-11-18T00:08:42.142492+00:00", "milestone": null, "updated_on": "2016-09-14T19:22:02.620807+00:00", "type": "issue", "id": 1333}