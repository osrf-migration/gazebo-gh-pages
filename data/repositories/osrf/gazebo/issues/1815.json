{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1815/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1815.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1815/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1815/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1815/segmentation-fault-related-to-physics"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1815/vote"}}, "reporter": {"display_name": "Mabel Zhang", "uuid": "{4b0e38fb-bf50-45c0-a496-61147518b2bf}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B4b0e38fb-bf50-45c0-a496-61147518b2bf%7D"}, "html": {"href": "https://bitbucket.org/%7B4b0e38fb-bf50-45c0-a496-61147518b2bf%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ceb5942c-6843-408c-8550-3ce4899d299b/4d48e5ea-cf28-4fa7-9715-8fc9e315d831/128"}}, "nickname": "mabelmzhang", "type": "user", "account_id": "557058:ceb5942c-6843-408c-8550-3ce4899d299b"}, "title": "Segmentation fault related to physics::Joint::Detach()", "component": {"name": "physics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122876.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "The segmentation fault is intermittent. When it happens, it always happens after physics::Joint::Detach() is called, but not inside the caller, which is my custom function. The seg fault happens a little after my function has returned. gdb never traces to Detach() or the caller of Detach(); instead, it traces to dQMultiply3() or setBall(), it might trace to other functions too, but I've only traced a few times. This never happens again after removing the Detach() calls.\r\n\r\nThis is related to [this post on Gazebo Answers](http://answers.gazebosim.org/question/12118/intermittent-segmentation-fault-possibly-by-custom-worldplugin-attaching-and-detaching-child/?answer=12251#post-id-12251), which has a more complete gdb backtrace.\r\n\r\nThe seg fault behavior happens in Gazebo 2.2.6 on Ubuntu 14.04, Gazebo 2.2.6 on OS X Yosemite, Gazebo 5.1.0 on Ubuntu 14.04. These are the versions for ROS Indigo and Jade. Have not tested others.\r\n\r\nThe physics::Joint being detached is created as a fixed joint from world to a robot by URDF:\r\n\r\n```\r\n#!xml\r\n\r\n  <joint name=\"world_to_base_link\" type=\"revolute\">\r\n    <parent link=\"world\"/>\r\n    <child link=\"base_link\"/>\r\n    <origin xyz=\"0 0 0\"/>\r\n    <limit effort=\"0\" velocity=\"0\" lower=\"0\" upper=\"0\" />\r\n  </joint>\r\n\r\n```\r\n\r\nIt is found at run-time in a Gazebo WorldPlugin by:\r\n\r\n```\r\n#!c++\r\n\r\n      physics::JointPtr world_to_base_joint_;\r\n\r\n      physics::BasePtr wrist_jnt_genericType = world_ -> GetByName (\r\n        \"world_to_base_link\");\r\n      if (wrist_jnt_genericType)\r\n      {\r\n        world_to_base_joint_ =\r\n          boost::dynamic_pointer_cast <physics::Joint> (wrist_jnt_genericType);\r\n      }\r\n      if (world_to_base_joint_)\r\n      {\r\n        world_to_base_joint_ -> Detach ();\r\n      }\r\n\r\n```\r\n\r\nBecause there may be some changes from URDF to SDF, I also tried creating the joint programmatically, like how it's done it Gripper.cc. Even then, I still get the same seg fault after Detach().\r\n\r\n\r\n```\r\n#!c++\r\n\r\n          physics::JointPtr world_to_base_joint_fresh_;\r\n\r\n          world_to_base_joint_fresh_ = physics_ -> CreateJoint (\"revolute\",\r\n            ground_model);\r\n\r\n          world_to_base_joint_fresh_ -> Load (world_link_, base_link_,\r\n            math::Pose ());\r\n          world_to_base_joint_fresh_ -> Init ();\r\n          world_to_base_joint_fresh_ -> SetHighStop (0, 0);\r\n          world_to_base_joint_fresh_ -> SetLowStop (0, 0);\r\n\r\n          world_to_base_joint_fresh_ -> Detach ();\r\n\r\n```\r\n", "markup": "markdown", "html": "<p>The segmentation fault is intermittent. When it happens, it always happens after physics::Joint::Detach() is called, but not inside the caller, which is my custom function. The seg fault happens a little after my function has returned. gdb never traces to Detach() or the caller of Detach(); instead, it traces to dQMultiply3() or setBall(), it might trace to other functions too, but I've only traced a few times. This never happens again after removing the Detach() calls.</p>\n<p>This is related to <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/12118/intermittent-segmentation-fault-possibly-by-custom-worldplugin-attaching-and-detaching-child/?answer=12251#post-id-12251\" rel=\"nofollow\">this post on Gazebo Answers</a>, which has a more complete gdb backtrace.</p>\n<p>The seg fault behavior happens in Gazebo 2.2.6 on Ubuntu 14.04, Gazebo 2.2.6 on OS X Yosemite, Gazebo 5.1.0 on Ubuntu 14.04. These are the versions for ROS Indigo and Jade. Have not tested others.</p>\n<p>The physics::Joint being detached is created as a fixed joint from world to a robot by URDF:</p>\n<div class=\"codehilite language-xml\"><pre><span></span>  <span class=\"nt\">&lt;joint</span> <span class=\"na\">name=</span><span class=\"s\">&quot;world_to_base_link&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;revolute&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;parent</span> <span class=\"na\">link=</span><span class=\"s\">&quot;world&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;child</span> <span class=\"na\">link=</span><span class=\"s\">&quot;base_link&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;origin</span> <span class=\"na\">xyz=</span><span class=\"s\">&quot;0 0 0&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;limit</span> <span class=\"na\">effort=</span><span class=\"s\">&quot;0&quot;</span> <span class=\"na\">velocity=</span><span class=\"s\">&quot;0&quot;</span> <span class=\"na\">lower=</span><span class=\"s\">&quot;0&quot;</span> <span class=\"na\">upper=</span><span class=\"s\">&quot;0&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/joint&gt;</span>\n</pre></div>\n\n\n<p>It is found at run-time in a Gazebo WorldPlugin by:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>      <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">JointPtr</span> <span class=\"n\">world_to_base_joint_</span><span class=\"p\">;</span>\n\n      <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">BasePtr</span> <span class=\"n\">wrist_jnt_genericType</span> <span class=\"o\">=</span> <span class=\"n\">world_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">GetByName</span> <span class=\"p\">(</span>\n        <span class=\"s\">&quot;world_to_base_link&quot;</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">wrist_jnt_genericType</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">world_to_base_joint_</span> <span class=\"o\">=</span>\n          <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">dynamic_pointer_cast</span> <span class=\"o\">&lt;</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">Joint</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">wrist_jnt_genericType</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">world_to_base_joint_</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">world_to_base_joint_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Detach</span> <span class=\"p\">();</span>\n      <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Because there may be some changes from URDF to SDF, I also tried creating the joint programmatically, like how it's done it Gripper.cc. Even then, I still get the same seg fault after Detach().</p>\n<div class=\"codehilite language-c++\"><pre><span></span>          <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">JointPtr</span> <span class=\"n\">world_to_base_joint_fresh_</span><span class=\"p\">;</span>\n\n          <span class=\"n\">world_to_base_joint_fresh_</span> <span class=\"o\">=</span> <span class=\"n\">physics_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">CreateJoint</span> <span class=\"p\">(</span><span class=\"s\">&quot;revolute&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">ground_model</span><span class=\"p\">);</span>\n\n          <span class=\"n\">world_to_base_joint_fresh_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Load</span> <span class=\"p\">(</span><span class=\"n\">world_link_</span><span class=\"p\">,</span> <span class=\"n\">base_link_</span><span class=\"p\">,</span>\n            <span class=\"n\">math</span><span class=\"o\">::</span><span class=\"n\">Pose</span> <span class=\"p\">());</span>\n          <span class=\"n\">world_to_base_joint_fresh_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Init</span> <span class=\"p\">();</span>\n          <span class=\"n\">world_to_base_joint_fresh_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">SetHighStop</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n          <span class=\"n\">world_to_base_joint_fresh_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">SetLowStop</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n          <span class=\"n\">world_to_base_joint_fresh_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Detach</span> <span class=\"p\">();</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "2.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/51082.json"}}}, "edited_on": null, "created_on": "2015-12-24T08:17:26.926282+00:00", "milestone": null, "updated_on": "2018-07-31T23:00:21.619399+00:00", "type": "issue", "id": 1815}