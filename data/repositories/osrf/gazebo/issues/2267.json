{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2267/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2267.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2267/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2267/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2267/plugin-creation-procedure-should-better"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2267/vote"}}, "reporter": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "title": "Plugin creation procedure should better check what it actually loads", "component": {"name": "plugins", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/332959.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "The `PluginT::Create` method is IMO written in such a way that it doesn't protect enough against wrong input data, which may result in memory access violations and segfaults.\r\n\r\nThis is the problematic block of code:\r\n\r\n    registerFunc.ptr = dlsym(dlHandle, registerName.c_str());\r\n\r\n    ....\r\n\r\n    // Register the new controller.\r\n    result->reset(registerFunc.func());\r\n    result->dlHandle = dlHandle;\r\n\r\n    result->handleName = _name;\r\n    result->filename = filename;\r\n\r\nAn address in a binary blob is there found and cast to `TPtr` without any checks. And right after that, the `result` structure is being written to. This can be a problem when the loaded plugin is of different type than `T`. An example of such wrong input is described here, and it's been in the wild for a long time: https://github.com/ros-simulation/gazebo_ros_pkgs/issues/577 . But this can also easily happen when the user tries to use e.g. a sensor plugin `.so` file where a model plugin should be used.\r\n\r\nI think the minimum that should be done is to check if `PluginT::GetType()` returns the expected plugin type. Maybe there could be also different ways to protect against this kind of problems, but I'm not such a low-level guy to find them... One more protective measure could be renaming `RegisterPlugin` to type-specific names like `RegisterGuiPlugin`, `RegisterSystemPlugin` etc.", "markup": "markdown", "html": "<p>The <code>PluginT::Create</code> method is IMO written in such a way that it doesn't protect enough against wrong input data, which may result in memory access violations and segfaults.</p>\n<p>This is the problematic block of code:</p>\n<div class=\"codehilite\"><pre><span></span>registerFunc.ptr = dlsym(dlHandle, registerName.c_str());\n\n....\n\n// Register the new controller.\nresult-&gt;reset(registerFunc.func());\nresult-&gt;dlHandle = dlHandle;\n\nresult-&gt;handleName = _name;\nresult-&gt;filename = filename;\n</pre></div>\n\n\n<p>An address in a binary blob is there found and cast to <code>TPtr</code> without any checks. And right after that, the <code>result</code> structure is being written to. This can be a problem when the loaded plugin is of different type than <code>T</code>. An example of such wrong input is described here, and it's been in the wild for a long time: <a href=\"https://github.com/ros-simulation/gazebo_ros_pkgs/issues/577\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ros-simulation/gazebo_ros_pkgs/issues/577</a> . But this can also easily happen when the user tries to use e.g. a sensor plugin <code>.so</code> file where a model plugin should be used.</p>\n<p>I think the minimum that should be done is to check if <code>PluginT::GetType()</code> returns the expected plugin type. Maybe there could be also different ways to protect against this kind of problems, but I'm not such a low-level guy to find them... One more protective measure could be renaming <code>RegisterPlugin</code> to type-specific names like <code>RegisterGuiPlugin</code>, <code>RegisterSystemPlugin</code> etc.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-04T11:24:41.977617+00:00", "milestone": null, "updated_on": "2017-05-04T11:24:41.977617+00:00", "type": "issue", "id": 2267}