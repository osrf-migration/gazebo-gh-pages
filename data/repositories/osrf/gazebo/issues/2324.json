{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2324/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2324.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2324/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2324/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2324/gzclient-shutdown-segmentation-fault-with"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2324/vote"}}, "reporter": {"display_name": "Tim Rakowski", "uuid": "{568e53a4-2b97-42ea-929e-038af8b7825e}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B568e53a4-2b97-42ea-929e-038af8b7825e%7D"}, "html": {"href": "https://bitbucket.org/%7B568e53a4-2b97-42ea-929e-038af8b7825e%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/83d3799cfee56e3c3195419ca9fd5d06d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsTR-2.png"}}, "nickname": "Tim Rakowski", "type": "user", "account_id": "557058:34f593f6-84fc-4797-8028-c8e3412b0993"}, "title": "gzclient shutdown segmentation fault with ogre 1.10", "component": {"name": "rendering::ogre_gazebo", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/153568.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "This issue is related to #!/osrf/gazebo/issues/2321/gazebo-800-startup-error-on-arch-linux. I used both patches referenced by @iche033. Just to make sure, I attached the actual patch I used.\r\n\r\n```\r\n#!\r\nThread 1 \"gzclient\" received signal SIGSEGV, Segmentation fault.\r\n0x00007ff0d62cd8ca in Ogre::SceneManagerEnumerator::shutdownAll() () from /usr/lib/libOgreMain.so.1.10.5\r\n(gdb) bt\r\n#0  0x00007ff0d62cd8ca in Ogre::SceneManagerEnumerator::shutdownAll() () at /usr/lib/libOgreMain.so.1.10.5\r\n#1  0x00007ff0d62a0ea7 in Ogre::Root::shutdown() () at /usr/lib/libOgreMain.so.1.10.5\r\n#2  0x00007ff0d62a281c in Ogre::Root::~Root() () at /usr/lib/libOgreMain.so.1.10.5\r\n#3  0x00007ff0ddb0de2f in gazebo::rendering::RenderEngine::Fini() (this=this@entry=0x7ff0df44d240 <SingletonT<gazebo::rendering::RenderEngine>::GetInstance()::t>) at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/rendering/RenderEngine.cc:368\r\n#4  0x00007ff0ddb16383 in gazebo::rendering::fini() () at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/rendering/RenderingIface.cc:66\r\n#5  0x00007ff0de8b69cd in gazebo::gui::fini() () at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/gui/GuiIface.cc:215\r\n#6  0x00007ff0de8b8110 in gazebo::gui::run(int, char**) (_argc=<optimized out>, _argv=0x7fffffffda48)\r\n    at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/gui/GuiIface.cc:370\r\n#7  0x000000010000376c in main(int, char**) (_argc=2, _argv=0x7fffffffda48) at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/gui/main.cc:29\r\n```\r\n\r\nHere is the gazebo code causing the seg fault:\r\n\r\n#!/osrf/gazebo/src/c1c50dc2390e9b1fc168ca41a501db5b57119212/gazebo/rendering/RenderEngine.cc?at=default&fileviewer=file-view-default#RenderEngine.cc-354\r\n\r\n\r\n```\r\n#!c++\r\n\r\n    this->dataPtr->root->shutdown();\r\n\r\n    // ...\r\n\r\n    try \r\n    {   \r\n      delete this->dataPtr->root; // SIGSEGV\r\n    }   \r\n    catch(...)\r\n    {   \r\n    }   \r\n\r\n```\r\n\r\nCalling Ogre::Root::~Root after calling Ogre::Root::shutdown seems to fail. Which is not documented, so either Ogre should fix it or it may be caused by something else gazebo does.\r\n\r\nI *think* that the this-pointer in the SceneManagerEnumerator::shutdown call (called from Root::~Root) is 0, but I honestly was not able to figure out how this can be caused by \"Root::~Root followed by Root::shutdown\":\r\n\r\n\r\n```\r\n#!\r\n\r\nDump of assembler code for function _ZN4Ogre22SceneManagerEnumerator11shutdownAllEv:\r\n   0x00007ff0d62cd8c0 <+0>:\tpush   %rbp\r\n   0x00007ff0d62cd8c1 <+1>:\tlea    0x20(%rdi),%rbp\r\n   0x00007ff0d62cd8c5 <+5>:\tpush   %rbx\r\n   0x00007ff0d62cd8c6 <+6>:\tsub    $0x8,%rsp\r\n=> 0x00007ff0d62cd8ca <+10>:\tmov    0x30(%rdi),%rbx\r\n...\r\n(gdb) p $edi\r\n$1 = 0\r\n```\r\n\r\n### Possible Solution ###\r\n\r\nAccording to https://bitbucket.org/sinbad/ogre/src/695d30368b416df2f90d570f747e4c656e0462f3/OgreMain/src/OgreRoot.cpp?at=v1-8&fileviewer=file-view-default#OgreRoot.cpp-288, \r\n Ogre::Root::~Root calls Ogre::Root::shutdown, so you might as well remove the shutdown call, which fixes the issue in my tests.\r\n\r\n### Edit ###\r\n\r\nIn hindsight I did the obvious thing and created the smallest test possible to show that Root::shutdown followed by Root::~Root leads to seg fault:\r\n\r\n\r\n```\r\n#!c++\r\n\r\n#include <OgreRoot.h>\r\n\r\nint main()\r\n{\r\n    Ogre::Root root;\r\n    root.shutdown();\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n```\r\n#!\r\n$ g++ -I/usr/include/OGRE -lOgreMain -lboost_system main.cpp\r\n$ gdb ./a.out\r\n...\r\n*-*-* OGRE Initialising\r\n*-*-* Version 1.10.5 (Xalafu)\r\n*-*-* OGRE Shutdown\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007f5b574988ca in Ogre::SceneManagerEnumerator::shutdownAll() () from /usr/lib/libOgreMain.so.1.10.5\r\n(gdb) bt\r\n#0  0x00007f5b574988ca in Ogre::SceneManagerEnumerator::shutdownAll() () from /usr/lib/libOgreMain.so.1.10.5\r\n#1  0x00007f5b5746bea7 in Ogre::Root::shutdown() () from /usr/lib/libOgreMain.so.1.10.5\r\n#2  0x00007f5b5746d81c in Ogre::Root::~Root() () from /usr/lib/libOgreMain.so.1.10.5\r\n#3  0x00000001000016aa in main ()\r\n\r\n```\r\n\r\n### Edit 2 ###\r\n\r\nI was able to find the (actually quite obvious) root cause:\r\n\r\nhttps://bitbucket.org/sinbad/ogre/src/b42cf1abf81571baaefd7c6b92ebfd701896686f/OgreMain/src/OgreRoot.cpp?at=v1-10-5&fileviewer=file-view-default#OgreRoot.cpp-1030\r\n\r\n\r\n```\r\n#!c++\r\n\r\n    void Root::shutdown(void)\r\n    {\r\n        if(mActiveRenderer)\r\n            mActiveRenderer->_setViewport(NULL);\r\n\r\n        // Since background thread might be access resources,\r\n        // ensure shutdown before destroying resource manager.\r\n        mResourceBackgroundQueue->shutdown();\r\n        mWorkQueue->shutdown();\r\n\r\n        SceneManagerEnumerator::getSingleton().shutdownAll(); // uses mSceneManagerEnum\r\n        shutdownPlugins();\r\n        OGRE_DELETE mSceneManagerEnum; // <==== deletes mSceneManagerEnum\r\n\r\n        OGRE_DELETE mShadowTextureManager;\r\n        ShadowVolumeExtrudeProgram::shutdown();\r\n        ResourceGroupManager::getSingleton().shutdownAll();\r\n\r\n        // Destroy pools\r\n        ConvexBody::_destroyPool();\r\n\r\n\r\n        mIsInitialised = false;\r\n\r\n        LogManager::getSingleton().logMessage(\"*-*-* OGRE Shutdown\");\r\n    }\r\n```\r\n\r\nSo calling Root::shutdown once deletes mSceneManagerEnum, and calling it a second time will access it again. Generally, Root::shutdown must not be called twice to prevent double deletes ... But this really looks like a Ogre issue since it isn't documented.\r\n\r\nI created a ticket for this in the Ogre JIRA: https://ogre3d.atlassian.net/browse/OGRE-576", "markup": "markdown", "html": "<p>This issue is related to <a href=\"#!/osrf/gazebo/issues/2321/gazebo-800-startup-error-on-arch-linux\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/issues/2321/gazebo-800-startup-error-on-arch-linux</a>. I used both patches referenced by @iche033. Just to make sure, I attached the actual patch I used.</p>\n<div class=\"codehilite\"><pre><span></span>Thread 1 &quot;gzclient&quot; received signal SIGSEGV, Segmentation fault.\n0x00007ff0d62cd8ca in Ogre::SceneManagerEnumerator::shutdownAll() () from /usr/lib/libOgreMain.so.1.10.5\n(gdb) bt\n#0  0x00007ff0d62cd8ca in Ogre::SceneManagerEnumerator::shutdownAll() () at /usr/lib/libOgreMain.so.1.10.5\n#1  0x00007ff0d62a0ea7 in Ogre::Root::shutdown() () at /usr/lib/libOgreMain.so.1.10.5\n#2  0x00007ff0d62a281c in Ogre::Root::~Root() () at /usr/lib/libOgreMain.so.1.10.5\n#3  0x00007ff0ddb0de2f in gazebo::rendering::RenderEngine::Fini() (this=this@entry=0x7ff0df44d240 &lt;SingletonT&lt;gazebo::rendering::RenderEngine&gt;::GetInstance()::t&gt;) at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/rendering/RenderEngine.cc:368\n#4  0x00007ff0ddb16383 in gazebo::rendering::fini() () at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/rendering/RenderingIface.cc:66\n#5  0x00007ff0de8b69cd in gazebo::gui::fini() () at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/gui/GuiIface.cc:215\n#6  0x00007ff0de8b8110 in gazebo::gui::run(int, char**) (_argc=&lt;optimized out&gt;, _argv=0x7fffffffda48)\n    at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/gui/GuiIface.cc:370\n#7  0x000000010000376c in main(int, char**) (_argc=2, _argv=0x7fffffffda48) at /home/racko/aur/gazebo/src/gazebo-8.0.0/gazebo/gui/main.cc:29\n</pre></div>\n\n\n<p>Here is the gazebo code causing the seg fault:</p>\n<p><a href=\"#!/osrf/gazebo/src/c1c50dc2390e9b1fc168ca41a501db5b57119212/gazebo/rendering/RenderEngine.cc?at=default&amp;fileviewer=file-view-default#RenderEngine.cc-354\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/c1c50dc2390e9b1fc168ca41a501db5b57119212/gazebo/rendering/RenderEngine.cc?at=default&amp;fileviewer=file-view-default#RenderEngine.cc-354</a></p>\n<div class=\"codehilite language-c++\"><pre><span></span>    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"o\">-&gt;</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// ...</span>\n\n    <span class=\"k\">try</span> \n    <span class=\"p\">{</span>   \n      <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"p\">;</span> <span class=\"c1\">// SIGSEGV</span>\n    <span class=\"p\">}</span>   \n    <span class=\"k\">catch</span><span class=\"p\">(...)</span>\n    <span class=\"p\">{</span>   \n    <span class=\"p\">}</span>   \n</pre></div>\n\n\n<p>Calling Ogre::Root::~Root after calling Ogre::Root::shutdown seems to fail. Which is not documented, so either Ogre should fix it or it may be caused by something else gazebo does.</p>\n<p>I <em>think</em> that the this-pointer in the SceneManagerEnumerator::shutdown call (called from Root::~Root) is 0, but I honestly was not able to figure out how this can be caused by \"Root::~Root followed by Root::shutdown\":</p>\n<div class=\"codehilite\"><pre><span></span>Dump of assembler code for function _ZN4Ogre22SceneManagerEnumerator11shutdownAllEv:\n   0x00007ff0d62cd8c0 &lt;+0&gt;: push   %rbp\n   0x00007ff0d62cd8c1 &lt;+1&gt;: lea    0x20(%rdi),%rbp\n   0x00007ff0d62cd8c5 &lt;+5&gt;: push   %rbx\n   0x00007ff0d62cd8c6 &lt;+6&gt;: sub    $0x8,%rsp\n=&gt; 0x00007ff0d62cd8ca &lt;+10&gt;:    mov    0x30(%rdi),%rbx\n...\n(gdb) p $edi\n$1 = 0\n</pre></div>\n\n\n<h3 id=\"markdown-header-possible-solution\">Possible Solution</h3>\n<p>According to <a href=\"https://bitbucket.org/sinbad/ogre/src/695d30368b416df2f90d570f747e4c656e0462f3/OgreMain/src/OgreRoot.cpp?at=v1-8&amp;fileviewer=file-view-default#OgreRoot.cpp-288\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/sinbad/ogre/src/695d30368b416df2f90d570f747e4c656e0462f3/OgreMain/src/OgreRoot.cpp?at=v1-8&amp;fileviewer=file-view-default#OgreRoot.cpp-288</a>, \n Ogre::Root::~Root calls Ogre::Root::shutdown, so you might as well remove the shutdown call, which fixes the issue in my tests.</p>\n<h3 id=\"markdown-header-edit\">Edit</h3>\n<p>In hindsight I did the obvious thing and created the smallest test possible to show that Root::shutdown followed by Root::~Root leads to seg fault:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;OgreRoot.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Ogre</span><span class=\"o\">::</span><span class=\"n\">Root</span> <span class=\"n\">root</span><span class=\"p\">;</span>\n    <span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ g++ -I/usr/include/OGRE -lOgreMain -lboost_system main.cpp\n$ gdb ./a.out\n...\n*-*-* OGRE Initialising\n*-*-* Version <span class=\"m\">1</span>.10.5 <span class=\"o\">(</span>Xalafu<span class=\"o\">)</span>\n*-*-* OGRE Shutdown\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00007f5b574988ca in Ogre::SceneManagerEnumerator::shutdownAll<span class=\"o\">()</span> <span class=\"o\">()</span> from /usr/lib/libOgreMain.so.1.10.5\n<span class=\"o\">(</span>gdb<span class=\"o\">)</span> bt\n<span class=\"c1\">#0  0x00007f5b574988ca in Ogre::SceneManagerEnumerator::shutdownAll() () from /usr/lib/libOgreMain.so.1.10.5</span>\n<span class=\"c1\">#1  0x00007f5b5746bea7 in Ogre::Root::shutdown() () from /usr/lib/libOgreMain.so.1.10.5</span>\n<span class=\"c1\">#2  0x00007f5b5746d81c in Ogre::Root::~Root() () from /usr/lib/libOgreMain.so.1.10.5</span>\n<span class=\"c1\">#3  0x00000001000016aa in main ()</span>\n</pre></div>\n\n\n<h3 id=\"markdown-header-edit-2\">Edit 2</h3>\n<p>I was able to find the (actually quite obvious) root cause:</p>\n<p><a href=\"https://bitbucket.org/sinbad/ogre/src/b42cf1abf81571baaefd7c6b92ebfd701896686f/OgreMain/src/OgreRoot.cpp?at=v1-10-5&amp;fileviewer=file-view-default#OgreRoot.cpp-1030\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/sinbad/ogre/src/b42cf1abf81571baaefd7c6b92ebfd701896686f/OgreMain/src/OgreRoot.cpp?at=v1-10-5&amp;fileviewer=file-view-default#OgreRoot.cpp-1030</a></p>\n<div class=\"codehilite language-c++\"><pre><span></span>    <span class=\"kt\">void</span> <span class=\"n\">Root</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">mActiveRenderer</span><span class=\"p\">)</span>\n            <span class=\"n\">mActiveRenderer</span><span class=\"o\">-&gt;</span><span class=\"n\">_setViewport</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// Since background thread might be access resources,</span>\n        <span class=\"c1\">// ensure shutdown before destroying resource manager.</span>\n        <span class=\"n\">mResourceBackgroundQueue</span><span class=\"o\">-&gt;</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n        <span class=\"n\">mWorkQueue</span><span class=\"o\">-&gt;</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n\n        <span class=\"n\">SceneManagerEnumerator</span><span class=\"o\">::</span><span class=\"n\">getSingleton</span><span class=\"p\">().</span><span class=\"n\">shutdownAll</span><span class=\"p\">();</span> <span class=\"c1\">// uses mSceneManagerEnum</span>\n        <span class=\"n\">shutdownPlugins</span><span class=\"p\">();</span>\n        <span class=\"n\">OGRE_DELETE</span> <span class=\"n\">mSceneManagerEnum</span><span class=\"p\">;</span> <span class=\"c1\">// &lt;==== deletes mSceneManagerEnum</span>\n\n        <span class=\"n\">OGRE_DELETE</span> <span class=\"n\">mShadowTextureManager</span><span class=\"p\">;</span>\n        <span class=\"n\">ShadowVolumeExtrudeProgram</span><span class=\"o\">::</span><span class=\"n\">shutdown</span><span class=\"p\">();</span>\n        <span class=\"n\">ResourceGroupManager</span><span class=\"o\">::</span><span class=\"n\">getSingleton</span><span class=\"p\">().</span><span class=\"n\">shutdownAll</span><span class=\"p\">();</span>\n\n        <span class=\"c1\">// Destroy pools</span>\n        <span class=\"n\">ConvexBody</span><span class=\"o\">::</span><span class=\"n\">_destroyPool</span><span class=\"p\">();</span>\n\n\n        <span class=\"n\">mIsInitialised</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n        <span class=\"n\">LogManager</span><span class=\"o\">::</span><span class=\"n\">getSingleton</span><span class=\"p\">().</span><span class=\"n\">logMessage</span><span class=\"p\">(</span><span class=\"s\">&quot;*-*-* OGRE Shutdown&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>So calling Root::shutdown once deletes mSceneManagerEnum, and calling it a second time will access it again. Generally, Root::shutdown must not be called twice to prevent double deletes ... But this really looks like a Ogre issue since it isn't documented.</p>\n<p>I created a ticket for this in the Ogre JIRA: <a href=\"https://ogre3d.atlassian.net/browse/OGRE-576\" rel=\"nofollow\" class=\"ap-connect-link\">https://ogre3d.atlassian.net/browse/OGRE-576</a></p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": {"name": "8.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242745.json"}}}, "edited_on": null, "created_on": "2017-08-06T17:24:33.612860+00:00", "milestone": null, "updated_on": "2017-08-08T20:51:45.192022+00:00", "type": "issue", "id": 2324}