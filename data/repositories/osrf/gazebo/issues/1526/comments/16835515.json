{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/16835515.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-16835515"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "So, I managed to put together a way to make this work for ODE.\n\nIn the [ODE user guide](http://www.ode.org/ode-latest-userguide.html) at 12.4 is explained is how static objects are created. Basically by not creating a dynamic body as mentioned by @nkoenig :\n```\n#!c++\nthis->linkId = dBodyCreate(this->odePhysics->GetWorldId());\ndBodySetData(this->linkId, this);\n```\n\nFor the implementation I re-used the on the TODO list function: `Link::SetLinkStatic` , more specifically [`ODELink::SetLinkStatic`](#!/osrf/gazebo/src/968df3ac24e90b761e3da6bce44b24f49a9e2ff6/gazebo/physics/ode/ODELink.cc?at=default#cl-743):\n\n\n```\n#!c++\n//////////////////////////////////////////////////\nvoid ODELink::SetLinkStatic(bool _static)\n{\n    // set static flag, the models' flag is not included\n    this->SetStatic(_static);\n\n    if(_static)\n    {\n      // remove dBody making the object static  \n      if(this->linkId)\n      {\n        dBodyDestroy(this->linkId);\n      }\n\n      this->linkId = NULL;\n    }\n    else\n    {\n        // re-initialize Link, thus re-creating a dBody with a new linkId\n        this->Init();\n    }\n}\n```\n\nThis surprisingly worked well. I tried it with the following models: a single collision, two collisions in a link, and two links. In all cases it worked well.\n\nNow the issues:\n\n* This method allows the links to be set to static **independently**. The `isStatic` flag will only be updated for the links, not for the model. However, I think this would be nice to have it this way. This might also require an update to the **SDF** so links can be set as static as well.\n\n* There is no method from the `Model` side that allows this, however something like `SetModelStatic` could be easily implemented, or using the general [`Entity::SetStatic`](#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/Entity.cc?at=default#cl-147) and checking for the `Link` type and calling \n`SetLinkStatic` :\n\n```\n#!c++\n//////////////////////////////////////////////////\nvoid Entity::SetStatic(const bool &_s)\n{\n  Base_V::iterator iter;\n\n  this->isStatic = _s;\n\n  for (iter = this->children.begin(); iter != this->children.end(); ++iter)\n  {\n    EntityPtr e = boost::dynamic_pointer_cast<Entity>(*iter);\n    if (e)\n      e->SetStatic(_s);\n\n    // check if type link\n    if((*iter)->GetType == 5)\n    {\n        (*iter)->SetLinkStatic(_s);\n    }\n\n  }\n}\n\n```\n* I did not check if the [`linkID`](#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.hh?at=default#cl-174) needs to stay constant, since for every toggle of static/non-static it gets a new ID. This is binded to the [`MoveCallback`](#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.hh?at=default#cl-168) method, however for every new ID its re-binded in the [`Init`](#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.cc?at=default#cl-154).\n* I am also not sure what happens to the Callback functions ( `MoveCallback` , `DisabledCallback`) since I do not remove them anywhere.", "markup": "markdown", "html": "<p>So, I managed to put together a way to make this work for ODE.</p>\n<p>In the <a data-is-external-link=\"true\" href=\"http://www.ode.org/ode-latest-userguide.html\" rel=\"nofollow\">ODE user guide</a> at 12.4 is explained is how static objects are created. Basically by not creating a dynamic body as mentioned by @nkoenig :</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span> <span class=\"o\">=</span> <span class=\"n\">dBodyCreate</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">odePhysics</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWorldId</span><span class=\"p\">());</span>\n<span class=\"n\">dBodySetData</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>For the implementation I re-used the on the TODO list function: <code>Link::SetLinkStatic</code> , more specifically <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/968df3ac24e90b761e3da6bce44b24f49a9e2ff6/gazebo/physics/ode/ODELink.cc?at=default#cl-743\" rel=\"nofollow\"><code>ODELink::SetLinkStatic</code></a>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">//////////////////////////////////////////////////</span>\n<span class=\"kt\">void</span> <span class=\"n\">ODELink</span><span class=\"o\">::</span><span class=\"n\">SetLinkStatic</span><span class=\"p\">(</span><span class=\"kt\">bool</span> <span class=\"n\">_static</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// set static flag, the models&#39; flag is not included</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">SetStatic</span><span class=\"p\">(</span><span class=\"n\">_static</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">_static</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// remove dBody making the object static  </span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">dBodyDestroy</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// re-initialize Link, thus re-creating a dBody with a new linkId</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">Init</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This surprisingly worked well. I tried it with the following models: a single collision, two collisions in a link, and two links. In all cases it worked well.</p>\n<p>Now the issues:</p>\n<ul>\n<li>\n<p>This method allows the links to be set to static <strong>independently</strong>. The <code>isStatic</code> flag will only be updated for the links, not for the model. However, I think this would be nice to have it this way. This might also require an update to the <strong>SDF</strong> so links can be set as static as well.</p>\n</li>\n<li>\n<p>There is no method from the <code>Model</code> side that allows this, however something like <code>SetModelStatic</code> could be easily implemented, or using the general <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/Entity.cc?at=default#cl-147\" rel=\"nofollow\"><code>Entity::SetStatic</code></a> and checking for the <code>Link</code> type and calling \n<code>SetLinkStatic</code> :</p>\n</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">//////////////////////////////////////////////////</span>\n<span class=\"kt\">void</span> <span class=\"n\">Entity</span><span class=\"o\">::</span><span class=\"n\">SetStatic</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_s</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Base_V</span><span class=\"o\">::</span><span class=\"n\">iterator</span> <span class=\"n\">iter</span><span class=\"p\">;</span>\n\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">isStatic</span> <span class=\"o\">=</span> <span class=\"n\">_s</span><span class=\"p\">;</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">iter</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span> <span class=\"n\">iter</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">iter</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">EntityPtr</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">dynamic_pointer_cast</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n      <span class=\"n\">e</span><span class=\"o\">-&gt;</span><span class=\"n\">SetStatic</span><span class=\"p\">(</span><span class=\"n\">_s</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// check if type link</span>\n    <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">GetType</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">SetLinkStatic</span><span class=\"p\">(</span><span class=\"n\">_s</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<ul>\n<li>I did not check if the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.hh?at=default#cl-174\" rel=\"nofollow\"><code>linkID</code></a> needs to stay constant, since for every toggle of static/non-static it gets a new ID. This is binded to the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.hh?at=default#cl-168\" rel=\"nofollow\"><code>MoveCallback</code></a> method, however for every new ID its re-binded in the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.cc?at=default#cl-154\" rel=\"nofollow\"><code>Init</code></a>.</li>\n<li>I am also not sure what happens to the Callback functions ( <code>MoveCallback</code> , <code>DisabledCallback</code>) since I do not remove them anywhere.</li>\n</ul>", "type": "rendered"}, "created_on": "2015-03-23T18:40:14.414788+00:00", "user": {"display_name": "Andrei Haidu", "uuid": "{825ae8d9-4737-437d-9090-c0b932f32bf2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D"}, "html": {"href": "https://bitbucket.org/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1a5e83c62729680f092d723cd0bf4c57d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAH-4.png"}}, "nickname": "ahaidu", "type": "user", "account_id": "557058:7ed02d0b-401c-4f0c-8500-f87172d5477d"}, "updated_on": null, "type": "issue_comment", "id": 16835515}