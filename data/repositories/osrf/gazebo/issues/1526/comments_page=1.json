{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/16601442.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-16601442"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "world uploaded", "markup": "markdown", "html": "<p>world uploaded</p>", "type": "rendered"}, "created_on": "2015-03-19T13:08:11.717055+00:00", "user": {"display_name": "Andrei Haidu", "uuid": "{825ae8d9-4737-437d-9090-c0b932f32bf2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D"}, "html": {"href": "https://bitbucket.org/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1a5e83c62729680f092d723cd0bf4c57d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAH-4.png"}}, "nickname": "ahaidu", "type": "user", "account_id": "557058:7ed02d0b-401c-4f0c-8500-f87172d5477d"}, "updated_on": null, "type": "issue_comment", "id": 16601442}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/16758203.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-16758203"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "I would like to try fixing this, any pointers on how this should be done?", "markup": "markdown", "html": "<p>I would like to try fixing this, any pointers on how this should be done?</p>", "type": "rendered"}, "created_on": "2015-03-20T08:27:16.071527+00:00", "user": {"display_name": "Andrei Haidu", "uuid": "{825ae8d9-4737-437d-9090-c0b932f32bf2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D"}, "html": {"href": "https://bitbucket.org/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1a5e83c62729680f092d723cd0bf4c57d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAH-4.png"}}, "nickname": "ahaidu", "type": "user", "account_id": "557058:7ed02d0b-401c-4f0c-8500-f87172d5477d"}, "updated_on": null, "type": "issue_comment", "id": 16758203}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/16766501.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-16766501"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "This would be a great feature to implement. Just want to warn you that it may be a bit complicated.\n\nWhen a model is loaded and  `static=true`, then it does not get a dynamic body in the physics engine. See [`gazebo/physics/ode/ODELink.cc:Init`](#!/osrf/gazebo/src/968df3ac24e90b761e3da6bce44b24f49a9e2ff6/gazebo/physics/ode/ODELink.cc?at=default#cl-66). \n\nYou try adding a function to ODELink that assigns a body to a static object when `SetStatic` is set to true.\n\nGrep for `IsStatic` in the `physics` directory to see where else the flag is used.", "markup": "markdown", "html": "<p>This would be a great feature to implement. Just want to warn you that it may be a bit complicated.</p>\n<p>When a model is loaded and  <code>static=true</code>, then it does not get a dynamic body in the physics engine. See <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/968df3ac24e90b761e3da6bce44b24f49a9e2ff6/gazebo/physics/ode/ODELink.cc?at=default#cl-66\" rel=\"nofollow\"><code>gazebo/physics/ode/ODELink.cc:Init</code></a>. </p>\n<p>You try adding a function to ODELink that assigns a body to a static object when <code>SetStatic</code> is set to true.</p>\n<p>Grep for <code>IsStatic</code> in the <code>physics</code> directory to see where else the flag is used.</p>", "type": "rendered"}, "created_on": "2015-03-20T14:12:19.643742+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 16766501}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/16779213.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-16779213"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "It is different for each physics engine as well. Bullet determines whether bodies are static by [checking their mass and inertia for zero values](#!/osrf/gazebo/src/968df3ac24e90b761e3da6bce44b24f49a9e2ff6/gazebo/physics/bullet/BulletLink.cc#cl-79).", "markup": "markdown", "html": "<p>It is different for each physics engine as well. Bullet determines whether bodies are static by <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/968df3ac24e90b761e3da6bce44b24f49a9e2ff6/gazebo/physics/bullet/BulletLink.cc#cl-79\" rel=\"nofollow\">checking their mass and inertia for zero values</a>.</p>", "type": "rendered"}, "created_on": "2015-03-20T17:38:27.956846+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 16779213}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/16835515.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-16835515"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "So, I managed to put together a way to make this work for ODE.\n\nIn the [ODE user guide](http://www.ode.org/ode-latest-userguide.html) at 12.4 is explained is how static objects are created. Basically by not creating a dynamic body as mentioned by @nkoenig :\n```\n#!c++\nthis->linkId = dBodyCreate(this->odePhysics->GetWorldId());\ndBodySetData(this->linkId, this);\n```\n\nFor the implementation I re-used the on the TODO list function: `Link::SetLinkStatic` , more specifically [`ODELink::SetLinkStatic`](#!/osrf/gazebo/src/968df3ac24e90b761e3da6bce44b24f49a9e2ff6/gazebo/physics/ode/ODELink.cc?at=default#cl-743):\n\n\n```\n#!c++\n//////////////////////////////////////////////////\nvoid ODELink::SetLinkStatic(bool _static)\n{\n    // set static flag, the models' flag is not included\n    this->SetStatic(_static);\n\n    if(_static)\n    {\n      // remove dBody making the object static  \n      if(this->linkId)\n      {\n        dBodyDestroy(this->linkId);\n      }\n\n      this->linkId = NULL;\n    }\n    else\n    {\n        // re-initialize Link, thus re-creating a dBody with a new linkId\n        this->Init();\n    }\n}\n```\n\nThis surprisingly worked well. I tried it with the following models: a single collision, two collisions in a link, and two links. In all cases it worked well.\n\nNow the issues:\n\n* This method allows the links to be set to static **independently**. The `isStatic` flag will only be updated for the links, not for the model. However, I think this would be nice to have it this way. This might also require an update to the **SDF** so links can be set as static as well.\n\n* There is no method from the `Model` side that allows this, however something like `SetModelStatic` could be easily implemented, or using the general [`Entity::SetStatic`](#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/Entity.cc?at=default#cl-147) and checking for the `Link` type and calling \n`SetLinkStatic` :\n\n```\n#!c++\n//////////////////////////////////////////////////\nvoid Entity::SetStatic(const bool &_s)\n{\n  Base_V::iterator iter;\n\n  this->isStatic = _s;\n\n  for (iter = this->children.begin(); iter != this->children.end(); ++iter)\n  {\n    EntityPtr e = boost::dynamic_pointer_cast<Entity>(*iter);\n    if (e)\n      e->SetStatic(_s);\n\n    // check if type link\n    if((*iter)->GetType == 5)\n    {\n        (*iter)->SetLinkStatic(_s);\n    }\n\n  }\n}\n\n```\n* I did not check if the [`linkID`](#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.hh?at=default#cl-174) needs to stay constant, since for every toggle of static/non-static it gets a new ID. This is binded to the [`MoveCallback`](#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.hh?at=default#cl-168) method, however for every new ID its re-binded in the [`Init`](#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.cc?at=default#cl-154).\n* I am also not sure what happens to the Callback functions ( `MoveCallback` , `DisabledCallback`) since I do not remove them anywhere.", "markup": "markdown", "html": "<p>So, I managed to put together a way to make this work for ODE.</p>\n<p>In the <a data-is-external-link=\"true\" href=\"http://www.ode.org/ode-latest-userguide.html\" rel=\"nofollow\">ODE user guide</a> at 12.4 is explained is how static objects are created. Basically by not creating a dynamic body as mentioned by @nkoenig :</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span> <span class=\"o\">=</span> <span class=\"n\">dBodyCreate</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">odePhysics</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWorldId</span><span class=\"p\">());</span>\n<span class=\"n\">dBodySetData</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>For the implementation I re-used the on the TODO list function: <code>Link::SetLinkStatic</code> , more specifically <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/968df3ac24e90b761e3da6bce44b24f49a9e2ff6/gazebo/physics/ode/ODELink.cc?at=default#cl-743\" rel=\"nofollow\"><code>ODELink::SetLinkStatic</code></a>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">//////////////////////////////////////////////////</span>\n<span class=\"kt\">void</span> <span class=\"n\">ODELink</span><span class=\"o\">::</span><span class=\"n\">SetLinkStatic</span><span class=\"p\">(</span><span class=\"kt\">bool</span> <span class=\"n\">_static</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// set static flag, the models&#39; flag is not included</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">SetStatic</span><span class=\"p\">(</span><span class=\"n\">_static</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">_static</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// remove dBody making the object static  </span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n        <span class=\"n\">dBodyDestroy</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">linkId</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// re-initialize Link, thus re-creating a dBody with a new linkId</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">Init</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This surprisingly worked well. I tried it with the following models: a single collision, two collisions in a link, and two links. In all cases it worked well.</p>\n<p>Now the issues:</p>\n<ul>\n<li>\n<p>This method allows the links to be set to static <strong>independently</strong>. The <code>isStatic</code> flag will only be updated for the links, not for the model. However, I think this would be nice to have it this way. This might also require an update to the <strong>SDF</strong> so links can be set as static as well.</p>\n</li>\n<li>\n<p>There is no method from the <code>Model</code> side that allows this, however something like <code>SetModelStatic</code> could be easily implemented, or using the general <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/Entity.cc?at=default#cl-147\" rel=\"nofollow\"><code>Entity::SetStatic</code></a> and checking for the <code>Link</code> type and calling \n<code>SetLinkStatic</code> :</p>\n</li>\n</ul>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">//////////////////////////////////////////////////</span>\n<span class=\"kt\">void</span> <span class=\"n\">Entity</span><span class=\"o\">::</span><span class=\"n\">SetStatic</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">bool</span> <span class=\"o\">&amp;</span><span class=\"n\">_s</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Base_V</span><span class=\"o\">::</span><span class=\"n\">iterator</span> <span class=\"n\">iter</span><span class=\"p\">;</span>\n\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">isStatic</span> <span class=\"o\">=</span> <span class=\"n\">_s</span><span class=\"p\">;</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">iter</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span> <span class=\"n\">iter</span> <span class=\"o\">!=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">iter</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">EntityPtr</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">dynamic_pointer_cast</span><span class=\"o\">&lt;</span><span class=\"n\">Entity</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n      <span class=\"n\">e</span><span class=\"o\">-&gt;</span><span class=\"n\">SetStatic</span><span class=\"p\">(</span><span class=\"n\">_s</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// check if type link</span>\n    <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">GetType</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">SetLinkStatic</span><span class=\"p\">(</span><span class=\"n\">_s</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<ul>\n<li>I did not check if the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.hh?at=default#cl-174\" rel=\"nofollow\"><code>linkID</code></a> needs to stay constant, since for every toggle of static/non-static it gets a new ID. This is binded to the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.hh?at=default#cl-168\" rel=\"nofollow\"><code>MoveCallback</code></a> method, however for every new ID its re-binded in the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/4dc9b5b7ef3049f4fa7c86a99a22bf579a6cbd72/gazebo/physics/ode/ODELink.cc?at=default#cl-154\" rel=\"nofollow\"><code>Init</code></a>.</li>\n<li>I am also not sure what happens to the Callback functions ( <code>MoveCallback</code> , <code>DisabledCallback</code>) since I do not remove them anywhere.</li>\n</ul>", "type": "rendered"}, "created_on": "2015-03-23T18:40:14.414788+00:00", "user": {"display_name": "Andrei Haidu", "uuid": "{825ae8d9-4737-437d-9090-c0b932f32bf2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D"}, "html": {"href": "https://bitbucket.org/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1a5e83c62729680f092d723cd0bf4c57d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAH-4.png"}}, "nickname": "ahaidu", "type": "user", "account_id": "557058:7ed02d0b-401c-4f0c-8500-f87172d5477d"}, "updated_on": null, "type": "issue_comment", "id": 16835515}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/16836054.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-16836054"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "Nice!\n\nYes, we would need some new sdformat tags to mark individual links as static. It could follow the pattern of the `self_collide` tags, which are defined for both links and models, and use the model's value if the link value is not specified.", "markup": "markdown", "html": "<p>Nice!</p>\n<p>Yes, we would need some new sdformat tags to mark individual links as static. It could follow the pattern of the <code>self_collide</code> tags, which are defined for both links and models, and use the model's value if the link value is not specified.</p>", "type": "rendered"}, "created_on": "2015-03-23T19:02:41.240268+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 16836054}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/16837157.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-16837157"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "I did not test the functionality of joints either. However the ode user guide explains at point 12.1 and 12.4 how to use these:\n\n12.1. How do I connect a body to the static environment with a joint?\n\n * Use dJointAttach with arguments (body,0) or (0,body).\n\n 12.4. How can an immovable body be created?\n\n * [...] The geom is associated with a rigid body ID of zero. Then in the contact callback when you detect a collision between two geoms with a nonzero body ID and a zero body ID, you can simply pass those two IDs to the `dJointAttach` function as normal. This will create a contact between the rigid body and the static environment.", "markup": "markdown", "html": "<p>I did not test the functionality of joints either. However the ode user guide explains at point 12.1 and 12.4 how to use these:</p>\n<p>12.1. How do I connect a body to the static environment with a joint?</p>\n<ul>\n<li>Use dJointAttach with arguments (body,0) or (0,body).</li>\n</ul>\n<p>12.4. How can an immovable body be created?</p>\n<ul>\n<li>[...] The geom is associated with a rigid body ID of zero. Then in the contact callback when you detect a collision between two geoms with a nonzero body ID and a zero body ID, you can simply pass those two IDs to the <code>dJointAttach</code> function as normal. This will create a contact between the rigid body and the static environment.</li>\n</ul>", "type": "rendered"}, "created_on": "2015-03-23T20:06:23.181011+00:00", "user": {"display_name": "Andrei Haidu", "uuid": "{825ae8d9-4737-437d-9090-c0b932f32bf2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D"}, "html": {"href": "https://bitbucket.org/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1a5e83c62729680f092d723cd0bf4c57d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAH-4.png"}}, "nickname": "ahaidu", "type": "user", "account_id": "557058:7ed02d0b-401c-4f0c-8500-f87172d5477d"}, "updated_on": null, "type": "issue_comment", "id": 16837157}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/16839562.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-16839562"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "Excellent work.\n\nHow about we do this in two parts:\n\n1. Implement the whole model `setstatic`  functionality via `Entity::SetStatic`. \n\n1. Add the ability to set each link to static. This will require a change to SDF like Steve suggested.", "markup": "markdown", "html": "<p>Excellent work.</p>\n<p>How about we do this in two parts:</p>\n<ol>\n<li>\n<p>Implement the whole model <code>setstatic</code>  functionality via <code>Entity::SetStatic</code>. </p>\n</li>\n<li>\n<p>Add the ability to set each link to static. This will require a change to SDF like Steve suggested.</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2015-03-23T22:24:16.824137+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 16839562}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/17297897.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-17297897"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "Some updates on this issue, until I will have time to look over it in more detail (this works for basic cases).\n\n[Here](https://bitbucket.org/ahaidu/gazebo_1526/branches/compare/ahaidu/gazebo_1526:tip%0Dosrf/gazebo:default#diff) are the diffs.\n\nKnown issues with this fix:\n\n * If the model is initially loaded as static and then it set to movable it does not collide with other models\n * When switched to true / false very quickly I noticed a segfault at line 97 in `contact.cpp`\n * If the model initally has joints, these are disabled afterwards", "markup": "markdown", "html": "<p>Some updates on this issue, until I will have time to look over it in more detail (this works for basic cases).</p>\n<p><a data-is-external-link=\"true\" href=\"https://bitbucket.org/ahaidu/gazebo_1526/branches/compare/ahaidu/gazebo_1526:tip%0Dosrf/gazebo:default#diff\" rel=\"nofollow\">Here</a> are the diffs.</p>\n<p>Known issues with this fix:</p>\n<ul>\n<li>If the model is initially loaded as static and then it set to movable it does not collide with other models</li>\n<li>When switched to true / false very quickly I noticed a segfault at line 97 in <code>contact.cpp</code></li>\n<li>If the model initally has joints, these are disabled afterwards</li>\n</ul>", "type": "rendered"}, "created_on": "2015-04-10T12:13:01.620589+00:00", "user": {"display_name": "Andrei Haidu", "uuid": "{825ae8d9-4737-437d-9090-c0b932f32bf2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D"}, "html": {"href": "https://bitbucket.org/%7B825ae8d9-4737-437d-9090-c0b932f32bf2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1a5e83c62729680f092d723cd0bf4c57d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAH-4.png"}}, "nickname": "ahaidu", "type": "user", "account_id": "557058:7ed02d0b-401c-4f0c-8500-f87172d5477d"}, "updated_on": "2017-04-26T21:11:17.408981+00:00", "type": "issue_comment", "id": 17297897}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/27572987.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-27572987"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "Hi, is there any update on this?", "markup": "markdown", "html": "<p>Hi, is there any update on this?</p>", "type": "rendered"}, "created_on": "2016-05-05T08:19:55.813557+00:00", "user": {"display_name": "Fadri Furrer", "uuid": "{71ff7193-e7dc-452f-ba2f-da743018ab54}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B71ff7193-e7dc-452f-ba2f-da743018ab54%7D"}, "html": {"href": "https://bitbucket.org/%7B71ff7193-e7dc-452f-ba2f-da743018ab54%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/b4b09d874026ebb17a303fefc1c42a99d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsFF-3.png"}}, "nickname": "ffurrer", "type": "user", "account_id": "557058:b59ba506-a9fb-4e9a-bbf1-f67d12819f7e"}, "updated_on": null, "type": "issue_comment", "id": 27572987}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/30611150.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-30611150"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:24:23.612143+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30611150}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/36396346.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-36396346"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": "Hi @ahaidu , I was thinking of taking a look at this to see if it could be implemented relatively soon. Do you have the original link to the diff you mention above by any chance? Bitbucket is currently just redirecting it to this page...\n\nThanks for the help!", "markup": "markdown", "html": "<p>Hi @ahaidu , I was thinking of taking a look at this to see if it could be implemented relatively soon. Do you have the original link to the diff you mention above by any chance? Bitbucket is currently just redirecting it to this page...</p>\n<p>Thanks for the help!</p>", "type": "rendered"}, "created_on": "2017-04-28T23:02:36.117668+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 36396346}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526/comments/53135599.json"}, "html": {"href": "#!/osrf/gazebo/issues/1526#comment-53135599"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1526.json"}}, "type": "issue", "id": 1526, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Entity::SetStatic() does not work after the model is loaded"}, "content": {"raw": ":thumbsup: would like to see this fixed if it isn\u2019t already!", "markup": "markdown", "html": "<p><img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f44d.png\" alt=\"\ud83d\udc4d\" title=\":thumbsup:\" data-emoji-short-name=\":thumbsup:\" /> would like to see this fixed if it isn\u2019t already!</p>", "type": "rendered"}, "created_on": "2019-07-25T05:39:42.784765+00:00", "user": {"display_name": "Peter Mitrano", "uuid": "{f79f793e-4f31-4c61-9df2-190b239e0bf2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf79f793e-4f31-4c61-9df2-190b239e0bf2%7D"}, "html": {"href": "https://bitbucket.org/%7Bf79f793e-4f31-4c61-9df2-190b239e0bf2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:b5298278-299c-4d16-b5aa-449d6d2db98d/e384924a-68d0-4825-9af2-9892e5f3417c/128"}}, "nickname": "peter_mitrano", "type": "user", "account_id": "557058:b5298278-299c-4d16-b5aa-449d6d2db98d"}, "updated_on": null, "type": "issue_comment", "id": 53135599}], "page": 1, "size": 13}