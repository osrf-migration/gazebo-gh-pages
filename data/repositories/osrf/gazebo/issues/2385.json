{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2385/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2385.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2385/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2385/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2385/step-by-step-simulation-c-with-gazebo"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2385/vote"}}, "reporter": {"display_name": "Brice Clement", "uuid": "{9a316ad8-04e2-4a05-980f-44dbbd5b3897}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9a316ad8-04e2-4a05-980f-44dbbd5b3897%7D"}, "html": {"href": "https://bitbucket.org/%7B9a316ad8-04e2-4a05-980f-44dbbd5b3897%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/76dc97e4a0367def37518e4f907f2f4ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsBC-0.png"}}, "nickname": "Brice_clement", "type": "user", "account_id": "5a2feea09f1e433e479775b0"}, "title": "Step by step simulation c++ with gazebo", "component": null, "votes": 0, "watches": 1, "content": {"raw": "HI,\r\n\r\nWe are trying to use gazebo in a step by step way, because we have a controller running at some frequency, and we want to avoid asynchronous issue.\r\n\r\nSo we looked at the example of your Custom main, and we found that your are using :\r\n\r\n```\r\n#!c++\r\n\r\ngazebo::runWorld(world, iterations);\r\n```\r\nWhere iteration is the number of iteration to perform.\r\nBut this function can't be used like this :\r\n\r\n```\r\n#!c++\r\n while (!stop) {\r\n    gazebo::runWorld(world, 1);\r\n    //  do some stuff\r\n  }\r\n\r\n```\r\nBecause it seems like it's reseting everythings from scratch.\r\n\r\nSo we would like to use the world->Step() function which is private, to run step by step the simulation.\r\n\r\nBest regards,", "markup": "markdown", "html": "<p>HI,</p>\n<p>We are trying to use gazebo in a step by step way, because we have a controller running at some frequency, and we want to avoid asynchronous issue.</p>\n<p>So we looked at the example of your Custom main, and we found that your are using :</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">runWorld</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Where iteration is the number of iteration to perform.\nBut this function can't be used like this :</p>\n<div class=\"codehilite language-c++\"><pre><span></span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">stop</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">runWorld</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"c1\">//  do some stuff</span>\n  <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Because it seems like it's reseting everythings from scratch.</p>\n<p>So we would like to use the world-&gt;Step() function which is private, to run step by step the simulation.</p>\n<p>Best regards,</p>", "type": "rendered"}, "assignee": null, "state": "open", "version": {"name": "8.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242745.json"}}}, "edited_on": null, "created_on": "2017-12-13T13:40:45.895187+00:00", "milestone": null, "updated_on": "2018-04-20T10:23:26.888731+00:00", "type": "issue", "id": 2385}