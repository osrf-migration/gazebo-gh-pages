{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2158/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2158.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2158/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2158/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2158/gz-log-filter-joints-test-has-wrong"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2158/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "gz log filter joints test has wrong expectations", "component": {"name": "tools", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/132355.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "I was trying to use a joint filter on a log file the same way as it is done on [UNIT_gz_log_TEST](#!/osrf/gazebo/src/8d35d7d913a368dc6d39105fa42c4ff05a4e858e/tools/gz_log_TEST.cc?fileviewer=file-view-default#gz_log_TEST.cc-215), but couldn't get any joint information any way I tried.\r\n\r\nThen I tried using the same command as the test uses on the same [file](#!/osrf/gazebo/src/8d35d7d913a368dc6d39105fa42c4ff05a4e858e/test/data/pr2_state.log?fileviewer=file-view-default), and I noticed that that file doesn't even have joint information in the unfiltered version.\r\n\r\nIf we add a print statement to the test:\r\n\r\n~~~\r\ndiff -r a1aebcb971ad tools/gz_log_TEST.cc\r\n--- a/tools/gz_log_TEST.cc\tThu Jan 19 10:52:31 2017 -0800\r\n+++ b/tools/gz_log_TEST.cc\tFri Jan 20 16:34:48 2017 -0800\r\n@@ -216,6 +216,7 @@\r\n   echo = custom_exec(std::string(GZ_LOG_PATH +\r\n         \" -e --filter pr2//r_upper_arm_roll_joint -f \") +\r\n       PROJECT_SOURCE_PATH + \"/test/data/pr2_state.log\");\r\n+std::cout << echo;\r\n   shasum = gazebo::common::get_sha1<std::string>(echo);\r\n   // EXPECT_EQ(pr2JointStateLog, echo);\r\n   if (std::string(\"1.4\").compare(SDF_VERSION) == 0)\r\n~~~\r\n\r\nWe can see that the result doesn't contain any joint information, only a empty model states like this:\r\n\r\n~~~\r\n<model name='pr2'>\r\n</model>\r\n~~~\r\n\r\nSo I believe the shasums used on that test were created based on invalid expectations. \r\n\r\nI'm not even sure if joint filtering works at all, in fact, it looks like log files don't usually contain joint states...", "markup": "markdown", "html": "<p>I was trying to use a joint filter on a log file the same way as it is done on <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/8d35d7d913a368dc6d39105fa42c4ff05a4e858e/tools/gz_log_TEST.cc?fileviewer=file-view-default#gz_log_TEST.cc-215\" rel=\"nofollow\">UNIT_gz_log_TEST</a>, but couldn't get any joint information any way I tried.</p>\n<p>Then I tried using the same command as the test uses on the same <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/8d35d7d913a368dc6d39105fa42c4ff05a4e858e/test/data/pr2_state.log?fileviewer=file-view-default\" rel=\"nofollow\">file</a>, and I noticed that that file doesn't even have joint information in the unfiltered version.</p>\n<p>If we add a print statement to the test:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r a1aebcb971ad tools/gz_log_TEST.cc</span>\n<span class=\"gd\">--- a/tools/gz_log_TEST.cc  Thu Jan 19 10:52:31 2017 -0800</span>\n<span class=\"gi\">+++ b/tools/gz_log_TEST.cc  Fri Jan 20 16:34:48 2017 -0800</span>\n<span class=\"gu\">@@ -216,6 +216,7 @@</span>\n   echo = custom_exec(std::string(GZ_LOG_PATH +\n         &quot; -e --filter pr2//r_upper_arm_roll_joint -f &quot;) +\n       PROJECT_SOURCE_PATH + &quot;/test/data/pr2_state.log&quot;);\n<span class=\"gi\">+std::cout &lt;&lt; echo;</span>\n   shasum = gazebo::common::get_sha1&lt;std::string&gt;(echo);\n   // EXPECT_EQ(pr2JointStateLog, echo);\n   if (std::string(&quot;1.4&quot;).compare(SDF_VERSION) == 0)\n</pre></div>\n\n\n<p>We can see that the result doesn't contain any joint information, only a empty model states like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&#39;pr2&#39;</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>So I believe the shasums used on that test were created based on invalid expectations. </p>\n<p>I'm not even sure if joint filtering works at all, in fact, it looks like log files don't usually contain joint states...</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2017-01-21T00:39:08.125430+00:00", "milestone": null, "updated_on": "2017-01-21T00:39:08.125430+00:00", "type": "issue", "id": 2158}