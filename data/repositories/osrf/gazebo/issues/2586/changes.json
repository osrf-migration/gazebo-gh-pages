{"pagelen": 100, "values": [{"changes": {"content": {"new": "# Sensor definition #\r\nI have a camera sensor with intrinsic parameters:\r\n```\r\n#!XML\r\n\r\n        <camera>\r\n          <!-- FOV = 2 * arctan(w/(2*f_x)), with f_x = 536.473145060694 -->\r\n          <horizontal_fov>1.0756668597435934</horizontal_fov>\r\n          <image>\r\n            <format>R8G8B8</format>\r\n            <width>640</width>\r\n            <height>480</height>\r\n          </image>\r\n          <clip>\r\n            <near>0.0001</near>\r\n            <far>1000</far>\r\n          </clip>\r\n          <distortion>\r\n            <k1>0.03310900261913022</k1>\r\n            <k2>-0.1081296635444241</k2>\r\n            <p1>0.0003885055533487762</p1>\r\n            <p2>-0.001167055731123937</p2>\r\n            <k3>0</k3>\r\n            <!-- relative centre with c = (314.0086519801989, 246.7391576005324) -->\r\n            <center>0.49063851871906083 0.5140399116677759</center>\r\n          </distortion>\r\n        </camera>\r\n```\r\n\r\n# Expected projection matrix #\r\nAccording to http://www.songho.ca/opengl/gl_projectionmatrix.html, the projection matrix is:\r\n![opengl_proj.png](https://bitbucket.org/repo/jgXqbo/images/3911210773-opengl_proj.png)\r\nFor the given camera parameters this should be something around:\r\n```\r\nP: \r\n   1.67648          0  -0.018723          0\r\n         0   -2.23693 -0.0280798          0\r\n         0          0          1    -0.0002\r\n         0          0          1          0\r\n```\r\nThe signs are different because this is in a RDF (x - Right, y - Down, z - Front) coordinate system.\r\n\r\n# Projection matrix used in camera sensor #\r\nBut the projection matrix (`Camera::ProjectionMatrix()`) gives (row-major):\r\n```\r\n1.67647 0 0 0 0 2.2353 0 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nwhich is missing values for P(0,2) and P(1,2) (they are set to 0).\r\n\r\nSince Gazebo 10 I can update the camera intrinsics via `Camera::UpdateCameraIntrinsics`:\r\n```\r\n#!c++\r\n\r\nUpdateCameraIntrinsics(536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0);\r\n```\r\nor compute the projection matrix manually via `Camera::BuildProjectiveMatrix`:\r\n```\r\n#!c++\r\n\r\nBuildProjectiveMatrix(640, 480, 536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0, 0.0001, 1000);\r\n```\r\n\r\nin which case I get:\r\n```\r\n1.67648 0.003125 0.018723 0 0 2.23693 -0.02808 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nas projection matrix.\r\nThis is still not correct since this time P(0,1)=0.003125, which should be 0.", "old": "# Sensor definition #\r\nI have a camera sensor with intrinsic parameters:\r\n```\r\n#!XML\r\n\r\n        <camera>\r\n          <!-- FOV = 2 * arctan(w/(2*f_x)), with f_x = 536.473145060694 -->\r\n          <horizontal_fov>1.0756668597435934</horizontal_fov>\r\n          <image>\r\n            <format>R8G8B8</format>\r\n            <width>640</width>\r\n            <height>480</height>\r\n          </image>\r\n          <clip>\r\n            <near>0.0001</near>\r\n            <far>1000</far>\r\n          </clip>\r\n          <distortion>\r\n            <k1>0.03310900261913022</k1>\r\n            <k2>-0.1081296635444241</k2>\r\n            <p1>0.0003885055533487762</p1>\r\n            <p2>-0.001167055731123937</p2>\r\n            <k3>0</k3>\r\n            <!-- relative centre with c = (314.0086519801989, 246.7391576005324) -->\r\n            <center>0.49063851871906083 0.5140399116677759</center>\r\n          </distortion>\r\n        </camera>\r\n```\r\n\r\n# Expected projection matrix #\r\nAccroding to http://www.songho.ca/opengl/gl_projectionmatrix.html, the projection matrix is:\r\n![opengl_proj.png](https://bitbucket.org/repo/jgXqbo/images/3911210773-opengl_proj.png)\r\nFor the given camera parameters this should be something around:\r\n```\r\nP: \r\n   1.67648          0  -0.018723          0\r\n         0   -2.23693 -0.0280798          0\r\n         0          0          1    -0.0002\r\n         0          0          1          0\r\n```\r\nThe signs are different because this is in a RDF (x - Right, y - Down, z - Front) coordinate system.\r\n\r\n# Projection matrix used in camera sensor #\r\nBut the projection matrix (`Camera::ProjectionMatrix()`) gives (row-major):\r\n```\r\n1.67647 0 0 0 0 2.2353 0 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nwhich is missing values for P(0,2) and P(1,2) (they are set to 0).\r\n\r\nSince Gazebo 10 I can update the camera intrinsics via `Camera::UpdateCameraIntrinsics`:\r\n```\r\n#!c++\r\n\r\nUpdateCameraIntrinsics(536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0);\r\n```\r\nor compute the projection matrix manually via `Camera::BuildProjectiveMatrix`:\r\n```\r\n#!c++\r\n\r\nBuildProjectiveMatrix(640, 480, 536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0, 0.0001, 1000);\r\n```\r\n\r\nin which case I get:\r\n```\r\n1.67648 0.003125 0.018723 0 0 2.23693 -0.02808 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nas projection matrix.\r\nThis is still not correct since this time P(0,1)=0.003125, which shoud be 0."}}, "links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2586/changes/50047087.json"}, "html": {"href": "#!/osrf/gazebo/issues/2586#comment-50047087"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2586.json"}}, "type": "issue", "id": 2586, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Wrong camera projection matrix"}, "created_on": "2019-01-20T17:12:09.038163+00:00", "user": {"display_name": "Christian Rauch", "uuid": "{408871b1-9dca-4a44-88df-e8f0dbdba533}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B408871b1-9dca-4a44-88df-e8f0dbdba533%7D"}, "html": {"href": "https://bitbucket.org/%7B408871b1-9dca-4a44-88df-e8f0dbdba533%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a54c27438e4b2d461db222760c23af17d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCR-2.png"}}, "nickname": "christian-rauch", "type": "user", "account_id": "557058:3551aa15-5c14-4b8f-b364-4546b8f30250"}, "message": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "type": "issue_change", "id": 50047087}, {"changes": {"content": {"new": "# Sensor definition #\r\nI have a camera sensor with intrinsic parameters:\r\n```\r\n#!XML\r\n\r\n        <camera>\r\n          <!-- FOV = 2 * arctan(w/(2*f_x)), with f_x = 536.473145060694 -->\r\n          <horizontal_fov>1.0756668597435934</horizontal_fov>\r\n          <image>\r\n            <format>R8G8B8</format>\r\n            <width>640</width>\r\n            <height>480</height>\r\n          </image>\r\n          <clip>\r\n            <near>0.0001</near>\r\n            <far>1000</far>\r\n          </clip>\r\n          <distortion>\r\n            <k1>0.03310900261913022</k1>\r\n            <k2>-0.1081296635444241</k2>\r\n            <p1>0.0003885055533487762</p1>\r\n            <p2>-0.001167055731123937</p2>\r\n            <k3>0</k3>\r\n            <!-- relative centre with c = (314.0086519801989, 246.7391576005324) -->\r\n            <center>0.49063851871906083 0.5140399116677759</center>\r\n          </distortion>\r\n        </camera>\r\n```\r\n\r\n# Expected projection matrix #\r\nAccording to http://www.songho.ca/opengl/gl_projectionmatrix.html#perspective, the projection matrix is:\r\n![opengl_proj.png](https://bitbucket.org/repo/jgXqbo/images/3911210773-opengl_proj.png)\r\nFor the given camera parameters this should be something around:\r\n```\r\nP: \r\n   1.67648          0  -0.018723          0\r\n         0   -2.23693 -0.0280798          0\r\n         0          0          1    -0.0002\r\n         0          0          1          0\r\n```\r\nThe signs are different because this is in a RDF (x - Right, y - Down, z - Front) coordinate system.\r\n\r\n# Projection matrix used in camera sensor #\r\nBut the projection matrix (`Camera::ProjectionMatrix()`) gives (row-major):\r\n```\r\n1.67647 0 0 0 0 2.2353 0 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nwhich is missing values for P(0,2) and P(1,2) (they are set to 0).\r\n\r\nSince Gazebo 10 I can update the camera intrinsics via `Camera::UpdateCameraIntrinsics`:\r\n```\r\n#!c++\r\n\r\nUpdateCameraIntrinsics(536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0);\r\n```\r\nor compute the projection matrix manually via `Camera::BuildProjectiveMatrix`:\r\n```\r\n#!c++\r\n\r\nBuildProjectiveMatrix(640, 480, 536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0, 0.0001, 1000);\r\n```\r\n\r\nin which case I get:\r\n```\r\n1.67648 0.003125 0.018723 0 0 2.23693 -0.02808 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nas projection matrix.\r\nThis is still not correct since this time P(0,1)=0.003125, which should be 0.", "old": "# Sensor definition #\r\nI have a camera sensor with intrinsic parameters:\r\n```\r\n#!XML\r\n\r\n        <camera>\r\n          <!-- FOV = 2 * arctan(w/(2*f_x)), with f_x = 536.473145060694 -->\r\n          <horizontal_fov>1.0756668597435934</horizontal_fov>\r\n          <image>\r\n            <format>R8G8B8</format>\r\n            <width>640</width>\r\n            <height>480</height>\r\n          </image>\r\n          <clip>\r\n            <near>0.0001</near>\r\n            <far>1000</far>\r\n          </clip>\r\n          <distortion>\r\n            <k1>0.03310900261913022</k1>\r\n            <k2>-0.1081296635444241</k2>\r\n            <p1>0.0003885055533487762</p1>\r\n            <p2>-0.001167055731123937</p2>\r\n            <k3>0</k3>\r\n            <!-- relative centre with c = (314.0086519801989, 246.7391576005324) -->\r\n            <center>0.49063851871906083 0.5140399116677759</center>\r\n          </distortion>\r\n        </camera>\r\n```\r\n\r\n# Expected projection matrix #\r\nAccording to http://www.songho.ca/opengl/gl_projectionmatrix.html, the projection matrix is:\r\n![opengl_proj.png](https://bitbucket.org/repo/jgXqbo/images/3911210773-opengl_proj.png)\r\nFor the given camera parameters this should be something around:\r\n```\r\nP: \r\n   1.67648          0  -0.018723          0\r\n         0   -2.23693 -0.0280798          0\r\n         0          0          1    -0.0002\r\n         0          0          1          0\r\n```\r\nThe signs are different because this is in a RDF (x - Right, y - Down, z - Front) coordinate system.\r\n\r\n# Projection matrix used in camera sensor #\r\nBut the projection matrix (`Camera::ProjectionMatrix()`) gives (row-major):\r\n```\r\n1.67647 0 0 0 0 2.2353 0 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nwhich is missing values for P(0,2) and P(1,2) (they are set to 0).\r\n\r\nSince Gazebo 10 I can update the camera intrinsics via `Camera::UpdateCameraIntrinsics`:\r\n```\r\n#!c++\r\n\r\nUpdateCameraIntrinsics(536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0);\r\n```\r\nor compute the projection matrix manually via `Camera::BuildProjectiveMatrix`:\r\n```\r\n#!c++\r\n\r\nBuildProjectiveMatrix(640, 480, 536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0, 0.0001, 1000);\r\n```\r\n\r\nin which case I get:\r\n```\r\n1.67648 0.003125 0.018723 0 0 2.23693 -0.02808 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nas projection matrix.\r\nThis is still not correct since this time P(0,1)=0.003125, which should be 0."}}, "links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2586/changes/50047878.json"}, "html": {"href": "#!/osrf/gazebo/issues/2586#comment-50047878"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2586.json"}}, "type": "issue", "id": 2586, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Wrong camera projection matrix"}, "created_on": "2019-01-20T18:31:20.987104+00:00", "user": {"display_name": "Christian Rauch", "uuid": "{408871b1-9dca-4a44-88df-e8f0dbdba533}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B408871b1-9dca-4a44-88df-e8f0dbdba533%7D"}, "html": {"href": "https://bitbucket.org/%7B408871b1-9dca-4a44-88df-e8f0dbdba533%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a54c27438e4b2d461db222760c23af17d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCR-2.png"}}, "nickname": "christian-rauch", "type": "user", "account_id": "557058:3551aa15-5c14-4b8f-b364-4546b8f30250"}, "message": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "type": "issue_change", "id": 50047878}], "page": 1, "size": 2}