{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2599/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2599.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2599/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2599/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2599/add-method-to-check-if-link-was"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2599/vote"}}, "reporter": {"display_name": "Koen Lekkerkerker", "uuid": "{aa2f84f8-35da-4cb3-899c-fca5ebd1f8bd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Baa2f84f8-35da-4cb3-899c-fca5ebd1f8bd%7D"}, "html": {"href": "https://bitbucket.org/%7Baa2f84f8-35da-4cb3-899c-fca5ebd1f8bd%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a630eadf796152d6d458b51f816719abd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsKL-6.png"}}, "nickname": "koenlek", "type": "user", "account_id": "557058:3fc4f5fa-5302-4a89-9c96-48146165c0bf"}, "title": "Add method to check if link was initialized?", "component": {"name": "physics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122876.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "The Link class has a protected bool \"initialized\", but there is no way to query it (its only used by inherited classes, so it seems). Would it be useful to add a public `bool getInitialized() const` or `bool isInitialized() const` to the class, similar to the `bool GetEnabled() const`?\r\n\r\nMy use case is this:\r\n\r\nI don't want to add the example [actor collision plugin](#!/osrf/gazebo/pull-requests/2875/example-plugin-that-enables-collisions/diff) to all my actors / world files. \r\n\r\nYou don't really need the plugin if you don't need to scale or adjust pose of the collision bodies (which is odd to do in the plugin anyway? it seems like the plugin corrects for a poor specification in the actor model itself, right?). The only thing you need to do is call this **once** per actor:\r\n\r\n```\r\n#!c++\r\nif (model->HasType(gazebo::physics::Base::EntityType::ACTOR) {\r\n    // by calling the actor's canonical link, all children should become initialized as well I think?\r\n    model->GetLink(\"canonical\")->Init();\r\n}\r\n```\r\n\r\nNow I'm checking for objects on every `ConnectWorldUpdateBegin` event callback. So I'm concerned to run the Init every time, as the implementation seems costly (especially considering I have several tens of actors based on the CitySim world).\r\n\r\nI tried to find a way if I can see if the links are already initialized, but there really seems no way. I tried if I could tell using a try/catch, but I haven't found any illegal call that gives me something catchable that will tell me to Init the actor links.\r\n\r\nBy the way, you could also consider making the init call cheaper by having it check if \"initialized == true\" and if yes, return immediately, rather than running init again.  I'm not sure if this might break any use cases in which a re-init is needed? In that case, you could adjust it to be a `void Init(bool force_reinit = true)`, such that no existing code breaks?\r\n\r\nLastly: why are actor links not initialized by default? is it considered too costly? Does it impact the physics engine a lot to have \"collidable\" actors? In that case, wouldn't it be an idea to have a SDF element for the actor that sets \"collidable\" to true or false?\r\n\r\nAnd wouldn't you agree that the scaling of collision bodies is not a proper 'after the fact' fix, it should be correct in the model itself right? Now if you scale collision bodies using the example plugin, Gazebo GUI still renders unscaled collision bodies (if you enabled collision bodies from the View menu).", "markup": "markdown", "html": "<p>The Link class has a protected bool \"initialized\", but there is no way to query it (its only used by inherited classes, so it seems). Would it be useful to add a public <code>bool getInitialized() const</code> or <code>bool isInitialized() const</code> to the class, similar to the <code>bool GetEnabled() const</code>?</p>\n<p>My use case is this:</p>\n<p>I don't want to add the example <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/pull-requests/2875/example-plugin-that-enables-collisions/diff\" rel=\"nofollow\">actor collision plugin</a> to all my actors / world files. </p>\n<p>You don't really need the plugin if you don't need to scale or adjust pose of the collision bodies (which is odd to do in the plugin anyway? it seems like the plugin corrects for a poor specification in the actor model itself, right?). The only thing you need to do is call this <strong>once</strong> per actor:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">HasType</span><span class=\"p\">(</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">::</span><span class=\"n\">EntityType</span><span class=\"o\">::</span><span class=\"n\">ACTOR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// by calling the actor&#39;s canonical link, all children should become initialized as well I think?</span>\n    <span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetLink</span><span class=\"p\">(</span><span class=\"s\">&quot;canonical&quot;</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">Init</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Now I'm checking for objects on every <code>ConnectWorldUpdateBegin</code> event callback. So I'm concerned to run the Init every time, as the implementation seems costly (especially considering I have several tens of actors based on the CitySim world).</p>\n<p>I tried to find a way if I can see if the links are already initialized, but there really seems no way. I tried if I could tell using a try/catch, but I haven't found any illegal call that gives me something catchable that will tell me to Init the actor links.</p>\n<p>By the way, you could also consider making the init call cheaper by having it check if \"initialized == true\" and if yes, return immediately, rather than running init again.  I'm not sure if this might break any use cases in which a re-init is needed? In that case, you could adjust it to be a <code>void Init(bool force_reinit = true)</code>, such that no existing code breaks?</p>\n<p>Lastly: why are actor links not initialized by default? is it considered too costly? Does it impact the physics engine a lot to have \"collidable\" actors? In that case, wouldn't it be an idea to have a SDF element for the actor that sets \"collidable\" to true or false?</p>\n<p>And wouldn't you agree that the scaling of collision bodies is not a proper 'after the fact' fix, it should be correct in the model itself right? Now if you scale collision bodies using the example plugin, Gazebo GUI still renders unscaled collision bodies (if you enabled collision bodies from the View menu).</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "9.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242746.json"}}}, "edited_on": null, "created_on": "2019-02-22T19:54:33.183026+00:00", "milestone": null, "updated_on": "2019-02-22T20:10:53.527038+00:00", "type": "issue", "id": 2599}