{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2216/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2216.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2216/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2216/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2216/inject-sensor-plugin-in-an-existing-sensor"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2216/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "Inject sensor plugin in an existing sensor tag", "component": {"name": "sensors", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122877.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "I have a robot model in Gazebo that can expose mutually exclusive interfaces using two different middlewares (for the sake of explanation, we will call them ROS and YARP). For this reason, I want to have three different SDF models: \r\n\r\n* `robot-raw` that contains just the geometric and inertial specification of the robot, with no middleware specific plugins,\r\n* `robot-yarp` that includes `robot-raw` and adds YARP specific plugins, \r\n* `robot-ros` that includes `robot-raw and adds ROS specific plugins. \r\n\r\nThis scheme works fine with model plugins, as long as they are implemented in a way that they can access resources in the nested models (in this case `robot-raw`). \r\n\r\nThe problem is with sensor plugins: for a sensor defined in `robot-raw`, there is no way I am aware of injecting or attaching a sensor plugin in it from `robot-yarp` or `robot-ros` . \r\n\r\nI do not know if there is an existing way of achieving this, and to be honest I don't have a clear idea either on how this could be implemented.", "markup": "markdown", "html": "<p>I have a robot model in Gazebo that can expose mutually exclusive interfaces using two different middlewares (for the sake of explanation, we will call them ROS and YARP). For this reason, I want to have three different SDF models: </p>\n<ul>\n<li><code>robot-raw</code> that contains just the geometric and inertial specification of the robot, with no middleware specific plugins,</li>\n<li><code>robot-yarp</code> that includes <code>robot-raw</code> and adds YARP specific plugins, </li>\n<li><code>robot-ros</code> that includes `robot-raw and adds ROS specific plugins. </li>\n</ul>\n<p>This scheme works fine with model plugins, as long as they are implemented in a way that they can access resources in the nested models (in this case <code>robot-raw</code>). </p>\n<p>The problem is with sensor plugins: for a sensor defined in <code>robot-raw</code>, there is no way I am aware of injecting or attaching a sensor plugin in it from <code>robot-yarp</code> or <code>robot-ros</code> . </p>\n<p>I do not know if there is an existing way of achieving this, and to be honest I don't have a clear idea either on how this could be implemented.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2017-03-01T07:44:24.326495+00:00", "milestone": null, "updated_on": "2017-04-06T23:28:07.535986+00:00", "type": "issue", "id": 2216}