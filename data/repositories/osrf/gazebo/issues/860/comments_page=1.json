{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860/comments/6245976.json"}, "html": {"href": "#!/osrf/gazebo/issues/860#comment-6245976"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860.json"}}, "type": "issue", "id": 860, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody static model with non-zero pose is not working"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2013-09-27T23:28:14.626410+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 6245976}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860/comments/9379046.json"}, "html": {"href": "#!/osrf/gazebo/issues/860#comment-9379046"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860.json"}}, "type": "issue", "id": 860, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody static model with non-zero pose is not working"}, "content": {"raw": "We can add some expectations to the [StaticPR2 test](#!/osrf/gazebo/src/de20d7921de62b5decbe2900523e75dc2e36da1d/test/integration/pr2.cc?at=default#cl-158) to verify that static objects aren't all at the origin.", "markup": "markdown", "html": "<p>We can add some expectations to the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/de20d7921de62b5decbe2900523e75dc2e36da1d/test/integration/pr2.cc?at=default#cl-158\" rel=\"nofollow\">StaticPR2 test</a> to verify that static objects aren't all at the origin.</p>", "type": "rendered"}, "created_on": "2014-03-29T00:14:15.374911+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 9379046}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860/comments/11440605.json"}, "html": {"href": "#!/osrf/gazebo/issues/860#comment-11440605"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860.json"}}, "type": "issue", "id": 860, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody static model with non-zero pose is not working"}, "content": {"raw": "[related test](#!/osrf/gazebo/src/6bc7cdf7fabc24319ad393a31f1f905db7bf478f/test/integration/imu.cc?at=default#cl-88)", "markup": "markdown", "html": "<p><a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/6bc7cdf7fabc24319ad393a31f1f905db7bf478f/test/integration/imu.cc?at=default#cl-88\" rel=\"nofollow\">related test</a></p>", "type": "rendered"}, "created_on": "2014-07-25T17:01:01.518238+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 11440605}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860/comments/30610847.json"}, "html": {"href": "#!/osrf/gazebo/issues/860#comment-30610847"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860.json"}}, "type": "issue", "id": 860, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody static model with non-zero pose is not working"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:23:37.787201+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30610847}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860/comments/41569570.json"}, "html": {"href": "#!/osrf/gazebo/issues/860#comment-41569570"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860.json"}}, "type": "issue", "id": 860, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody static model with non-zero pose is not working"}, "content": {"raw": "I found an old patch related to this issue, though I haven't tested it recently:\n\n~~~\ndiff -r 746be2f9970e gazebo/physics/simbody/SimbodyJoint.cc\n--- a/gazebo/physics/simbody/SimbodyJoint.cc    Fri Mar 28 15:57:26 2014 -0700\n+++ b/gazebo/physics/simbody/SimbodyJoint.cc    Fri Mar 28 16:00:09 2014 -0700\n@@ -511,7 +511,7 @@\n \n   if (_index < this->GetAngleCount())\n   {\n-    if (this->physicsInitialized)\n+    if (this->physicsInitialized && !this->model->IsStatic())\n     {\n       this->limitForce[_index].setBounds(\n         this->simbodyPhysics->integ->updAdvancedState(),\n@@ -538,7 +538,7 @@\n \n   if (_index < this->GetAngleCount())\n   {\n-    if (this->physicsInitialized)\n+    if (this->physicsInitialized && !this->model->IsStatic())\n     {\n       this->limitForce[_index].setBounds(\n         this->simbodyPhysics->integ->updAdvancedState(),\ndiff -r 746be2f9970e gazebo/physics/simbody/SimbodyPhysics.cc\n--- a/gazebo/physics/simbody/SimbodyPhysics.cc    Fri Mar 28 15:57:26 2014 -0700\n+++ b/gazebo/physics/simbody/SimbodyPhysics.cc    Fri Mar 28 16:00:09 2014 -0700\n@@ -458,6 +458,10 @@\n         boost::static_pointer_cast<Entity>(*lx).get());\n     }\n \n+    // Don't cache force-torques for static models\n+    if ((*mi)->IsStatic())\n+      continue;\n+\n     physics::Joint_V joints = (*mi)->GetJoints();\n     for (physics::Joint_V::iterator jx = joints.begin();\n          jx != joints.end(); ++jx)\ndiff -r 746be2f9970e gazebo/physics/simbody/SimbodyScrewJoint.cc\n--- a/gazebo/physics/simbody/SimbodyScrewJoint.cc    Fri Mar 28 15:57:26 2014 -0700\n+++ b/gazebo/physics/simbody/SimbodyScrewJoint.cc    Fri Mar 28 16:00:09 2014 -0700\n@@ -240,7 +240,8 @@\n double SimbodyScrewJoint::GetThreadPitch()\n {\n   if (this->physicsInitialized &&\n-      this->simbodyPhysics->simbodyPhysicsInitialized)\n+      this->simbodyPhysics->simbodyPhysicsInitialized &&\n+      !this->model->IsStatic())\n   {\n     // downcast mobod to screw mobod first\n     // the way pitch is defined in simbody is -1.0 / gazebo thread pitch\n@@ -311,7 +312,7 @@\n \n   if (_index < this->GetAngleCount())\n   {\n-    if (this->physicsInitialized)\n+    if (this->physicsInitialized && !this->model->IsStatic())\n     {\n       if (_index == 0)\n       {\n@@ -380,7 +381,7 @@\n \n   if (_index < this->GetAngleCount())\n   {\n-    if (this->physicsInitialized)\n+    if (this->physicsInitialized && !this->model->IsStatic())\n     {\n       if (_index == 0)\n       {\ndiff -r 746be2f9970e test/integration/pr2.cc\n--- a/test/integration/pr2.cc    Fri Mar 28 15:57:26 2014 -0700\n+++ b/test/integration/pr2.cc    Fri Mar 28 16:00:09 2014 -0700\n@@ -15,6 +15,9 @@\n  *\n */\n \n+#include <map>\n+#include <string>\n+#include <vector>\n #include <boost/filesystem.hpp>\n #include \"ServerFixture.hh\"\n #include \"gazebo/physics/physics.hh\"\n@@ -24,13 +27,13 @@\n class PR2Test : public ServerFixture,\n                 public testing::WithParamInterface<const char*>\n {\n-  public: void LoadPR2(std::string _physicsEngine);\n-  public: void ScrewJoint(std::string _physicsEngine);\n-  public: void StaticPR2(std::string _physicsEngine);\n+  public: void LoadPR2(const std::string &_physicsEngine);\n+  public: void ScrewJoint(const std::string &_physicsEngine);\n+  public: void StaticPR2(const std::string &_physicsEngine);\n };\n \n ////////////////////////////////////////////////////////////////////////\n-void PR2Test::LoadPR2(std::string _physicsEngine)\n+void PR2Test::LoadPR2(const std::string &_physicsEngine)\n {\n   if (_physicsEngine == \"dart\")\n   {\n@@ -88,12 +91,12 @@\n }\n \n ////////////////////////////////////////////////////////////////////////\n-void PR2Test::ScrewJoint(std::string _physicsEngine)\n+void PR2Test::ScrewJoint(const std::string &_physicsEngine)\n {\n   if (_physicsEngine == \"bullet\")\n   {\n     gzerr << \"Abort test since bullet screw joints don't work yet\\n\";\n-    return;\n+    //return;\n   }\n   if (_physicsEngine == \"dart\")\n   {\n@@ -149,13 +152,13 @@\n // physics forward. This test loads a world with several objects and\n // steps time forward.\n ////////////////////////////////////////////////////////////////////////\n-void PR2Test::StaticPR2(std::string _physicsEngine)\n+void PR2Test::StaticPR2(const std::string &_physicsEngine)\n {\n   if (_physicsEngine == \"simbody\")\n   {\n     gzerr << \"Abort test since simbody does not support screw joints in PR2, \"\n           << \"Please see issue #857.\\n\";\n-    return;\n+    //return;\n   }\n   if (_physicsEngine == \"dart\")\n   {\n@@ -175,6 +178,14 @@\n   ASSERT_TRUE(physics != NULL);\n   EXPECT_EQ(physics->GetType(), _physicsEngine);\n \n+  // Get names and initial poses of models\n+  physics::Model_V models = world->GetModels();\n+  physics::Model_V::iterator iter;\n+  for (iter = models.begin(); iter != models.end(); ++iter)\n+  {\n+    gzdbg << (*iter)->GetScopedName() << std::endl;\n+  }\n+\n   // simulate 1 step\n   world->Step(1);\n   double t = world->GetSimTime().Double();\n~~~\n\nIssueForNewDevelopers", "markup": "markdown", "html": "<p>I found an old patch related to this issue, though I haven't tested it recently:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 746be2f9970e gazebo/physics/simbody/SimbodyJoint.cc</span>\n<span class=\"gd\">--- a/gazebo/physics/simbody/SimbodyJoint.cc    Fri Mar 28 15:57:26 2014 -0700</span>\n<span class=\"gi\">+++ b/gazebo/physics/simbody/SimbodyJoint.cc    Fri Mar 28 16:00:09 2014 -0700</span>\n<span class=\"gu\">@@ -511,7 +511,7 @@</span>\n\n   if (_index &lt; this-&gt;GetAngleCount())\n   {\n<span class=\"gd\">-    if (this-&gt;physicsInitialized)</span>\n<span class=\"gi\">+    if (this-&gt;physicsInitialized &amp;&amp; !this-&gt;model-&gt;IsStatic())</span>\n     {\n       this-&gt;limitForce[_index].setBounds(\n         this-&gt;simbodyPhysics-&gt;integ-&gt;updAdvancedState(),\n<span class=\"gu\">@@ -538,7 +538,7 @@</span>\n\n   if (_index &lt; this-&gt;GetAngleCount())\n   {\n<span class=\"gd\">-    if (this-&gt;physicsInitialized)</span>\n<span class=\"gi\">+    if (this-&gt;physicsInitialized &amp;&amp; !this-&gt;model-&gt;IsStatic())</span>\n     {\n       this-&gt;limitForce[_index].setBounds(\n         this-&gt;simbodyPhysics-&gt;integ-&gt;updAdvancedState(),\n<span class=\"gh\">diff -r 746be2f9970e gazebo/physics/simbody/SimbodyPhysics.cc</span>\n<span class=\"gd\">--- a/gazebo/physics/simbody/SimbodyPhysics.cc    Fri Mar 28 15:57:26 2014 -0700</span>\n<span class=\"gi\">+++ b/gazebo/physics/simbody/SimbodyPhysics.cc    Fri Mar 28 16:00:09 2014 -0700</span>\n<span class=\"gu\">@@ -458,6 +458,10 @@</span>\n         boost::static_pointer_cast&lt;Entity&gt;(*lx).get());\n     }\n\n<span class=\"gi\">+    // Don&#39;t cache force-torques for static models</span>\n<span class=\"gi\">+    if ((*mi)-&gt;IsStatic())</span>\n<span class=\"gi\">+      continue;</span>\n<span class=\"gi\">+</span>\n     physics::Joint_V joints = (*mi)-&gt;GetJoints();\n     for (physics::Joint_V::iterator jx = joints.begin();\n          jx != joints.end(); ++jx)\n<span class=\"gh\">diff -r 746be2f9970e gazebo/physics/simbody/SimbodyScrewJoint.cc</span>\n<span class=\"gd\">--- a/gazebo/physics/simbody/SimbodyScrewJoint.cc    Fri Mar 28 15:57:26 2014 -0700</span>\n<span class=\"gi\">+++ b/gazebo/physics/simbody/SimbodyScrewJoint.cc    Fri Mar 28 16:00:09 2014 -0700</span>\n<span class=\"gu\">@@ -240,7 +240,8 @@</span>\n double SimbodyScrewJoint::GetThreadPitch()\n {\n   if (this-&gt;physicsInitialized &amp;&amp;\n<span class=\"gd\">-      this-&gt;simbodyPhysics-&gt;simbodyPhysicsInitialized)</span>\n<span class=\"gi\">+      this-&gt;simbodyPhysics-&gt;simbodyPhysicsInitialized &amp;&amp;</span>\n<span class=\"gi\">+      !this-&gt;model-&gt;IsStatic())</span>\n   {\n     // downcast mobod to screw mobod first\n     // the way pitch is defined in simbody is -1.0 / gazebo thread pitch\n<span class=\"gu\">@@ -311,7 +312,7 @@</span>\n\n   if (_index &lt; this-&gt;GetAngleCount())\n   {\n<span class=\"gd\">-    if (this-&gt;physicsInitialized)</span>\n<span class=\"gi\">+    if (this-&gt;physicsInitialized &amp;&amp; !this-&gt;model-&gt;IsStatic())</span>\n     {\n       if (_index == 0)\n       {\n<span class=\"gu\">@@ -380,7 +381,7 @@</span>\n\n   if (_index &lt; this-&gt;GetAngleCount())\n   {\n<span class=\"gd\">-    if (this-&gt;physicsInitialized)</span>\n<span class=\"gi\">+    if (this-&gt;physicsInitialized &amp;&amp; !this-&gt;model-&gt;IsStatic())</span>\n     {\n       if (_index == 0)\n       {\n<span class=\"gh\">diff -r 746be2f9970e test/integration/pr2.cc</span>\n<span class=\"gd\">--- a/test/integration/pr2.cc    Fri Mar 28 15:57:26 2014 -0700</span>\n<span class=\"gi\">+++ b/test/integration/pr2.cc    Fri Mar 28 16:00:09 2014 -0700</span>\n<span class=\"gu\">@@ -15,6 +15,9 @@</span>\n  *\n */\n\n<span class=\"gi\">+#include &lt;map&gt;</span>\n<span class=\"gi\">+#include &lt;string&gt;</span>\n<span class=\"gi\">+#include &lt;vector&gt;</span>\n #include &lt;boost/filesystem.hpp&gt;\n #include &quot;ServerFixture.hh&quot;\n #include &quot;gazebo/physics/physics.hh&quot;\n<span class=\"gu\">@@ -24,13 +27,13 @@</span>\n class PR2Test : public ServerFixture,\n                 public testing::WithParamInterface&lt;const char*&gt;\n {\n<span class=\"gd\">-  public: void LoadPR2(std::string _physicsEngine);</span>\n<span class=\"gd\">-  public: void ScrewJoint(std::string _physicsEngine);</span>\n<span class=\"gd\">-  public: void StaticPR2(std::string _physicsEngine);</span>\n<span class=\"gi\">+  public: void LoadPR2(const std::string &amp;_physicsEngine);</span>\n<span class=\"gi\">+  public: void ScrewJoint(const std::string &amp;_physicsEngine);</span>\n<span class=\"gi\">+  public: void StaticPR2(const std::string &amp;_physicsEngine);</span>\n };\n\n ////////////////////////////////////////////////////////////////////////\n<span class=\"gd\">-void PR2Test::LoadPR2(std::string _physicsEngine)</span>\n<span class=\"gi\">+void PR2Test::LoadPR2(const std::string &amp;_physicsEngine)</span>\n {\n   if (_physicsEngine == &quot;dart&quot;)\n   {\n<span class=\"gu\">@@ -88,12 +91,12 @@</span>\n }\n\n ////////////////////////////////////////////////////////////////////////\n<span class=\"gd\">-void PR2Test::ScrewJoint(std::string _physicsEngine)</span>\n<span class=\"gi\">+void PR2Test::ScrewJoint(const std::string &amp;_physicsEngine)</span>\n {\n   if (_physicsEngine == &quot;bullet&quot;)\n   {\n     gzerr &lt;&lt; &quot;Abort test since bullet screw joints don&#39;t work yet\\n&quot;;\n<span class=\"gd\">-    return;</span>\n<span class=\"gi\">+    //return;</span>\n   }\n   if (_physicsEngine == &quot;dart&quot;)\n   {\n<span class=\"gu\">@@ -149,13 +152,13 @@</span>\n // physics forward. This test loads a world with several objects and\n // steps time forward.\n ////////////////////////////////////////////////////////////////////////\n<span class=\"gd\">-void PR2Test::StaticPR2(std::string _physicsEngine)</span>\n<span class=\"gi\">+void PR2Test::StaticPR2(const std::string &amp;_physicsEngine)</span>\n {\n   if (_physicsEngine == &quot;simbody&quot;)\n   {\n     gzerr &lt;&lt; &quot;Abort test since simbody does not support screw joints in PR2, &quot;\n           &lt;&lt; &quot;Please see issue #857.\\n&quot;;\n<span class=\"gd\">-    return;</span>\n<span class=\"gi\">+    //return;</span>\n   }\n   if (_physicsEngine == &quot;dart&quot;)\n   {\n<span class=\"gu\">@@ -175,6 +178,14 @@</span>\n   ASSERT_TRUE(physics != NULL);\n   EXPECT_EQ(physics-&gt;GetType(), _physicsEngine);\n\n<span class=\"gi\">+  // Get names and initial poses of models</span>\n<span class=\"gi\">+  physics::Model_V models = world-&gt;GetModels();</span>\n<span class=\"gi\">+  physics::Model_V::iterator iter;</span>\n<span class=\"gi\">+  for (iter = models.begin(); iter != models.end(); ++iter)</span>\n<span class=\"gi\">+  {</span>\n<span class=\"gi\">+    gzdbg &lt;&lt; (*iter)-&gt;GetScopedName() &lt;&lt; std::endl;</span>\n<span class=\"gi\">+  }</span>\n<span class=\"gi\">+</span>\n   // simulate 1 step\n   world-&gt;Step(1);\n   double t = world-&gt;GetSimTime().Double();\n</pre></div>\n\n\n<p>IssueForNewDevelopers</p>", "type": "rendered"}, "created_on": "2017-12-02T09:44:40.104949+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 41569570}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860/comments/53183145.json"}, "html": {"href": "#!/osrf/gazebo/issues/860#comment-53183145"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860.json"}}, "type": "issue", "id": 860, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody static model with non-zero pose is not working"}, "content": {"raw": "Hi, I am running Gazebo 9.10 and this still happens for me. Are there updates?", "markup": "markdown", "html": "<p>Hi, I am running Gazebo 9.10 and this still happens for me. Are there updates?</p>", "type": "rendered"}, "created_on": "2019-07-29T07:56:40.993640+00:00", "user": {"display_name": "Musa Morena Marcusso Manh\u00e3es", "uuid": "{546b5afc-f278-4511-9fea-7fca2d780650}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B546b5afc-f278-4511-9fea-7fca2d780650%7D"}, "html": {"href": "https://bitbucket.org/%7B546b5afc-f278-4511-9fea-7fca2d780650%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/264c9717ecb657db6b4252d9a2762fb5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-2.png"}}, "nickname": "musamanhaes", "type": "user", "account_id": "557058:858c9bc0-9fc3-47b1-8efe-cef3d7b4f55e"}, "updated_on": null, "type": "issue_comment", "id": 53183145}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860/comments/53193157.json"}, "html": {"href": "#!/osrf/gazebo/issues/860#comment-53193157"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/860.json"}}, "type": "issue", "id": 860, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simbody static model with non-zero pose is not working"}, "content": {"raw": "It looks like no one has worked on it for a while. I would be happy to review a pull request or give advice if someone wants to start working on it.", "markup": "markdown", "html": "<p>It looks like no one has worked on it for a while. I would be happy to review a pull request or give advice if someone wants to start working on it.</p>", "type": "rendered"}, "created_on": "2019-07-29T16:59:52.436893+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 53193157}], "page": 1, "size": 7}