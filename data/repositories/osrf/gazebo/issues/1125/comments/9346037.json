{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1125/comments/9346037.json"}, "html": {"href": "#!/osrf/gazebo/issues/1125#comment-9346037"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1125.json"}}, "type": "issue", "id": 1125, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Visual::GetBoundingBox returns constant values"}, "content": {"raw": "I tried it again, it actually returns normal values this time (the code doesn't recognise the bounding box being a light's visual), but still, if I move the object around, the initial values of the bounding box get returned. \n\nHere is the code:\n```\n#!c++\n\n    this->visual = this->scene->GetVisual(\"cylinder::link::visual\");\n\n\tthis->visual->Update();\n\n\tstd::cout << this->visual->GetName() << std::endl;\n\n\tboundingBox = this->visual->GetBoundingBox();\n\n\tstd::cout << \"MAX: \" << boundingBox.max << std::endl;\n\n    std::cout << \"MIN\" << boundingBox.min << std::endl;\n\n```\nI tried this with a simple cylinder object, I post it's SDF:\n\n```\n#!xml\n<?xml version='1.0'?>\n<sdf version ='1.4'>\n  <model name ='cylinder'>\n    <pose>1 2 2 0 0 0</pose>\n    <link name ='link'>\n      <pose>0 0 2 0 0 0</pose>\n      <collision name ='collision'>\n        <geometry>\n          <cylinder><radius>1.5</radius><length>2</length></cylinder>\n        </geometry>\n      </collision>\n      <visual name='visual'>\n        <geometry>\n          <cylinder><radius>1.5</radius><length>2</length></cylinder>\n        </geometry>\n      </visual>\n    </link>\n  </model>\n</sdf>\n\n```\nIn the plugin's `Init` method, I do the following for getting the Scene:\n\n```\n#!c++\nthis->userCam = gui::get_active_camera();\n\tthis->scene = this->userCam->GetScene();\n\n```\n\n\n", "markup": "markdown", "html": "<p>I tried it again, it actually returns normal values this time (the code doesn't recognise the bounding box being a light's visual), but still, if I move the object around, the initial values of the bounding box get returned. </p>\n<p>Here is the code:</p>\n<div class=\"codehilite language-c++\"><pre><span></span>    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">visual</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">scene</span><span class=\"o\">-&gt;</span><span class=\"n\">GetVisual</span><span class=\"p\">(</span><span class=\"s\">&quot;cylinder::link::visual&quot;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">visual</span><span class=\"o\">-&gt;</span><span class=\"n\">Update</span><span class=\"p\">();</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">visual</span><span class=\"o\">-&gt;</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">boundingBox</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">visual</span><span class=\"o\">-&gt;</span><span class=\"n\">GetBoundingBox</span><span class=\"p\">();</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;MAX: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">boundingBox</span><span class=\"p\">.</span><span class=\"n\">max</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;MIN&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">boundingBox</span><span class=\"p\">.</span><span class=\"n\">min</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>I tried this with a simple cylinder object, I post it's SDF:</p>\n<div class=\"codehilite language-xml\"><pre><span></span><span class=\"cp\">&lt;?xml version=&#39;1.0&#39;?&gt;</span>\n<span class=\"nt\">&lt;sdf</span> <span class=\"na\">version =</span><span class=\"s\">&#39;1.4&#39;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;model</span> <span class=\"na\">name =</span><span class=\"s\">&#39;cylinder&#39;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;pose&gt;</span>1 2 2 0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">name =</span><span class=\"s\">&#39;link&#39;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;pose&gt;</span>0 0 2 0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n      <span class=\"nt\">&lt;collision</span> <span class=\"na\">name =</span><span class=\"s\">&#39;collision&#39;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;geometry&gt;</span>\n          <span class=\"nt\">&lt;cylinder&gt;&lt;radius&gt;</span>1.5<span class=\"nt\">&lt;/radius&gt;&lt;length&gt;</span>2<span class=\"nt\">&lt;/length&gt;&lt;/cylinder&gt;</span>\n        <span class=\"nt\">&lt;/geometry&gt;</span>\n      <span class=\"nt\">&lt;/collision&gt;</span>\n      <span class=\"nt\">&lt;visual</span> <span class=\"na\">name=</span><span class=\"s\">&#39;visual&#39;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;geometry&gt;</span>\n          <span class=\"nt\">&lt;cylinder&gt;&lt;radius&gt;</span>1.5<span class=\"nt\">&lt;/radius&gt;&lt;length&gt;</span>2<span class=\"nt\">&lt;/length&gt;&lt;/cylinder&gt;</span>\n        <span class=\"nt\">&lt;/geometry&gt;</span>\n      <span class=\"nt\">&lt;/visual&gt;</span>\n    <span class=\"nt\">&lt;/link&gt;</span>\n  <span class=\"nt\">&lt;/model&gt;</span>\n<span class=\"nt\">&lt;/sdf&gt;</span>\n</pre></div>\n\n\n<p>In the plugin's <code>Init</code> method, I do the following for getting the Scene:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">userCam</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"o\">::</span><span class=\"n\">get_active_camera</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">userCam</span><span class=\"o\">-&gt;</span><span class=\"n\">GetScene</span><span class=\"p\">();</span>\n</pre></div>", "type": "rendered"}, "created_on": "2014-03-27T09:24:05.357239+00:00", "user": {"display_name": "Furdek Balint - Huba", "uuid": "{f1b6350e-580f-4e4e-b668-ec056781f0c3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf1b6350e-580f-4e4e-b668-ec056781f0c3%7D"}, "html": {"href": "https://bitbucket.org/%7Bf1b6350e-580f-4e4e-b668-ec056781f0c3%7D/"}, "avatar": {"href": "https://bitbucket.org/account/carnoot/avatar/"}}, "nickname": "carnoot", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 9346037}