{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/723/comments/4335543.json"}, "html": {"href": "#!/osrf/gazebo/issues/723#comment-4335543"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/723.json"}}, "type": "issue", "id": 723, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Out of memory"}, "content": {"raw": "Following John's procedure with the pr2 and using `valgrind --tool=massif gzserver`, it appears that the bulk of the memory consumption occurs as a `std::string::append` in `Connection::EnqueueMsg`.\n\nHere's a selection of the output from the massif tool (`ms_print massif.out.XXXXX`), which shows that 72% of 1.3 GB in the heap is caused by `std::string::append`, which was called from `gazebo::transport::Connection::EnqueueMsg`. The only string append I see in that file is at [Connection.cc:291](#!/osrf/gazebo/src/6564bf34fc453f7d5a7aaa06ca18073d0a2d10cf/gazebo/transport/Connection.cc?at=gazebo_1.8#cl-291)\n~~~\n99.19% (1,322,980,240B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.\n->78.74% (1,050,272,191B) 0x745CA87: std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16)\n| ->74.67% (995,997,809B) 0x745D7F9: std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16)\n| | ->74.66% (995,885,263B) 0x745D8DE: std::string::reserve(unsigned long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16)\n| | | ->72.26% (963,773,555B) 0x745DE0B: std::string::append(std::string const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16)\n| | | | ->72.25% (963,657,600B) 0x564D8C7: gazebo::transport::Connection::EnqueueMsg(std::string const&, bool) (basic_string.h:925)\n| | | | | ->72.25% (963,657,600B) 0x5677C13: gazebo::transport::SubscriptionTransport::HandleData(std::string const&) (SubscriptionTransport.cc:55)\n| | | | | | ->72.25% (963,657,600B) 0x56718CB: gazebo::transport::Publication::Publish(boost::shared_ptr<google::protobuf::Message>, boost::function<void ()()> const&) (Publication.cc:304)\n| | | | | |   ->72.25% (963,657,600B) 0x5678108: gazebo::transport::TopicManager::Publish(std::string const&, boost::shared_ptr<google::protobuf::Message>, boost::function<void ()()> const&) (TopicManager.cc:205)\n| | | | | |     ->72.25% (963,657,600B) 0x567676C: gazebo::transport::Publisher::SendMessage() (Publisher.cc:188)\n| | | | | |       ->72.25% (963,657,600B) 0x566CC24: gazebo::transport::Node::ProcessPublishers() (Node.cc:138)\n| | | | | |         ->72.25% (963,657,600B) 0x5678AD0: gazebo::transport::TopicManager::ProcessNodes(bool) (TopicManager.cc:155)\n| | | | | |           ->72.25% (963,657,600B) 0x5662821: gazebo::transport::ConnectionManager::RunUpdate() (ConnectionManager.cc:279)\n| | | | | |             ->72.25% (963,657,600B) 0x5663A20: gazebo::transport::ConnectionManager::Run() (ConnectionManager.cc:310)\n| | | | | |               ->72.25% (963,657,600B) 0x6D48CE7: thread_proxy (in /usr/lib/libboost_thread.so.1.46.1)\n| | | | | |                 ->72.25% (963,657,600B) 0x61D0E98: start_thread (pthread_create.c:308)\n| | | | | |                   ->72.25% (963,657,600B) 0x79C7CBB: clone (clone.S:112)\n~~~", "markup": "markdown", "html": "<p>Following John's procedure with the pr2 and using <code>valgrind --tool=massif gzserver</code>, it appears that the bulk of the memory consumption occurs as a <code>std::string::append</code> in <code>Connection::EnqueueMsg</code>.</p>\n<p>Here's a selection of the output from the massif tool (<code>ms_print massif.out.XXXXX</code>), which shows that 72% of 1.3 GB in the heap is caused by <code>std::string::append</code>, which was called from <code>gazebo::transport::Connection::EnqueueMsg</code>. The only string append I see in that file is at <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/6564bf34fc453f7d5a7aaa06ca18073d0a2d10cf/gazebo/transport/Connection.cc?at=gazebo_1.8#cl-291\" rel=\"nofollow\">Connection.cc:291</a></p>\n<div class=\"codehilite\"><pre><span></span>99.19% (1,322,980,240B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.\n-&gt;78.74% (1,050,272,191B) 0x745CA87: std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16)\n| -&gt;74.67% (995,997,809B) 0x745D7F9: std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16)\n| | -&gt;74.66% (995,885,263B) 0x745D8DE: std::string::reserve(unsigned long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16)\n| | | -&gt;72.26% (963,773,555B) 0x745DE0B: std::string::append(std::string const&amp;) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.16)\n| | | | -&gt;72.25% (963,657,600B) 0x564D8C7: gazebo::transport::Connection::EnqueueMsg(std::string const&amp;, bool) (basic_string.h:925)\n| | | | | -&gt;72.25% (963,657,600B) 0x5677C13: gazebo::transport::SubscriptionTransport::HandleData(std::string const&amp;) (SubscriptionTransport.cc:55)\n| | | | | | -&gt;72.25% (963,657,600B) 0x56718CB: gazebo::transport::Publication::Publish(boost::shared_ptr&lt;google::protobuf::Message&gt;, boost::function&lt;void ()()&gt; const&amp;) (Publication.cc:304)\n| | | | | |   -&gt;72.25% (963,657,600B) 0x5678108: gazebo::transport::TopicManager::Publish(std::string const&amp;, boost::shared_ptr&lt;google::protobuf::Message&gt;, boost::function&lt;void ()()&gt; const&amp;) (TopicManager.cc:205)\n| | | | | |     -&gt;72.25% (963,657,600B) 0x567676C: gazebo::transport::Publisher::SendMessage() (Publisher.cc:188)\n| | | | | |       -&gt;72.25% (963,657,600B) 0x566CC24: gazebo::transport::Node::ProcessPublishers() (Node.cc:138)\n| | | | | |         -&gt;72.25% (963,657,600B) 0x5678AD0: gazebo::transport::TopicManager::ProcessNodes(bool) (TopicManager.cc:155)\n| | | | | |           -&gt;72.25% (963,657,600B) 0x5662821: gazebo::transport::ConnectionManager::RunUpdate() (ConnectionManager.cc:279)\n| | | | | |             -&gt;72.25% (963,657,600B) 0x5663A20: gazebo::transport::ConnectionManager::Run() (ConnectionManager.cc:310)\n| | | | | |               -&gt;72.25% (963,657,600B) 0x6D48CE7: thread_proxy (in /usr/lib/libboost_thread.so.1.46.1)\n| | | | | |                 -&gt;72.25% (963,657,600B) 0x61D0E98: start_thread (pthread_create.c:308)\n| | | | | |                   -&gt;72.25% (963,657,600B) 0x79C7CBB: clone (clone.S:112)\n</pre></div>", "type": "rendered"}, "created_on": "2013-06-04T19:47:15.182073+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 4335543}