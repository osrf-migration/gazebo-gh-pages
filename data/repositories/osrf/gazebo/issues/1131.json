{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1131/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1131.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1131/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1131/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1131/expand-documentation-explaining-design-and"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1131/vote"}}, "reporter": {"display_name": "Andrew Hundt", "uuid": "{1e508588-c010-4693-87e5-4923df91390d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B1e508588-c010-4693-87e5-4923df91390d%7D"}, "html": {"href": "https://bitbucket.org/%7B1e508588-c010-4693-87e5-4923df91390d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fb975596131ce08ea7e7472f09b8209dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAH-1.png"}}, "nickname": "ahundt", "type": "user", "account_id": "557058:f565cbf4-e097-4b3f-b4db-4889856f7417"}, "title": "Expand Documentation Explaining Design and Usage of Gazebo", "component": {"name": "documentation", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/141921.json"}}}, "votes": 1, "watches": 6, "content": {"raw": "An improvement that would be extremely helpful and smooth out the process for new users would be more documentation of the overall design concepts and usage of gazebo. The overall design of gazebo is quite good, which means a lot can be accomplished by improving how that design is communicated to users.\r\n\r\n**Edit:** I've found the [User Guide](http://gazebosim.org/user_guide/index.html), but it is out of date (1.9) and should be linked to in the \"Get your feet wet\" section of the [Getting Started](http://gazebosim.org/#getstarted) section of the gazebosim.org front page.\r\n\r\nFor example, while there was a genuine bug in issue #1127, one source of confusion was figuring out how visual strings are modified. \r\n\r\n**Specific points of confusion:**\r\n\r\n1. How to access SDF elements in C++\r\n      * I had to look through the code to discover that simply using link names would fail\r\n2. Interaction of model class names, registered names, shared library filenames and what the constraints of those elements are.\r\n\r\n**What could be added:**\r\n\r\n1. Dictionary - explain specific terms, and in what contexts they can be used\r\n      * **visual** example:\r\n           * Applies to modules: SDF, Rendering, Physics\r\n           * A visual element can be identified by either a unique string and/or integer identifier\r\n           * The name string of a visual element in the SDF file is not the same name as the visual identifer string in C++ code. Instead, the C++ visual identifier string is composed from the scope of the visual identifier and its parents element. For example if you have a model \"modelname\" that contains a link \"linkname\" which contains a visual \"visualname\", the model unique identifier is \"modelname\" the link unique identifier is \"modelname::linkname\", and the visual unique identifier is \"modelname::linkname::visualname\".\r\n           * The visual element interacts with the rendering scene and can be used to extract information about the scene and ground truth data about how sensors are interacting with the simulation.\r\n            * Other related functions and components you may want to see include: class1 class2, function1, ...\r\n     * Additional terms that need to be identified and have their interaction with other components explained:\r\n         * Scene, Model, link, plugin, script, event, collision, actor, model, factory, node (including both transport and scene graph contexts),  etc...\r\n\r\n2. Explanation of API functions and cross referencing could make it easier to understand and use components. Some of the API documentation is a restatement of the function names at the moment.\r\n      * Taking the \"visual\" example above, I did search the wiki for \"visual\" and was brought to this page: http://gazebosim.org/wiki/Interfaces . This would likely be a good spot to put some additional details explaining what these elements are. \r\n      * Here is an example demonstrating how the function description is a restatement of the function name itself: http://gazebosim.org/api/dev/classgazebo_1_1rendering_1_1Scene.html#a8dc996b50f1ed9585f845738b94fdfcc\r\n         * Ideally the keyword **visual** could be turned into a link or use one of the inline doxygen reference definitions to the definition of what exactly constitutes a visual string. This would mean less writing but still allow people to find the information quickly. Also, a short description of why you would want to use it would be helpful. \r\n      * A good example library documentation is the boost.geometry library.\r\n         * Overall library: boost.org/libs/geometry\r\n         * Example function: http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/geometry/reference/access/get/get_1.html\r\n\r\n3. Clear and easy ways to debug and diagnose and resolve problems with loading plugins, including printing the set of paths that were searched and warning of duplicate library names on the path.\r\n4. Error messages explaining or guessing what may be wrong with an SDF file, plus instructions on how to fix it, or where to find said instructions.", "markup": "markdown", "html": "<p>An improvement that would be extremely helpful and smooth out the process for new users would be more documentation of the overall design concepts and usage of gazebo. The overall design of gazebo is quite good, which means a lot can be accomplished by improving how that design is communicated to users.</p>\n<p><strong>Edit:</strong> I've found the <a data-is-external-link=\"true\" href=\"http://gazebosim.org/user_guide/index.html\" rel=\"nofollow\">User Guide</a>, but it is out of date (1.9) and should be linked to in the \"Get your feet wet\" section of the <a data-is-external-link=\"true\" href=\"http://gazebosim.org/#getstarted\" rel=\"nofollow\">Getting Started</a> section of the gazebosim.org front page.</p>\n<p>For example, while there was a genuine bug in issue <a href=\"#!/osrf/gazebo/issues/1127/gazebo-rendering-camera-isvisible-is\" rel=\"nofollow\" title=\"gazebo::rendering::Camera::IsVisible()  is Broken\" class=\"ap-connect-link\"><s>#1127</s></a>, one source of confusion was figuring out how visual strings are modified. </p>\n<p><strong>Specific points of confusion:</strong></p>\n<ol>\n<li>How to access SDF elements in C++<ul>\n<li>I had to look through the code to discover that simply using link names would fail</li>\n</ul>\n</li>\n<li>Interaction of model class names, registered names, shared library filenames and what the constraints of those elements are.</li>\n</ol>\n<p><strong>What could be added:</strong></p>\n<ol>\n<li>\n<p>Dictionary - explain specific terms, and in what contexts they can be used</p>\n<ul>\n<li><strong>visual</strong> example:<ul>\n<li>Applies to modules: SDF, Rendering, Physics</li>\n<li>A visual element can be identified by either a unique string and/or integer identifier</li>\n<li>The name string of a visual element in the SDF file is not the same name as the visual identifer string in C++ code. Instead, the C++ visual identifier string is composed from the scope of the visual identifier and its parents element. For example if you have a model \"modelname\" that contains a link \"linkname\" which contains a visual \"visualname\", the model unique identifier is \"modelname\" the link unique identifier is \"modelname::linkname\", and the visual unique identifier is \"modelname::linkname::visualname\".</li>\n<li>The visual element interacts with the rendering scene and can be used to extract information about the scene and ground truth data about how sensors are interacting with the simulation.<ul>\n<li>Other related functions and components you may want to see include: class1 class2, function1, ...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Additional terms that need to be identified and have their interaction with other components explained:<ul>\n<li>Scene, Model, link, plugin, script, event, collision, actor, model, factory, node (including both transport and scene graph contexts),  etc...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Explanation of API functions and cross referencing could make it easier to understand and use components. Some of the API documentation is a restatement of the function names at the moment.</p>\n<ul>\n<li>Taking the \"visual\" example above, I did search the wiki for \"visual\" and was brought to this page: <a href=\"http://gazebosim.org/wiki/Interfaces\" rel=\"nofollow\" class=\"ap-connect-link\">http://gazebosim.org/wiki/Interfaces</a> . This would likely be a good spot to put some additional details explaining what these elements are. </li>\n<li>Here is an example demonstrating how the function description is a restatement of the function name itself: <a href=\"http://gazebosim.org/api/dev/classgazebo_1_1rendering_1_1Scene.html#a8dc996b50f1ed9585f845738b94fdfcc\" rel=\"nofollow\" class=\"ap-connect-link\">http://gazebosim.org/api/dev/classgazebo_1_1rendering_1_1Scene.html#a8dc996b50f1ed9585f845738b94fdfcc</a><ul>\n<li>Ideally the keyword <strong>visual</strong> could be turned into a link or use one of the inline doxygen reference definitions to the definition of what exactly constitutes a visual string. This would mean less writing but still allow people to find the information quickly. Also, a short description of why you would want to use it would be helpful. </li>\n</ul>\n</li>\n<li>A good example library documentation is the boost.geometry library.<ul>\n<li>Overall library: <a href=\"http://boost.org/libs/geometry\" rel=\"nofollow\" class=\"ap-connect-link\">boost.org/libs/geometry</a></li>\n<li>Example function: <a href=\"http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/geometry/reference/access/get/get_1.html\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/geometry/reference/access/get/get_1.html</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Clear and easy ways to debug and diagnose and resolve problems with loading plugins, including printing the set of paths that were searched and warning of duplicate library names on the path.</p>\n</li>\n<li>Error messages explaining or guessing what may be wrong with an SDF file, plus instructions on how to fix it, or where to find said instructions.</li>\n</ol>", "type": "rendered"}, "assignee": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2014-03-26T19:27:59.102042+00:00", "milestone": null, "updated_on": "2016-09-14T19:24:16.467822+00:00", "type": "issue", "id": 1131}