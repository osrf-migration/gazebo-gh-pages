{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/821/comments/31445798.json"}, "html": {"href": "#!/osrf/gazebo/issues/821#comment-31445798"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/821.json"}}, "type": "issue", "id": 821, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Apparent transport race condition on startup"}, "content": {"raw": "I've often seen these bugs, but it's always been hard to reproduce them. I have just found a way to reproduce a particular instance of this bug that is much better than I have seen before. It doesn't happen everytime, but as I said, it's the best I've seen so far.\n\nThe failures seem to occur when making repeated requests from separate processes (I noticed this while debugging some failures of `UNIT_gz_TEST`). Prepare three separate terminal windows:\n\n1. `gzserver --verbose test/worlds/simple_arm.world`\n\n2. ` gz model -i -m simple_arm`\n\n3. ` gz model -i -m simple_arm`\n\nEach `gz` instance creates an `entity_info` request and waits for the response. Repeating those calls in a loop eventually leads to some familiar console errors from `gzserver` or hanging of the `gz` processes:\n\n~~~\nwhile gz model -i -m simple_arm | wc -l; do date; done\n~~~\n\n~~~\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:308] OnReadData got empty data!!!\n~~~\n\nCan someone else try this?", "markup": "markdown", "html": "<p>I've often seen these bugs, but it's always been hard to reproduce them. I have just found a way to reproduce a particular instance of this bug that is much better than I have seen before. It doesn't happen everytime, but as I said, it's the best I've seen so far.</p>\n<p>The failures seem to occur when making repeated requests from separate processes (I noticed this while debugging some failures of <code>UNIT_gz_TEST</code>). Prepare three separate terminal windows:</p>\n<ol>\n<li>\n<p><code>gzserver --verbose test/worlds/simple_arm.world</code></p>\n</li>\n<li>\n<p><code>gz model -i -m simple_arm</code></p>\n</li>\n<li>\n<p><code>gz model -i -m simple_arm</code></p>\n</li>\n</ol>\n<p>Each <code>gz</code> instance creates an <code>entity_info</code> request and waits for the response. Repeating those calls in a loop eventually leads to some familiar console errors from <code>gzserver</code> or hanging of the <code>gz</code> processes:</p>\n<div class=\"codehilite\"><pre><span></span>while gz model -i -m simple_arm | wc -l; do date; done\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:267] Header is empty\n[Err] [Connection.hh:308] OnReadData got empty data!!!\n</pre></div>\n\n\n<p>Can someone else try this?</p>", "type": "rendered"}, "created_on": "2016-10-17T23:20:04.200242+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 31445798}