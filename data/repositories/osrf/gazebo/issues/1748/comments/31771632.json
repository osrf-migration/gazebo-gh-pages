{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1748/comments/31771632.json"}, "html": {"href": "#!/osrf/gazebo/issues/1748#comment-31771632"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1748.json"}}, "type": "issue", "id": 1748, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Significant sensor data timestamp accuracy regression from Gazebo2 to Gazebo4"}, "content": {"raw": "@ianchen @nkoenig Here's the promised minimal test setup: https://github.com/skohlbr/gazebo_camera_timestamp_issue\n\nIt's a self contained ROS package that allows reproducing the issue easily as described in the README. Porting it to a pure Gazebo implementation/a failing test case that can be added to the Gazebo suite of tests should be fairly doable. The check would be to  look for point cloud data of the sensor that is closer than 1.2m. If such data is found, compute the closest point to the camera, transform into the model frame and check that it's y coordinate is close to 0. If it is, everyting is well. If it's not, the issue persists.\n\nThese two videos demonstrate this:\nGazebo2: The (sensor data) pole is exactly on the x axis, as it should be:\n\n[gazebo2](https://www.youtube.com/watch?v=P1Iyd-b9EsU)\n\n\nGazebo7: The pole is offset from the x axis due to the (timestamp?) issue:\n\n[gazebo7](https://www.youtube.com/watch?v=ECSa2iOGzGE)", "markup": "markdown", "html": "<p>@ianchen @nkoenig Here's the promised minimal test setup: <a href=\"https://github.com/skohlbr/gazebo_camera_timestamp_issue\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/skohlbr/gazebo_camera_timestamp_issue</a></p>\n<p>It's a self contained ROS package that allows reproducing the issue easily as described in the README. Porting it to a pure Gazebo implementation/a failing test case that can be added to the Gazebo suite of tests should be fairly doable. The check would be to  look for point cloud data of the sensor that is closer than 1.2m. If such data is found, compute the closest point to the camera, transform into the model frame and check that it's y coordinate is close to 0. If it is, everyting is well. If it's not, the issue persists.</p>\n<p>These two videos demonstrate this:\nGazebo2: The (sensor data) pole is exactly on the x axis, as it should be:</p>\n<p><a data-is-external-link=\"true\" href=\"https://www.youtube.com/watch?v=P1Iyd-b9EsU\" rel=\"nofollow\">gazebo2</a></p>\n<p>Gazebo7: The pole is offset from the x axis due to the (timestamp?) issue:</p>\n<p><a data-is-external-link=\"true\" href=\"https://www.youtube.com/watch?v=ECSa2iOGzGE\" rel=\"nofollow\">gazebo7</a></p>", "type": "rendered"}, "created_on": "2016-10-29T11:45:02.935805+00:00", "user": {"display_name": "Stefan Kohlbrecher", "uuid": "{db06b03e-7b31-4483-9018-534df5bd723f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb06b03e-7b31-4483-9018-534df5bd723f%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb06b03e-7b31-4483-9018-534df5bd723f%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/414f1c364e6406dde31a6ef70fbd3d21d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSK-6.png"}}, "nickname": "Stefan_Kohlbrecher", "type": "user", "account_id": "557058:e39b6a62-9eb0-45ca-b27e-4f6445009d3f"}, "updated_on": null, "type": "issue_comment", "id": 31771632}