{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2586/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2586.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2586/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2586/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2586/wrong-camera-projection-matrix"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2586/vote"}}, "reporter": {"display_name": "Christian Rauch", "uuid": "{408871b1-9dca-4a44-88df-e8f0dbdba533}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B408871b1-9dca-4a44-88df-e8f0dbdba533%7D"}, "html": {"href": "https://bitbucket.org/%7B408871b1-9dca-4a44-88df-e8f0dbdba533%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a54c27438e4b2d461db222760c23af17d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCR-2.png"}}, "nickname": "christian-rauch", "type": "user", "account_id": "557058:3551aa15-5c14-4b8f-b364-4546b8f30250"}, "title": "Wrong camera projection matrix", "component": {"name": "rendering", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122881.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "# Sensor definition #\r\nI have a camera sensor with intrinsic parameters:\r\n```\r\n#!XML\r\n\r\n        <camera>\r\n          <!-- FOV = 2 * arctan(w/(2*f_x)), with f_x = 536.473145060694 -->\r\n          <horizontal_fov>1.0756668597435934</horizontal_fov>\r\n          <image>\r\n            <format>R8G8B8</format>\r\n            <width>640</width>\r\n            <height>480</height>\r\n          </image>\r\n          <clip>\r\n            <near>0.0001</near>\r\n            <far>1000</far>\r\n          </clip>\r\n          <distortion>\r\n            <k1>0.03310900261913022</k1>\r\n            <k2>-0.1081296635444241</k2>\r\n            <p1>0.0003885055533487762</p1>\r\n            <p2>-0.001167055731123937</p2>\r\n            <k3>0</k3>\r\n            <!-- relative centre with c = (314.0086519801989, 246.7391576005324) -->\r\n            <center>0.49063851871906083 0.5140399116677759</center>\r\n          </distortion>\r\n        </camera>\r\n```\r\n\r\n# Expected projection matrix #\r\nAccording to http://www.songho.ca/opengl/gl_projectionmatrix.html#perspective, the projection matrix is:\r\n![opengl_proj.png](data/bitbucket.org/repo/jgXqbo/images/3911210773-opengl_proj.png)\r\nFor the given camera parameters this should be something around:\r\n```\r\nP: \r\n   1.67648          0  -0.018723          0\r\n         0   -2.23693 -0.0280798          0\r\n         0          0          1    -0.0002\r\n         0          0          1          0\r\n```\r\nThe signs are different because this is in a RDF (x - Right, y - Down, z - Front) coordinate system.\r\n\r\n# Projection matrix used in camera sensor #\r\nBut the projection matrix (`Camera::ProjectionMatrix()`) gives (row-major):\r\n```\r\n1.67647 0 0 0 0 2.2353 0 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nwhich is missing values for P(0,2) and P(1,2) (they are set to 0).\r\n\r\nSince Gazebo 10 I can update the camera intrinsics via `Camera::UpdateCameraIntrinsics`:\r\n```\r\n#!c++\r\n\r\nUpdateCameraIntrinsics(536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0);\r\n```\r\nor compute the projection matrix manually via `Camera::BuildProjectiveMatrix`:\r\n```\r\n#!c++\r\n\r\nBuildProjectiveMatrix(640, 480, 536.473145060694, 536.8639285109052, 314.0086519801989, 246.7391576005324, 1.0, 0.0001, 1000);\r\n```\r\n\r\nin which case I get:\r\n```\r\n1.67648 0.003125 0.018723 0 0 2.23693 -0.02808 0 0 0 -1 -0.0002 0 0 -1 0\r\n```\r\nas projection matrix.\r\nThis is still not correct since this time P(0,1)=0.003125, which should be 0.", "markup": "markdown", "html": "<h1 id=\"markdown-header-sensor-definition\">Sensor definition</h1>\n<p>I have a camera sensor with intrinsic parameters:</p>\n<div class=\"codehilite language-xml\"><pre><span></span>        <span class=\"nt\">&lt;camera&gt;</span>\n          <span class=\"c\">&lt;!-- FOV = 2 * arctan(w/(2*f_x)), with f_x = 536.473145060694 --&gt;</span>\n          <span class=\"nt\">&lt;horizontal_fov&gt;</span>1.0756668597435934<span class=\"nt\">&lt;/horizontal_fov&gt;</span>\n          <span class=\"nt\">&lt;image&gt;</span>\n            <span class=\"nt\">&lt;format&gt;</span>R8G8B8<span class=\"nt\">&lt;/format&gt;</span>\n            <span class=\"nt\">&lt;width&gt;</span>640<span class=\"nt\">&lt;/width&gt;</span>\n            <span class=\"nt\">&lt;height&gt;</span>480<span class=\"nt\">&lt;/height&gt;</span>\n          <span class=\"nt\">&lt;/image&gt;</span>\n          <span class=\"nt\">&lt;clip&gt;</span>\n            <span class=\"nt\">&lt;near&gt;</span>0.0001<span class=\"nt\">&lt;/near&gt;</span>\n            <span class=\"nt\">&lt;far&gt;</span>1000<span class=\"nt\">&lt;/far&gt;</span>\n          <span class=\"nt\">&lt;/clip&gt;</span>\n          <span class=\"nt\">&lt;distortion&gt;</span>\n            <span class=\"nt\">&lt;k1&gt;</span>0.03310900261913022<span class=\"nt\">&lt;/k1&gt;</span>\n            <span class=\"nt\">&lt;k2&gt;</span>-0.1081296635444241<span class=\"nt\">&lt;/k2&gt;</span>\n            <span class=\"nt\">&lt;p1&gt;</span>0.0003885055533487762<span class=\"nt\">&lt;/p1&gt;</span>\n            <span class=\"nt\">&lt;p2&gt;</span>-0.001167055731123937<span class=\"nt\">&lt;/p2&gt;</span>\n            <span class=\"nt\">&lt;k3&gt;</span>0<span class=\"nt\">&lt;/k3&gt;</span>\n            <span class=\"c\">&lt;!-- relative centre with c = (314.0086519801989, 246.7391576005324) --&gt;</span>\n            <span class=\"nt\">&lt;center&gt;</span>0.49063851871906083 0.5140399116677759<span class=\"nt\">&lt;/center&gt;</span>\n          <span class=\"nt\">&lt;/distortion&gt;</span>\n        <span class=\"nt\">&lt;/camera&gt;</span>\n</pre></div>\n\n\n<h1 id=\"markdown-header-expected-projection-matrix\">Expected projection matrix</h1>\n<p>According to <a href=\"http://www.songho.ca/opengl/gl_projectionmatrix.html#perspective\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.songho.ca/opengl/gl_projectionmatrix.html#perspective</a>, the projection matrix is:\n<img alt=\"opengl_proj.png\" src=\"data/bitbucket.org/repo/jgXqbo/images/3911210773-opengl_proj.png\" />\nFor the given camera parameters this should be something around:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">P</span><span class=\"o\">:</span> \n   <span class=\"mf\">1.67648</span>          <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">0.018723</span>          <span class=\"mi\">0</span>\n         <span class=\"mi\">0</span>   <span class=\"o\">-</span><span class=\"mf\">2.23693</span> <span class=\"o\">-</span><span class=\"mf\">0.0280798</span>          <span class=\"mi\">0</span>\n         <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">1</span>    <span class=\"o\">-</span><span class=\"mf\">0.0002</span>\n         <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">1</span>          <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>The signs are different because this is in a RDF (x - Right, y - Down, z - Front) coordinate system.</p>\n<h1 id=\"markdown-header-projection-matrix-used-in-camera-sensor\">Projection matrix used in camera sensor</h1>\n<p>But the projection matrix (<code>Camera::ProjectionMatrix()</code>) gives (row-major):</p>\n<div class=\"codehilite\"><pre><span></span>1.67647 0 0 0 0 2.2353 0 0 0 0 -1 -0.0002 0 0 -1 0\n</pre></div>\n\n\n<p>which is missing values for P(0,2) and P(1,2) (they are set to 0).</p>\n<p>Since Gazebo 10 I can update the camera intrinsics via <code>Camera::UpdateCameraIntrinsics</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">UpdateCameraIntrinsics</span><span class=\"p\">(</span><span class=\"mf\">536.473145060694</span><span class=\"p\">,</span> <span class=\"mf\">536.8639285109052</span><span class=\"p\">,</span> <span class=\"mf\">314.0086519801989</span><span class=\"p\">,</span> <span class=\"mf\">246.7391576005324</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>or compute the projection matrix manually via <code>Camera::BuildProjectiveMatrix</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">BuildProjectiveMatrix</span><span class=\"p\">(</span><span class=\"mi\">640</span><span class=\"p\">,</span> <span class=\"mi\">480</span><span class=\"p\">,</span> <span class=\"mf\">536.473145060694</span><span class=\"p\">,</span> <span class=\"mf\">536.8639285109052</span><span class=\"p\">,</span> <span class=\"mf\">314.0086519801989</span><span class=\"p\">,</span> <span class=\"mf\">246.7391576005324</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0001</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>in which case I get:</p>\n<div class=\"codehilite\"><pre><span></span>1.67648 0.003125 0.018723 0 0 2.23693 -0.02808 0 0 0 -1 -0.0002 0 0 -1 0\n</pre></div>\n\n\n<p>as projection matrix.\nThis is still not correct since this time P(0,1)=0.003125, which should be 0.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "9.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242746.json"}}}, "edited_on": null, "created_on": "2019-01-20T17:11:15.817814+00:00", "milestone": null, "updated_on": "2019-01-20T20:04:59.622542+00:00", "type": "issue", "id": 2586}