{"changes": {"content": {"new": "One of Gazebo's primary limitations its inflexible manner of dealing with simulation time.  In its current implementation, Gazebo relies on the physics engine to drive time, which has a number of issues:\r\n\r\n1. **Sensors are not able to coordinate with the physics engine to render at the desired rate.** For example, a user may want a camera to render at 60 fps.  However, the hardware may only enable an average render rate of 20 fps.  Thus, in order to prevent frame loss, the user must slow down the physics simulation to a fixed rate which reflects the highest possible render time per frame much lower than 20 fps.  A pull request was made a while ago to fix this issue:\r\n#!/osrf/gazebo/pull-requests/2502/make-sure-cameras-fps-is-strictly-applied/diff\r\n\r\n2. **Simulations cannot run as fast as possible without coordination issues.** Faster-than-real-time simulation is a desired feature for automated testing, regression testing, and reinforcement learning.  In order to properly enable faster-than-real-time, the physics engine and sensor manager must coordinate so that event and render timings are accurate, which goes back to issue 1.  In addition, the simulation must allow coordinating time with an external entity, which represents simulation components outside of Gazebo (ex. ROS nodes in a simulation should be able block simulation time to enforce their update rates).  If Gazebo's time cannot be externally driven, then a faster-than-real-time simulation may create a chain of events with temporally incorrect causality.  For example, the rate of processing of sensor input in the simulation may not reflect the real world.\r\n\r\n3. **Gazebo may not be able to interact with external simulation components.**  Users may want to add additional simulation components outside of Gazebo.  However, there is currently no way to coordinate time with external components.\r\n\r\n\r\nI was hoping to be able to work on adding time management features to Gazebo, which may involve the addition of new fundamental classes and an overhaul of how Gazebo is set up and run.  Concretely, these features are:\r\n1. Adding modes of driving time, including:\r\n  a. A mode that reflects the current way time is run (by the physics engine)\r\n  b. A mode that enables faster-than-real-time and time coordination between the physics engine, sensor manager and external entity\r\n2. An external api of some kind that allows the external entity to coordinate with Gazebo's time", "old": "One of Gazebo's primary limitations its inflexible manner of dealing with simulation time.  In its current implementation, Gazebo relies on the physics engine to drive time, which has a number of issues:\r\n\r\n1. **Sensors are not able to coordinate with the physics engine to render at the desired rate.** For example, a user may want a camera to render at 60 fps.  However, the hardware may only enable an average render rate of 20 fps.  Thus, in order to prevent frame loss, the user must slow down the physics simulation to a fixed rate which reflects the highest possible render time per frame much lower than 20 fps.  A pull request was made a while ago to fix this issue:\r\n#!/osrf/gazebo/pull-requests/2502/make-sure-cameras-fps-is-strictly-applied/diff\r\n\r\n2. **Simulations cannot run as fast as possible without coordination issues.** Faster-than-real-time simulation is a desired feature for automated testing, regression testing, and reinforcement learning.  In order to properly enable faster-than-real-time, the physics engine and sensor manager must coordinate so that event and render timings are accurate, which goes back to issue 1.  In addition, the simulation must allow coordinating time with an external entity, which represents simulation components outside of Gazebo (ex. ROS nodes in a simulation should be able block simulation time to enforce their update rates).  If only Gazebo controls time, then a faster-than-real-time simulation may create a chain of events with temporally incorrect causality between Gazebo and external components.\r\n\r\n3. **Gazebo may not be able to interact with external simulation components.**  Users may want to add additional simulation components outside of Gazebo.  However, there is currently no way to coordinate time with external components.\r\n\r\n\r\nI was hoping to be able to work on adding time management features to Gazebo, which may involve the addition of new fundamental classes and an overhaul of how Gazebo is set up and run.  Concretely, these features are:\r\n1. Adding modes of driving time, including:\r\n  a. A mode that reflects the current way time is run (by the physics engine)\r\n  b. A mode that enables faster-than-real-time and time coordination between the physics engine, sensor manager and external entity\r\n2. An external api of some kind that allows the external entity to coordinate with Gazebo's time"}}, "links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2595/changes/50588875.json"}, "html": {"href": "#!/osrf/gazebo/issues/2595#comment-50588875"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2595.json"}}, "type": "issue", "id": 2595, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simulation Time Management"}, "created_on": "2019-02-13T22:37:48.563194+00:00", "user": {"display_name": "Christopher Hong", "uuid": "{3420e4ee-b55f-4a6f-b5d3-8a0dc777edcd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3420e4ee-b55f-4a6f-b5d3-8a0dc777edcd%7D"}, "html": {"href": "https://bitbucket.org/%7B3420e4ee-b55f-4a6f-b5d3-8a0dc777edcd%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/e932b32a0163779189541536d5652090d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCH-5.png"}}, "nickname": "Christopher Hong", "type": "user", "account_id": "5c647321663e7153801985b6"}, "message": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "type": "issue_change", "id": 50588875}