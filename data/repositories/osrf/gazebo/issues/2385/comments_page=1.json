{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385/comments/41882870.json"}, "html": {"href": "#!/osrf/gazebo/issues/2385#comment-41882870"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385.json"}}, "type": "issue", "id": 2385, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Step by step simulation c++ with gazebo"}, "content": {"raw": "I think you are looking for this version of `World::Step()`\n\n```\n      /// \\brief Step the world forward in time.\n      /// \\param[in] _steps The number of steps the World should take.\n      public: void Step(const unsigned int _steps);\n```\n\n#!/osrf/gazebo/src/7da89efd6c8f5d6fb9e0989684c893736e004988/gazebo/physics/World.hh?at=gazebo8&fileviewer=file-view-default#World.hh-449\n\nThe integration tests have examples of using it.\n\n#!/osrf/gazebo/src/7da89efd6c8f5d6fb9e0989684c893736e004988/test/integration/plugin.cc?at=gazebo8&fileviewer=file-view-default#plugin.cc-107\n\nI will close this issue since I think that answers the question. Feel free to reopen if there is more you would like to discuss.", "markup": "markdown", "html": "<p>I think you are looking for this version of <code>World::Step()</code></p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">brief</span> <span class=\"nt\">Step</span> <span class=\"nt\">the</span> <span class=\"nt\">world</span> <span class=\"nt\">forward</span> <span class=\"nt\">in</span> <span class=\"nt\">time</span><span class=\"o\">.</span>\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">param</span><span class=\"cp\">[</span><span class=\"k\">in</span><span class=\"cp\">]</span> <span class=\"nt\">_steps</span> <span class=\"nt\">The</span> <span class=\"nt\">number</span> <span class=\"nt\">of</span> <span class=\"nt\">steps</span> <span class=\"nt\">the</span> <span class=\"nt\">World</span> <span class=\"nt\">should</span> <span class=\"nt\">take</span><span class=\"o\">.</span>\n      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">void</span> <span class=\"nt\">Step</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">unsigned</span> <span class=\"nt\">int</span> <span class=\"nt\">_steps</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p><a href=\"#!/osrf/gazebo/src/7da89efd6c8f5d6fb9e0989684c893736e004988/gazebo/physics/World.hh?at=gazebo8&amp;fileviewer=file-view-default#World.hh-449\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/7da89efd6c8f5d6fb9e0989684c893736e004988/gazebo/physics/World.hh?at=gazebo8&amp;fileviewer=file-view-default#World.hh-449</a></p>\n<p>The integration tests have examples of using it.</p>\n<p><a href=\"#!/osrf/gazebo/src/7da89efd6c8f5d6fb9e0989684c893736e004988/test/integration/plugin.cc?at=gazebo8&amp;fileviewer=file-view-default#plugin.cc-107\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/7da89efd6c8f5d6fb9e0989684c893736e004988/test/integration/plugin.cc?at=gazebo8&amp;fileviewer=file-view-default#plugin.cc-107</a></p>\n<p>I will close this issue since I think that answers the question. Feel free to reopen if there is more you would like to discuss.</p>", "type": "rendered"}, "created_on": "2017-12-13T15:56:51.620280+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": null, "type": "issue_comment", "id": 41882870}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385/comments/41882874.json"}, "html": {"href": "#!/osrf/gazebo/issues/2385#comment-41882874"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385.json"}}, "type": "issue", "id": 2385, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Step by step simulation c++ with gazebo"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-12-13T15:57:02.182003+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": null, "type": "issue_comment", "id": 41882874}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385/comments/41884311.json"}, "html": {"href": "#!/osrf/gazebo/issues/2385#comment-41884311"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385.json"}}, "type": "issue", "id": 2385, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Step by step simulation c++ with gazebo"}, "content": {"raw": "Hi,\n\nThis function does nothing, here are the implementation :\n\n```\n#!c++\n\nvoid World::Step(const unsigned int _steps)\n{\n  if (!this->IsPaused())\n  {\n    gzwarn << \"Calling World::Step(steps) while world is not paused\\n\";\n    this->SetPaused(true);\n  }\n\n  {\n    std::lock_guard<std::recursive_mutex> lock(this->dataPtr->worldUpdateMutex);\n    this->dataPtr->stepInc = _steps;\n  }\n\n  // block on completion\n  bool wait = true;\n  while (wait)\n  {\n    common::Time::NSleep(1);\n    std::lock_guard<std::recursive_mutex> lock(this->dataPtr->worldUpdateMutex);\n    if (this->dataPtr->stepInc == 0 || this->dataPtr->stop)\n      wait = false;\n  }\n}\n```\nAnd this is the Step() :\n\n```\n#!c++\n\nvoid World::Step()\n{\n  DIAG_TIMER_START(\"World::Step\");\n\n  /// need this because ODE does not call dxReallocateWorldProcessContext()\n  /// until dWorld.*Step\n  /// Plugins that manipulate joints (and probably other properties) require\n  /// one iteration of the physics engine. Do not remove this.\n  if (!this->dataPtr->pluginsLoaded && this->SensorsInitialized())\n  {\n    this->LoadPlugins();\n    this->dataPtr->pluginsLoaded = true;\n  }\n\n  DIAG_TIMER_LAP(\"World::Step\", \"loadPlugins\");\n\n  // Send statistics about the world simulation\n  this->PublishWorldStats();\n\n  DIAG_TIMER_LAP(\"World::Step\", \"publishWorldStats\");\n\n  double updatePeriod = this->dataPtr->physicsEngine->GetUpdatePeriod();\n  // sleep here to get the correct update rate\n  common::Time tmpTime = common::Time::GetWallTime();\n  common::Time sleepTime = this->dataPtr->prevStepWallTime +\n    common::Time(updatePeriod) - tmpTime - this->dataPtr->sleepOffset;\n\n  common::Time actualSleep;\n  if (sleepTime > 0)\n  {\n    common::Time::Sleep(sleepTime);\n    actualSleep = common::Time::GetWallTime() - tmpTime;\n  }\n  else\n    sleepTime = 0;\n\n  // exponentially avg out\n  this->dataPtr->sleepOffset = (actualSleep - sleepTime) * 0.01 +\n                      this->dataPtr->sleepOffset * 0.99;\n\n  DIAG_TIMER_LAP(\"World::Step\", \"sleepOffset\");\n\n  // throttling update rate, with sleepOffset as tolerance\n  // the tolerance is needed as the sleep time is not exact\n  if (common::Time::GetWallTime() - this->dataPtr->prevStepWallTime +\n      this->dataPtr->sleepOffset >= common::Time(updatePeriod))\n  {\n    std::lock_guard<std::recursive_mutex> lock(this->dataPtr->worldUpdateMutex);\n\n    DIAG_TIMER_LAP(\"World::Step\", \"worldUpdateMutex\");\n\n    this->dataPtr->prevStepWallTime = common::Time::GetWallTime();\n\n    double stepTime = this->dataPtr->physicsEngine->GetMaxStepSize();\n\n    if (!this->IsPaused() || this->dataPtr->stepInc > 0\n        || this->dataPtr->needsReset)\n    {\n      // query timestep to allow dynamic time step size updates\n      this->dataPtr->simTime += stepTime;\n      this->dataPtr->iterations++;\n      this->Update();\n\n      DIAG_TIMER_LAP(\"World::Step\", \"update\");\n\n      if (this->IsPaused() && this->dataPtr->stepInc > 0)\n        this->dataPtr->stepInc--;\n    }\n    else\n    {\n      // Flush the log record buffer, if there is data in it.\n      if (util::LogRecord::Instance()->BufferSize() > 0)\n        util::LogRecord::Instance()->Notify();\n      this->dataPtr->pauseTime += stepTime;\n    }\n  }\n\n  gazebo::util::IntrospectionManager::Instance()->NotifyUpdates();\n\n  this->ProcessMessages();\n\n  DIAG_TIMER_STOP(\"World::Step\");\n\n  if (g_clearModels)\n    this->ClearModels();\n}\n\n```\n\nBest regards,", "markup": "markdown", "html": "<p>Hi,</p>\n<p>This function does nothing, here are the implementation :</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"n\">World</span><span class=\"o\">::</span><span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">_steps</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">IsPaused</span><span class=\"p\">())</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">gzwarn</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Calling World::Step(steps) while world is not paused</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">SetPaused</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">lock_guard</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">recursive_mutex</span><span class=\"o\">&gt;</span> <span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">worldUpdateMutex</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">stepInc</span> <span class=\"o\">=</span> <span class=\"n\">_steps</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// block on completion</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">wait</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">wait</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">NSleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">lock_guard</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">recursive_mutex</span><span class=\"o\">&gt;</span> <span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">worldUpdateMutex</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">stepInc</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n      <span class=\"n\">wait</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>And this is the Step() :</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">void</span> <span class=\"n\">World</span><span class=\"o\">::</span><span class=\"n\">Step</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">DIAG_TIMER_START</span><span class=\"p\">(</span><span class=\"s\">&quot;World::Step&quot;</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">/// need this because ODE does not call dxReallocateWorldProcessContext()</span>\n  <span class=\"c1\">/// until dWorld.*Step</span>\n  <span class=\"c1\">/// Plugins that manipulate joints (and probably other properties) require</span>\n  <span class=\"c1\">/// one iteration of the physics engine. Do not remove this.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">pluginsLoaded</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">SensorsInitialized</span><span class=\"p\">())</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">LoadPlugins</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">pluginsLoaded</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">DIAG_TIMER_LAP</span><span class=\"p\">(</span><span class=\"s\">&quot;World::Step&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;loadPlugins&quot;</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Send statistics about the world simulation</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">PublishWorldStats</span><span class=\"p\">();</span>\n\n  <span class=\"n\">DIAG_TIMER_LAP</span><span class=\"p\">(</span><span class=\"s\">&quot;World::Step&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;publishWorldStats&quot;</span><span class=\"p\">);</span>\n\n  <span class=\"kt\">double</span> <span class=\"n\">updatePeriod</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">physicsEngine</span><span class=\"o\">-&gt;</span><span class=\"n\">GetUpdatePeriod</span><span class=\"p\">();</span>\n  <span class=\"c1\">// sleep here to get the correct update rate</span>\n  <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"n\">tmpTime</span> <span class=\"o\">=</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">GetWallTime</span><span class=\"p\">();</span>\n  <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"n\">sleepTime</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">prevStepWallTime</span> <span class=\"o\">+</span>\n    <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"p\">(</span><span class=\"n\">updatePeriod</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">tmpTime</span> <span class=\"o\">-</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">sleepOffset</span><span class=\"p\">;</span>\n\n  <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span> <span class=\"n\">actualSleep</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sleepTime</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">Sleep</span><span class=\"p\">(</span><span class=\"n\">sleepTime</span><span class=\"p\">);</span>\n    <span class=\"n\">actualSleep</span> <span class=\"o\">=</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">GetWallTime</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">tmpTime</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">sleepTime</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// exponentially avg out</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">sleepOffset</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">actualSleep</span> <span class=\"o\">-</span> <span class=\"n\">sleepTime</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.01</span> <span class=\"o\">+</span>\n                      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">sleepOffset</span> <span class=\"o\">*</span> <span class=\"mf\">0.99</span><span class=\"p\">;</span>\n\n  <span class=\"n\">DIAG_TIMER_LAP</span><span class=\"p\">(</span><span class=\"s\">&quot;World::Step&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;sleepOffset&quot;</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// throttling update rate, with sleepOffset as tolerance</span>\n  <span class=\"c1\">// the tolerance is needed as the sleep time is not exact</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">GetWallTime</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">prevStepWallTime</span> <span class=\"o\">+</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">sleepOffset</span> <span class=\"o\">&gt;=</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"p\">(</span><span class=\"n\">updatePeriod</span><span class=\"p\">))</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">lock_guard</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">recursive_mutex</span><span class=\"o\">&gt;</span> <span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">worldUpdateMutex</span><span class=\"p\">);</span>\n\n    <span class=\"n\">DIAG_TIMER_LAP</span><span class=\"p\">(</span><span class=\"s\">&quot;World::Step&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;worldUpdateMutex&quot;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">prevStepWallTime</span> <span class=\"o\">=</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">Time</span><span class=\"o\">::</span><span class=\"n\">GetWallTime</span><span class=\"p\">();</span>\n\n    <span class=\"kt\">double</span> <span class=\"n\">stepTime</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">physicsEngine</span><span class=\"o\">-&gt;</span><span class=\"n\">GetMaxStepSize</span><span class=\"p\">();</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">IsPaused</span><span class=\"p\">()</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">stepInc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">needsReset</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// query timestep to allow dynamic time step size updates</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">simTime</span> <span class=\"o\">+=</span> <span class=\"n\">stepTime</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">iterations</span><span class=\"o\">++</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">Update</span><span class=\"p\">();</span>\n\n      <span class=\"n\">DIAG_TIMER_LAP</span><span class=\"p\">(</span><span class=\"s\">&quot;World::Step&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;update&quot;</span><span class=\"p\">);</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">IsPaused</span><span class=\"p\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">stepInc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">stepInc</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n      <span class=\"c1\">// Flush the log record buffer, if there is data in it.</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">util</span><span class=\"o\">::</span><span class=\"n\">LogRecord</span><span class=\"o\">::</span><span class=\"n\">Instance</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">BufferSize</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">util</span><span class=\"o\">::</span><span class=\"n\">LogRecord</span><span class=\"o\">::</span><span class=\"n\">Instance</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">Notify</span><span class=\"p\">();</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">dataPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">pauseTime</span> <span class=\"o\">+=</span> <span class=\"n\">stepTime</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">util</span><span class=\"o\">::</span><span class=\"n\">IntrospectionManager</span><span class=\"o\">::</span><span class=\"n\">Instance</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">NotifyUpdates</span><span class=\"p\">();</span>\n\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">ProcessMessages</span><span class=\"p\">();</span>\n\n  <span class=\"n\">DIAG_TIMER_STOP</span><span class=\"p\">(</span><span class=\"s\">&quot;World::Step&quot;</span><span class=\"p\">);</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">g_clearModels</span><span class=\"p\">)</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">ClearModels</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Best regards,</p>", "type": "rendered"}, "created_on": "2017-12-13T17:09:14.898990+00:00", "user": {"display_name": "Brice Clement", "uuid": "{9a316ad8-04e2-4a05-980f-44dbbd5b3897}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9a316ad8-04e2-4a05-980f-44dbbd5b3897%7D"}, "html": {"href": "https://bitbucket.org/%7B9a316ad8-04e2-4a05-980f-44dbbd5b3897%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/76dc97e4a0367def37518e4f907f2f4ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsBC-0.png"}}, "nickname": "Brice_clement", "type": "user", "account_id": "5a2feea09f1e433e479775b0"}, "updated_on": null, "type": "issue_comment", "id": 41884311}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385/comments/41884382.json"}, "html": {"href": "#!/osrf/gazebo/issues/2385#comment-41884382"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385.json"}}, "type": "issue", "id": 2385, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Step by step simulation c++ with gazebo"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-12-13T17:13:27.803515+00:00", "user": {"display_name": "Brice Clement", "uuid": "{9a316ad8-04e2-4a05-980f-44dbbd5b3897}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9a316ad8-04e2-4a05-980f-44dbbd5b3897%7D"}, "html": {"href": "https://bitbucket.org/%7B9a316ad8-04e2-4a05-980f-44dbbd5b3897%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/76dc97e4a0367def37518e4f907f2f4ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsBC-0.png"}}, "nickname": "Brice_clement", "type": "user", "account_id": "5a2feea09f1e433e479775b0"}, "updated_on": null, "type": "issue_comment", "id": 41884382}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385/comments/41884604.json"}, "html": {"href": "#!/osrf/gazebo/issues/2385#comment-41884604"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385.json"}}, "type": "issue", "id": 2385, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Step by step simulation c++ with gazebo"}, "content": {"raw": "It assumes the world is updating in another thread.  The `ServerFixture` used by the integration tests shows how to set that up.\n\n#!/osrf/gazebo/src/7da89efd6c8f5d6fb9e0989684c893736e004988/gazebo/test/ServerFixture.cc?at=gazebo8&fileviewer=file-view-default#ServerFixture.cc-200\n\nIt sounds like you might be interested in fewer API calls to get to that point. Feel free to update this issue with a proposal for what you would that API to look like.", "markup": "markdown", "html": "<p>It assumes the world is updating in another thread.  The <code>ServerFixture</code> used by the integration tests shows how to set that up.</p>\n<p><a href=\"#!/osrf/gazebo/src/7da89efd6c8f5d6fb9e0989684c893736e004988/gazebo/test/ServerFixture.cc?at=gazebo8&amp;fileviewer=file-view-default#ServerFixture.cc-200\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/7da89efd6c8f5d6fb9e0989684c893736e004988/gazebo/test/ServerFixture.cc?at=gazebo8&amp;fileviewer=file-view-default#ServerFixture.cc-200</a></p>\n<p>It sounds like you might be interested in fewer API calls to get to that point. Feel free to update this issue with a proposal for what you would that API to look like.</p>", "type": "rendered"}, "created_on": "2017-12-13T17:27:29.033749+00:00", "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}, "updated_on": null, "type": "issue_comment", "id": 41884604}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385/comments/41897490.json"}, "html": {"href": "#!/osrf/gazebo/issues/2385#comment-41897490"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385.json"}}, "type": "issue", "id": 2385, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Step by step simulation c++ with gazebo"}, "content": {"raw": "Hi,\n\nI'm not sure if i understood what you wanted to show me about the ServerFixture, but we would like to avoid to have the world in a thread. Just something like your Step() function (the one implemented without parameters), but if it's possible to make it public instead of private. So we can access it.\n\nBest regards", "markup": "markdown", "html": "<p>Hi,</p>\n<p>I'm not sure if i understood what you wanted to show me about the ServerFixture, but we would like to avoid to have the world in a thread. Just something like your Step() function (the one implemented without parameters), but if it's possible to make it public instead of private. So we can access it.</p>\n<p>Best regards</p>", "type": "rendered"}, "created_on": "2017-12-14T09:56:17.438642+00:00", "user": {"display_name": "Brice Clement", "uuid": "{9a316ad8-04e2-4a05-980f-44dbbd5b3897}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9a316ad8-04e2-4a05-980f-44dbbd5b3897%7D"}, "html": {"href": "https://bitbucket.org/%7B9a316ad8-04e2-4a05-980f-44dbbd5b3897%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/76dc97e4a0367def37518e4f907f2f4ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsBC-0.png"}}, "nickname": "Brice_clement", "type": "user", "account_id": "5a2feea09f1e433e479775b0"}, "updated_on": null, "type": "issue_comment", "id": 41897490}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385/comments/44840207.json"}, "html": {"href": "#!/osrf/gazebo/issues/2385#comment-44840207"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2385.json"}}, "type": "issue", "id": 2385, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Step by step simulation c++ with gazebo"}, "content": {"raw": "Hi Brice, \n\nI am trying to use the function world->Step() too, but I'm facing some troubles doing so. \nDid you manage to use it?\n\nBest regards", "markup": "markdown", "html": "<p>Hi Brice, </p>\n<p>I am trying to use the function world-&gt;Step() too, but I'm facing some troubles doing so. \nDid you manage to use it?</p>\n<p>Best regards</p>", "type": "rendered"}, "created_on": "2018-04-20T10:23:26.870296+00:00", "user": {"display_name": "Ignacio Abadia", "uuid": "{d9bd2b4f-f4e5-42bd-9eee-64572c4e89b4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd9bd2b4f-f4e5-42bd-9eee-64572c4e89b4%7D"}, "html": {"href": "https://bitbucket.org/%7Bd9bd2b4f-f4e5-42bd-9eee-64572c4e89b4%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/af4cbc1031566b147454bdd6b0701e7bd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIA-6.png"}}, "nickname": "iAbaTer", "type": "user", "account_id": "5ad5ca57e378d62b3bb3f72d"}, "updated_on": null, "type": "issue_comment", "id": 44840207}], "page": 1, "size": 7}