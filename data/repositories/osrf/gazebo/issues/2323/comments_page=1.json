{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38910024.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38910024"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-08-05T07:05:00.722606+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": null, "type": "issue_comment", "id": 38910024}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38910329.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38910329"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-08-05T07:47:35.797109+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": null, "type": "issue_comment", "id": 38910329}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38915042.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38915042"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-08-05T18:12:46.097650+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": null, "type": "issue_comment", "id": 38915042}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38915274.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38915274"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "I can confirm that this problem is the same in Gazebo 8. I am running within vmware using accelerated graphics with ```SVGA_VGPU10=0``` set. Here is the relevant output of ```glxinfo```.\n\n```\n#!bash\n\nOpenGL vendor string: VMware, Inc.\nOpenGL renderer string: Gallium 0.4 on SVGA3D; build: RELEASE;  LLVM;\nOpenGL version string: 2.1 Mesa 17.0.7\nOpenGL shading language version string: 1.20\n```\nI don't know why I have to set ```SVGA_VGPU10=0``` to avoid Gazebo crashing (see  #1950) because glmark2 seems to report everything is fine without the environment variable.\n\n```\n=======================================================\n    glmark2 2014.03+git20150611.fa71af2d\n=======================================================\n    OpenGL Information\n    GL_VENDOR:     VMware, Inc.\n    GL_RENDERER:   Gallium 0.4 on SVGA3D; build: RELEASE;  LLVM;\n    GL_VERSION:    3.0 Mesa 17.0.7\n=======================================================\n[build] use-vbo=false: FPS: 2383 FrameTime: 0.420 ms\n[build] use-vbo=true: FPS: 2779 FrameTime: 0.360 ms\n[texture] texture-filter=nearest: FPS: 2453 FrameTime: 0.408 ms\n[texture] texture-filter=linear: FPS: 2379 FrameTime: 0.420 ms\n[texture] texture-filter=mipmap: FPS: 2465 FrameTime: 0.406 ms\n[shading] shading=gouraud: FPS: 2454 FrameTime: 0.407 ms\n[shading] shading=blinn-phong-inf: FPS: 2326 FrameTime: 0.430 ms\n[shading] shading=phong: FPS: 2099 FrameTime: 0.476 ms\n[shading] shading=cel: FPS: 1759 FrameTime: 0.569 ms\n[bump] bump-render=high-poly: FPS: 1386 FrameTime: 0.722 ms\n[bump] bump-render=normals: FPS: 1329 FrameTime: 0.752 ms\n[bump] bump-render=height: FPS: 1223 FrameTime: 0.818 ms\n[effect2d] kernel=0,1,0;1,-4,1;0,1,0;: FPS: 1078 FrameTime: 0.928 ms\n[effect2d] kernel=1,1,1,1,1;1,1,1,1,1;1,1,1,1,1;: FPS: 841 FrameTime: 1.189 ms\n[pulsar] light=false:quads=5:texture=false: FPS: 887 FrameTime: 1.127 ms\n[desktop] blur-radius=5:effect=blur:passes=1:separable=true:windows=4: FPS: 741 FrameTime: 1.350 ms\n[desktop] effect=shadow:windows=4: FPS: 764 FrameTime: 1.309 ms\n[buffer] columns=200:interleave=false:update-dispersion=0.9:update-fraction=0.5:update-method=map: FPS: 297 FrameTime: 3.367 ms\n[buffer] columns=200:interleave=false:update-dispersion=0.9:update-fraction=0.5:update-method=subdata: FPS: 329 FrameTime: 3.040 ms\n[buffer] columns=200:interleave=true:update-dispersion=0.9:update-fraction=0.5:update-method=map: FPS: 368 FrameTime: 2.717 ms\n[ideas] speed=duration: FPS: 941 FrameTime: 1.063 ms\n[jellyfish] <default>: FPS: 1382 FrameTime: 0.724 ms\n[terrain] <default>: FPS: 68 FrameTime: 14.706 ms\n[shadow] <default>: FPS: 1355 FrameTime: 0.738 ms\n[refract] <default>: FPS: 471 FrameTime: 2.123 ms\n[conditionals] fragment-steps=0:vertex-steps=0: FPS: 1531 FrameTime: 0.653 ms\n[conditionals] fragment-steps=5:vertex-steps=0: FPS: 1333 FrameTime: 0.750 ms\n[conditionals] fragment-steps=0:vertex-steps=5: FPS: 1326 FrameTime: 0.754 ms\n[function] fragment-complexity=low:fragment-steps=5: FPS: 1426 FrameTime: 0.701 ms\n[function] fragment-complexity=medium:fragment-steps=5: FPS: 1429 FrameTime: 0.700 ms\n[loop] fragment-loop=false:fragment-steps=5:vertex-steps=5: FPS: 1455 FrameTime: 0.687 ms\n[loop] fragment-steps=5:fragment-uniform=false:vertex-steps=5: FPS: 1476 FrameTime: 0.678 ms\n[loop] fragment-steps=5:fragment-uniform=true:vertex-steps=5: FPS: 1402 FrameTime: 0.713 ms\n=======================================================\n                                  glmark2 Score: 1391 \n=======================================================\n```\n\n I can try running natively  to see if this issue is a result of my graphics configuration.", "markup": "markdown", "html": "<p>I can confirm that this problem is the same in Gazebo 8. I am running within vmware using accelerated graphics with <code>SVGA_VGPU10=0</code> set. Here is the relevant output of <code>glxinfo</code>.</p>\n<div class=\"codehilite language-bash\"><pre><span></span>OpenGL vendor string: VMware, Inc.\nOpenGL renderer string: Gallium <span class=\"m\">0</span>.4 on SVGA3D<span class=\"p\">;</span> build: RELEASE<span class=\"p\">;</span>  LLVM<span class=\"p\">;</span>\nOpenGL version string: <span class=\"m\">2</span>.1 Mesa <span class=\"m\">17</span>.0.7\nOpenGL shading language version string: <span class=\"m\">1</span>.20\n</pre></div>\n\n\n<p>I don't know why I have to set <code>SVGA_VGPU10=0</code> to avoid Gazebo crashing (see  <a href=\"#!/osrf/gazebo/issues/1950/vmware-throwing-an-error-when-launching\" rel=\"nofollow\" title=\"VMWare throwing an error when launching gazebo\" class=\"ap-connect-link\">#1950</a>) because glmark2 seems to report everything is fine without the environment variable.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">=======================================================</span>\n    <span class=\"nt\">glmark2</span> <span class=\"nt\">2014</span><span class=\"p\">.</span><span class=\"nc\">03</span><span class=\"o\">+</span><span class=\"nt\">git20150611</span><span class=\"p\">.</span><span class=\"nc\">fa71af2d</span>\n<span class=\"o\">=======================================================</span>\n    <span class=\"nt\">OpenGL</span> <span class=\"nt\">Information</span>\n    <span class=\"nt\">GL_VENDOR</span><span class=\"o\">:</span>     <span class=\"nt\">VMware</span><span class=\"o\">,</span> <span class=\"nt\">Inc</span><span class=\"o\">.</span>\n    <span class=\"nt\">GL_RENDERER</span><span class=\"o\">:</span>   <span class=\"nt\">Gallium</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">4</span> <span class=\"nt\">on</span> <span class=\"nt\">SVGA3D</span><span class=\"o\">;</span> <span class=\"nt\">build</span><span class=\"o\">:</span> <span class=\"nt\">RELEASE</span><span class=\"o\">;</span>  <span class=\"nt\">LLVM</span><span class=\"o\">;</span>\n    <span class=\"nt\">GL_VERSION</span><span class=\"o\">:</span>    <span class=\"nt\">3</span><span class=\"p\">.</span><span class=\"nc\">0</span> <span class=\"nt\">Mesa</span> <span class=\"nt\">17</span><span class=\"p\">.</span><span class=\"nc\">0</span><span class=\"p\">.</span><span class=\"nc\">7</span>\n<span class=\"o\">=======================================================</span>\n<span class=\"cp\">[</span><span class=\"nx\">build</span><span class=\"cp\">]</span> <span class=\"nt\">use-vbo</span><span class=\"o\">=</span><span class=\"nt\">false</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">2383</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">420</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">build</span><span class=\"cp\">]</span> <span class=\"nt\">use-vbo</span><span class=\"o\">=</span><span class=\"nt\">true</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">2779</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">360</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">texture</span><span class=\"cp\">]</span> <span class=\"nt\">texture-filter</span><span class=\"o\">=</span><span class=\"nt\">nearest</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">2453</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">408</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">texture</span><span class=\"cp\">]</span> <span class=\"nt\">texture-filter</span><span class=\"o\">=</span><span class=\"nt\">linear</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">2379</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">420</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">texture</span><span class=\"cp\">]</span> <span class=\"nt\">texture-filter</span><span class=\"o\">=</span><span class=\"nt\">mipmap</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">2465</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">406</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">shading</span><span class=\"cp\">]</span> <span class=\"nt\">shading</span><span class=\"o\">=</span><span class=\"nt\">gouraud</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">2454</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">407</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">shading</span><span class=\"cp\">]</span> <span class=\"nt\">shading</span><span class=\"o\">=</span><span class=\"nt\">blinn-phong-inf</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">2326</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">430</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">shading</span><span class=\"cp\">]</span> <span class=\"nt\">shading</span><span class=\"o\">=</span><span class=\"nt\">phong</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">2099</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">476</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">shading</span><span class=\"cp\">]</span> <span class=\"nt\">shading</span><span class=\"o\">=</span><span class=\"nt\">cel</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1759</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">569</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">bump</span><span class=\"cp\">]</span> <span class=\"nt\">bump-render</span><span class=\"o\">=</span><span class=\"nt\">high-poly</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1386</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">722</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">bump</span><span class=\"cp\">]</span> <span class=\"nt\">bump-render</span><span class=\"o\">=</span><span class=\"nt\">normals</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1329</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">752</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">bump</span><span class=\"cp\">]</span> <span class=\"nt\">bump-render</span><span class=\"o\">=</span><span class=\"nt\">height</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1223</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">818</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">effect2d</span><span class=\"cp\">]</span> <span class=\"nt\">kernel</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">0</span><span class=\"o\">;</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">-4</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">;</span><span class=\"nt\">0</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">0</span><span class=\"o\">;:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1078</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">928</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">effect2d</span><span class=\"cp\">]</span> <span class=\"nt\">kernel</span><span class=\"o\">=</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">;</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">;</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">,</span><span class=\"nt\">1</span><span class=\"o\">;:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">841</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">1</span><span class=\"p\">.</span><span class=\"nc\">189</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">pulsar</span><span class=\"cp\">]</span> <span class=\"nt\">light</span><span class=\"o\">=</span><span class=\"nt\">false</span><span class=\"p\">:</span><span class=\"nd\">quads</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"p\">:</span><span class=\"nd\">texture</span><span class=\"o\">=</span><span class=\"nt\">false</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">887</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">1</span><span class=\"p\">.</span><span class=\"nc\">127</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">desktop</span><span class=\"cp\">]</span> <span class=\"nt\">blur-radius</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"p\">:</span><span class=\"nd\">effect</span><span class=\"o\">=</span><span class=\"nt\">blur</span><span class=\"p\">:</span><span class=\"nd\">passes</span><span class=\"o\">=</span><span class=\"nt\">1</span><span class=\"p\">:</span><span class=\"nd\">separable</span><span class=\"o\">=</span><span class=\"nt\">true</span><span class=\"p\">:</span><span class=\"nd\">windows</span><span class=\"o\">=</span><span class=\"nt\">4</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">741</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">1</span><span class=\"p\">.</span><span class=\"nc\">350</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">desktop</span><span class=\"cp\">]</span> <span class=\"nt\">effect</span><span class=\"o\">=</span><span class=\"nt\">shadow</span><span class=\"p\">:</span><span class=\"nd\">windows</span><span class=\"o\">=</span><span class=\"nt\">4</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">764</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">1</span><span class=\"p\">.</span><span class=\"nc\">309</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">buffer</span><span class=\"cp\">]</span> <span class=\"nt\">columns</span><span class=\"o\">=</span><span class=\"nt\">200</span><span class=\"p\">:</span><span class=\"nd\">interleave</span><span class=\"o\">=</span><span class=\"nt\">false</span><span class=\"p\">:</span><span class=\"nd\">update-dispersion</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">9</span><span class=\"p\">:</span><span class=\"nd\">update-fraction</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">5</span><span class=\"p\">:</span><span class=\"nd\">update-method</span><span class=\"o\">=</span><span class=\"nt\">map</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">297</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">3</span><span class=\"p\">.</span><span class=\"nc\">367</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">buffer</span><span class=\"cp\">]</span> <span class=\"nt\">columns</span><span class=\"o\">=</span><span class=\"nt\">200</span><span class=\"p\">:</span><span class=\"nd\">interleave</span><span class=\"o\">=</span><span class=\"nt\">false</span><span class=\"p\">:</span><span class=\"nd\">update-dispersion</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">9</span><span class=\"p\">:</span><span class=\"nd\">update-fraction</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">5</span><span class=\"p\">:</span><span class=\"nd\">update-method</span><span class=\"o\">=</span><span class=\"nt\">subdata</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">329</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">3</span><span class=\"p\">.</span><span class=\"nc\">040</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">buffer</span><span class=\"cp\">]</span> <span class=\"nt\">columns</span><span class=\"o\">=</span><span class=\"nt\">200</span><span class=\"p\">:</span><span class=\"nd\">interleave</span><span class=\"o\">=</span><span class=\"nt\">true</span><span class=\"p\">:</span><span class=\"nd\">update-dispersion</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">9</span><span class=\"p\">:</span><span class=\"nd\">update-fraction</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">5</span><span class=\"p\">:</span><span class=\"nd\">update-method</span><span class=\"o\">=</span><span class=\"nt\">map</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">368</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">2</span><span class=\"p\">.</span><span class=\"nc\">717</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">ideas</span><span class=\"cp\">]</span> <span class=\"nt\">speed</span><span class=\"o\">=</span><span class=\"nt\">duration</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">941</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">1</span><span class=\"p\">.</span><span class=\"nc\">063</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">jellyfish</span><span class=\"cp\">]</span> <span class=\"o\">&lt;</span><span class=\"nt\">default</span><span class=\"o\">&gt;:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1382</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">724</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">terrain</span><span class=\"cp\">]</span> <span class=\"o\">&lt;</span><span class=\"nt\">default</span><span class=\"o\">&gt;:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">68</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">14</span><span class=\"p\">.</span><span class=\"nc\">706</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">shadow</span><span class=\"cp\">]</span> <span class=\"o\">&lt;</span><span class=\"nt\">default</span><span class=\"o\">&gt;:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1355</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">738</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">refract</span><span class=\"cp\">]</span> <span class=\"o\">&lt;</span><span class=\"nt\">default</span><span class=\"o\">&gt;:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">471</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">2</span><span class=\"p\">.</span><span class=\"nc\">123</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">conditionals</span><span class=\"cp\">]</span> <span class=\"nt\">fragment-steps</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"p\">:</span><span class=\"nd\">vertex-steps</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1531</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">653</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">conditionals</span><span class=\"cp\">]</span> <span class=\"nt\">fragment-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"p\">:</span><span class=\"nd\">vertex-steps</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1333</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">750</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">conditionals</span><span class=\"cp\">]</span> <span class=\"nt\">fragment-steps</span><span class=\"o\">=</span><span class=\"nt\">0</span><span class=\"p\">:</span><span class=\"nd\">vertex-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1326</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">754</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">function</span><span class=\"cp\">]</span> <span class=\"nt\">fragment-complexity</span><span class=\"o\">=</span><span class=\"nt\">low</span><span class=\"p\">:</span><span class=\"nd\">fragment-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1426</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">701</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"nx\">function</span><span class=\"cp\">]</span> <span class=\"nt\">fragment-complexity</span><span class=\"o\">=</span><span class=\"nt\">medium</span><span class=\"p\">:</span><span class=\"nd\">fragment-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1429</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">700</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"k\">loop</span><span class=\"cp\">]</span> <span class=\"nt\">fragment-loop</span><span class=\"o\">=</span><span class=\"nt\">false</span><span class=\"p\">:</span><span class=\"nd\">fragment-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"p\">:</span><span class=\"nd\">vertex-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1455</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">687</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"k\">loop</span><span class=\"cp\">]</span> <span class=\"nt\">fragment-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"p\">:</span><span class=\"nd\">fragment-uniform</span><span class=\"o\">=</span><span class=\"nt\">false</span><span class=\"p\">:</span><span class=\"nd\">vertex-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1476</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">678</span> <span class=\"nt\">ms</span>\n<span class=\"cp\">[</span><span class=\"k\">loop</span><span class=\"cp\">]</span> <span class=\"nt\">fragment-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"p\">:</span><span class=\"nd\">fragment-uniform</span><span class=\"o\">=</span><span class=\"nt\">true</span><span class=\"p\">:</span><span class=\"nd\">vertex-steps</span><span class=\"o\">=</span><span class=\"nt\">5</span><span class=\"o\">:</span> <span class=\"nt\">FPS</span><span class=\"o\">:</span> <span class=\"nt\">1402</span> <span class=\"nt\">FrameTime</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">713</span> <span class=\"nt\">ms</span>\n<span class=\"o\">=======================================================</span>\n                                  <span class=\"nt\">glmark2</span> <span class=\"nt\">Score</span><span class=\"o\">:</span> <span class=\"nt\">1391</span> \n<span class=\"o\">=======================================================</span>\n</pre></div>\n\n\n<p>I can try running natively  to see if this issue is a result of my graphics configuration.</p>", "type": "rendered"}, "created_on": "2017-08-05T18:48:01.135078+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2017-08-05T19:03:19.247334+00:00", "type": "issue_comment", "id": 38915274}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38946964.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38946964"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "Could it be the way it's packing data into the PointCloud2 msg? Looking at the way it's done in [gazebo_ros_pkgs](https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_depth_camera.cpp#L260), I see that it uses the [PointCloud2Modifier](http://docs.ros.org/jade/api/sensor_msgs/html/impl_2point__cloud2__iterator_8h_source.html), and sets up the fields using `setPointCloud2FieldsByString`. In that function, they used `addPointField` to set the `field.count` to be 1 instead of `sizeof(float)`. The way it's calculating the `point_step` also looks different; there seems to be extra added padding. Not sure if that's the problem", "markup": "markdown", "html": "<p>Could it be the way it's packing data into the PointCloud2 msg? Looking at the way it's done in <a data-is-external-link=\"true\" href=\"https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_depth_camera.cpp#L260\" rel=\"nofollow\">gazebo_ros_pkgs</a>, I see that it uses the <a data-is-external-link=\"true\" href=\"http://docs.ros.org/jade/api/sensor_msgs/html/impl_2point__cloud2__iterator_8h_source.html\" rel=\"nofollow\">PointCloud2Modifier</a>, and sets up the fields using <code>setPointCloud2FieldsByString</code>. In that function, they used <code>addPointField</code> to set the <code>field.count</code> to be 1 instead of <code>sizeof(float)</code>. The way it's calculating the <code>point_step</code> also looks different; there seems to be extra added padding. Not sure if that's the problem</p>", "type": "rendered"}, "created_on": "2017-08-07T22:23:17.827461+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": null, "type": "issue_comment", "id": 38946964}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38948640.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38948640"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "Hi Ian\n\nI'm reasonably confident that I have a handle on packing point clouds, since I wrote a similar-style driver for the picoflexx camera. I'd think that a ```std::copy``` of striped memory will ultimately be a bit faster than an iteration over all voxels in the image.  However, just to be sure that my implementation is correct I adapted my code to use ```setPointCloud2FieldsByString```. The result is exactly the same. My code follows below. Has anybody ever got ```DepthSensor::ConnectNewRGBPointCloud``` working?\n\n\n\n```\n#!c++\n\n// ROS includes\n#include <ros/ros.h>\n\n// Sensor plugin interface\n#include <astrobee_gazebo/astrobee_gazebo.h>\n\n// IMU Sensor message\n#include <sensor_msgs/Image.h>\n#include <sensor_msgs/image_encodings.h>\n#include <sensor_msgs/PointCloud2.h>\n#include <sensor_msgs/point_cloud2_iterator.h>\n\n// STL includes\n#include <string>\n\nnamespace gazebo {\nclass GazeboSensorPluginHazCam : public RosSensorPlugin {\n public:\n  GazeboSensorPluginHazCam() : RosSensorPlugin(\"haz_cam\") {}\n\n  ~GazeboSensorPluginHazCam() {}\n\n protected:\n  // Called when plugin is loaded into gazebo\n  void LoadCallback(ros::NodeHandle *nh, sensors::SensorPtr sensor, sdf::ElementPtr sdf) {\n    // Get a link to the parent sensor\n    sensor_ = std::dynamic_pointer_cast < sensors::DepthCameraSensor > (sensor);\n    if (!sensor_) {\n      gzerr << \"GazeboSensorPluginHazCam requires a camera sensor as a parent.\\n\";\n      return;\n    }\n   // Create a publisher for the point cloud\n    point_cloud_pub_ = nh->advertise<sensor_msgs::PointCloud2>(\"/points\", 1,\n      boost::bind(&GazeboSensorPluginHazCam::ToggleCallback, this),\n      boost::bind(&GazeboSensorPluginHazCam::ToggleCallback, this));\n    // Listen to the point cloud\n    update_ = sensor_->DepthCamera()->ConnectNewRGBPointCloud(\n      boost::bind(&GazeboSensorPluginHazCam::Callback, this, _1, _2, _3, _4, _5));\n  }\n\n  // Turn camera on or off based on topic subscription\n  void ToggleCallback() {\n    if (point_cloud_pub_.getNumSubscribers() > 0 || image_pub_.getNumSubscribers() > 0)\n      sensor_->SetActive(true);\n    else\n      sensor_->SetActive(false);\n  }\n \n  // this->dataPtr->depthBuffer, width, height, 1, \"FLOAT32\"\n  void Callback(const float *data, unsigned int width, unsigned height, unsigned int len, const std::string & type) {\n    if (!sensor_->IsActive())\n      return;\n    gzmsg << \"Pointcloud callback!\\n\";\n    point_cloud_msg_.header.frame_id = GetFrame();\n    point_cloud_msg_.header.stamp.sec = sensor_->LastMeasurementTime().sec;\n    point_cloud_msg_.header.stamp.nsec = sensor_->LastMeasurementTime().nsec;\n    point_cloud_msg_.width = width;\n    point_cloud_msg_.height = height;\n    point_cloud_msg_.point_step = sizeof(float) * 3;\n    point_cloud_msg_.row_step = point_cloud_msg_.point_step * width;\n    point_cloud_msg_.is_dense = true;\n    point_cloud_msg_.is_bigendian = false;\n    // Declare the striped memory layout\n    sensor_msgs::PointCloud2Modifier pcd_modifier(point_cloud_msg_);\n    pcd_modifier.setPointCloud2FieldsByString(1, \"xyz\");\n    sensor_msgs::PointCloud2Iterator<float> iter_x(point_cloud_msg_, \"x\");\n    sensor_msgs::PointCloud2Iterator<float> iter_y(point_cloud_msg_, \"y\");\n    sensor_msgs::PointCloud2Iterator<float> iter_z(point_cloud_msg_, \"z\");\n    const uint8_t* ptr = reinterpret_cast<const uint8_t*>(data);\n    for (unsigned int i = 0; i < width; i++) {\n      for (unsigned int j = 0; j < height; j++, ++iter_x, ++iter_y, ++iter_z) {\n        unsigned int index = (j * width) + i;\n        *iter_x = reinterpret_cast<const float*>(ptr)[4*index + 0];\n        *iter_y = reinterpret_cast<const float*>(ptr)[4*index + 1];\n        *iter_z = reinterpret_cast<const float*>(ptr)[4*index + 2];\n      }\n    }\n    point_cloud_pub_.publish(point_cloud_msg_);\n  }\n\n private:\n  // ROS variables\n  ros::Publisher image_pub_;\n  ros::Publisher point_cloud_pub_;\n  // Sensor pointer\n  sensors::DepthCameraSensorPtr sensor_;\n  // Camera and Point Cloud messages\n  sensor_msgs::Image image_msg_;\n  sensor_msgs::PointCloud2 point_cloud_msg_;\n  // Gazebo variables\n  physics::WorldPtr world_;\n  physics::ModelPtr model_;\n  event::ConnectionPtr update_;\n  std::string frame_id_;\n};\n\nGZ_REGISTER_SENSOR_PLUGIN(GazeboSensorPluginHazCam)\n\n}   // namespace gazebo\n\n```", "markup": "markdown", "html": "<p>Hi Ian</p>\n<p>I'm reasonably confident that I have a handle on packing point clouds, since I wrote a similar-style driver for the picoflexx camera. I'd think that a <code>std::copy</code> of striped memory will ultimately be a bit faster than an iteration over all voxels in the image.  However, just to be sure that my implementation is correct I adapted my code to use <code>setPointCloud2FieldsByString</code>. The result is exactly the same. My code follows below. Has anybody ever got <code>DepthSensor::ConnectNewRGBPointCloud</code> working?</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// ROS includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ros/ros.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// Sensor plugin interface</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;astrobee_gazebo/astrobee_gazebo.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// IMU Sensor message</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sensor_msgs/Image.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sensor_msgs/image_encodings.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sensor_msgs/PointCloud2.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sensor_msgs/point_cloud2_iterator.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// STL includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">gazebo</span> <span class=\"p\">{</span>\n<span class=\"k\">class</span> <span class=\"nc\">GazeboSensorPluginHazCam</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">RosSensorPlugin</span> <span class=\"p\">{</span>\n <span class=\"k\">public</span><span class=\"o\">:</span>\n  <span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"n\">RosSensorPlugin</span><span class=\"p\">(</span><span class=\"s\">&quot;haz_cam&quot;</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"o\">~</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n\n <span class=\"k\">protected</span><span class=\"o\">:</span>\n  <span class=\"c1\">// Called when plugin is loaded into gazebo</span>\n  <span class=\"kt\">void</span> <span class=\"n\">LoadCallback</span><span class=\"p\">(</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">NodeHandle</span> <span class=\"o\">*</span><span class=\"n\">nh</span><span class=\"p\">,</span> <span class=\"n\">sensors</span><span class=\"o\">::</span><span class=\"n\">SensorPtr</span> <span class=\"n\">sensor</span><span class=\"p\">,</span> <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"n\">sdf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Get a link to the parent sensor</span>\n    <span class=\"n\">sensor_</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">dynamic_pointer_cast</span> <span class=\"o\">&lt;</span> <span class=\"n\">sensors</span><span class=\"o\">::</span><span class=\"n\">DepthCameraSensor</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">sensor_</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">gzerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;GazeboSensorPluginHazCam requires a camera sensor as a parent.</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n   <span class=\"c1\">// Create a publisher for the point cloud</span>\n    <span class=\"n\">point_cloud_pub_</span> <span class=\"o\">=</span> <span class=\"n\">nh</span><span class=\"o\">-&gt;</span><span class=\"n\">advertise</span><span class=\"o\">&lt;</span><span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;/points&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"o\">::</span><span class=\"n\">ToggleCallback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">),</span>\n      <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"o\">::</span><span class=\"n\">ToggleCallback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">));</span>\n    <span class=\"c1\">// Listen to the point cloud</span>\n    <span class=\"n\">update_</span> <span class=\"o\">=</span> <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">DepthCamera</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">ConnectNewRGBPointCloud</span><span class=\"p\">(</span>\n      <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"o\">::</span><span class=\"n\">Callback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">,</span> <span class=\"n\">_2</span><span class=\"p\">,</span> <span class=\"n\">_3</span><span class=\"p\">,</span> <span class=\"n\">_4</span><span class=\"p\">,</span> <span class=\"n\">_5</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Turn camera on or off based on topic subscription</span>\n  <span class=\"kt\">void</span> <span class=\"n\">ToggleCallback</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">point_cloud_pub_</span><span class=\"p\">.</span><span class=\"n\">getNumSubscribers</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">image_pub_</span><span class=\"p\">.</span><span class=\"n\">getNumSubscribers</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">SetActive</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">SetActive</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// this-&gt;dataPtr-&gt;depthBuffer, width, height, 1, &quot;FLOAT32&quot;</span>\n  <span class=\"kt\">void</span> <span class=\"n\">Callback</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span> <span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">IsActive</span><span class=\"p\">())</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"n\">gzmsg</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Pointcloud callback!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">frame_id</span> <span class=\"o\">=</span> <span class=\"n\">GetFrame</span><span class=\"p\">();</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">stamp</span><span class=\"p\">.</span><span class=\"n\">sec</span> <span class=\"o\">=</span> <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">LastMeasurementTime</span><span class=\"p\">().</span><span class=\"n\">sec</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">stamp</span><span class=\"p\">.</span><span class=\"n\">nsec</span> <span class=\"o\">=</span> <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">LastMeasurementTime</span><span class=\"p\">().</span><span class=\"n\">nsec</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">width</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">point_step</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">row_step</span> <span class=\"o\">=</span> <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">point_step</span> <span class=\"o\">*</span> <span class=\"n\">width</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">is_dense</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">is_bigendian</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"c1\">// Declare the striped memory layout</span>\n    <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2Modifier</span> <span class=\"n\">pcd_modifier</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">);</span>\n    <span class=\"n\">pcd_modifier</span><span class=\"p\">.</span><span class=\"n\">setPointCloud2FieldsByString</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&quot;xyz&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2Iterator</span><span class=\"o\">&lt;</span><span class=\"kt\">float</span><span class=\"o\">&gt;</span> <span class=\"n\">iter_x</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">,</span> <span class=\"s\">&quot;x&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2Iterator</span><span class=\"o\">&lt;</span><span class=\"kt\">float</span><span class=\"o\">&gt;</span> <span class=\"n\">iter_y</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">,</span> <span class=\"s\">&quot;y&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2Iterator</span><span class=\"o\">&lt;</span><span class=\"kt\">float</span><span class=\"o\">&gt;</span> <span class=\"n\">iter_z</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">,</span> <span class=\"s\">&quot;z&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">const</span> <span class=\"kt\">uint8_t</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"kt\">uint8_t</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">width</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">iter_x</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">iter_y</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">iter_z</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">width</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"o\">*</span><span class=\"n\">iter_x</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">];</span>\n        <span class=\"o\">*</span><span class=\"n\">iter_y</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"o\">*</span><span class=\"n\">iter_z</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">];</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">point_cloud_pub_</span><span class=\"p\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n <span class=\"k\">private</span><span class=\"o\">:</span>\n  <span class=\"c1\">// ROS variables</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Publisher</span> <span class=\"n\">image_pub_</span><span class=\"p\">;</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Publisher</span> <span class=\"n\">point_cloud_pub_</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Sensor pointer</span>\n  <span class=\"n\">sensors</span><span class=\"o\">::</span><span class=\"n\">DepthCameraSensorPtr</span> <span class=\"n\">sensor_</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Camera and Point Cloud messages</span>\n  <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">Image</span> <span class=\"n\">image_msg_</span><span class=\"p\">;</span>\n  <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2</span> <span class=\"n\">point_cloud_msg_</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Gazebo variables</span>\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">WorldPtr</span> <span class=\"n\">world_</span><span class=\"p\">;</span>\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">ModelPtr</span> <span class=\"n\">model_</span><span class=\"p\">;</span>\n  <span class=\"n\">event</span><span class=\"o\">::</span><span class=\"n\">ConnectionPtr</span> <span class=\"n\">update_</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">frame_id_</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">GZ_REGISTER_SENSOR_PLUGIN</span><span class=\"p\">(</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"p\">)</span>\n\n<span class=\"p\">}</span>   <span class=\"c1\">// namespace gazebo</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-08T01:41:49.644346+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2017-08-08T01:42:59.341211+00:00", "type": "issue_comment", "id": 38948640}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38948831.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38948831"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "What's quite interesting is that I can see  the ```DepthSensor``` plugin references the Gazebo material ```Gazebo/XYZPoints``` defined in ```gazebo.material``` file (snippet included below). However, editing both the ```depth_points_map.vert``` and ```depth_points_map.frag``` files in the media path has zero effect on the outcome. The point cloud appears the same in all cases. It's almost as if its ignoring the two shaders completely when generating the point cloud...\n\n\n```\n#!txt\n\nvertex_program Gazebo/XYZPointsVS glsl\n{\n  source depth_points_map.vert\n}\n\nfragment_program Gazebo/XYZPointsFS glsl\n{\n  source depth_points_map.frag\n\n  default_params\n  {\n    param_named_auto width viewport_width\n    param_named_auto height viewport_height\n  }\n}\n\nmaterial Gazebo/XYZPoints\n{\n  technique\n  {\n    pass pcd_tex\n    {\n      separate_scene_blend one zero one zero\n\n      vertex_program_ref Gazebo/XYZPointsVS { }\n      fragment_program_ref Gazebo/XYZPointsFS { }\n    }\n  }\n}\n\n```", "markup": "markdown", "html": "<p>What's quite interesting is that I can see  the <code>DepthSensor</code> plugin references the Gazebo material <code>Gazebo/XYZPoints</code> defined in <code>gazebo.material</code> file (snippet included below). However, editing both the <code>depth_points_map.vert</code> and <code>depth_points_map.frag</code> files in the media path has zero effect on the outcome. The point cloud appears the same in all cases. It's almost as if its ignoring the two shaders completely when generating the point cloud...</p>\n<div class=\"codehilite language-txt\"><pre><span></span>vertex_program Gazebo/XYZPointsVS glsl\n{\n  source depth_points_map.vert\n}\n\nfragment_program Gazebo/XYZPointsFS glsl\n{\n  source depth_points_map.frag\n\n  default_params\n  {\n    param_named_auto width viewport_width\n    param_named_auto height viewport_height\n  }\n}\n\nmaterial Gazebo/XYZPoints\n{\n  technique\n  {\n    pass pcd_tex\n    {\n      separate_scene_blend one zero one zero\n\n      vertex_program_ref Gazebo/XYZPointsVS { }\n      fragment_program_ref Gazebo/XYZPointsFS { }\n    }\n  }\n}\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-08T02:02:29.643848+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2017-08-08T02:03:46.300574+00:00", "type": "issue_comment", "id": 38948831}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38974222.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38974222"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "I did a little debugging and seems like the resulting XYZ points provided in `float *data` are given in x-right, y-up, and z-forward frame, which is probably not the values we want to publish to rviz. Can you confirm if that's the case? If so, I can come up with a quick fix for it.", "markup": "markdown", "html": "<p>I did a little debugging and seems like the resulting XYZ points provided in <code>float *data</code> are given in x-right, y-up, and z-forward frame, which is probably not the values we want to publish to rviz. Can you confirm if that's the case? If so, I can come up with a quick fix for it.</p>", "type": "rendered"}, "created_on": "2017-08-09T01:42:45.651998+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": null, "type": "issue_comment", "id": 38974222}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38976925.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38976925"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "Hi Ian\n\nThis is not a straightforward transformation/frame/extrinsics problem, but rather an issue with the point cloud itself (the data is garbage for me right now). Can you confirm that my plugin code produces a sensible point cloud in rviz on your computer? If it does, then it's probably down to the shader not working as expected in VMWare.\n\nCheers\nAndrew", "markup": "markdown", "html": "<p>Hi Ian</p>\n<p>This is not a straightforward transformation/frame/extrinsics problem, but rather an issue with the point cloud itself (the data is garbage for me right now). Can you confirm that my plugin code produces a sensible point cloud in rviz on your computer? If it does, then it's probably down to the shader not working as expected in VMWare.</p>\n<p>Cheers\nAndrew</p>", "type": "rendered"}, "created_on": "2017-08-09T05:26:41.495124+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": null, "type": "issue_comment", "id": 38976925}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/39001706.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-39001706"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "OK -- I have now managed to run my code in a native environment, and I can confirm that the point cloud looks sane. So, this must be a VMWare  OpenGL 2.1 quirk. I dont understand why the wide angle camera lens shader appears to work, but the depth sensor point cloud does not. Having seen what the cloud now looks like, I agree with your earlier comments about the frame convention. My opinion would be that the resulting frame of the point cloud should match that produced by the gazebo_ros_pkgs depth camera plugin for compatibility reasons. Does this seem sensible?", "markup": "markdown", "html": "<p>OK -- I have now managed to run my code in a native environment, and I can confirm that the point cloud looks sane. So, this must be a VMWare  OpenGL 2.1 quirk. I dont understand why the wide angle camera lens shader appears to work, but the depth sensor point cloud does not. Having seen what the cloud now looks like, I agree with your earlier comments about the frame convention. My opinion would be that the resulting frame of the point cloud should match that produced by the gazebo_ros_pkgs depth camera plugin for compatibility reasons. Does this seem sensible?</p>", "type": "rendered"}, "created_on": "2017-08-10T03:42:04.466378+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2017-08-10T03:42:37.023939+00:00", "type": "issue_comment", "id": 39001706}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/39082952.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-39082952"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "I finally got to set up vmware and test this in gazebo7. I can confirm that the `depth_points_map` shaders produce incorrect 3D point data. \n\nI did a quick fix:\n\n~~~\ndiff -r 5f41b719c1fe media/materials/programs/depth_points_map.frag\n--- a/media/materials/programs/depth_points_map.frag\tFri Jul 28 00:49:20 2017 +0000\n+++ b/media/materials/programs/depth_points_map.frag\tMon Aug 14 16:24:04 2017 -0700\n@@ -1,4 +1,4 @@\n-#version 130\n+#version 120\n \n uniform sampler2D tex;\n \n@@ -11,6 +11,7 @@\n {\n   //vec3 color = 255 * texture2D(tex, vec2(gl_FragCoord.s / width , gl_FragCoord.t / height)).xyz;\n   vec3 color = vec3(80, 0, 0);\n-  int rgb = int(color.r) << 16 | int(color.g) << 8 | int(color.b);\n-  gl_FragColor = vec4(point.xyz, rgb);\n+  // int rgb = int(color.r) << 16 | int(color.g) << 8 | int(color.b);\n+  int rgb = 1;\n+  gl_FragColor = vec4(point.z, -point.x, point.y, rgb);\n }\n~~~\n\nI downgraded glsl version and commented out the rgb bitwise operation (which only works in glsl 130), and that seems to have fixed the problem in vmware. The point cloud rgb value were already not valid before so I just set it to 1. I also updated the frame of the 3D points returned by this shader. Let me know if that looks to you and I'll create a PR with a test.", "markup": "markdown", "html": "<p>I finally got to set up vmware and test this in gazebo7. I can confirm that the <code>depth_points_map</code> shaders produce incorrect 3D point data. </p>\n<p>I did a quick fix:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 5f41b719c1fe media/materials/programs/depth_points_map.frag</span>\n<span class=\"gd\">--- a/media/materials/programs/depth_points_map.frag    Fri Jul 28 00:49:20 2017 +0000</span>\n<span class=\"gi\">+++ b/media/materials/programs/depth_points_map.frag    Mon Aug 14 16:24:04 2017 -0700</span>\n<span class=\"gu\">@@ -1,4 +1,4 @@</span>\n<span class=\"gd\">-#version 130</span>\n<span class=\"gi\">+#version 120</span>\n\n uniform sampler2D tex;\n\n<span class=\"gu\">@@ -11,6 +11,7 @@</span>\n {\n   //vec3 color = 255 * texture2D(tex, vec2(gl_FragCoord.s / width , gl_FragCoord.t / height)).xyz;\n   vec3 color = vec3(80, 0, 0);\n<span class=\"gd\">-  int rgb = int(color.r) &lt;&lt; 16 | int(color.g) &lt;&lt; 8 | int(color.b);</span>\n<span class=\"gd\">-  gl_FragColor = vec4(point.xyz, rgb);</span>\n<span class=\"gi\">+  // int rgb = int(color.r) &lt;&lt; 16 | int(color.g) &lt;&lt; 8 | int(color.b);</span>\n<span class=\"gi\">+  int rgb = 1;</span>\n<span class=\"gi\">+  gl_FragColor = vec4(point.z, -point.x, point.y, rgb);</span>\n }\n</pre></div>\n\n\n<p>I downgraded glsl version and commented out the rgb bitwise operation (which only works in glsl 130), and that seems to have fixed the problem in vmware. The point cloud rgb value were already not valid before so I just set it to 1. I also updated the frame of the 3D points returned by this shader. Let me know if that looks to you and I'll create a PR with a test.</p>", "type": "rendered"}, "created_on": "2017-08-14T23:34:00.838107+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": null, "type": "issue_comment", "id": 39082952}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/39083453.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-39083453"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "I can confirm that your patch fixes the point cloud generation - thank you! However, the reference frame differs from that of the [openni_kinect](https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_openni_kinect.cpp) plugin. To align the two frames I had to use this line in the shader:\n\n```\n#!glsl\ngl_FragColor = vec4(point.x, point.y, point.z, rgb);\n\n```\n\nIs there any chance we can get a release on the 7.x branch with this fix?", "markup": "markdown", "html": "<p>I can confirm that your patch fixes the point cloud generation - thank you! However, the reference frame differs from that of the <a data-is-external-link=\"true\" href=\"https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_openni_kinect.cpp\" rel=\"nofollow\">openni_kinect</a> plugin. To align the two frames I had to use this line in the shader:</p>\n<div class=\"codehilite language-glsl\"><pre><span></span><span class=\"n\">gl_FragColor</span> <span class=\"o\">=</span> <span class=\"k\">vec4</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">point</span><span class=\"p\">.</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">rgb</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Is there any chance we can get a release on the 7.x branch with this fix?</p>", "type": "rendered"}, "created_on": "2017-08-15T00:46:18.930008+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": null, "type": "issue_comment", "id": 39083453}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/39100798.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-39100798"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "ok I'll keep the frames consistent. I'm writing a test and will submit a PR against gazebo7 when ready", "markup": "markdown", "html": "<p>ok I'll keep the frames consistent. I'm writing a test and will submit a PR against gazebo7 when ready</p>", "type": "rendered"}, "created_on": "2017-08-15T17:45:22.520458+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": null, "type": "issue_comment", "id": 39100798}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/39101551.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-39101551"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "Fantastic. Thank you, Ian.", "markup": "markdown", "html": "<p>Fantastic. Thank you, Ian.</p>", "type": "rendered"}, "created_on": "2017-08-15T18:36:58.371631+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": null, "type": "issue_comment", "id": 39101551}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/39103960.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-39103960"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "pull request #2767", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo/pull-requests/2767/update-depth-camera-shaders-version\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2767</a></p>", "type": "rendered"}, "created_on": "2017-08-15T20:55:32.524999+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": null, "type": "issue_comment", "id": 39103960}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/39104217.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-39104217"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "I didn't realize that my Y was inverted until now. I had to update my fragment shader to this:\n\n```\ngl_FragColor = vec4(point.x, -point.y, point.z, rgb);\n```\n\nI'm not sure if this is a quirk of my Z-down convention, but  I thought I'd mention it to you in case your test case fails.", "markup": "markdown", "html": "<p>I didn't realize that my Y was inverted until now. I had to update my fragment shader to this:</p>\n<div class=\"codehilite\"><pre><span></span>gl_FragColor = vec4(point.x, -point.y, point.z, rgb);\n</pre></div>\n\n\n<p>I'm not sure if this is a quirk of my Z-down convention, but  I thought I'd mention it to you in case your test case fails.</p>", "type": "rendered"}, "created_on": "2017-08-15T21:16:36.319037+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": null, "type": "issue_comment", "id": 39104217}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/39104549.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-39104549"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "After searching around online, e.g [here](https://github.com/OpenNI/OpenNI/blob/master/Source/DoxyGen/Text/Concepts.CoordinateSystems.txt), and [here](https://answers.ros.org/question/36142/points-in-a-pointcloud-and-their-distance-from-camera/) looks like it's indeed Y down. It make sense that the all frames in ROS are right handed as per [REP103](http://www.ros.org/reps/rep-0103.html). I've updated the PR and the test.", "markup": "markdown", "html": "<p>After searching around online, e.g <a data-is-external-link=\"true\" href=\"https://github.com/OpenNI/OpenNI/blob/master/Source/DoxyGen/Text/Concepts.CoordinateSystems.txt\" rel=\"nofollow\">here</a>, and <a data-is-external-link=\"true\" href=\"https://answers.ros.org/question/36142/points-in-a-pointcloud-and-their-distance-from-camera/\" rel=\"nofollow\">here</a> looks like it's indeed Y down. It make sense that the all frames in ROS are right handed as per <a data-is-external-link=\"true\" href=\"http://www.ros.org/reps/rep-0103.html\" rel=\"nofollow\">REP103</a>. I've updated the PR and the test.</p>", "type": "rendered"}, "created_on": "2017-08-15T21:45:32.438282+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": null, "type": "issue_comment", "id": 39104549}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/39511795.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-39511795"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "pull request #2767", "markup": "markdown", "html": "<p><a href=\"#!/osrf/gazebo/pull-requests/2767/update-depth-camera-shaders-version\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #2767</a></p>", "type": "rendered"}, "created_on": "2017-08-30T21:03:02.200670+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": null, "type": "issue_comment", "id": 39511795}], "page": 1, "size": 18}