{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323/comments/38948640.json"}, "html": {"href": "#!/osrf/gazebo/issues/2323#comment-38948640"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2323.json"}}, "type": "issue", "id": 2323, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "DepthCamera::ConnectNewRGBPointCloud() produces malformed point clouds"}, "content": {"raw": "Hi Ian\n\nI'm reasonably confident that I have a handle on packing point clouds, since I wrote a similar-style driver for the picoflexx camera. I'd think that a ```std::copy``` of striped memory will ultimately be a bit faster than an iteration over all voxels in the image.  However, just to be sure that my implementation is correct I adapted my code to use ```setPointCloud2FieldsByString```. The result is exactly the same. My code follows below. Has anybody ever got ```DepthSensor::ConnectNewRGBPointCloud``` working?\n\n\n\n```\n#!c++\n\n// ROS includes\n#include <ros/ros.h>\n\n// Sensor plugin interface\n#include <astrobee_gazebo/astrobee_gazebo.h>\n\n// IMU Sensor message\n#include <sensor_msgs/Image.h>\n#include <sensor_msgs/image_encodings.h>\n#include <sensor_msgs/PointCloud2.h>\n#include <sensor_msgs/point_cloud2_iterator.h>\n\n// STL includes\n#include <string>\n\nnamespace gazebo {\nclass GazeboSensorPluginHazCam : public RosSensorPlugin {\n public:\n  GazeboSensorPluginHazCam() : RosSensorPlugin(\"haz_cam\") {}\n\n  ~GazeboSensorPluginHazCam() {}\n\n protected:\n  // Called when plugin is loaded into gazebo\n  void LoadCallback(ros::NodeHandle *nh, sensors::SensorPtr sensor, sdf::ElementPtr sdf) {\n    // Get a link to the parent sensor\n    sensor_ = std::dynamic_pointer_cast < sensors::DepthCameraSensor > (sensor);\n    if (!sensor_) {\n      gzerr << \"GazeboSensorPluginHazCam requires a camera sensor as a parent.\\n\";\n      return;\n    }\n   // Create a publisher for the point cloud\n    point_cloud_pub_ = nh->advertise<sensor_msgs::PointCloud2>(\"/points\", 1,\n      boost::bind(&GazeboSensorPluginHazCam::ToggleCallback, this),\n      boost::bind(&GazeboSensorPluginHazCam::ToggleCallback, this));\n    // Listen to the point cloud\n    update_ = sensor_->DepthCamera()->ConnectNewRGBPointCloud(\n      boost::bind(&GazeboSensorPluginHazCam::Callback, this, _1, _2, _3, _4, _5));\n  }\n\n  // Turn camera on or off based on topic subscription\n  void ToggleCallback() {\n    if (point_cloud_pub_.getNumSubscribers() > 0 || image_pub_.getNumSubscribers() > 0)\n      sensor_->SetActive(true);\n    else\n      sensor_->SetActive(false);\n  }\n \n  // this->dataPtr->depthBuffer, width, height, 1, \"FLOAT32\"\n  void Callback(const float *data, unsigned int width, unsigned height, unsigned int len, const std::string & type) {\n    if (!sensor_->IsActive())\n      return;\n    gzmsg << \"Pointcloud callback!\\n\";\n    point_cloud_msg_.header.frame_id = GetFrame();\n    point_cloud_msg_.header.stamp.sec = sensor_->LastMeasurementTime().sec;\n    point_cloud_msg_.header.stamp.nsec = sensor_->LastMeasurementTime().nsec;\n    point_cloud_msg_.width = width;\n    point_cloud_msg_.height = height;\n    point_cloud_msg_.point_step = sizeof(float) * 3;\n    point_cloud_msg_.row_step = point_cloud_msg_.point_step * width;\n    point_cloud_msg_.is_dense = true;\n    point_cloud_msg_.is_bigendian = false;\n    // Declare the striped memory layout\n    sensor_msgs::PointCloud2Modifier pcd_modifier(point_cloud_msg_);\n    pcd_modifier.setPointCloud2FieldsByString(1, \"xyz\");\n    sensor_msgs::PointCloud2Iterator<float> iter_x(point_cloud_msg_, \"x\");\n    sensor_msgs::PointCloud2Iterator<float> iter_y(point_cloud_msg_, \"y\");\n    sensor_msgs::PointCloud2Iterator<float> iter_z(point_cloud_msg_, \"z\");\n    const uint8_t* ptr = reinterpret_cast<const uint8_t*>(data);\n    for (unsigned int i = 0; i < width; i++) {\n      for (unsigned int j = 0; j < height; j++, ++iter_x, ++iter_y, ++iter_z) {\n        unsigned int index = (j * width) + i;\n        *iter_x = reinterpret_cast<const float*>(ptr)[4*index + 0];\n        *iter_y = reinterpret_cast<const float*>(ptr)[4*index + 1];\n        *iter_z = reinterpret_cast<const float*>(ptr)[4*index + 2];\n      }\n    }\n    point_cloud_pub_.publish(point_cloud_msg_);\n  }\n\n private:\n  // ROS variables\n  ros::Publisher image_pub_;\n  ros::Publisher point_cloud_pub_;\n  // Sensor pointer\n  sensors::DepthCameraSensorPtr sensor_;\n  // Camera and Point Cloud messages\n  sensor_msgs::Image image_msg_;\n  sensor_msgs::PointCloud2 point_cloud_msg_;\n  // Gazebo variables\n  physics::WorldPtr world_;\n  physics::ModelPtr model_;\n  event::ConnectionPtr update_;\n  std::string frame_id_;\n};\n\nGZ_REGISTER_SENSOR_PLUGIN(GazeboSensorPluginHazCam)\n\n}   // namespace gazebo\n\n```", "markup": "markdown", "html": "<p>Hi Ian</p>\n<p>I'm reasonably confident that I have a handle on packing point clouds, since I wrote a similar-style driver for the picoflexx camera. I'd think that a <code>std::copy</code> of striped memory will ultimately be a bit faster than an iteration over all voxels in the image.  However, just to be sure that my implementation is correct I adapted my code to use <code>setPointCloud2FieldsByString</code>. The result is exactly the same. My code follows below. Has anybody ever got <code>DepthSensor::ConnectNewRGBPointCloud</code> working?</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// ROS includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ros/ros.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// Sensor plugin interface</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;astrobee_gazebo/astrobee_gazebo.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// IMU Sensor message</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sensor_msgs/Image.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sensor_msgs/image_encodings.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sensor_msgs/PointCloud2.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sensor_msgs/point_cloud2_iterator.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// STL includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">gazebo</span> <span class=\"p\">{</span>\n<span class=\"k\">class</span> <span class=\"nc\">GazeboSensorPluginHazCam</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">RosSensorPlugin</span> <span class=\"p\">{</span>\n <span class=\"k\">public</span><span class=\"o\">:</span>\n  <span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"n\">RosSensorPlugin</span><span class=\"p\">(</span><span class=\"s\">&quot;haz_cam&quot;</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"o\">~</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n\n <span class=\"k\">protected</span><span class=\"o\">:</span>\n  <span class=\"c1\">// Called when plugin is loaded into gazebo</span>\n  <span class=\"kt\">void</span> <span class=\"n\">LoadCallback</span><span class=\"p\">(</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">NodeHandle</span> <span class=\"o\">*</span><span class=\"n\">nh</span><span class=\"p\">,</span> <span class=\"n\">sensors</span><span class=\"o\">::</span><span class=\"n\">SensorPtr</span> <span class=\"n\">sensor</span><span class=\"p\">,</span> <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"n\">sdf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Get a link to the parent sensor</span>\n    <span class=\"n\">sensor_</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">dynamic_pointer_cast</span> <span class=\"o\">&lt;</span> <span class=\"n\">sensors</span><span class=\"o\">::</span><span class=\"n\">DepthCameraSensor</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">sensor_</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">gzerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;GazeboSensorPluginHazCam requires a camera sensor as a parent.</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n   <span class=\"c1\">// Create a publisher for the point cloud</span>\n    <span class=\"n\">point_cloud_pub_</span> <span class=\"o\">=</span> <span class=\"n\">nh</span><span class=\"o\">-&gt;</span><span class=\"n\">advertise</span><span class=\"o\">&lt;</span><span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;/points&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"o\">::</span><span class=\"n\">ToggleCallback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">),</span>\n      <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"o\">::</span><span class=\"n\">ToggleCallback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">));</span>\n    <span class=\"c1\">// Listen to the point cloud</span>\n    <span class=\"n\">update_</span> <span class=\"o\">=</span> <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">DepthCamera</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">ConnectNewRGBPointCloud</span><span class=\"p\">(</span>\n      <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"o\">::</span><span class=\"n\">Callback</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">,</span> <span class=\"n\">_2</span><span class=\"p\">,</span> <span class=\"n\">_3</span><span class=\"p\">,</span> <span class=\"n\">_4</span><span class=\"p\">,</span> <span class=\"n\">_5</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// Turn camera on or off based on topic subscription</span>\n  <span class=\"kt\">void</span> <span class=\"n\">ToggleCallback</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">point_cloud_pub_</span><span class=\"p\">.</span><span class=\"n\">getNumSubscribers</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">image_pub_</span><span class=\"p\">.</span><span class=\"n\">getNumSubscribers</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">SetActive</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">SetActive</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// this-&gt;dataPtr-&gt;depthBuffer, width, height, 1, &quot;FLOAT32&quot;</span>\n  <span class=\"kt\">void</span> <span class=\"n\">Callback</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span> <span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">IsActive</span><span class=\"p\">())</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"n\">gzmsg</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Pointcloud callback!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">frame_id</span> <span class=\"o\">=</span> <span class=\"n\">GetFrame</span><span class=\"p\">();</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">stamp</span><span class=\"p\">.</span><span class=\"n\">sec</span> <span class=\"o\">=</span> <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">LastMeasurementTime</span><span class=\"p\">().</span><span class=\"n\">sec</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">stamp</span><span class=\"p\">.</span><span class=\"n\">nsec</span> <span class=\"o\">=</span> <span class=\"n\">sensor_</span><span class=\"o\">-&gt;</span><span class=\"n\">LastMeasurementTime</span><span class=\"p\">().</span><span class=\"n\">nsec</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">width</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">point_step</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">row_step</span> <span class=\"o\">=</span> <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">point_step</span> <span class=\"o\">*</span> <span class=\"n\">width</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">is_dense</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"n\">point_cloud_msg_</span><span class=\"p\">.</span><span class=\"n\">is_bigendian</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"c1\">// Declare the striped memory layout</span>\n    <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2Modifier</span> <span class=\"n\">pcd_modifier</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">);</span>\n    <span class=\"n\">pcd_modifier</span><span class=\"p\">.</span><span class=\"n\">setPointCloud2FieldsByString</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&quot;xyz&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2Iterator</span><span class=\"o\">&lt;</span><span class=\"kt\">float</span><span class=\"o\">&gt;</span> <span class=\"n\">iter_x</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">,</span> <span class=\"s\">&quot;x&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2Iterator</span><span class=\"o\">&lt;</span><span class=\"kt\">float</span><span class=\"o\">&gt;</span> <span class=\"n\">iter_y</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">,</span> <span class=\"s\">&quot;y&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2Iterator</span><span class=\"o\">&lt;</span><span class=\"kt\">float</span><span class=\"o\">&gt;</span> <span class=\"n\">iter_z</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">,</span> <span class=\"s\">&quot;z&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">const</span> <span class=\"kt\">uint8_t</span><span class=\"o\">*</span> <span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"kt\">uint8_t</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">width</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">iter_x</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">iter_y</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"n\">iter_z</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"n\">width</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"o\">*</span><span class=\"n\">iter_x</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">];</span>\n        <span class=\"o\">*</span><span class=\"n\">iter_y</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"o\">*</span><span class=\"n\">iter_z</span> <span class=\"o\">=</span> <span class=\"k\">reinterpret_cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">];</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">point_cloud_pub_</span><span class=\"p\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">point_cloud_msg_</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n <span class=\"k\">private</span><span class=\"o\">:</span>\n  <span class=\"c1\">// ROS variables</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Publisher</span> <span class=\"n\">image_pub_</span><span class=\"p\">;</span>\n  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Publisher</span> <span class=\"n\">point_cloud_pub_</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Sensor pointer</span>\n  <span class=\"n\">sensors</span><span class=\"o\">::</span><span class=\"n\">DepthCameraSensorPtr</span> <span class=\"n\">sensor_</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Camera and Point Cloud messages</span>\n  <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">Image</span> <span class=\"n\">image_msg_</span><span class=\"p\">;</span>\n  <span class=\"n\">sensor_msgs</span><span class=\"o\">::</span><span class=\"n\">PointCloud2</span> <span class=\"n\">point_cloud_msg_</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Gazebo variables</span>\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">WorldPtr</span> <span class=\"n\">world_</span><span class=\"p\">;</span>\n  <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">ModelPtr</span> <span class=\"n\">model_</span><span class=\"p\">;</span>\n  <span class=\"n\">event</span><span class=\"o\">::</span><span class=\"n\">ConnectionPtr</span> <span class=\"n\">update_</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">frame_id_</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">GZ_REGISTER_SENSOR_PLUGIN</span><span class=\"p\">(</span><span class=\"n\">GazeboSensorPluginHazCam</span><span class=\"p\">)</span>\n\n<span class=\"p\">}</span>   <span class=\"c1\">// namespace gazebo</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-08T01:41:49.644346+00:00", "user": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "updated_on": "2017-08-08T01:42:59.341211+00:00", "type": "issue_comment", "id": 38948640}