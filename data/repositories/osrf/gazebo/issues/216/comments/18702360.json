{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/216/comments/18702360.json"}, "html": {"href": "#!/osrf/gazebo/issues/216#comment-18702360"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/216.json"}}, "type": "issue", "id": 216, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Pose addition and subtraction needs work"}, "content": {"raw": "+1, especially to the last comment. \nWhile working on #1278 I had an hard time to realize the real meaning of `operator*`. \n\nIn general if I have a transform `A_Transform_B` (i.e. the transformation that transforms vector expressed in frame B to vector expressed in frame A, in the sense `Vec_A` = \n`A_Transform_B`*`vec_B`) , then I would expect that:\n\n`A_Transform_C` = `A_Transform_B`*`B_Transform_C`. \n\nIn `gazebo::math` (and also in the new `ignition::math`) the  `A_Transform_B`*`B_Transform_C` product is `C_Transform_A` instead. \n\nThis is particularly counterintuitive for people used to deal with `Pose`-like classes expressed as 4x4 Homogeneous Matrices. ", "markup": "markdown", "html": "<p>+1, especially to the last comment. \nWhile working on <a href=\"#!/osrf/gazebo/issues/1278/support-fixed-joint-types-in-gazebo\" rel=\"nofollow\" title=\"support fixed joint types in Gazebo\" class=\"ap-connect-link\"><s>#1278</s></a> I had an hard time to realize the real meaning of <code>operator*</code>. </p>\n<p>In general if I have a transform <code>A_Transform_B</code> (i.e. the transformation that transforms vector expressed in frame B to vector expressed in frame A, in the sense <code>Vec_A</code> = \n<code>A_Transform_B</code>*<code>vec_B</code>) , then I would expect that:</p>\n<p><code>A_Transform_C</code> = <code>A_Transform_B</code>*<code>B_Transform_C</code>. </p>\n<p>In <code>gazebo::math</code> (and also in the new <code>ignition::math</code>) the  <code>A_Transform_B</code>*<code>B_Transform_C</code> product is <code>C_Transform_A</code> instead. </p>\n<p>This is particularly counterintuitive for people used to deal with <code>Pose</code>-like classes expressed as 4x4 Homogeneous Matrices. </p>", "type": "rendered"}, "created_on": "2015-06-09T22:06:33.491856+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": "2015-06-09T22:24:25.484784+00:00", "type": "issue_comment", "id": 18702360}