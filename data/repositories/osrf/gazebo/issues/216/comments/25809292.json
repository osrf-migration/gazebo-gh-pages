{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/216/comments/25809292.json"}, "html": {"href": "#!/osrf/gazebo/issues/216#comment-25809292"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/216.json"}}, "type": "issue", "id": 216, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Pose addition and subtraction needs work"}, "content": {"raw": "> If the goal is to have `Pose::operator*` behave like `Matrix4::operator*`, then maybe we need to swap the arguments around in the operator, but I can't \nimagine doing that without breaking a bunch of existing stuff.\n\nAnything that stops working after fixing `Pose::operator*` is _already_ broken.\n\nI never trusted the add/subtract operators of the `Pose` class, but I always assumed that the multiplication operator was standard non-commutative multiplication over SE(3). This means that premultiplying and postmultiplying mean different things. For `Pose`, however, all transforms are composed in a body-fixed manner even when you premultiply them.\n\nAs a result, I don't do any actual math with the structures from the `gazebo::math` namespace because they seem to not follow mathematical conventions. Unlike gazebo, KDL does pose multiplication properly:\n\n```c++\n Frame operator *(const Frame& lhs,const Frame& rhs)\n// Complexity : 36M+36A\n{\n    return Frame(lhs.M*rhs.M,lhs.M*rhs.p+lhs.p);\n}\n```\n\nMeanwhile this is also even *still* broken in ign-math: https://bitbucket.org/ignitionrobotics/ign-math/src/d1caec2b23082e84979a6e5f7461bf53505fddb1/include/ignition/math/Pose3.hh?at=default&fileviewer=file-view-default#Pose3.hh-215:218", "markup": "markdown", "html": "<blockquote>\n<p>If the goal is to have <code>Pose::operator*</code> behave like <code>Matrix4::operator*</code>, then maybe we need to swap the arguments around in the operator, but I can't \nimagine doing that without breaking a bunch of existing stuff.</p>\n</blockquote>\n<p>Anything that stops working after fixing <code>Pose::operator*</code> is <em>already</em> broken.</p>\n<p>I never trusted the add/subtract operators of the <code>Pose</code> class, but I always assumed that the multiplication operator was standard non-commutative multiplication over SE(3). This means that premultiplying and postmultiplying mean different things. For <code>Pose</code>, however, all transforms are composed in a body-fixed manner even when you premultiply them.</p>\n<p>As a result, I don't do any actual math with the structures from the <code>gazebo::math</code> namespace because they seem to not follow mathematical conventions. Unlike gazebo, KDL does pose multiplication properly:</p>\n<div class=\"codehilite language-c++\"><pre><span></span> <span class=\"n\">Frame</span> <span class=\"k\">operator</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Frame</span><span class=\"o\">&amp;</span> <span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"k\">const</span> <span class=\"n\">Frame</span><span class=\"o\">&amp;</span> <span class=\"n\">rhs</span><span class=\"p\">)</span>\n<span class=\"c1\">// Complexity : 36M+36A</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Frame</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">.</span><span class=\"n\">M</span><span class=\"o\">*</span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">M</span><span class=\"p\">,</span><span class=\"n\">lhs</span><span class=\"p\">.</span><span class=\"n\">M</span><span class=\"o\">*</span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">p</span><span class=\"o\">+</span><span class=\"n\">lhs</span><span class=\"p\">.</span><span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Meanwhile this is also even <em>still</em> broken in ign-math: <a href=\"https://bitbucket.org/ignitionrobotics/ign-math/src/d1caec2b23082e84979a6e5f7461bf53505fddb1/include/ignition/math/Pose3.hh?at=default&amp;fileviewer=file-view-default#Pose3.hh-215:218\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/ignitionrobotics/ign-math/src/d1caec2b23082e84979a6e5f7461bf53505fddb1/include/ignition/math/Pose3.hh?at=default&amp;fileviewer=file-view-default#Pose3.hh-215:218</a></p>", "type": "rendered"}, "created_on": "2016-02-27T00:21:01.980743+00:00", "user": {"display_name": "Jonathan Bohren", "uuid": "{588087c1-4405-46da-b019-43f00b894b30}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B588087c1-4405-46da-b019-43f00b894b30%7D"}, "html": {"href": "https://bitbucket.org/%7B588087c1-4405-46da-b019-43f00b894b30%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jbohren/avatar/"}}, "nickname": "jbohren", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 25809292}