{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/892/comments/25279718.json"}, "html": {"href": "#!/osrf/gazebo/issues/892#comment-25279718"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/892.json"}}, "type": "issue", "id": 892, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Installed ode headers have wrong path"}, "content": {"raw": "Guys, this has still been a pretty annoying issue for me in Gazebo 7. Do you have any ideas on how to solve it? I agree the above patch is not ideal, because it could spoil someone else's code. However, users should be given the possibility to include Gazebo's version of headers, ideally by `#include <gazebo/ode/ode.h>`, which unfortunately does not work.\n\nUntil this is fixed in upstream, I use a workaround like this one:\n\n\n```\n#!c++\nlist(GET GAZEBO_INCLUDE_DIRS 1 GAZEBO_INCLUDE_HACK)\ninclude_directories(${Boost_INCLUDE_DIR} ${GAZEBO_INCLUDE_DIRS} ${GAZEBO_INCLUDE_HACK}/gazebo)\n\n```\n\nThis allows me to specifically ask to use Gazebo's ODE headers for projects that need them, and leave other projects \"just using Gazebo\" without the possibly unwanted ODE path setting. I don't know if this is better for Gazebo than patching all ODE files.\n\nIf you like this idea, we might provide variables like `GAZEBO_ODE_INCLUDE_DIRS` for everybody to use when he likes it.", "markup": "markdown", "html": "<p>Guys, this has still been a pretty annoying issue for me in Gazebo 7. Do you have any ideas on how to solve it? I agree the above patch is not ideal, because it could spoil someone else's code. However, users should be given the possibility to include Gazebo's version of headers, ideally by <code>#include &lt;gazebo/ode/ode.h&gt;</code>, which unfortunately does not work.</p>\n<p>Until this is fixed in upstream, I use a workaround like this one:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">GET</span> <span class=\"n\">GAZEBO_INCLUDE_DIRS</span> <span class=\"mi\">1</span> <span class=\"n\">GAZEBO_INCLUDE_HACK</span><span class=\"p\">)</span>\n<span class=\"n\">include_directories</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">Boost_INCLUDE_DIR</span><span class=\"p\">}</span> <span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">GAZEBO_INCLUDE_DIRS</span><span class=\"p\">}</span> <span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">GAZEBO_INCLUDE_HACK</span><span class=\"p\">}</span><span class=\"o\">/</span><span class=\"n\">gazebo</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>This allows me to specifically ask to use Gazebo's ODE headers for projects that need them, and leave other projects \"just using Gazebo\" without the possibly unwanted ODE path setting. I don't know if this is better for Gazebo than patching all ODE files.</p>\n<p>If you like this idea, we might provide variables like <code>GAZEBO_ODE_INCLUDE_DIRS</code> for everybody to use when he likes it.</p>", "type": "rendered"}, "created_on": "2016-02-05T14:45:37.522008+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": null, "type": "issue_comment", "id": 25279718}