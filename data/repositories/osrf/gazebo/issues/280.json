{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/280/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/280.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/280/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/280/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/280/allow-for-command-line-arguments-to-system"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/280/vote"}}, "reporter": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "title": "allow for command-line arguments to system plugins", "component": null, "votes": 2, "watches": 7, "content": {"raw": "We propose the addition of a `--server-plugin-args` or `-a` command line argument used for passing strings options to a server system plugin.  For example:\r\n\r\n~~~\r\ngazebo -s libsystemplugin.so my.world --server-plugin-args \"__name:=rosnode_name\"\r\n~~~\r\n\r\nor equivalently\r\n~~~\r\ngazebo -s libsystemplugin.so my.world -a \"__name:=rosnode_name\"\r\n~~~\r\n\r\nsuch that the use can explicitly specify command line inputs into a server plugin.\r\n\r\nOne use case is in a ros launched gazebo node, where if one of the system plugin is ros-based, it might need `argc` and `argv` for its `ros::init(argc, argv, ...)` call.\r\n\r\nCurrently, gazebo passes all command line arguments into `Server::ParseArgs(argc, argv)`, where the are stored in `Server::systemPluginsArgc` and `Server::systemPluginsArgv`, to be consumed by `Server::LoadImpl(...)` in its call to `gazebo.cc`'s `gazebo::load(Server::systemPluginsArgc, Server::systemPluginsArgv)`.\r\n\r\nAlso, currently, gazebo ignores anything it does not recognize in its command line inputs.  For example, if user starts gazebo with:\r\n~~~\r\ngazebo -s libsystemplugin.so -u my.world __name:=rosnode_name\r\n~~~\r\ngazebo will happily ignore the last argument.  But this is not a desirable behavior, as ideally we want gazebo to error out with unrecognized command line arguments.", "markup": "markdown", "html": "<p>We propose the addition of a <code>--server-plugin-args</code> or <code>-a</code> command line argument used for passing strings options to a server system plugin.  For example:</p>\n<div class=\"codehilite\"><pre><span></span>gazebo -s libsystemplugin.so my.world --server-plugin-args &quot;__name:=rosnode_name&quot;\n</pre></div>\n\n\n<p>or equivalently</p>\n<div class=\"codehilite\"><pre><span></span>gazebo -s libsystemplugin.so my.world -a &quot;__name:=rosnode_name&quot;\n</pre></div>\n\n\n<p>such that the use can explicitly specify command line inputs into a server plugin.</p>\n<p>One use case is in a ros launched gazebo node, where if one of the system plugin is ros-based, it might need <code>argc</code> and <code>argv</code> for its <code>ros::init(argc, argv, ...)</code> call.</p>\n<p>Currently, gazebo passes all command line arguments into <code>Server::ParseArgs(argc, argv)</code>, where the are stored in <code>Server::systemPluginsArgc</code> and <code>Server::systemPluginsArgv</code>, to be consumed by <code>Server::LoadImpl(...)</code> in its call to <code>gazebo.cc</code>'s <code>gazebo::load(Server::systemPluginsArgc, Server::systemPluginsArgv)</code>.</p>\n<p>Also, currently, gazebo ignores anything it does not recognize in its command line inputs.  For example, if user starts gazebo with:</p>\n<div class=\"codehilite\"><pre><span></span>gazebo -s libsystemplugin.so -u my.world __name:=rosnode_name\n</pre></div>\n\n\n<p>gazebo will happily ignore the last argument.  But this is not a desirable behavior, as ideally we want gazebo to error out with unrecognized command line arguments.</p>", "type": "rendered"}, "assignee": null, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2012-12-06T03:19:58.054147+00:00", "milestone": null, "updated_on": "2016-09-14T19:44:35.108826+00:00", "type": "issue", "id": 280}