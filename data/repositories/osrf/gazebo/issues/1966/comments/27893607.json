{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1966/comments/27893607.json"}, "html": {"href": "#!/osrf/gazebo/issues/1966#comment-27893607"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1966.json"}}, "type": "issue", "id": 1966, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Camera Output Appears to Depend on Real World Time"}, "content": {"raw": "It looks like the problem is that we're getting old image messages in the slower runs.  \n\nIn the below output, the \"Curre hash\" is the hash of the image bytes from the current experiment, which is being run with a 1 second sleep between each step.  The \"Prior hash\" is the hash of the image bytes from an otherwise identical run that had no wait between steps.\n\n```\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: cece9411eaa2ecce4336f6242da81bf5\nStep 0 passed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: cece9411eaa2ecce4336f6242da81bf5\nStep 1 passed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: cece9411eaa2ecce4336f6242da81bf5\nStep 2 passed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: 3989a5f502e63836f69403690105f7ae\nStep 3 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: 40358043dc0fbd6adbb92155c89deb59\nStep 4 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: 222b942a0079305afd0d70103f20e17d\nStep 5 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: c9872fa857430e9fe66113cc2dfcacb2\nStep 6 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: 40aeb02a13f8213e86a9b02aa88a9e37\nStep 7 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: e7e5c1c290b31d60514c76bf5a37057c\nStep 8 failed\n\nCurre hash: 3989a5f502e63836f69403690105f7ae\nPrior hash: 53ac4ffdf8e5d4fa06a02f9b79bdb951\nStep 9 failed\n\nCurre hash: 3989a5f502e63836f69403690105f7ae\nPrior hash: 455528d3add55cbf0bb14702e456eac6\nStep 10 failed\n\nCurre hash: 3989a5f502e63836f69403690105f7ae\nPrior hash: ad3f161a0928d419a94f13485adb2aaf\nStep 11 failed\n\nCurre hash: 40358043dc0fbd6adbb92155c89deb59\nPrior hash: ab39559c2807c3e80d500ddcb0b14a74\nStep 12 failed\n```\n\nThe Curre experiment seems to get stuck on producing the image with hash `cece9411eaa2ecce4336f6242da81bf5`, whereas the Prior experiment went on to image `3989a5f502e63836f69403690105f7ae` in step 3.  However, the Curre experiment eventually gets to that same image `3989a5f502e63836f69403690105f7ae` in step 9, but the Prior has already moved on to other images by that point.\n\nSometimes the image messages seem to catch up and then later become bottle-necked again.  In one run, with a 1 second sleep between steps, the images diverged at step 4, converged at step 1280, and then diverged again at step 1395.  \n\nThe experiment being performed is to apply a small force to a pendulum joint on each step.  It's unsurprising that the image would be identical in the first three steps, but it seems correct behavior in Prior that all images after that step are different as the pendulum has begun moving.\n\nNote that I can never reproduce this when comparing a 20 steps/s (no slowdown) run with any other no-slowdown run.", "markup": "markdown", "html": "<p>It looks like the problem is that we're getting old image messages in the slower runs.  </p>\n<p>In the below output, the \"Curre hash\" is the hash of the image bytes from the current experiment, which is being run with a 1 second sleep between each step.  The \"Prior hash\" is the hash of the image bytes from an otherwise identical run that had no wait between steps.</p>\n<div class=\"codehilite\"><pre><span></span>Curre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: cece9411eaa2ecce4336f6242da81bf5\nStep 0 passed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: cece9411eaa2ecce4336f6242da81bf5\nStep 1 passed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: cece9411eaa2ecce4336f6242da81bf5\nStep 2 passed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: 3989a5f502e63836f69403690105f7ae\nStep 3 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: 40358043dc0fbd6adbb92155c89deb59\nStep 4 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: 222b942a0079305afd0d70103f20e17d\nStep 5 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: c9872fa857430e9fe66113cc2dfcacb2\nStep 6 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: 40aeb02a13f8213e86a9b02aa88a9e37\nStep 7 failed\n\nCurre hash: cece9411eaa2ecce4336f6242da81bf5\nPrior hash: e7e5c1c290b31d60514c76bf5a37057c\nStep 8 failed\n\nCurre hash: 3989a5f502e63836f69403690105f7ae\nPrior hash: 53ac4ffdf8e5d4fa06a02f9b79bdb951\nStep 9 failed\n\nCurre hash: 3989a5f502e63836f69403690105f7ae\nPrior hash: 455528d3add55cbf0bb14702e456eac6\nStep 10 failed\n\nCurre hash: 3989a5f502e63836f69403690105f7ae\nPrior hash: ad3f161a0928d419a94f13485adb2aaf\nStep 11 failed\n\nCurre hash: 40358043dc0fbd6adbb92155c89deb59\nPrior hash: ab39559c2807c3e80d500ddcb0b14a74\nStep 12 failed\n</pre></div>\n\n\n<p>The Curre experiment seems to get stuck on producing the image with hash <code>cece9411eaa2ecce4336f6242da81bf5</code>, whereas the Prior experiment went on to image <code>3989a5f502e63836f69403690105f7ae</code> in step 3.  However, the Curre experiment eventually gets to that same image <code>3989a5f502e63836f69403690105f7ae</code> in step 9, but the Prior has already moved on to other images by that point.</p>\n<p>Sometimes the image messages seem to catch up and then later become bottle-necked again.  In one run, with a 1 second sleep between steps, the images diverged at step 4, converged at step 1280, and then diverged again at step 1395.  </p>\n<p>The experiment being performed is to apply a small force to a pendulum joint on each step.  It's unsurprising that the image would be identical in the first three steps, but it seems correct behavior in Prior that all images after that step are different as the pendulum has begun moving.</p>\n<p>Note that I can never reproduce this when comparing a 20 steps/s (no slowdown) run with any other no-slowdown run.</p>", "type": "rendered"}, "created_on": "2016-05-19T02:22:39.767010+00:00", "user": {"display_name": "Xander Dunn", "uuid": "{f831b046-1fb3-44c5-a22e-f02af08b1d56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf831b046-1fb3-44c5-a22e-f02af08b1d56%7D"}, "html": {"href": "https://bitbucket.org/%7Bf831b046-1fb3-44c5-a22e-f02af08b1d56%7D/"}, "avatar": {"href": "https://bitbucket.org/account/xanderdunn/avatar/"}}, "nickname": "xanderdunn", "type": "user", "account_id": null}, "updated_on": "2016-05-19T02:35:21.521618+00:00", "type": "issue_comment", "id": 27893607}