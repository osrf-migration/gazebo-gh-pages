{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1000/comments/14896466.json"}, "html": {"href": "#!/osrf/gazebo/issues/1000#comment-14896466"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1000.json"}}, "type": "issue", "id": 1000, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Coulomb friction parameters not handled properly in dart"}, "content": {"raw": "~~~\ndiff -r a718876fc0f5 test/integration/physics_friction.cc\n--- a/test/integration/physics_friction.cc\tFri Jan 16 10:52:48 2015 -0800\n+++ b/test/integration/physics_friction.cc\tFri Jan 16 11:24:54 2015 -0800\n@@ -26,6 +26,11 @@\n #include \"gazebo/physics/bullet/BulletTypes.hh\"\n #endif\n \n+#ifdef HAVE_DART\n+#include \"gazebo/physics/dart/DARTSurfaceParams.hh\"\n+#include \"gazebo/physics/dart/DARTTypes.hh\"\n+#endif\n+\n #include \"gazebo/transport/transport.hh\"\n #include \"ServerFixture.hh\"\n #include \"helper_physics_generator.hh\"\n@@ -80,6 +85,18 @@\n                                   / 2.0;\n                 }\n #endif\n+#ifdef HAVE_DART\n+                else if (physics->GetType() == \"dart\")\n+                {\n+                  physics::DARTSurfaceParamsPtr surface =\n+                    boost::dynamic_pointer_cast<physics::DARTSurfaceParams>(\n+                    (*iter)->GetSurface());\n+                  // Average the mu1 and mu2 values\n+                  this->friction = (surface->frictionPyramid.GetMuPrimary()\n+                                  + surface->frictionPyramid.GetMuSecondary())\n+                                  / 2.0;\n+                }\n+#endif\n               }\n             }\n     public: ~FrictionDemoBox() {}\n@@ -255,13 +272,6 @@\n           << std::endl;\n     return;\n   }\n-  if (_physicsEngine == \"dart\")\n-  {\n-    gzerr << \"Aborting test since there's an issue with dart's friction\"\n-          << \" parameters (#1000)\"\n-          << std::endl;\n-    return;\n-  }\n \n   Load(\"worlds/friction_demo.world\", true, _physicsEngine);\n   physics::WorldPtr world = physics::get_world(\"default\");\n~~~", "markup": "markdown", "html": "<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r a718876fc0f5 test/integration/physics_friction.cc</span>\n<span class=\"gd\">--- a/test/integration/physics_friction.cc  Fri Jan 16 10:52:48 2015 -0800</span>\n<span class=\"gi\">+++ b/test/integration/physics_friction.cc  Fri Jan 16 11:24:54 2015 -0800</span>\n<span class=\"gu\">@@ -26,6 +26,11 @@</span>\n #include &quot;gazebo/physics/bullet/BulletTypes.hh&quot;\n #endif\n\n<span class=\"gi\">+#ifdef HAVE_DART</span>\n<span class=\"gi\">+#include &quot;gazebo/physics/dart/DARTSurfaceParams.hh&quot;</span>\n<span class=\"gi\">+#include &quot;gazebo/physics/dart/DARTTypes.hh&quot;</span>\n<span class=\"gi\">+#endif</span>\n<span class=\"gi\">+</span>\n #include &quot;gazebo/transport/transport.hh&quot;\n #include &quot;ServerFixture.hh&quot;\n #include &quot;helper_physics_generator.hh&quot;\n<span class=\"gu\">@@ -80,6 +85,18 @@</span>\n                                   / 2.0;\n                 }\n #endif\n<span class=\"gi\">+#ifdef HAVE_DART</span>\n<span class=\"gi\">+                else if (physics-&gt;GetType() == &quot;dart&quot;)</span>\n<span class=\"gi\">+                {</span>\n<span class=\"gi\">+                  physics::DARTSurfaceParamsPtr surface =</span>\n<span class=\"gi\">+                    boost::dynamic_pointer_cast&lt;physics::DARTSurfaceParams&gt;(</span>\n<span class=\"gi\">+                    (*iter)-&gt;GetSurface());</span>\n<span class=\"gi\">+                  // Average the mu1 and mu2 values</span>\n<span class=\"gi\">+                  this-&gt;friction = (surface-&gt;frictionPyramid.GetMuPrimary()</span>\n<span class=\"gi\">+                                  + surface-&gt;frictionPyramid.GetMuSecondary())</span>\n<span class=\"gi\">+                                  / 2.0;</span>\n<span class=\"gi\">+                }</span>\n<span class=\"gi\">+#endif</span>\n               }\n             }\n     public: ~FrictionDemoBox() {}\n<span class=\"gu\">@@ -255,13 +272,6 @@</span>\n           &lt;&lt; std::endl;\n     return;\n   }\n<span class=\"gd\">-  if (_physicsEngine == &quot;dart&quot;)</span>\n<span class=\"gd\">-  {</span>\n<span class=\"gd\">-    gzerr &lt;&lt; &quot;Aborting test since there&#39;s an issue with dart&#39;s friction&quot;</span>\n<span class=\"gd\">-          &lt;&lt; &quot; parameters (#1000)&quot;</span>\n<span class=\"gd\">-          &lt;&lt; std::endl;</span>\n<span class=\"gd\">-    return;</span>\n<span class=\"gd\">-  }</span>\n\n   Load(&quot;worlds/friction_demo.world&quot;, true, _physicsEngine);\n   physics::WorldPtr world = physics::get_world(&quot;default&quot;);\n</pre></div>", "type": "rendered"}, "created_on": "2015-01-16T19:25:19.769729+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 14896466}