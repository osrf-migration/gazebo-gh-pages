{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/404/comments/3031401.json"}, "html": {"href": "#!/osrf/gazebo/issues/404#comment-3031401"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/404.json"}}, "type": "issue", "id": 404, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "collada texture transparency bug"}, "content": {"raw": "Ha, found a fix:\n\n    alpha_rejection greater 128\n    depth_write on\n\nmakes it render correctly :) (see http://i.imgur.com/DT6hT86.jpg) .... ``alpha_rejection greater 128`` causes texture with alpha channel greater than 128 to be ignored, so it's not the same as actual alpha blending and semi-transparent textures wouldn't work but semi-transparent objects are far far far less common than objects with \"binary\" alpha channels (just opaque and fully transparent parts) so I think this would be a satisfactory solution for the default behaviour. If someone wants to use a semi-transparent object they could still do so by forcing the behaviour via material script.", "markup": "markdown", "html": "<p>Ha, found a fix:</p>\n<div class=\"codehilite\"><pre><span></span>alpha_rejection greater 128\ndepth_write on\n</pre></div>\n\n\n<p>makes it render correctly :) (see <a href=\"http://i.imgur.com/DT6hT86.jpg\" rel=\"nofollow\" class=\"ap-connect-link\">http://i.imgur.com/DT6hT86.jpg</a>) .... <code>alpha_rejection greater 128</code> causes texture with alpha channel greater than 128 to be ignored, so it's not the same as actual alpha blending and semi-transparent textures wouldn't work but semi-transparent objects are far far far less common than objects with \"binary\" alpha channels (just opaque and fully transparent parts) so I think this would be a satisfactory solution for the default behaviour. If someone wants to use a semi-transparent object they could still do so by forcing the behaviour via material script.</p>", "type": "rendered"}, "created_on": "2013-02-04T10:54:08.428753+00:00", "user": {"display_name": "Thomas Koletschka", "uuid": "{b33092ac-6376-48d1-9803-d9e6de445d1a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D"}, "html": {"href": "https://bitbucket.org/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D/"}, "avatar": {"href": "https://bitbucket.org/account/thomasko/avatar/"}}, "nickname": "thomasko", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 3031401}