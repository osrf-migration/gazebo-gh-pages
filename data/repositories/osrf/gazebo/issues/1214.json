{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1214/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1214.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1214/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1214/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1214/automatic-world-population"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1214/vote"}}, "reporter": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "title": "Automatic world population", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Manually placing numerous models in a large environment can be tedious and\r\nmay result in unrealistic simulation worlds. Automatic population of an\r\nenvironment allows a user to parametrically place models in a space.\r\nA population of objects is defined in SDF, and parsed by Gazebo at run time.\r\nBased on the parameters specified, a set of models will be automatically\r\ninserted into simulation when started.\r\n\r\nThe most common type of population to create consists of inanimate objects\r\nsuch as trees, rocks, and buildings. This work will exclude mobile entities,\r\nsuch as robots, which often require more precise placement and are fewer in\r\nnumber.\r\n\r\nHere we specify the SDF elements that define a population.\r\n\r\n~~~\r\n<population>\r\n\r\n  <!-- The set of models to place. Each child model should be unique, and \r\n  represents one type of model that may be place in the specified region. -->\r\n  <models>\r\n\r\n    <include>\r\n      <!-- URI of the model resources -->\r\n      <uri><uri>\r\n\r\n      <!-- Density is multiplied by the <population_count> to determine\r\n           the number of time to place this type of model model. -->\r\n      <density></density>\r\n    </include>\r\n\r\n  </models>\r\n\r\n  <!-- The region in which the models will be placed -->\r\n  <region>\r\n\r\n    <!-- Minimum bounding box region specified in world coordinates -->\r\n    <min>X Y Z</min>\r\n\r\n    <!-- Maximum bounding box region specified in world coordinates -->\r\n    <max>X Y Z</max>\r\n  </region>\r\n\r\n  <!-- The number of models to place -->\r\n  <model_count></model_count>\r\n\r\n  <!-- Set to true to make sure no models overlap -->\r\n  <prevent_collisions>true/false</prevent_collisions>\r\n\r\n  <!-- Define how the objects will be placed in the specified region.\r\n       The accepted values are:\r\n       - random: Models placed at random\r\n       - grid: Models evenly placed in a 2D grid pattern.\r\n       - linear-x: Models evenly placed in a row along the global x-axis\r\n       - linear-y: Models evenly placed in a row along the global y-axis\r\n       - linear-z: Models evenly placed in a row along the global z-axis -->\r\n  <position></position>\r\n</population>\r\n~~~", "markup": "markdown", "html": "<p>Manually placing numerous models in a large environment can be tedious and\nmay result in unrealistic simulation worlds. Automatic population of an\nenvironment allows a user to parametrically place models in a space.\nA population of objects is defined in SDF, and parsed by Gazebo at run time.\nBased on the parameters specified, a set of models will be automatically\ninserted into simulation when started.</p>\n<p>The most common type of population to create consists of inanimate objects\nsuch as trees, rocks, and buildings. This work will exclude mobile entities,\nsuch as robots, which often require more precise placement and are fewer in\nnumber.</p>\n<p>Here we specify the SDF elements that define a population.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;population&gt;</span>\n\n  <span class=\"c\">&lt;!-- The set of models to place. Each child model should be unique, and </span>\n<span class=\"c\">  represents one type of model that may be place in the specified region. --&gt;</span>\n  <span class=\"nt\">&lt;models&gt;</span>\n\n    <span class=\"nt\">&lt;include&gt;</span>\n      <span class=\"c\">&lt;!-- URI of the model resources --&gt;</span>\n      <span class=\"nt\">&lt;uri&gt;&lt;uri&gt;</span>\n\n      <span class=\"c\">&lt;!-- Density is multiplied by the &lt;population_count&gt; to determine</span>\n<span class=\"c\">           the number of time to place this type of model model. --&gt;</span>\n      <span class=\"nt\">&lt;density&gt;&lt;/density&gt;</span>\n    <span class=\"nt\">&lt;/include&gt;</span>\n\n  <span class=\"nt\">&lt;/models&gt;</span>\n\n  <span class=\"c\">&lt;!-- The region in which the models will be placed --&gt;</span>\n  <span class=\"nt\">&lt;region&gt;</span>\n\n    <span class=\"c\">&lt;!-- Minimum bounding box region specified in world coordinates --&gt;</span>\n    <span class=\"nt\">&lt;min&gt;</span>X Y Z<span class=\"nt\">&lt;/min&gt;</span>\n\n    <span class=\"c\">&lt;!-- Maximum bounding box region specified in world coordinates --&gt;</span>\n    <span class=\"nt\">&lt;max&gt;</span>X Y Z<span class=\"nt\">&lt;/max&gt;</span>\n  <span class=\"nt\">&lt;/region&gt;</span>\n\n  <span class=\"c\">&lt;!-- The number of models to place --&gt;</span>\n  <span class=\"nt\">&lt;model_count&gt;&lt;/model_count&gt;</span>\n\n  <span class=\"c\">&lt;!-- Set to true to make sure no models overlap --&gt;</span>\n  <span class=\"nt\">&lt;prevent_collisions&gt;</span>true/false<span class=\"nt\">&lt;/prevent_collisions&gt;</span>\n\n  <span class=\"c\">&lt;!-- Define how the objects will be placed in the specified region.</span>\n<span class=\"c\">       The accepted values are:</span>\n<span class=\"c\">       - random: Models placed at random</span>\n<span class=\"c\">       - grid: Models evenly placed in a 2D grid pattern.</span>\n<span class=\"c\">       - linear-x: Models evenly placed in a row along the global x-axis</span>\n<span class=\"c\">       - linear-y: Models evenly placed in a row along the global y-axis</span>\n<span class=\"c\">       - linear-z: Models evenly placed in a row along the global z-axis --&gt;</span>\n  <span class=\"nt\">&lt;position&gt;&lt;/position&gt;</span>\n<span class=\"nt\">&lt;/population&gt;</span>\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2014-06-23T19:07:18.671617+00:00", "milestone": null, "updated_on": "2016-09-14T19:45:16.934614+00:00", "type": "issue", "id": 1214}