{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875/comments/26217318.json"}, "html": {"href": "#!/osrf/gazebo/issues/1875#comment-26217318"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875.json"}}, "type": "issue", "id": 1875, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Topic name or index in Subscriber callback"}, "content": {"raw": "@caguero is this possible in ignition transport?", "markup": "markdown", "html": "<p>@caguero is this possible in ignition transport?</p>", "type": "rendered"}, "created_on": "2016-03-14T19:15:42.161986+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 26217318}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875/comments/26219706.json"}, "html": {"href": "#!/osrf/gazebo/issues/1875#comment-26219706"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875.json"}}, "type": "issue", "id": 1875, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Topic name or index in Subscriber callback"}, "content": {"raw": "This should be possible in Ignition Transport by using a lambda as a function and capturing the value of your index `i`:\n\n```\n#!c++\nsize_t n = 10;\nfor (size_t i = 0; i < n; ++i)\n{\n  std::function<void(const example::msgs::StringMsg&)> subCb =\n    [i](const example::msgs::StringMsg &_msg)\n    {\n      std::cout << _msg.data() << std::endl;\n      std::cout << i << std::endl;\n    };\n\n  std::stringstream ss;\n  ss << \"~/ns/base_link/sensor_\" << i;\n\n  // Subscribe to a topic by registering a callback.\n  if (!node.Subscribe(ss.str(), subCb))\n  {\n    std::cerr << \"Error subscribing to topic [\" << topic << \"]\" << std::endl;\n    return -1;\n  }\n}\n```\n\nIn the `Gazebo::Node` class, the `Subscribe()` function only accepts a function pointer as a callback, we would need to add a new `Subscribe()` that accepts a `std::function` as a callback. This would allow to use lambda functions.", "markup": "markdown", "html": "<p>This should be possible in Ignition Transport by using a lambda as a function and capturing the value of your index <code>i</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">size_t</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">example</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">subCb</span> <span class=\"o\">=</span>\n    <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">](</span><span class=\"k\">const</span> <span class=\"n\">example</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span> <span class=\"o\">&amp;</span><span class=\"n\">_msg</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_msg</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">stringstream</span> <span class=\"n\">ss</span><span class=\"p\">;</span>\n  <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;~/ns/base_link/sensor_&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Subscribe to a topic by registering a callback.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">(),</span> <span class=\"n\">subCb</span><span class=\"p\">))</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Error subscribing to topic [&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">topic</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>In the <code>Gazebo::Node</code> class, the <code>Subscribe()</code> function only accepts a function pointer as a callback, we would need to add a new <code>Subscribe()</code> that accepts a <code>std::function</code> as a callback. This would allow to use lambda functions.</p>", "type": "rendered"}, "created_on": "2016-03-14T20:22:13.107344+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 26219706}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875/comments/26219801.json"}, "html": {"href": "#!/osrf/gazebo/issues/1875#comment-26219801"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875.json"}}, "type": "issue", "id": 1875, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Topic name or index in Subscriber callback"}, "content": {"raw": "That would be nice. Do you think it is not doable with current API? Maybe with boost lambdas or something.", "markup": "markdown", "html": "<p>That would be nice. Do you think it is not doable with current API? Maybe with boost lambdas or something.</p>", "type": "rendered"}, "created_on": "2016-03-14T20:26:55.120755+00:00", "user": {"display_name": "Javier V G\u00f3mez", "uuid": "{63eb64fb-3860-48b8-94c9-61586306478d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B63eb64fb-3860-48b8-94c9-61586306478d%7D"}, "html": {"href": "https://bitbucket.org/%7B63eb64fb-3860-48b8-94c9-61586306478d%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:bc03f118-e9f5-4785-87e7-42b0757953ec/6ffcf505-6bad-4e7e-83db-354c24809e40/128"}}, "nickname": "jvgomez", "type": "user", "account_id": "557058:bc03f118-e9f5-4785-87e7-42b0757953ec"}, "updated_on": null, "type": "issue_comment", "id": 26219801}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875/comments/26219964.json"}, "html": {"href": "#!/osrf/gazebo/issues/1875#comment-26219964"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875.json"}}, "type": "issue", "id": 1875, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Topic name or index in Subscriber callback"}, "content": {"raw": "Maybe there's some workaround but as far as I know is not possible to cast a lambda with a capture into a function pointer. So, we'd need to add a new `Subscribe()` to the `Node` API.", "markup": "markdown", "html": "<p>Maybe there's some workaround but as far as I know is not possible to cast a lambda with a capture into a function pointer. So, we'd need to add a new <code>Subscribe()</code> to the <code>Node</code> API.</p>", "type": "rendered"}, "created_on": "2016-03-14T20:34:09.698452+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 26219964}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875/comments/26243092.json"}, "html": {"href": "#!/osrf/gazebo/issues/1875#comment-26243092"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875.json"}}, "type": "issue", "id": 1875, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Topic name or index in Subscriber callback"}, "content": {"raw": "For reference in case anyone would need it before this feature is included.\nAfter thinking a bit more about it with my company colleagues, we found a workaround doing a customized Bind class:\n\n```\n#!c++\n\ntemplate <class T>\nclass IndexedBind {\npublic:\n    IndexedBind() :\n            _fp(nullptr), _obj(nullptr), _i(0) {\n    }\n\n    IndexedBind(void (T::*fp)(ConstLaserScanStampedPtr&, int), T* obj, int i) :\n            _fp(fp), _obj(obj), _i(i) {\n    }\n\n    void call(ConstLaserScanStampedPtr& msg) {\n        assert(_fp != nullptr && _obj != nullptr);\n        (_obj->*_fp)(msg, _i);\n    }\n\nprivate:\n    void (T::*_fp)(ConstLaserScanStampedPtr&, int);\n    T* _obj;\n    int _i;\n};\n```\nAnd this class can be used as follows:\n\n\n```\n#!c++\nclass MyClass {\n...\nMyClass();\n\nvoid on_update(ConstLaserScanStampedPtr &msg, int idx) {\n    std::cout << idx << std::endl;\n}\n\n    std::vector<IndexedBind<MyClass>> _bindings;\n    std::vector<gazebo::transport::SubscriberPtr> _subs;\n};\n\nMyClass::MyClass () {\n    _bindings.resize(10);\n    for (size_t i = 0; i < 10; ++i) {\n        _bindings[i] = IndexedBind<MyClass>(&MyClass::on_update, this, (int) i);\n        _subs.emplace_back( nh->Subscribe(\"topic\", &IndexedBind<MyClass>::call,  &_bindings[i]));\n    }\n}\n```\n\nNote that the message type could be templated as well.\n", "markup": "markdown", "html": "<p>For reference in case anyone would need it before this feature is included.\nAfter thinking a bit more about it with my company colleagues, we found a workaround doing a customized Bind class:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">IndexedBind</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">IndexedBind</span><span class=\"p\">()</span> <span class=\"o\">:</span>\n            <span class=\"n\">_fp</span><span class=\"p\">(</span><span class=\"k\">nullptr</span><span class=\"p\">),</span> <span class=\"n\">_obj</span><span class=\"p\">(</span><span class=\"k\">nullptr</span><span class=\"p\">),</span> <span class=\"n\">_i</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">IndexedBind</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">::*</span><span class=\"n\">fp</span><span class=\"p\">)(</span><span class=\"n\">ConstLaserScanStampedPtr</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">),</span> <span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">:</span>\n            <span class=\"n\">_fp</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"n\">_obj</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">),</span> <span class=\"n\">_i</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">ConstLaserScanStampedPtr</span><span class=\"o\">&amp;</span> <span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">_fp</span> <span class=\"o\">!=</span> <span class=\"k\">nullptr</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">_obj</span> <span class=\"o\">!=</span> <span class=\"k\">nullptr</span><span class=\"p\">);</span>\n        <span class=\"p\">(</span><span class=\"n\">_obj</span><span class=\"o\">-&gt;*</span><span class=\"n\">_fp</span><span class=\"p\">)(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">_i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n    <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">::*</span><span class=\"n\">_fp</span><span class=\"p\">)(</span><span class=\"n\">ConstLaserScanStampedPtr</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n    <span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">_obj</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">_i</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>And this class can be used as follows:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyClass</span> <span class=\"p\">{</span>\n<span class=\"p\">...</span>\n<span class=\"n\">MyClass</span><span class=\"p\">();</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">on_update</span><span class=\"p\">(</span><span class=\"n\">ConstLaserScanStampedPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">IndexedBind</span><span class=\"o\">&lt;</span><span class=\"n\">MyClass</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">_bindings</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">SubscriberPtr</span><span class=\"o\">&gt;</span> <span class=\"n\">_subs</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">MyClass</span><span class=\"o\">::</span><span class=\"n\">MyClass</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">_bindings</span><span class=\"p\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">_bindings</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">IndexedBind</span><span class=\"o\">&lt;</span><span class=\"n\">MyClass</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">MyClass</span><span class=\"o\">::</span><span class=\"n\">on_update</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">_subs</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span> <span class=\"n\">nh</span><span class=\"o\">-&gt;</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"s\">&quot;topic&quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">IndexedBind</span><span class=\"o\">&lt;</span><span class=\"n\">MyClass</span><span class=\"o\">&gt;::</span><span class=\"n\">call</span><span class=\"p\">,</span>  <span class=\"o\">&amp;</span><span class=\"n\">_bindings</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]));</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Note that the message type could be templated as well.</p>", "type": "rendered"}, "created_on": "2016-03-15T15:34:58.002821+00:00", "user": {"display_name": "Javier V G\u00f3mez", "uuid": "{63eb64fb-3860-48b8-94c9-61586306478d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B63eb64fb-3860-48b8-94c9-61586306478d%7D"}, "html": {"href": "https://bitbucket.org/%7B63eb64fb-3860-48b8-94c9-61586306478d%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:bc03f118-e9f5-4785-87e7-42b0757953ec/6ffcf505-6bad-4e7e-83db-354c24809e40/128"}}, "nickname": "jvgomez", "type": "user", "account_id": "557058:bc03f118-e9f5-4785-87e7-42b0757953ec"}, "updated_on": "2016-03-15T15:35:38.877665+00:00", "type": "issue_comment", "id": 26243092}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875/comments/30611059.json"}, "html": {"href": "#!/osrf/gazebo/issues/1875#comment-30611059"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875.json"}}, "type": "issue", "id": 1875, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Topic name or index in Subscriber callback"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:24:10.375043+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30611059}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875/comments/34259523.json"}, "html": {"href": "#!/osrf/gazebo/issues/1875#comment-34259523"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875.json"}}, "type": "issue", "id": 1875, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Topic name or index in Subscriber callback"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-02-08T17:15:28.878337+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 34259523}], "page": 1, "size": 7}