{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875/comments/26219706.json"}, "html": {"href": "#!/osrf/gazebo/issues/1875#comment-26219706"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875.json"}}, "type": "issue", "id": 1875, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Topic name or index in Subscriber callback"}, "content": {"raw": "This should be possible in Ignition Transport by using a lambda as a function and capturing the value of your index `i`:\n\n```\n#!c++\nsize_t n = 10;\nfor (size_t i = 0; i < n; ++i)\n{\n  std::function<void(const example::msgs::StringMsg&)> subCb =\n    [i](const example::msgs::StringMsg &_msg)\n    {\n      std::cout << _msg.data() << std::endl;\n      std::cout << i << std::endl;\n    };\n\n  std::stringstream ss;\n  ss << \"~/ns/base_link/sensor_\" << i;\n\n  // Subscribe to a topic by registering a callback.\n  if (!node.Subscribe(ss.str(), subCb))\n  {\n    std::cerr << \"Error subscribing to topic [\" << topic << \"]\" << std::endl;\n    return -1;\n  }\n}\n```\n\nIn the `Gazebo::Node` class, the `Subscribe()` function only accepts a function pointer as a callback, we would need to add a new `Subscribe()` that accepts a `std::function` as a callback. This would allow to use lambda functions.", "markup": "markdown", "html": "<p>This should be possible in Ignition Transport by using a lambda as a function and capturing the value of your index <code>i</code>:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">size_t</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">example</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span><span class=\"o\">&amp;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">subCb</span> <span class=\"o\">=</span>\n    <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">](</span><span class=\"k\">const</span> <span class=\"n\">example</span><span class=\"o\">::</span><span class=\"n\">msgs</span><span class=\"o\">::</span><span class=\"n\">StringMsg</span> <span class=\"o\">&amp;</span><span class=\"n\">_msg</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">_msg</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">stringstream</span> <span class=\"n\">ss</span><span class=\"p\">;</span>\n  <span class=\"n\">ss</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;~/ns/base_link/sensor_&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Subscribe to a topic by registering a callback.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"n\">ss</span><span class=\"p\">.</span><span class=\"n\">str</span><span class=\"p\">(),</span> <span class=\"n\">subCb</span><span class=\"p\">))</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Error subscribing to topic [&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">topic</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>In the <code>Gazebo::Node</code> class, the <code>Subscribe()</code> function only accepts a function pointer as a callback, we would need to add a new <code>Subscribe()</code> that accepts a <code>std::function</code> as a callback. This would allow to use lambda functions.</p>", "type": "rendered"}, "created_on": "2016-03-14T20:22:13.107344+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 26219706}