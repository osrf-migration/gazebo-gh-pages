{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875/comments/26243092.json"}, "html": {"href": "#!/osrf/gazebo/issues/1875#comment-26243092"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1875.json"}}, "type": "issue", "id": 1875, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Topic name or index in Subscriber callback"}, "content": {"raw": "For reference in case anyone would need it before this feature is included.\nAfter thinking a bit more about it with my company colleagues, we found a workaround doing a customized Bind class:\n\n```\n#!c++\n\ntemplate <class T>\nclass IndexedBind {\npublic:\n    IndexedBind() :\n            _fp(nullptr), _obj(nullptr), _i(0) {\n    }\n\n    IndexedBind(void (T::*fp)(ConstLaserScanStampedPtr&, int), T* obj, int i) :\n            _fp(fp), _obj(obj), _i(i) {\n    }\n\n    void call(ConstLaserScanStampedPtr& msg) {\n        assert(_fp != nullptr && _obj != nullptr);\n        (_obj->*_fp)(msg, _i);\n    }\n\nprivate:\n    void (T::*_fp)(ConstLaserScanStampedPtr&, int);\n    T* _obj;\n    int _i;\n};\n```\nAnd this class can be used as follows:\n\n\n```\n#!c++\nclass MyClass {\n...\nMyClass();\n\nvoid on_update(ConstLaserScanStampedPtr &msg, int idx) {\n    std::cout << idx << std::endl;\n}\n\n    std::vector<IndexedBind<MyClass>> _bindings;\n    std::vector<gazebo::transport::SubscriberPtr> _subs;\n};\n\nMyClass::MyClass () {\n    _bindings.resize(10);\n    for (size_t i = 0; i < 10; ++i) {\n        _bindings[i] = IndexedBind<MyClass>(&MyClass::on_update, this, (int) i);\n        _subs.emplace_back( nh->Subscribe(\"topic\", &IndexedBind<MyClass>::call,  &_bindings[i]));\n    }\n}\n```\n\nNote that the message type could be templated as well.\n", "markup": "markdown", "html": "<p>For reference in case anyone would need it before this feature is included.\nAfter thinking a bit more about it with my company colleagues, we found a workaround doing a customized Bind class:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">IndexedBind</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">IndexedBind</span><span class=\"p\">()</span> <span class=\"o\">:</span>\n            <span class=\"n\">_fp</span><span class=\"p\">(</span><span class=\"k\">nullptr</span><span class=\"p\">),</span> <span class=\"n\">_obj</span><span class=\"p\">(</span><span class=\"k\">nullptr</span><span class=\"p\">),</span> <span class=\"n\">_i</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">IndexedBind</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">::*</span><span class=\"n\">fp</span><span class=\"p\">)(</span><span class=\"n\">ConstLaserScanStampedPtr</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">),</span> <span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">:</span>\n            <span class=\"n\">_fp</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"n\">_obj</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">),</span> <span class=\"n\">_i</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">ConstLaserScanStampedPtr</span><span class=\"o\">&amp;</span> <span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">_fp</span> <span class=\"o\">!=</span> <span class=\"k\">nullptr</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">_obj</span> <span class=\"o\">!=</span> <span class=\"k\">nullptr</span><span class=\"p\">);</span>\n        <span class=\"p\">(</span><span class=\"n\">_obj</span><span class=\"o\">-&gt;*</span><span class=\"n\">_fp</span><span class=\"p\">)(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">_i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n    <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">::*</span><span class=\"n\">_fp</span><span class=\"p\">)(</span><span class=\"n\">ConstLaserScanStampedPtr</span><span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">);</span>\n    <span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">_obj</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">_i</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n\n<p>And this class can be used as follows:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyClass</span> <span class=\"p\">{</span>\n<span class=\"p\">...</span>\n<span class=\"n\">MyClass</span><span class=\"p\">();</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">on_update</span><span class=\"p\">(</span><span class=\"n\">ConstLaserScanStampedPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">IndexedBind</span><span class=\"o\">&lt;</span><span class=\"n\">MyClass</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">_bindings</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">SubscriberPtr</span><span class=\"o\">&gt;</span> <span class=\"n\">_subs</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">MyClass</span><span class=\"o\">::</span><span class=\"n\">MyClass</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">_bindings</span><span class=\"p\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">_bindings</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">IndexedBind</span><span class=\"o\">&lt;</span><span class=\"n\">MyClass</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">MyClass</span><span class=\"o\">::</span><span class=\"n\">on_update</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"n\">_subs</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span> <span class=\"n\">nh</span><span class=\"o\">-&gt;</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"s\">&quot;topic&quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">IndexedBind</span><span class=\"o\">&lt;</span><span class=\"n\">MyClass</span><span class=\"o\">&gt;::</span><span class=\"n\">call</span><span class=\"p\">,</span>  <span class=\"o\">&amp;</span><span class=\"n\">_bindings</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]));</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Note that the message type could be templated as well.</p>", "type": "rendered"}, "created_on": "2016-03-15T15:34:58.002821+00:00", "user": {"display_name": "Javier V G\u00f3mez", "uuid": "{63eb64fb-3860-48b8-94c9-61586306478d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B63eb64fb-3860-48b8-94c9-61586306478d%7D"}, "html": {"href": "https://bitbucket.org/%7B63eb64fb-3860-48b8-94c9-61586306478d%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:bc03f118-e9f5-4785-87e7-42b0757953ec/6ffcf505-6bad-4e7e-83db-354c24809e40/128"}}, "nickname": "jvgomez", "type": "user", "account_id": "557058:bc03f118-e9f5-4785-87e7-42b0757953ec"}, "updated_on": "2016-03-15T15:35:38.877665+00:00", "type": "issue_comment", "id": 26243092}