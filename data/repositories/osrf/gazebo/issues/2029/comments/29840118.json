{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2029/comments/29840118.json"}, "html": {"href": "#!/osrf/gazebo/issues/2029#comment-29840118"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2029.json"}}, "type": "issue", "id": 2029, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Gazebo crashes when receiving (apparently) malformed subscription request"}, "content": {"raw": "@scpeters yes, this is node.js. I prepared the code that triggers the crash:\n\n```js\n'use strict'\n\nvar fs = require(\"fs\")\nvar net = require('net');\nvar protobuf = require(\"node-protobuf\")\n\nvar proto = new protobuf(fs.readFileSync(\"everything.desc\"))\n\nvar NODE_TCP_IP = '127.0.0.1';\nvar NODE_TCP_PORT = 11452;\nvar MASTER_TCP_IP = '127.0.0.1'\nvar MASTER_TCP_PORT = 11345;\n\nfunction packPacket(obj, schema) {\n    var packet = proto.serialize({\n        'stamp': {\n            'sec': new Date().now / 1000,\n            'nsec': 0,\n        },\n        'type': 'advertise',\n        'serialized_data': proto.serialize(obj, schema)\n    }, 'gazebo.msgs.Packet');\n    return packet;\n}\n\n// Send stuff to GZ\nvar client = new net.Socket();\nclient.setEncoding('ascii')\n\nclient.connect(MASTER_TCP_PORT, MASTER_TCP_IP, function() {\n    console.log('Client connected');\n\n    var packet = packPacket({\n            'topic': '/gazebo/default/pitchblack-rover-base1/hokuyo/link/laser/scan',\n            'host': NODE_TCP_IP,\n            'port': NODE_TCP_PORT,\n            'msg_type': 'gazebo.msgs.LaserScanStamped',\n        },\n        \"gazebo.msgs.Subscribe\");\n\n    var size = packet.length;\n    size = pad(size.toString(16), 8);\n\n    console.info(\"message\", size, packet)\n\n    client.write(size + packet)\n});\n\nfunction pad(n, width, z) {\n    z = z || '0';\n    n = n + '';\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n}\n```\n\nServer log:\n```\n$ gzserver nothing-and-rover.world --verbose\nGazebo multi-robot simulator, version 7.0.0\nCopyright (C) 2012-2016 Open Source Robotics Foundation.\nReleased under the Apache 2 License.\nhttp://gazebosim.org\n\n[Msg] Waiting for master.\n[Msg] Connected to gazebo master @ http://127.0.0.1:11345\n[Msg] Publicized address: 192.168.178.220\n[Err] [msgs.cc:120] EXCEPTION: Can't serialize message of type[gazebo.msgs.Publish] because it is missing required fields\n\nlibc++abi.dylib: terminating with uncaught exception of type gazebo::common::Exception\nAbort trap: 6\n```\n\nApart from unexpected crash of Gazebo server, Is there something wrong with the message I'm sending?", "markup": "markdown", "html": "<p>@scpeters yes, this is node.js. I prepared the code that triggers the crash:</p>\n<div class=\"codehilite language-js\"><pre><span></span><span class=\"s1\">&#39;use strict&#39;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;fs&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">net</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;net&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">protobuf</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;node-protobuf&quot;</span><span class=\"p\">)</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">proto</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">protobuf</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s2\">&quot;everything.desc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">NODE_TCP_IP</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;127.0.0.1&#39;</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">NODE_TCP_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">11452</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">MASTER_TCP_IP</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;127.0.0.1&#39;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">MASTER_TCP_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">11345</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">packPacket</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">schema</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">packet</span> <span class=\"o\">=</span> <span class=\"nx\">proto</span><span class=\"p\">.</span><span class=\"nx\">serialize</span><span class=\"p\">({</span>\n        <span class=\"s1\">&#39;stamp&#39;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;sec&#39;</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">now</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;nsec&#39;</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">&#39;type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;advertise&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;serialized_data&#39;</span><span class=\"o\">:</span> <span class=\"nx\">proto</span><span class=\"p\">.</span><span class=\"nx\">serialize</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">schema</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span> <span class=\"s1\">&#39;gazebo.msgs.Packet&#39;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">packet</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Send stuff to GZ</span>\n<span class=\"kd\">var</span> <span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">net</span><span class=\"p\">.</span><span class=\"nx\">Socket</span><span class=\"p\">();</span>\n<span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">setEncoding</span><span class=\"p\">(</span><span class=\"s1\">&#39;ascii&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">MASTER_TCP_PORT</span><span class=\"p\">,</span> <span class=\"nx\">MASTER_TCP_IP</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Client connected&#39;</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">packet</span> <span class=\"o\">=</span> <span class=\"nx\">packPacket</span><span class=\"p\">({</span>\n            <span class=\"s1\">&#39;topic&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;/gazebo/default/pitchblack-rover-base1/hokuyo/link/laser/scan&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;host&#39;</span><span class=\"o\">:</span> <span class=\"nx\">NODE_TCP_IP</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;port&#39;</span><span class=\"o\">:</span> <span class=\"nx\">NODE_TCP_PORT</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;msg_type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;gazebo.msgs.LaserScanStamped&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">&quot;gazebo.msgs.Subscribe&quot;</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"nx\">packet</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n    <span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"nx\">pad</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">),</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;message&quot;</span><span class=\"p\">,</span> <span class=\"nx\">size</span><span class=\"p\">,</span> <span class=\"nx\">packet</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">+</span> <span class=\"nx\">packet</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">pad</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">width</span><span class=\"p\">,</span> <span class=\"nx\">z</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"nx\">z</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">;</span>\n    <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">n</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">n</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">width</span> <span class=\"o\">?</span> <span class=\"nx\">n</span> <span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nb\">Array</span><span class=\"p\">(</span><span class=\"nx\">width</span> <span class=\"o\">-</span> <span class=\"nx\">n</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">z</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">n</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Server log:</p>\n<div class=\"codehilite\"><pre><span></span>$ gzserver nothing-and-rover.world --verbose\nGazebo multi-robot simulator, version <span class=\"m\">7</span>.0.0\nCopyright <span class=\"o\">(</span>C<span class=\"o\">)</span> <span class=\"m\">2012</span>-2016 Open Source Robotics Foundation.\nReleased under the Apache <span class=\"m\">2</span> License.\nhttp://gazebosim.org\n\n<span class=\"o\">[</span>Msg<span class=\"o\">]</span> Waiting <span class=\"k\">for</span> master.\n<span class=\"o\">[</span>Msg<span class=\"o\">]</span> Connected to gazebo master @ http://127.0.0.1:11345\n<span class=\"o\">[</span>Msg<span class=\"o\">]</span> Publicized address: <span class=\"m\">192</span>.168.178.220\n<span class=\"o\">[</span>Err<span class=\"o\">]</span> <span class=\"o\">[</span>msgs.cc:120<span class=\"o\">]</span> EXCEPTION: Can<span class=\"err\">&#39;</span>t serialize message of type<span class=\"o\">[</span>gazebo.msgs.Publish<span class=\"o\">]</span> because it is missing required fields\n\nlibc++abi.dylib: terminating with uncaught exception of <span class=\"nb\">type</span> gazebo::common::Exception\nAbort trap: <span class=\"m\">6</span>\n</pre></div>\n\n\n<p>Apart from unexpected crash of Gazebo server, Is there something wrong with the message I'm sending?</p>", "type": "rendered"}, "created_on": "2016-08-12T18:49:40.737179+00:00", "user": {"display_name": "Sergey Polzunov", "uuid": "{f5113e3a-5608-41fa-aa89-3b4675b464c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf5113e3a-5608-41fa-aa89-3b4675b464c2%7D"}, "html": {"href": "https://bitbucket.org/%7Bf5113e3a-5608-41fa-aa89-3b4675b464c2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5d78758e3e3779426bc677aac37bc61bd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "traut", "type": "user", "account_id": "557058:f9876371-9fe1-44fc-a496-607ab8ee292b"}, "updated_on": null, "type": "issue_comment", "id": 29840118}