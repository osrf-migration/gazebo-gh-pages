{"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/572/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/572.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/572/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/572/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/572/vrc-heightmap-problems"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/572/vote"}}, "reporter": {"display_name": "Thomas Koletschka", "uuid": "{b33092ac-6376-48d1-9803-d9e6de445d1a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D"}, "html": {"href": "https://bitbucket.org/%7Bb33092ac-6376-48d1-9803-d9e6de445d1a%7D/"}, "avatar": {"href": "https://bitbucket.org/account/thomasko/avatar/"}}, "nickname": "thomasko", "type": "user", "account_id": null}, "title": "VRC heightmap problems", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Given that the other heightmap related ticket was \"resolved\" and the pull-request merged I'll open a ticket to re-iterate the current heightmap problems:\r\n\r\n## Texture distortion (or some underlying problem that causes this): \r\n\r\nThe texture moves with the camera which makes it look like it's ~20cm farther away than it actually is. A video demonstrating the effect of texture moving around, notice how it moves across the edges of triangles (this is using the heightmap with just one texture and no normal map): http://www.youtube.com/watch?v=eC_1MiATQBE\r\n\r\nA picture of the stereo point cloud of the ground in front of the robot at the same height of the robot which appears ~20cm below the actual height (red grid is at -0.2m, gray grid at 0m): http://i.imgur.com/d5IxVbb.png\r\n\r\n\r\n## Extremely poor LIDAR performance: \r\n\r\nWhen turning on the LIDAR in vrc world 2 (walking), the real-time factor drops down from ~0.99 to 0.02 (no hands, no rubble). In vrc world 1 it is not as bad, there it only drops about 0.1 (e.g. from 0.5 to 0.4) and in the old world that used ``drc_terrain`` I never noticed a difference when enabling the LIDAR as far as I can remember. \r\n\r\nThe difference between those worlds is that both ``vrc1`` and ``vrc2`` use a heightmap with 513*513 resolution but vrc1 has a map size of 500x500x118 while ``vrc2`` only has a map size of 200x200x46.9. So ``vrc1`` is more than twice as large as ``vrc2`` and has a better performance for LIDAR. Assuming that Gazebo/OGRE creates one vertex per pixel, this means that  ``vrc2`` has a higher triangle density than ``vrc1`` which explains why it's slower than ``vrc1``. ``drc_terrain`` has a heightmap resolution of 257px and a map size of 2000x2000x500 which is ten times larger than ``vrc2`` and hence explains why those issues didn't arrise with ``drc_terrain``. \r\n\r\nI converted the vrc2 heightmap into a triangle mesh, one with 132098 triangles and the other with 526338 to test speed with pure triangle meshes - I'm not sure what triangle count vrc2 has but it should be close to one of them. With the lower resolution triangle mesh my real-time factor only dropped by 0.05 and with the higher resolution mesh it only dropped by 0.1. But again I'm not sure whether either of them is close to the resolution that the heightmap rendered by Gazebo/Ogre has.\r\n\r\nMaybe this performance drop might decrease or even disappear when switching to the GPU based LIDAR given that enabling the cameras does not affect performance that much either?\r\n\r\n\r\n## Errors/differences/bugs/.. in collision geometry: \r\n\r\nVisual geometry and collision geometry are different at some parts of the terrain, or maybe the collision geometry is buggy. See http://youtu.be/r6aH04E_F_8 and http://youtu.be/TXkw3nV1OR0 for some examples. This makes walking on the heightmap even more difficult and unpredictable than it already is with all the other heightmap related bugs and problems listed above.\r\n\r\n\r\n## Atlas gliding, slipping, falling through heightmap:\r\n\r\nAnother day, another bug (or at least partially a variant of the one above): \r\nAtlas slips, glides, and/or falls through the heightmap when it gets close to an edge. Example of extreme slipping (or maybe small penetrations that make it slip forward): http://youtu.be/ojSBBKH9Ne8  and an example of atlas falling through the heightmap for several centimeters: http://youtu.be/5fKJtuXpIks", "markup": "markdown", "html": "<p>Given that the other heightmap related ticket was \"resolved\" and the pull-request merged I'll open a ticket to re-iterate the current heightmap problems:</p>\n<h2 id=\"markdown-header-texture-distortion-or-some-underlying-problem-that-causes-this\">Texture distortion (or some underlying problem that causes this):</h2>\n<p>The texture moves with the camera which makes it look like it's ~20cm farther away than it actually is. A video demonstrating the effect of texture moving around, notice how it moves across the edges of triangles (this is using the heightmap with just one texture and no normal map): <a href=\"http://www.youtube.com/watch?v=eC_1MiATQBE\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.youtube.com/watch?v=eC_1MiATQBE</a></p>\n<p>A picture of the stereo point cloud of the ground in front of the robot at the same height of the robot which appears ~20cm below the actual height (red grid is at -0.2m, gray grid at 0m): <a href=\"http://i.imgur.com/d5IxVbb.png\" rel=\"nofollow\" class=\"ap-connect-link\">http://i.imgur.com/d5IxVbb.png</a></p>\n<h2 id=\"markdown-header-extremely-poor-lidar-performance\">Extremely poor LIDAR performance:</h2>\n<p>When turning on the LIDAR in vrc world 2 (walking), the real-time factor drops down from ~0.99 to 0.02 (no hands, no rubble). In vrc world 1 it is not as bad, there it only drops about 0.1 (e.g. from 0.5 to 0.4) and in the old world that used <code>drc_terrain</code> I never noticed a difference when enabling the LIDAR as far as I can remember. </p>\n<p>The difference between those worlds is that both <code>vrc1</code> and <code>vrc2</code> use a heightmap with 513*513 resolution but vrc1 has a map size of 500x500x118 while <code>vrc2</code> only has a map size of 200x200x46.9. So <code>vrc1</code> is more than twice as large as <code>vrc2</code> and has a better performance for LIDAR. Assuming that Gazebo/OGRE creates one vertex per pixel, this means that  <code>vrc2</code> has a higher triangle density than <code>vrc1</code> which explains why it's slower than <code>vrc1</code>. <code>drc_terrain</code> has a heightmap resolution of 257px and a map size of 2000x2000x500 which is ten times larger than <code>vrc2</code> and hence explains why those issues didn't arrise with <code>drc_terrain</code>. </p>\n<p>I converted the vrc2 heightmap into a triangle mesh, one with 132098 triangles and the other with 526338 to test speed with pure triangle meshes - I'm not sure what triangle count vrc2 has but it should be close to one of them. With the lower resolution triangle mesh my real-time factor only dropped by 0.05 and with the higher resolution mesh it only dropped by 0.1. But again I'm not sure whether either of them is close to the resolution that the heightmap rendered by Gazebo/Ogre has.</p>\n<p>Maybe this performance drop might decrease or even disappear when switching to the GPU based LIDAR given that enabling the cameras does not affect performance that much either?</p>\n<h2 id=\"markdown-header-errorsdifferencesbugs-in-collision-geometry\">Errors/differences/bugs/.. in collision geometry:</h2>\n<p>Visual geometry and collision geometry are different at some parts of the terrain, or maybe the collision geometry is buggy. See <a href=\"http://youtu.be/r6aH04E_F_8\" rel=\"nofollow\" class=\"ap-connect-link\">http://youtu.be/r6aH04E_F_8</a> and <a href=\"http://youtu.be/TXkw3nV1OR0\" rel=\"nofollow\" class=\"ap-connect-link\">http://youtu.be/TXkw3nV1OR0</a> for some examples. This makes walking on the heightmap even more difficult and unpredictable than it already is with all the other heightmap related bugs and problems listed above.</p>\n<h2 id=\"markdown-header-atlas-gliding-slipping-falling-through-heightmap\">Atlas gliding, slipping, falling through heightmap:</h2>\n<p>Another day, another bug (or at least partially a variant of the one above): \nAtlas slips, glides, and/or falls through the heightmap when it gets close to an edge. Example of extreme slipping (or maybe small penetrations that make it slip forward): <a href=\"http://youtu.be/ojSBBKH9Ne8\" rel=\"nofollow\" class=\"ap-connect-link\">http://youtu.be/ojSBBKH9Ne8</a>  and an example of atlas falling through the heightmap for several centimeters: <a href=\"http://youtu.be/5fKJtuXpIks\" rel=\"nofollow\" class=\"ap-connect-link\">http://youtu.be/5fKJtuXpIks</a></p>", "type": "rendered"}, "assignee": null, "state": "invalid", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2013-03-09T06:49:56.729423+00:00", "milestone": null, "updated_on": "2016-09-14T19:21:43.806016+00:00", "type": "issue", "id": 572}