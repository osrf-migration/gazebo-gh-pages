{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1696/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1696.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1696/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1696/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1696/expose-joint-motor-functionality"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1696/vote"}}, "reporter": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "title": "Expose joint motor functionality", "component": {"name": "physics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122876.json"}}}, "votes": 1, "watches": 2, "content": {"raw": "I'm writing this issue request as a follow-up on [this question on Gazebo Answers](http://answers.gazebosim.org/question/9071/joint-target-velocity-with-maximum-force/), which as I expected did not get any useful reactions as of yet (because I am all but certain it isn't possible).\r\n\r\nModeling a servo motor in Gazebo seems like a common task that should be made both possible and straightforward. A real-life servo typically specifies two properties:\r\n\r\n- A maximum torque\r\n- A maximum angular velocity\r\n\r\nHaving the ability to specify these two constraints in a stable manner therefore seems like a desirable property to me. Currently the only way to approach the behavior is by using PID controller, the performance of which depending on the type of servo and the load attached to it may range from good to very unstable. In my personal project, I've had a PID controller that would spin a joint at 1000% of its maximum angular velocity rating in a single (1/1000s) timestep applying only a fraction of the maximum torque. The same controller would not get the joint to move at all if something was leaning on it - even if the maximum torque would allow it to do so. The problem is that there is no way to enforce both constraints in the same timestep, meaning adaptations cannot be made until it is too late, or we end up specifying a way too small force initially to prevent it. Now I'm not saying that it is impossible to create a PID controller that would handle both these scenarios well, but it is very hard, and more importantly unnecessary when it is quite easy to achieve the functionality in separate physics engines.\r\n\r\nODE exposes a joint motor functionality through the combination of setting `dParamFMax` and `dParamVel` on a joint. Bullet Physics supports the same thing with `btHingeConstraint::enableAngularMotor()`. AFAIK Dart has no direct mechanism for it, but it does allow you to [write a stable controller](http://dart.readthedocs.org/en/tutorials/tutorials/dominoes/#lesson-2c-write-a-stable-pd-controller-for-the-manipulator) by integrating one timestep ahead. I'm not sure about SimBody.\r\n\r\nCurrently, the joint motor functionality of ODE and Bullet is cleverly used to implement Coulomb joint friction (issue #381, pull request #1221). When modeling a servo motor, this functionality is irrelevant: the friction will already be factored into the speed and torque ratings. I therefore propose exposing the joint motor functionality for at least Bullet and ODE, in which it is trivial to do so. It is currently possible to do this for ODE specifically by calling \"Joint->SetParam(\"fmax\", ...)\" in conjunction with `Joint::SetParam(\"vel\", ...)`, but as of aforementioned pull request it throws a warning, and it is obviously very engine specific and a very hacky way of doing things. For Bullet, there is no way to reach the functionality through the Gazebo API. I would very much like to see this exposed, even if it is only for the Bullet and ODE users.", "markup": "markdown", "html": "<p>I'm writing this issue request as a follow-up on <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/9071/joint-target-velocity-with-maximum-force/\" rel=\"nofollow\">this question on Gazebo Answers</a>, which as I expected did not get any useful reactions as of yet (because I am all but certain it isn't possible).</p>\n<p>Modeling a servo motor in Gazebo seems like a common task that should be made both possible and straightforward. A real-life servo typically specifies two properties:</p>\n<ul>\n<li>A maximum torque</li>\n<li>A maximum angular velocity</li>\n</ul>\n<p>Having the ability to specify these two constraints in a stable manner therefore seems like a desirable property to me. Currently the only way to approach the behavior is by using PID controller, the performance of which depending on the type of servo and the load attached to it may range from good to very unstable. In my personal project, I've had a PID controller that would spin a joint at 1000% of its maximum angular velocity rating in a single (1/1000s) timestep applying only a fraction of the maximum torque. The same controller would not get the joint to move at all if something was leaning on it - even if the maximum torque would allow it to do so. The problem is that there is no way to enforce both constraints in the same timestep, meaning adaptations cannot be made until it is too late, or we end up specifying a way too small force initially to prevent it. Now I'm not saying that it is impossible to create a PID controller that would handle both these scenarios well, but it is very hard, and more importantly unnecessary when it is quite easy to achieve the functionality in separate physics engines.</p>\n<p>ODE exposes a joint motor functionality through the combination of setting <code>dParamFMax</code> and <code>dParamVel</code> on a joint. Bullet Physics supports the same thing with <code>btHingeConstraint::enableAngularMotor()</code>. AFAIK Dart has no direct mechanism for it, but it does allow you to <a data-is-external-link=\"true\" href=\"http://dart.readthedocs.org/en/tutorials/tutorials/dominoes/#lesson-2c-write-a-stable-pd-controller-for-the-manipulator\" rel=\"nofollow\">write a stable controller</a> by integrating one timestep ahead. I'm not sure about SimBody.</p>\n<p>Currently, the joint motor functionality of ODE and Bullet is cleverly used to implement Coulomb joint friction (issue <a href=\"#!/osrf/gazebo/issues/381/ode-joints-dont-support-friction-parameter\" rel=\"nofollow\" title=\"ODE Joints don&#39;t support friction parameter\" class=\"ap-connect-link\"><s>#381</s></a>, <a href=\"#!/osrf/gazebo/pull-requests/1221/implement-coulomb-joint-friction-for-ode\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1221</a>). When modeling a servo motor, this functionality is irrelevant: the friction will already be factored into the speed and torque ratings. I therefore propose exposing the joint motor functionality for at least Bullet and ODE, in which it is trivial to do so. It is currently possible to do this for ODE specifically by calling \"Joint-&gt;SetParam(\"fmax\", ...)\" in conjunction with <code>Joint::SetParam(\"vel\", ...)</code>, but as of aforementioned pull request it throws a warning, and it is obviously very engine specific and a very hacky way of doing things. For Bullet, there is no way to reach the functionality through the Gazebo API. I would very much like to see this exposed, even if it is only for the Bullet and ODE users.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "6.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/170782.json"}}}, "edited_on": null, "created_on": "2015-08-07T12:00:39.177194+00:00", "milestone": null, "updated_on": "2015-08-07T12:00:39.177194+00:00", "type": "issue", "id": 1696}