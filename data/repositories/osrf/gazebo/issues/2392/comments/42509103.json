{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2392/comments/42509103.json"}, "html": {"href": "#!/osrf/gazebo/issues/2392#comment-42509103"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2392.json"}}, "type": "issue", "id": 2392, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Gazebo 8 DepthCamera ImageData returns all gray image for config and code that worked in gazebo7"}, "content": {"raw": "I created a simple sensor plugin to test this in gazebo8. Here're the relevant functions with calls to `DepthCamera::ImageData` in `OnNewImageFrame`:\n\n~~~\n/////////////////////////////////////////////////\nvoid DepthCameraPlugin::Load(sensors::SensorPtr _sensor,\n                              sdf::ElementPtr /*_sdf*/)\n{\n  this->parentSensor =\n    std::dynamic_pointer_cast<sensors::DepthCameraSensor>(_sensor);\n  this->depthCamera = this->parentSensor->DepthCamera();\n\n  this->newImageFrameConnection = this->depthCamera->ConnectNewImageFrame(\n      std::bind(&DepthCameraPlugin::OnNewImageFrame,\n        this, std::placeholders::_1, std::placeholders::_2,\n        std::placeholders::_3, std::placeholders::_4, std::placeholders::_5));\n\n  this->parentSensor->SetActive(true);\n}\n\n/////////////////////////////////////////////////\nvoid DepthCameraPlugin::OnNewImageFrame(const unsigned char * _image,\n                              unsigned int _width,\n                              unsigned int _height,\n                              unsigned int _depth,\n                              const std::string &_format)\n{\n    common::Image image;\n    image.SetFromData(this->depthCamera->ImageData(), \n      _width, _height, common::Image::ConvertPixelFormat(_format));\n    image.SavePNG(\"test.png\");\n}\n~~~\n\nI'm seeing valid rgb image data. Maybe you're doing something different that we're not expecting?\n\n`<save enabled=1><path>./images</path></save>` does not create valid images for me but that could be a different issue.", "markup": "markdown", "html": "<p>I created a simple sensor plugin to test this in gazebo8. Here're the relevant functions with calls to <code>DepthCamera::ImageData</code> in <code>OnNewImageFrame</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">/////////////////////////////////////////////////</span>\n<span class=\"nt\">void</span> <span class=\"nt\">DepthCameraPlugin</span><span class=\"p\">::</span><span class=\"nd\">Load</span><span class=\"o\">(</span><span class=\"nt\">sensors</span><span class=\"p\">::</span><span class=\"nd\">SensorPtr</span> <span class=\"nt\">_sensor</span><span class=\"o\">,</span>\n                              <span class=\"nt\">sdf</span><span class=\"p\">::</span><span class=\"nd\">ElementPtr</span> <span class=\"c\">/*_sdf*/</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"err\">this-&gt;parentSensor</span> <span class=\"err\">=</span>\n    <span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">dynamic_pointer_cast</span><span class=\"o\">&lt;</span><span class=\"n\">sensors</span><span class=\"o\">::</span><span class=\"n\">DepthCameraSensor</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_sensor</span><span class=\"p\">);</span>\n  <span class=\"err\">this-&gt;depthCamera</span> <span class=\"err\">=</span> <span class=\"err\">this-&gt;parentSensor-&gt;DepthCamera()</span><span class=\"p\">;</span>\n\n  <span class=\"err\">this-&gt;newImageFrameConnection</span> <span class=\"err\">=</span> <span class=\"err\">this-&gt;depthCamera-&gt;ConnectNewImageFrame(</span>\n      <span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"nf\">bind</span><span class=\"p\">(</span><span class=\"err\">&amp;</span><span class=\"n\">DepthCameraPlugin</span><span class=\"err\">::</span><span class=\"n\">OnNewImageFrame</span><span class=\"p\">,</span>\n        <span class=\"n\">this</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"err\">::</span><span class=\"n\">placeholders</span><span class=\"err\">::</span><span class=\"n\">_1</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"err\">::</span><span class=\"n\">placeholders</span><span class=\"err\">::</span><span class=\"n\">_2</span><span class=\"p\">,</span>\n        <span class=\"n\">std</span><span class=\"err\">::</span><span class=\"n\">placeholders</span><span class=\"err\">::</span><span class=\"n\">_3</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"err\">::</span><span class=\"n\">placeholders</span><span class=\"err\">::</span><span class=\"n\">_4</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"err\">::</span><span class=\"n\">placeholders</span><span class=\"err\">::</span><span class=\"n\">_5</span><span class=\"p\">));</span>\n\n  <span class=\"err\">this-&gt;parentSensor-&gt;SetActive(true)</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">/////////////////////////////////////////////////</span>\n<span class=\"nt\">void</span> <span class=\"nt\">DepthCameraPlugin</span><span class=\"p\">::</span><span class=\"nd\">OnNewImageFrame</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">unsigned</span> <span class=\"nt\">char</span> <span class=\"o\">*</span> <span class=\"nt\">_image</span><span class=\"o\">,</span>\n                              <span class=\"nt\">unsigned</span> <span class=\"nt\">int</span> <span class=\"nt\">_width</span><span class=\"o\">,</span>\n                              <span class=\"nt\">unsigned</span> <span class=\"nt\">int</span> <span class=\"nt\">_height</span><span class=\"o\">,</span>\n                              <span class=\"nt\">unsigned</span> <span class=\"nt\">int</span> <span class=\"nt\">_depth</span><span class=\"o\">,</span>\n                              <span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_format</span><span class=\"o\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">common</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">Image</span> <span class=\"n\">image</span><span class=\"p\">;</span>\n    <span class=\"err\">image.SetFromData(this-&gt;depthCamera-&gt;ImageData(),</span> \n      <span class=\"err\">_width,</span> <span class=\"err\">_height,</span> <span class=\"n\">common</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">Image</span><span class=\"o\">::</span><span class=\"nf\">ConvertPixelFormat</span><span class=\"p\">(</span><span class=\"n\">_format</span><span class=\"p\">));</span>\n    <span class=\"err\">image.SavePNG(&quot;test.png&quot;)</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I'm seeing valid rgb image data. Maybe you're doing something different that we're not expecting?</p>\n<p><code>&lt;save enabled=1&gt;&lt;path&gt;./images&lt;/path&gt;&lt;/save&gt;</code> does not create valid images for me but that could be a different issue.</p>", "type": "rendered"}, "created_on": "2018-01-10T02:08:41.978726+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2018-01-10T02:09:11.638987+00:00", "type": "issue_comment", "id": 42509103}