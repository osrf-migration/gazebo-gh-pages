{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1658/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1658.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1658/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1658/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1658/math-angle-class-operator-can-produce"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1658/vote"}}, "reporter": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "title": "math::Angle class operator can produce inconsistent results", "component": {"name": "math", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122879.json"}}}, "votes": 0, "watches": 3, "content": {"raw": "In my code, I have an `if` statement that looks like below:\r\n\r\n~~~\r\n    math::Angle a = 1e-16;\r\n    math::Angle b = 1.1e-16;\r\n    ASSERT_TRUE(a - b >= 0);  // this passes\r\n    ASSERT_TRUE((a - b).Radian() >= 0);  // this fails\r\n~~~\r\n\r\nthis is because underneath `math::Angle::operator>=()` uses `math::equal` as part of its comparison [here](#!/osrf/gazebo/src/5bae2bdbd0d32b055764e9f11fd2c179008c0d31/gazebo/math/Angle.cc?at=default#cl-176):\r\n\r\n~~~\r\n  return this->value > angle.value || math::equal(this->value, angle.value);\r\n~~~\r\n\r\nwhich effectively does [this check against an epsilon of 1e-6 by default](#!/osrf/gazebo/src/5bae2bdbd0d32b055764e9f11fd2c179008c0d31/gazebo/math/Helpers.hh?at=default#cl-170):\r\n\r\n~~~\r\n      return std::fabs(_a - _b) <= _epsilon;\r\n~~~\r\n\r\nThis kind of inconsistency could cause subtle and **small** problems (around 1e-6) in calculations, which is not insignificant when one tries to drive convergence of a numerical algorithm down towards machine zero.\r\n\r\nOne way to avoid inconsistency for now is to convert all `math::Angle` objects to `Radian()` (or double) first before using comparison and arithmetic operators on them.", "markup": "markdown", "html": "<p>In my code, I have an <code>if</code> statement that looks like below:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Angle</span> <span class=\"nt\">a</span> <span class=\"o\">=</span> <span class=\"nt\">1e-16</span><span class=\"o\">;</span>\n    <span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">Angle</span> <span class=\"nt\">b</span> <span class=\"o\">=</span> <span class=\"nt\">1</span><span class=\"p\">.</span><span class=\"nc\">1e-16</span><span class=\"o\">;</span>\n    <span class=\"nt\">ASSERT_TRUE</span><span class=\"o\">(</span><span class=\"nt\">a</span> <span class=\"nt\">-</span> <span class=\"nt\">b</span> <span class=\"o\">&gt;=</span> <span class=\"nt\">0</span><span class=\"o\">);</span>  <span class=\"o\">//</span> <span class=\"nt\">this</span> <span class=\"nt\">passes</span>\n    <span class=\"nt\">ASSERT_TRUE</span><span class=\"o\">((</span><span class=\"nt\">a</span> <span class=\"nt\">-</span> <span class=\"nt\">b</span><span class=\"o\">)</span><span class=\"p\">.</span><span class=\"nc\">Radian</span><span class=\"o\">()</span> <span class=\"o\">&gt;=</span> <span class=\"nt\">0</span><span class=\"o\">);</span>  <span class=\"o\">//</span> <span class=\"nt\">this</span> <span class=\"nt\">fails</span>\n</pre></div>\n\n\n<p>this is because underneath <code>math::Angle::operator&gt;=()</code> uses <code>math::equal</code> as part of its comparison <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/5bae2bdbd0d32b055764e9f11fd2c179008c0d31/gazebo/math/Angle.cc?at=default#cl-176\" rel=\"nofollow\">here</a>:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"nt\">return</span> <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">value</span> <span class=\"o\">&gt;</span> <span class=\"nt\">angle</span><span class=\"p\">.</span><span class=\"nc\">value</span> <span class=\"o\">||</span> <span class=\"nt\">math</span><span class=\"p\">::</span><span class=\"nd\">equal</span><span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">value</span><span class=\"o\">,</span> <span class=\"nt\">angle</span><span class=\"p\">.</span><span class=\"nc\">value</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>which effectively does <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/5bae2bdbd0d32b055764e9f11fd2c179008c0d31/gazebo/math/Helpers.hh?at=default#cl-170\" rel=\"nofollow\">this check against an epsilon of 1e-6 by default</a>:</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"nt\">return</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">fabs</span><span class=\"o\">(</span><span class=\"nt\">_a</span> <span class=\"nt\">-</span> <span class=\"nt\">_b</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"nt\">_epsilon</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<p>This kind of inconsistency could cause subtle and <strong>small</strong> problems (around 1e-6) in calculations, which is not insignificant when one tries to drive convergence of a numerical algorithm down towards machine zero.</p>\n<p>One way to avoid inconsistency for now is to convert all <code>math::Angle</code> objects to <code>Radian()</code> (or double) first before using comparison and arithmetic operators on them.</p>", "type": "rendered"}, "assignee": null, "state": "wontfix", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2015-07-10T18:45:21.731926+00:00", "milestone": null, "updated_on": "2017-02-02T17:15:11.592587+00:00", "type": "issue", "id": 1658}