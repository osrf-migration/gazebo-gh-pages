{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2382/comments/49212701.json"}, "html": {"href": "#!/osrf/gazebo/issues/2382#comment-49212701"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2382.json"}}, "type": "issue", "id": 2382, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Sensors failed to initialize when loading model"}, "content": {"raw": "I experienced the same problem when loading a model with a camera plugin and a model plugin using ROS Lunar, Ubuntu 16.04, and Gazebo 9.5.0.\n\nMy solution: Remove the waiting loop. Without it, it works just fine. Here is the corresponding code snippet, taken from `Model.cc`:\n\n```c\nvoid Model::LoadPlugins()\n{\n  // Check to see if we need to load any model plugins\n  if (this->GetPluginCount() > 0)\n  {\n    // Load the plugins.\n    sdf::ElementPtr pluginElem = this->sdf->GetElement(\"plugin\");\n    while (pluginElem)\n    {\n      this->LoadPlugin(pluginElem);\n      pluginElem = pluginElem->GetNextElement(\"plugin\");\n    }\n  }\n\n  for (auto &model : this->models)\n    model->LoadPlugins();\n}\n```\n\nWhat is the purpose of the waiting loop anyway?", "markup": "markdown", "html": "<p>I experienced the same problem when loading a model with a camera plugin and a model plugin using ROS Lunar, Ubuntu 16.04, and Gazebo 9.5.0.</p>\n<p>My solution: Remove the waiting loop. Without it, it works just fine. Here is the corresponding code snippet, taken from <code>Model.cc</code>:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"kt\">void</span> <span class=\"n\">Model</span><span class=\"o\">::</span><span class=\"n\">LoadPlugins</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">// Check to see if we need to load any model plugins</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">GetPluginCount</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"c1\">// Load the plugins.</span>\n    <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"n\">pluginElem</span> <span class=\"o\">=</span> <span class=\"n\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">GetElement</span><span class=\"p\">(</span><span class=\"s\">&quot;plugin&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">pluginElem</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">LoadPlugin</span><span class=\"p\">(</span><span class=\"n\">pluginElem</span><span class=\"p\">);</span>\n      <span class=\"n\">pluginElem</span> <span class=\"o\">=</span> <span class=\"n\">pluginElem</span><span class=\"o\">-&gt;</span><span class=\"n\">GetNextElement</span><span class=\"p\">(</span><span class=\"s\">&quot;plugin&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"nl\">model</span> <span class=\"p\">:</span> <span class=\"n\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">models</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">LoadPlugins</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>What is the purpose of the waiting loop anyway?</p>", "type": "rendered"}, "created_on": "2018-11-30T03:19:37.368497+00:00", "user": {"display_name": "Alexander Schaefer", "uuid": "{9c59ad06-63f0-486d-ad3c-c8cf65fe3756}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9c59ad06-63f0-486d-ad3c-c8cf65fe3756%7D"}, "html": {"href": "https://bitbucket.org/%7B9c59ad06-63f0-486d-ad3c-c8cf65fe3756%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5c00a96dd272d71605b89456/edf41ba7-79dd-46e3-bc39-6ce444763436/128"}}, "nickname": "acschaefer", "type": "user", "account_id": "5c00a96dd272d71605b89456"}, "updated_on": null, "type": "issue_comment", "id": 49212701}