{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2301/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2301.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2301/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2301/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2301/simple-guiplugin-causes-segfault-when"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2301/vote"}}, "reporter": {"display_name": "MarcZofka", "uuid": "{8e492043-1cf9-4b92-b4a3-fddba650d752}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8e492043-1cf9-4b92-b4a3-fddba650d752%7D"}, "html": {"href": "https://bitbucket.org/%7B8e492043-1cf9-4b92-b4a3-fddba650d752%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/464aedaf98009220dfbcb95b5611ec90d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsM-5.png"}}, "nickname": "GzMRZ", "type": "user", "account_id": "557058:d819a9eb-8b76-48aa-9fd8-c23583587a7b"}, "title": "Simple GUIPlugin causes Segfault when closing gzclient", "component": {"name": "gui", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122878.json"}}}, "votes": 3, "watches": 5, "content": {"raw": "Dear colleagues,\r\n\r\ni have noticed a strange bug in a GUIPlugin, i have implemented. When starting gzserver and gzclient **separately**, the plugin causes a *segfault* in the gzserver process during closing the client:\r\n\r\n```\r\n#!c++\r\n\r\n\r\nThread 1 \"gzclient\" received signal SIGSEGV, Segmentation fault.\r\n0x0000000000ba70c0 in ?? ()\r\n(gdb) \r\n(gdb) bt\r\n#0  0x0000000000ba70c0 in ?? ()\r\n#1  0x00007ffff77411c0 in gazebo::gui::RenderWidget::~RenderWidget() () from /usr/lib/x86_64-linux-gnu/libgazebo_gui.so.7\r\n#2  0x00007ffff77412f9 in gazebo::gui::RenderWidget::~RenderWidget() () from /usr/lib/x86_64-linux-gnu/libgazebo_gui.so.7\r\n#3  0x00007ffff76dadd1 in gazebo::gui::MainWindow::closeEvent(QCloseEvent*) () from /usr/lib/x86_64-linux-gnu/libgazebo_gui.so.7\r\n#4  0x00007ffff53ab8d0 in QWidget::event(QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4\r\n#5  0x00007ffff578f9b3 in QMainWindow::event(QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4\r\n#6  0x00007ffff5354fdc in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4\r\n#7  0x00007ffff535bf16 in QApplication::notify(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4\r\n#8  0x00007ffff720590d in QCoreApplication::notifyInternal(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4\r\n#9  0x00007ffff53a8131 in QWidgetPrivate::close_helper(QWidgetPrivate::CloseMode) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4\r\n#10 0x00007ffff53c7c56 in QApplication::x11ClientMessage(QWidget*, _XEvent*, bool) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4\r\n#11 0x00007ffff53d7e32 in QApplication::x11ProcessEvent(_XEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4\r\n#12 0x00007ffff5402542 in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4\r\n#13 0x00007ffff1f10197 in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n#14 0x00007ffff1f103f0 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n#15 0x00007ffff1f1049c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0\r\n#16 0x00007ffff72362ae in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4\r\n#17 0x00007ffff5402616 in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4\r\n#18 0x00007ffff720418f in QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4\r\n#19 0x00007ffff72044f5 in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4\r\n#20 0x00007ffff720a4b9 in QCoreApplication::exec() () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4\r\n#21 0x00007ffff76b7873 in gazebo::gui::run(int, char**) () from /usr/lib/x86_64-linux-gnu/libgazebo_gui.so.7\r\n#22 0x00000000004013aa in ?? ()\r\n#23 0x00007ffff6536830 in __libc_start_main (main=0x401390, argc=2, argv=0x7fffffffd2a8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffd298) at ../csu/libc-start.c:291\r\n#24 0x0000000000401459 in _start ()\r\n(gdb) \r\n```\r\nI have trimmed my plugin down to a very minimalistic version, but the segfault still appears in some cases (about 50%):\r\n\r\n```\r\n#!c++\r\n\r\n#ifndef GAZEBO_GUI_SCENE_GRAPH_PLUGIN_H_INCLUDED\r\n#define GAZEBO_GUI_SCENE_GRAPH_PLUGIN_H_INCLUDED\r\n\r\n// System Includes\r\n#include <memory>\r\n\r\n// Gazebo Includes\r\n#include <gazebo/gui/GuiPlugin.hh>\r\n\r\n// See: https://bugreports.qt-project.org/browse/QTBUG-22829\r\n#ifndef Q_MOC_RUN\r\n# include <gazebo/transport/transport.hh>\r\n# include <gazebo/gui/gui.hh>\r\n#endif\r\n\r\nnamespace gazebo\r\n{\r\n\r\nclass GAZEBO_VISIBLE GUISceneGraphPlugin : public GUIPlugin\r\n{\r\n  Q_OBJECT\r\n\r\npublic:\r\n  //! Constructor.\r\n  GUISceneGraphPlugin();\r\n  //! Destructor.\r\n  virtual ~GUISceneGraphPlugin();\r\n\r\n  //! This function is only called when a GUI plugin is loaded from an SDF file. This function is\r\n  //! not called when a GUI plugin is loaded via a gui.ini file.\r\n  //! \\param[in] _sdf Pointer the the SDF element of the plugin. This is the plugin SDF,\r\n  //! <plugin ...>, and its children.\r\n  void Load(sdf::ElementPtr sdf);\r\n\r\nprivate:\r\n\r\n  float m_clipping_min;\r\n  float m_clipping_max;\r\n\r\n};\r\n\r\n} // end of ns gazebo\r\n#endif // GAZEBO_GUI_SCENE_GRAPH_PLUGIN_H_INCLUDED\r\n\r\n```\r\nand the definition in:\r\n\r\n```\r\n#!c++\r\n\r\n// Gazebo Includes\r\n#include <gazebo/common/common.hh>\r\n#include <gazebo/rendering/rendering.hh>\r\n#include <gazebo/msgs/vector3d.pb.h>\r\n\r\n// Ignition Includes\r\n#include <ignition/math/Vector3.hh>\r\n\r\n// Ogre Includes\r\n#include <OGRE/OgreManualObject.h>\r\n#include <OGRE/OgreException.h>\r\n\r\n// Std Includes\r\n#include <list>\r\n\r\n#include \"GUISceneGraphPlugin.hh\"\r\n\r\nnamespace gazebo {\r\n\r\n// Register this plugin with the simulator\r\nGZ_REGISTER_GUI_PLUGIN(GUISceneGraphPlugin)\r\n\r\n/////////////////////////////////////////////////\r\nGUISceneGraphPlugin::GUISceneGraphPlugin()\r\n  : GUIPlugin()\r\n  , m_clipping_min(5)\r\n  , m_clipping_max(1000)\r\n{\r\n}\r\n\r\n/////////////////////////////////////////////////\r\nGUISceneGraphPlugin::~GUISceneGraphPlugin()\r\n{}\r\n\r\n/////////////////////////////////////////////////\r\nvoid GUISceneGraphPlugin::Load(sdf::ElementPtr sdf)\r\n{\r\n  gzmsg << \"(GUISceneGraphPlugin) Load() called.\" << std::endl;\r\n}\r\n\r\n} // end of ns gazebo\r\n```\r\nMy exemplary world file is as follows:\r\n\r\n```\r\n#!c++\r\n\r\n?xml version=\"1.0\" ?>\r\n<sdf version=\"1.5\">\r\n  <world name=\"default\">\r\n    <gui>\r\n        <plugin name=\"sampleplugin\" filename=\"libGUISceneGraphPlugin.so\"/>\r\n    </gui>\r\n\r\n    <!-- A global light source -->\r\n    <include>\r\n      <uri>model://sun</uri>\r\n    </include>\r\n    <!-- A ground plane -->\r\n    <include>\r\n      <uri>model://ground_plane</uri>\r\n    </include>\r\n  </world>\r\n</sdf>\r\n```\r\nI tried to find some evidences on google, but i merely found an entry on the gazebo answers list, where somebody seems to have the same problem: [Gazebo Anwers](http://answers.gazebosim.org/question/14599/basic-guiplugin-causes-gazebo-client-to-segfault-when-exiting-why/)\r\n\r\nIt seems to be a problem with GUI plugins in general, so I would be happy if anybody has an idea, why this strange segfault appears.\r\n\r\nBest regards!", "markup": "markdown", "html": "<p>Dear colleagues,</p>\n<p>i have noticed a strange bug in a GUIPlugin, i have implemented. When starting gzserver and gzclient <strong>separately</strong>, the plugin causes a <em>segfault</em> in the gzserver process during closing the client:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">Thread</span> <span class=\"mi\">1</span> <span class=\"s\">&quot;gzclient&quot;</span> <span class=\"n\">received</span> <span class=\"n\">signal</span> <span class=\"n\">SIGSEGV</span><span class=\"p\">,</span> <span class=\"n\">Segmentation</span> <span class=\"n\">fault</span><span class=\"p\">.</span>\n<span class=\"mh\">0x0000000000ba70c0</span> <span class=\"n\">in</span> <span class=\"o\">??</span> <span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span> \n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span> <span class=\"n\">bt</span>\n<span class=\"cp\">#0  0x0000000000ba70c0 in ?? ()</span>\n<span class=\"cp\">#1  0x00007ffff77411c0 in gazebo::gui::RenderWidget::~RenderWidget() () from /usr/lib/x86_64-linux-gnu/libgazebo_gui.so.7</span>\n<span class=\"cp\">#2  0x00007ffff77412f9 in gazebo::gui::RenderWidget::~RenderWidget() () from /usr/lib/x86_64-linux-gnu/libgazebo_gui.so.7</span>\n<span class=\"cp\">#3  0x00007ffff76dadd1 in gazebo::gui::MainWindow::closeEvent(QCloseEvent*) () from /usr/lib/x86_64-linux-gnu/libgazebo_gui.so.7</span>\n<span class=\"cp\">#4  0x00007ffff53ab8d0 in QWidget::event(QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4</span>\n<span class=\"cp\">#5  0x00007ffff578f9b3 in QMainWindow::event(QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4</span>\n<span class=\"cp\">#6  0x00007ffff5354fdc in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4</span>\n<span class=\"cp\">#7  0x00007ffff535bf16 in QApplication::notify(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4</span>\n<span class=\"cp\">#8  0x00007ffff720590d in QCoreApplication::notifyInternal(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4</span>\n<span class=\"cp\">#9  0x00007ffff53a8131 in QWidgetPrivate::close_helper(QWidgetPrivate::CloseMode) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4</span>\n<span class=\"cp\">#10 0x00007ffff53c7c56 in QApplication::x11ClientMessage(QWidget*, _XEvent*, bool) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4</span>\n<span class=\"cp\">#11 0x00007ffff53d7e32 in QApplication::x11ProcessEvent(_XEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4</span>\n<span class=\"cp\">#12 0x00007ffff5402542 in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4</span>\n<span class=\"cp\">#13 0x00007ffff1f10197 in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0</span>\n<span class=\"cp\">#14 0x00007ffff1f103f0 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0</span>\n<span class=\"cp\">#15 0x00007ffff1f1049c in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0</span>\n<span class=\"cp\">#16 0x00007ffff72362ae in QEventDispatcherGlib::processEvents(QFlags&lt;QEventLoop::ProcessEventsFlag&gt;) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4</span>\n<span class=\"cp\">#17 0x00007ffff5402616 in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4</span>\n<span class=\"cp\">#18 0x00007ffff720418f in QEventLoop::processEvents(QFlags&lt;QEventLoop::ProcessEventsFlag&gt;) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4</span>\n<span class=\"cp\">#19 0x00007ffff72044f5 in QEventLoop::exec(QFlags&lt;QEventLoop::ProcessEventsFlag&gt;) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4</span>\n<span class=\"cp\">#20 0x00007ffff720a4b9 in QCoreApplication::exec() () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4</span>\n<span class=\"cp\">#21 0x00007ffff76b7873 in gazebo::gui::run(int, char**) () from /usr/lib/x86_64-linux-gnu/libgazebo_gui.so.7</span>\n<span class=\"cp\">#22 0x00000000004013aa in ?? ()</span>\n<span class=\"cp\">#23 0x00007ffff6536830 in __libc_start_main (main=0x401390, argc=2, argv=0x7fffffffd2a8, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffd298) at ../csu/libc-start.c:291</span>\n<span class=\"cp\">#24 0x0000000000401459 in _start ()</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span> \n</pre></div>\n\n\n<p>I have trimmed my plugin down to a very minimalistic version, but the segfault still appears in some cases (about 50%):</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#ifndef GAZEBO_GUI_SCENE_GRAPH_PLUGIN_H_INCLUDED</span>\n<span class=\"cp\">#define GAZEBO_GUI_SCENE_GRAPH_PLUGIN_H_INCLUDED</span>\n\n<span class=\"c1\">// System Includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;memory&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// Gazebo Includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/gui/GuiPlugin.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// See: https://bugreports.qt-project.org/browse/QTBUG-22829</span>\n<span class=\"cp\">#ifndef Q_MOC_RUN</span>\n<span class=\"cp\"># include &lt;gazebo/transport/transport.hh&gt;</span>\n<span class=\"cp\"># include &lt;gazebo/gui/gui.hh&gt;</span>\n<span class=\"cp\">#endif</span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">gazebo</span>\n<span class=\"p\">{</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">GAZEBO_VISIBLE</span> <span class=\"nl\">GUISceneGraphPlugin</span> <span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"n\">GUIPlugin</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Q_OBJECT</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n  <span class=\"c1\">//! Constructor.</span>\n  <span class=\"n\">GUISceneGraphPlugin</span><span class=\"p\">();</span>\n  <span class=\"c1\">//! Destructor.</span>\n  <span class=\"k\">virtual</span> <span class=\"o\">~</span><span class=\"n\">GUISceneGraphPlugin</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">//! This function is only called when a GUI plugin is loaded from an SDF file. This function is</span>\n  <span class=\"c1\">//! not called when a GUI plugin is loaded via a gui.ini file.</span>\n  <span class=\"c1\">//! \\param[in] _sdf Pointer the the SDF element of the plugin. This is the plugin SDF,</span>\n  <span class=\"c1\">//! &lt;plugin ...&gt;, and its children.</span>\n  <span class=\"kt\">void</span> <span class=\"nf\">Load</span><span class=\"p\">(</span><span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"n\">sdf</span><span class=\"p\">);</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n\n  <span class=\"kt\">float</span> <span class=\"n\">m_clipping_min</span><span class=\"p\">;</span>\n  <span class=\"kt\">float</span> <span class=\"n\">m_clipping_max</span><span class=\"p\">;</span>\n\n<span class=\"p\">};</span>\n\n<span class=\"p\">}</span> <span class=\"c1\">// end of ns gazebo</span>\n<span class=\"cp\">#endif </span><span class=\"c1\">// GAZEBO_GUI_SCENE_GRAPH_PLUGIN_H_INCLUDED</span>\n</pre></div>\n\n\n<p>and the definition in:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// Gazebo Includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/common/common.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/rendering/rendering.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/msgs/vector3d.pb.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// Ignition Includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ignition/math/Vector3.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// Ogre Includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;OGRE/OgreManualObject.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;OGRE/OgreException.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// Std Includes</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;list&gt;</span><span class=\"cp\"></span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">&quot;GUISceneGraphPlugin.hh&quot;</span><span class=\"cp\"></span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">gazebo</span> <span class=\"p\">{</span>\n\n<span class=\"c1\">// Register this plugin with the simulator</span>\n<span class=\"n\">GZ_REGISTER_GUI_PLUGIN</span><span class=\"p\">(</span><span class=\"n\">GUISceneGraphPlugin</span><span class=\"p\">)</span>\n\n<span class=\"c1\">/////////////////////////////////////////////////</span>\n<span class=\"n\">GUISceneGraphPlugin</span><span class=\"o\">::</span><span class=\"n\">GUISceneGraphPlugin</span><span class=\"p\">()</span>\n  <span class=\"o\">:</span> <span class=\"n\">GUIPlugin</span><span class=\"p\">()</span>\n  <span class=\"p\">,</span> <span class=\"n\">m_clipping_min</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n  <span class=\"p\">,</span> <span class=\"n\">m_clipping_max</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">/////////////////////////////////////////////////</span>\n<span class=\"n\">GUISceneGraphPlugin</span><span class=\"o\">::~</span><span class=\"n\">GUISceneGraphPlugin</span><span class=\"p\">()</span>\n<span class=\"p\">{}</span>\n\n<span class=\"c1\">/////////////////////////////////////////////////</span>\n<span class=\"kt\">void</span> <span class=\"n\">GUISceneGraphPlugin</span><span class=\"o\">::</span><span class=\"n\">Load</span><span class=\"p\">(</span><span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"n\">sdf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">gzmsg</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;(GUISceneGraphPlugin) Load() called.&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">}</span> <span class=\"c1\">// end of ns gazebo</span>\n</pre></div>\n\n\n<p>My exemplary world file is as follows:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"o\">?</span><span class=\"n\">xml</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s\">&quot;1.0&quot;</span> <span class=\"o\">?&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"n\">sdf</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s\">&quot;1.5&quot;</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">world</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;default&quot;</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">gui</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"n\">plugin</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;sampleplugin&quot;</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s\">&quot;libGUISceneGraphPlugin.so&quot;</span><span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">gui</span><span class=\"o\">&gt;</span>\n\n    <span class=\"o\">&lt;!--</span> <span class=\"n\">A</span> <span class=\"n\">global</span> <span class=\"n\">light</span> <span class=\"n\">source</span> <span class=\"o\">--&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">include</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">uri</span><span class=\"o\">&gt;</span><span class=\"nl\">model</span><span class=\"p\">:</span><span class=\"c1\">//sun&lt;/uri&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">include</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;!--</span> <span class=\"n\">A</span> <span class=\"n\">ground</span> <span class=\"n\">plane</span> <span class=\"o\">--&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">include</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">uri</span><span class=\"o\">&gt;</span><span class=\"nl\">model</span><span class=\"p\">:</span><span class=\"c1\">//ground_plane&lt;/uri&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">include</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;/</span><span class=\"n\">world</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">sdf</span><span class=\"o\">&gt;</span>\n</pre></div>\n\n\n<p>I tried to find some evidences on google, but i merely found an entry on the gazebo answers list, where somebody seems to have the same problem: <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/14599/basic-guiplugin-causes-gazebo-client-to-segfault-when-exiting-why/\" rel=\"nofollow\">Gazebo Anwers</a></p>\n<p>It seems to be a problem with GUI plugins in general, so I would be happy if anybody has an idea, why this strange segfault appears.</p>\n<p>Best regards!</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "7.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242744.json"}}}, "edited_on": null, "created_on": "2017-06-15T18:17:10.764825+00:00", "milestone": null, "updated_on": "2017-06-29T18:24:09.048723+00:00", "type": "issue", "id": 2301}