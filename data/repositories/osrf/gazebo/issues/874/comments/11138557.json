{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/874/comments/11138557.json"}, "html": {"href": "#!/osrf/gazebo/issues/874#comment-11138557"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/874.json"}}, "type": "issue", "id": 874, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Make world a Link"}, "content": {"raw": "From personal experience, it is a *huge* simplification to the code if you treat World as a link. That way every moving link has a parent. This is especially important if you want to be able to handle generalized coordinates smoothly because the link mobility is defined by the link-to-parent connection; handling World separately would lead to a lot of special cases.\n\nThere are nice modeling implications also. For example, say you have a mechanism that you intend to put on a robot or vehicle. You can initially model that mechanism connected to World for debugging, then later replace World by a real link without having to change any code.\n\nI think of World (we call it \"ground\") as a very heavy link, whose motion is negligible for present purposes.\n\nAn alternative if you don't like thinking of World this way would be to introduce a Ground body that is rigidly fixed to World somewhere; then have free rigid bodies and multibody bases use Ground as the parent link. ", "markup": "markdown", "html": "<p>From personal experience, it is a <em>huge</em> simplification to the code if you treat World as a link. That way every moving link has a parent. This is especially important if you want to be able to handle generalized coordinates smoothly because the link mobility is defined by the link-to-parent connection; handling World separately would lead to a lot of special cases.</p>\n<p>There are nice modeling implications also. For example, say you have a mechanism that you intend to put on a robot or vehicle. You can initially model that mechanism connected to World for debugging, then later replace World by a real link without having to change any code.</p>\n<p>I think of World (we call it \"ground\") as a very heavy link, whose motion is negligible for present purposes.</p>\n<p>An alternative if you don't like thinking of World this way would be to introduce a Ground body that is rigidly fixed to World somewhere; then have free rigid bodies and multibody bases use Ground as the parent link. </p>", "type": "rendered"}, "created_on": "2014-07-08T22:35:40.176885+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 11138557}