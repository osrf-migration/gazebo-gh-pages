{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23598995.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23598995"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "To be clear, is this the patch you are proposing?\n\n~~~\ndiff -r 7d0a60233039 gazebo/physics/Base.cc\n--- a/gazebo/physics/Base.cc\tThu Nov 26 02:45:14 2015 -0600\n+++ b/gazebo/physics/Base.cc\tThu Nov 26 02:54:58 2015 -0600\n@@ -55,10 +55,6 @@\n //////////////////////////////////////////////////\n Base::~Base()\n {\n-  // remove self as a child of the parent\n-  if (this->parent)\n-    this->parent->RemoveChild(this->id);\n-\n   this->SetParent(BasePtr());\n \n   for (Base_V::iterator iter = this->children.begin();\n~~~", "markup": "markdown", "html": "<p>To be clear, is this the patch you are proposing?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 7d0a60233039 gazebo/physics/Base.cc</span>\n<span class=\"gd\">--- a/gazebo/physics/Base.cc    Thu Nov 26 02:45:14 2015 -0600</span>\n<span class=\"gi\">+++ b/gazebo/physics/Base.cc    Thu Nov 26 02:54:58 2015 -0600</span>\n<span class=\"gu\">@@ -55,10 +55,6 @@</span>\n //////////////////////////////////////////////////\n Base::~Base()\n {\n<span class=\"gd\">-  // remove self as a child of the parent</span>\n<span class=\"gd\">-  if (this-&gt;parent)</span>\n<span class=\"gd\">-    this-&gt;parent-&gt;RemoveChild(this-&gt;id);</span>\n<span class=\"gd\">-</span>\n   this-&gt;SetParent(BasePtr());\n\n   for (Base_V::iterator iter = this-&gt;children.begin();\n</pre></div>", "type": "rendered"}, "created_on": "2015-11-26T08:55:29.965362+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 23598995}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23600135.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23600135"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "(Changing to \"destructor\" where it now said \"constructor\")", "markup": "markdown", "html": "<p>(Changing to \"destructor\" where it now said \"constructor\")</p>", "type": "rendered"}, "created_on": "2015-11-26T09:34:56.614187+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 23600135}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23600161.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23600161"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "Yes, that is the change I propose. I'm not certain what the function of that code was to begin with though.", "markup": "markdown", "html": "<p>Yes, that is the change I propose. I'm not certain what the function of that code was to begin with though.</p>", "type": "rendered"}, "created_on": "2015-11-26T09:35:33.043056+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 23600161}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23624794.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23624794"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "I committed that patch to a branch in 94ed978 and ran it through Jenkins and it didn't appear to cause any new test failures:\n\n* http://build.osrfoundation.org/view/gazebo/job/gazebo-any-devel-trusty-amd64-gpu-nvidia/665", "markup": "markdown", "html": "<p>I committed that patch to a branch in <a href=\"#!/osrf/gazebo/commits/94ed978\" rel=\"nofollow\" class=\"ap-connect-link\">94ed978</a> and ran it through Jenkins and it didn't appear to cause any new test failures:</p>\n<ul>\n<li><a href=\"http://build.osrfoundation.org/view/gazebo/job/gazebo-any-devel-trusty-amd64-gpu-nvidia/665\" rel=\"nofollow\" class=\"ap-connect-link\">http://build.osrfoundation.org/view/gazebo/job/gazebo-any-devel-trusty-amd64-gpu-nvidia/665</a></li>\n</ul>", "type": "rendered"}, "created_on": "2015-11-27T08:11:20.692742+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 23624794}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23624820.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23624820"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "I wonder if there is a test we could write that shows this problem?", "markup": "markdown", "html": "<p>I wonder if there is a test we could write that shows this problem?</p>", "type": "rendered"}, "created_on": "2015-11-27T08:12:20.235241+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 23624820}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23627712.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23627712"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "I've virtually no experience with the testing process, could whether or not a certain destructor has run be detected somehow? Perhaps something like:\n\n- Create a link with two `Collision` elements\n- Obtain weak pointers to the two `Collision`s\n- Call `Link::Fini()` and reset all references to the link so its memory is cleared\n- Assert `lock`ing any of the the two weak pointers from step (2) no longer yields a valid pointer", "markup": "markdown", "html": "<p>I've virtually no experience with the testing process, could whether or not a certain destructor has run be detected somehow? Perhaps something like:</p>\n<ul>\n<li>Create a link with two <code>Collision</code> elements</li>\n<li>Obtain weak pointers to the two <code>Collision</code>s</li>\n<li>Call <code>Link::Fini()</code> and reset all references to the link so its memory is cleared</li>\n<li>Assert <code>lock</code>ing any of the the two weak pointers from step (2) no longer yields a valid pointer</li>\n</ul>", "type": "rendered"}, "created_on": "2015-11-27T10:10:47.338663+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": "2015-11-27T10:11:14.235276+00:00", "type": "issue_comment", "id": 23627712}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23641988.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23641988"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "For the test, it would be great if we could generate a seg-fault repeatably on at least one architecture using the existing code. ", "markup": "markdown", "html": "<p>For the test, it would be great if we could generate a seg-fault repeatably on at least one architecture using the existing code. </p>", "type": "rendered"}, "created_on": "2015-11-27T23:14:49.539942+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 23641988}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23684468.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23684468"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "Well.. I don't know about the segfault, I have not seen that happen, it was just something that I thought might happen on some implementation. What I saw happening when debugging was (example with two children):\n\n- The vector `clear()` was called\n- When it got to the destructor of the first item, the vector would still consist of two smart pointers, the first with a reference count of zero, the second still with a reference count of 1.\n- The destructor removed its own item from the vector explicitly, moving item 2 to the position of item 1\n- ?? the rest is implementation of the vector I guess. In any case the reference counter of the now-first item in the vector wasn't touched anymore, it almost seems as if this element was considered handled already and thus not destroyed. Following that logic I would conjecture that trying to handle the second item that is now no longer there might result in a segfault, but honestly I don't know... It likely still has valid access to the memory at this point, so undefined behavior would be a more accurate description of the result.\n\nIn all fairness I don't know if a segfault would happen on any architecture. The memory leak is definitely there on mine though.", "markup": "markdown", "html": "<p>Well.. I don't know about the segfault, I have not seen that happen, it was just something that I thought might happen on some implementation. What I saw happening when debugging was (example with two children):</p>\n<ul>\n<li>The vector <code>clear()</code> was called</li>\n<li>When it got to the destructor of the first item, the vector would still consist of two smart pointers, the first with a reference count of zero, the second still with a reference count of 1.</li>\n<li>The destructor removed its own item from the vector explicitly, moving item 2 to the position of item 1</li>\n<li>?? the rest is implementation of the vector I guess. In any case the reference counter of the now-first item in the vector wasn't touched anymore, it almost seems as if this element was considered handled already and thus not destroyed. Following that logic I would conjecture that trying to handle the second item that is now no longer there might result in a segfault, but honestly I don't know... It likely still has valid access to the memory at this point, so undefined behavior would be a more accurate description of the result.</li>\n</ul>\n<p>In all fairness I don't know if a segfault would happen on any architecture. The memory leak is definitely there on mine though.</p>", "type": "rendered"}, "created_on": "2015-11-30T14:12:02.099872+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 23684468}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23692260.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23692260"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "I guess we could just add a memory leak test similar to the one we [added for sdformat](https://bitbucket.org/osrf/sdformat/pull-requests/230/fix-shared-pointer-reference-loop-in/diff#chg-test/integration/element_memory_leak.cc)", "markup": "markdown", "html": "<p>I guess we could just add a memory leak test similar to the one we <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/sdformat/pull-requests/230/fix-shared-pointer-reference-loop-in/diff#chg-test/integration/element_memory_leak.cc\" rel=\"nofollow\">added for sdformat</a></p>", "type": "rendered"}, "created_on": "2015-11-30T18:46:24.977068+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 23692260}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23711935.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23711935"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "Haha I was thinking about that, but it sounded like a lot of work and I feel kinda bad for reporting so much stuff without providing any tests for the fixes ;). I don't know how this would work exactly, but at least in my case (on a regular 64 bit Ubuntu 14.04 install) there is a memory leak so you'd think that would be detectable. Curiously I didn't find it via Valgrind, but admittedly I have little experience with that as well.", "markup": "markdown", "html": "<p>Haha I was thinking about that, but it sounded like a lot of work and I feel kinda bad for reporting so much stuff without providing any tests for the fixes ;). I don't know how this would work exactly, but at least in my case (on a regular 64 bit Ubuntu 14.04 install) there is a memory leak so you'd think that would be detectable. Curiously I didn't find it via Valgrind, but admittedly I have little experience with that as well.</p>", "type": "rendered"}, "created_on": "2015-12-01T12:01:37.123216+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 23711935}], "page": 1, "size": 10}