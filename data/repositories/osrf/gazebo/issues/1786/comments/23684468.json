{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786/comments/23684468.json"}, "html": {"href": "#!/osrf/gazebo/issues/1786#comment-23684468"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1786.json"}}, "type": "issue", "id": 1786, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Invalid access of `Base::children` results in memory leak / undefined behavior"}, "content": {"raw": "Well.. I don't know about the segfault, I have not seen that happen, it was just something that I thought might happen on some implementation. What I saw happening when debugging was (example with two children):\n\n- The vector `clear()` was called\n- When it got to the destructor of the first item, the vector would still consist of two smart pointers, the first with a reference count of zero, the second still with a reference count of 1.\n- The destructor removed its own item from the vector explicitly, moving item 2 to the position of item 1\n- ?? the rest is implementation of the vector I guess. In any case the reference counter of the now-first item in the vector wasn't touched anymore, it almost seems as if this element was considered handled already and thus not destroyed. Following that logic I would conjecture that trying to handle the second item that is now no longer there might result in a segfault, but honestly I don't know... It likely still has valid access to the memory at this point, so undefined behavior would be a more accurate description of the result.\n\nIn all fairness I don't know if a segfault would happen on any architecture. The memory leak is definitely there on mine though.", "markup": "markdown", "html": "<p>Well.. I don't know about the segfault, I have not seen that happen, it was just something that I thought might happen on some implementation. What I saw happening when debugging was (example with two children):</p>\n<ul>\n<li>The vector <code>clear()</code> was called</li>\n<li>When it got to the destructor of the first item, the vector would still consist of two smart pointers, the first with a reference count of zero, the second still with a reference count of 1.</li>\n<li>The destructor removed its own item from the vector explicitly, moving item 2 to the position of item 1</li>\n<li>?? the rest is implementation of the vector I guess. In any case the reference counter of the now-first item in the vector wasn't touched anymore, it almost seems as if this element was considered handled already and thus not destroyed. Following that logic I would conjecture that trying to handle the second item that is now no longer there might result in a segfault, but honestly I don't know... It likely still has valid access to the memory at this point, so undefined behavior would be a more accurate description of the result.</li>\n</ul>\n<p>In all fairness I don't know if a segfault would happen on any architecture. The memory leak is definitely there on mine though.</p>", "type": "rendered"}, "created_on": "2015-11-30T14:12:02.099872+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 23684468}