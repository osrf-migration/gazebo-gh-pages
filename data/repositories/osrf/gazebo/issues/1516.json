{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1516/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1516.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1516/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1516/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1516/physics-classes-call-sensors-functions"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1516/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "physics classes call sensors functions", "component": {"name": "build", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/132954.json"}}}, "votes": 1, "watches": 7, "content": {"raw": "The `libgazebo_sensors` library links with `libgazebo_physics` but not the other way around. This allows the sensor library to call physics functions. However, the physics library also calls sensor functions. Is this a circular linking problem?\r\n\r\n~~~\r\n$ grep -rnI sensors:: gazebo/physics/\r\ngazebo/physics/Model.cc:676:        !sensors::SensorManager::Instance()->SensorsInitialized() &&\r\ngazebo/physics/Link.cc:158:          sensors::create_sensor(sensorElem, this->GetWorld()->GetName(),\r\ngazebo/physics/Link.cc:259:    sensors::remove_sensor(*iter);\r\ngazebo/physics/Link.cc:779:    sensors::SensorPtr sensor = sensors::get_sensor(*iter);\r\ngazebo/physics/Joint.cc:81:    sensors::remove_sensor(*iter);\r\ngazebo/physics/Joint.cc:267:          sensors::create_sensor(sensorElem, this->GetWorld()->GetName(),\r\ngazebo/physics/Joint.cc:340:    sensors::remove_sensor(*iter);\r\ngazebo/physics/Joint.cc:574:    sensors::SensorPtr sensor = sensors::get_sensor(*iter);\r\ngazebo/physics/Link.hh:377:      /// sensors::Sensor. Access to a Sensor object\r\ngazebo/physics/Link.hh:378:      /// is accomplished through the sensors::SensorManager. This was done to\r\ngazebo/physics/World.cc:557:      sensors::SensorManager::Instance()->SensorsInitialized())\r\ngazebo/physics/World.cc:990:  sensors::SensorManager::Instance()->ResetLastUpdateTimes();\r\n~~~", "markup": "markdown", "html": "<p>The <code>libgazebo_sensors</code> library links with <code>libgazebo_physics</code> but not the other way around. This allows the sensor library to call physics functions. However, the physics library also calls sensor functions. Is this a circular linking problem?</p>\n<div class=\"codehilite\"><pre><span></span>$ grep -rnI sensors:: gazebo/physics/\ngazebo/physics/Model.cc:676:        !sensors::SensorManager::Instance<span class=\"o\">()</span>-&gt;SensorsInitialized<span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span>\ngazebo/physics/Link.cc:158:          sensors::create_sensor<span class=\"o\">(</span>sensorElem, this-&gt;GetWorld<span class=\"o\">()</span>-&gt;GetName<span class=\"o\">()</span>,\ngazebo/physics/Link.cc:259:    sensors::remove_sensor<span class=\"o\">(</span>*iter<span class=\"o\">)</span><span class=\"p\">;</span>\ngazebo/physics/Link.cc:779:    sensors::SensorPtr <span class=\"nv\">sensor</span> <span class=\"o\">=</span> sensors::get_sensor<span class=\"o\">(</span>*iter<span class=\"o\">)</span><span class=\"p\">;</span>\ngazebo/physics/Joint.cc:81:    sensors::remove_sensor<span class=\"o\">(</span>*iter<span class=\"o\">)</span><span class=\"p\">;</span>\ngazebo/physics/Joint.cc:267:          sensors::create_sensor<span class=\"o\">(</span>sensorElem, this-&gt;GetWorld<span class=\"o\">()</span>-&gt;GetName<span class=\"o\">()</span>,\ngazebo/physics/Joint.cc:340:    sensors::remove_sensor<span class=\"o\">(</span>*iter<span class=\"o\">)</span><span class=\"p\">;</span>\ngazebo/physics/Joint.cc:574:    sensors::SensorPtr <span class=\"nv\">sensor</span> <span class=\"o\">=</span> sensors::get_sensor<span class=\"o\">(</span>*iter<span class=\"o\">)</span><span class=\"p\">;</span>\ngazebo/physics/Link.hh:377:      /// sensors::Sensor. Access to a Sensor object\ngazebo/physics/Link.hh:378:      /// is accomplished through the sensors::SensorManager. This was <span class=\"k\">done</span> to\ngazebo/physics/World.cc:557:      sensors::SensorManager::Instance<span class=\"o\">()</span>-&gt;SensorsInitialized<span class=\"o\">())</span>\ngazebo/physics/World.cc:990:  sensors::SensorManager::Instance<span class=\"o\">()</span>-&gt;ResetLastUpdateTimes<span class=\"o\">()</span><span class=\"p\">;</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2015-03-13T18:12:52.277108+00:00", "milestone": null, "updated_on": "2016-09-14T19:43:21.446266+00:00", "type": "issue", "id": 1516}