{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/510/comments/24699556.json"}, "html": {"href": "#!/osrf/gazebo/issues/510#comment-24699556"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/510.json"}}, "type": "issue", "id": 510, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "can't spawn a model with the same name as a previously-deleted one"}, "content": {"raw": "The issue is still present in the latest version of Gazebo.\n If I try to spawn from the GUI a robot (let's say named `icub`), then the robot has name `icub`\n\nIf I then delete it and I respawn it from the GUI, then the robot name will be `icub_0`. If I delete it and respawn again, its name will be `icub_2`.\n\nThis happens only for model spawned with the GUI. \n\nThe cause is that the for the model created by the GUI, the `MainWindow::entities` data stucture is used to check name duplicates (#!/osrf/gazebo/src/0ad959e82058b53d4a9f0d1bebe6069c4827ea1c/gazebo/gui/ModelMaker.cc?at=default&fileviewer=file-view-default#ModelMaker.cc-398): \n~~~\n    // Automatically create a new name if the model exists\n    rendering::ScenePtr scene = gui::get_active_camera()->GetScene();\n    gui::MainWindow *mainWindow = gui::get_main_window();\n    if (scene && mainWindow)\n    {\n      int i = 0;\n      while ((isModel && mainWindow->HasEntityName(modelName)) ||\n          (isLight && scene->GetLight(modelName)))\n      {\n        modelName = modelElem->Get<std::string>(\"name\") + \"_\" +\n            std::to_string(i++);\n      }\n    }\n~~~\n\nThe problem is that the `entities` data structure is populated on entity creation (see #!/osrf/gazebo/src/0ad959e82058b53d4a9f0d1bebe6069c4827ea1c/gazebo/gui/MainWindow.cc?at=default&fileviewer=file-view-default#MainWindow.cc-2022):\n~~~\nvoid MainWindow::OnModel(ConstModelPtr &_msg)\n{\n  this->dataPtr->entities[_msg->name()] = _msg->id();\n  for (int i = 0; i < _msg->link_size(); i++)\n  {\n    this->dataPtr->entities[_msg->link(i).name()] = _msg->link(i).id();\n\n    for (int j = 0; j < _msg->link(i).collision_size(); j++)\n    {\n      this->dataPtr->entities[_msg->link(i).collision(j).name()] =\n        _msg->link(i).collision(j).id();\n    }\n  }\n~~~\n\nUnfortunately the `entities` attribute is not cleaned on model removal. As far as I could check, apparently the MainWindow class is not notified by anything on model removal. \n\n", "markup": "markdown", "html": "<p>The issue is still present in the latest version of Gazebo.\n If I try to spawn from the GUI a robot (let's say named <code>icub</code>), then the robot has name <code>icub</code></p>\n<p>If I then delete it and I respawn it from the GUI, then the robot name will be <code>icub_0</code>. If I delete it and respawn again, its name will be <code>icub_2</code>.</p>\n<p>This happens only for model spawned with the GUI. </p>\n<p>The cause is that the for the model created by the GUI, the <code>MainWindow::entities</code> data stucture is used to check name duplicates (<a href=\"#!/osrf/gazebo/src/0ad959e82058b53d4a9f0d1bebe6069c4827ea1c/gazebo/gui/ModelMaker.cc?at=default&amp;fileviewer=file-view-default#ModelMaker.cc-398\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/0ad959e82058b53d4a9f0d1bebe6069c4827ea1c/gazebo/gui/ModelMaker.cc?at=default&amp;fileviewer=file-view-default#ModelMaker.cc-398</a>): </p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"o\">//</span> <span class=\"nt\">Automatically</span> <span class=\"nt\">create</span> <span class=\"nt\">a</span> <span class=\"nt\">new</span> <span class=\"nt\">name</span> <span class=\"nt\">if</span> <span class=\"nt\">the</span> <span class=\"nt\">model</span> <span class=\"nt\">exists</span>\n    <span class=\"nt\">rendering</span><span class=\"p\">::</span><span class=\"nd\">ScenePtr</span> <span class=\"nt\">scene</span> <span class=\"o\">=</span> <span class=\"nt\">gui</span><span class=\"p\">::</span><span class=\"nd\">get_active_camera</span><span class=\"o\">()</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">GetScene</span><span class=\"o\">();</span>\n    <span class=\"nt\">gui</span><span class=\"p\">::</span><span class=\"nd\">MainWindow</span> <span class=\"o\">*</span><span class=\"nt\">mainWindow</span> <span class=\"o\">=</span> <span class=\"nt\">gui</span><span class=\"p\">::</span><span class=\"nd\">get_main_window</span><span class=\"o\">();</span>\n    <span class=\"nt\">if</span> <span class=\"o\">(</span><span class=\"nt\">scene</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nt\">mainWindow</span><span class=\"o\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"err\">int</span> <span class=\"err\">i</span> <span class=\"err\">=</span> <span class=\"err\">0</span><span class=\"p\">;</span>\n      <span class=\"err\">while</span> <span class=\"err\">((isModel</span> <span class=\"err\">&amp;&amp;</span> <span class=\"err\">mainWindow-&gt;HasEntityName(modelName))</span> <span class=\"err\">||</span>\n          <span class=\"err\">(isLight</span> <span class=\"err\">&amp;&amp;</span> <span class=\"err\">scene-&gt;GetLight(modelName)))</span>\n      <span class=\"err\">{</span>\n        <span class=\"err\">modelName</span> <span class=\"err\">=</span> <span class=\"err\">modelElem-&gt;Get&lt;</span><span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_&quot;</span> <span class=\"o\">+</span>\n            <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"nf\">to_string</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"err\">}</span>\n</pre></div>\n\n\n<p>The problem is that the <code>entities</code> data structure is populated on entity creation (see <a href=\"#!/osrf/gazebo/src/0ad959e82058b53d4a9f0d1bebe6069c4827ea1c/gazebo/gui/MainWindow.cc?at=default&amp;fileviewer=file-view-default#MainWindow.cc-2022\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/gazebo/src/0ad959e82058b53d4a9f0d1bebe6069c4827ea1c/gazebo/gui/MainWindow.cc?at=default&amp;fileviewer=file-view-default#MainWindow.cc-2022</a>):</p>\n<div class=\"codehilite\"><pre><span></span>void MainWindow::OnModel(ConstModelPtr &amp;_msg)\n{\n  this-&gt;dataPtr-&gt;entities[_msg-&gt;name()] = _msg-&gt;id();\n  for (int i = 0; i &lt; _msg-&gt;link_size(); i++)\n  {\n    this-&gt;dataPtr-&gt;entities[_msg-&gt;link(i).name()] = _msg-&gt;link(i).id();\n\n    for (int j = 0; j &lt; _msg-&gt;link(i).collision_size(); j++)\n    {\n      this-&gt;dataPtr-&gt;entities[_msg-&gt;link(i).collision(j).name()] =\n        _msg-&gt;link(i).collision(j).id();\n    }\n  }\n</pre></div>\n\n\n<p>Unfortunately the <code>entities</code> attribute is not cleaned on model removal. As far as I could check, apparently the MainWindow class is not notified by anything on model removal. </p>", "type": "rendered"}, "created_on": "2016-01-14T10:37:51.457243+00:00", "user": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "updated_on": null, "type": "issue_comment", "id": 24699556}