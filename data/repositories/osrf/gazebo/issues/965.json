{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/965/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/965.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/965/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/965/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/965/physics-base-childrenend-causes-failures"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/965/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "physics::Base::childrenEnd causes failures with libc++", "component": {"name": "physics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122876.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "Now that gazebo compiles on OSX 10.9, I've been testing it, and it isn't able to successfully load worlds. It appears to have problems with `Base::childrenEnd`, which seems to be a cached copy of `Base::children.end()`. This is referenced in numerous places in Entity.cc and Base.cc:\r\n~~~\r\n$ grep -rnI childrenEnd .\r\n./gazebo/physics/Entity.cc:147:  for (iter = this->children.begin(); iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Entity.cc:279:            iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Entity.cc:313:      iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Entity.cc:425:         iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Entity.cc:441:         iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Base.hh:309:      protected: Base_V::iterator childrenEnd;\r\n./gazebo/physics/Base.cc:63:       iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Base.cc:69:  this->childrenEnd = this->children.end();\r\n./gazebo/physics/Base.cc:110:  for (iter = this->children.begin(); iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Base.cc:115:  this->childrenEnd = this->children.end();\r\n./gazebo/physics/Base.cc:130:  for (iter = this->children.begin(); iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Base.cc:199:  this->childrenEnd = this->children.end();\r\n./gazebo/physics/Base.cc:206:  for (iter = this->children.begin(); iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Base.cc:215:  this->childrenEnd = this->children.end();\r\n./gazebo/physics/Base.cc:251:  for (iter = this->children.begin(); iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Base.cc:263:  this->childrenEnd = this->children.end();\r\n./gazebo/physics/Base.cc:270:  this->childrenEnd = this->children.end();\r\n./gazebo/physics/Base.cc:299:  Base_V::const_iterator iterEnd = this->childrenEnd;\r\n./gazebo/physics/Base.cc:346:  for (iter = this->children.begin(); iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Base.cc:356:  for (iter = this->children.begin(); iter != this->childrenEnd; ++iter)\r\n./gazebo/physics/Base.cc:380:  for (iter = this->children.begin(); iter != this->childrenEnd; ++iter)\r\n~~~\r\nThe problems arise in for loops with `iter != this->childrenEnd`. Switching to `iter != this->children.end()` appears to fix it. It seems like a bug to me. If it's an optimization, we should profile it and make sure it's worth the effort.", "markup": "markdown", "html": "<p>Now that gazebo compiles on OSX 10.9, I've been testing it, and it isn't able to successfully load worlds. It appears to have problems with <code>Base::childrenEnd</code>, which seems to be a cached copy of <code>Base::children.end()</code>. This is referenced in numerous places in Entity.cc and Base.cc:</p>\n<div class=\"codehilite\"><pre><span></span>$ grep -rnI childrenEnd .\n./gazebo/physics/Entity.cc:147:  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nv\">iter</span> <span class=\"o\">=</span> this-&gt;children.begin<span class=\"o\">()</span><span class=\"p\">;</span> iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Entity.cc:279:            iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Entity.cc:313:      iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Entity.cc:425:         iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Entity.cc:441:         iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Base.hh:309:      protected: Base_V::iterator childrenEnd<span class=\"p\">;</span>\n./gazebo/physics/Base.cc:63:       iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Base.cc:69:  this-&gt;childrenEnd <span class=\"o\">=</span> this-&gt;children.end<span class=\"o\">()</span><span class=\"p\">;</span>\n./gazebo/physics/Base.cc:110:  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nv\">iter</span> <span class=\"o\">=</span> this-&gt;children.begin<span class=\"o\">()</span><span class=\"p\">;</span> iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Base.cc:115:  this-&gt;childrenEnd <span class=\"o\">=</span> this-&gt;children.end<span class=\"o\">()</span><span class=\"p\">;</span>\n./gazebo/physics/Base.cc:130:  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nv\">iter</span> <span class=\"o\">=</span> this-&gt;children.begin<span class=\"o\">()</span><span class=\"p\">;</span> iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Base.cc:199:  this-&gt;childrenEnd <span class=\"o\">=</span> this-&gt;children.end<span class=\"o\">()</span><span class=\"p\">;</span>\n./gazebo/physics/Base.cc:206:  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nv\">iter</span> <span class=\"o\">=</span> this-&gt;children.begin<span class=\"o\">()</span><span class=\"p\">;</span> iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Base.cc:215:  this-&gt;childrenEnd <span class=\"o\">=</span> this-&gt;children.end<span class=\"o\">()</span><span class=\"p\">;</span>\n./gazebo/physics/Base.cc:251:  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nv\">iter</span> <span class=\"o\">=</span> this-&gt;children.begin<span class=\"o\">()</span><span class=\"p\">;</span> iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Base.cc:263:  this-&gt;childrenEnd <span class=\"o\">=</span> this-&gt;children.end<span class=\"o\">()</span><span class=\"p\">;</span>\n./gazebo/physics/Base.cc:270:  this-&gt;childrenEnd <span class=\"o\">=</span> this-&gt;children.end<span class=\"o\">()</span><span class=\"p\">;</span>\n./gazebo/physics/Base.cc:299:  Base_V::const_iterator <span class=\"nv\">iterEnd</span> <span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span>\n./gazebo/physics/Base.cc:346:  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nv\">iter</span> <span class=\"o\">=</span> this-&gt;children.begin<span class=\"o\">()</span><span class=\"p\">;</span> iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Base.cc:356:  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nv\">iter</span> <span class=\"o\">=</span> this-&gt;children.begin<span class=\"o\">()</span><span class=\"p\">;</span> iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n./gazebo/physics/Base.cc:380:  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nv\">iter</span> <span class=\"o\">=</span> this-&gt;children.begin<span class=\"o\">()</span><span class=\"p\">;</span> iter !<span class=\"o\">=</span> this-&gt;childrenEnd<span class=\"p\">;</span> ++iter<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The problems arise in for loops with <code>iter != this-&gt;childrenEnd</code>. Switching to <code>iter != this-&gt;children.end()</code> appears to fix it. It seems like a bug to me. If it's an optimization, we should profile it and make sure it's worth the effort.</p>", "type": "rendered"}, "assignee": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2013-11-26T20:45:34.200862+00:00", "milestone": null, "updated_on": "2016-09-14T19:45:12.250231+00:00", "type": "issue", "id": 965}