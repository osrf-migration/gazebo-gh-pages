{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1849/comments/25102884.json"}, "html": {"href": "#!/osrf/gazebo/issues/1849#comment-25102884"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1849.json"}}, "type": "issue", "id": 1849, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "lcov coverage build with simbody causes test failures"}, "content": {"raw": "Hi, Steve. The assert that blew was just checking for a reasonable value for a `ContactCliqueId` -- that is just an int and must be nonnegative or equal to the special negative value used to indicate \"uninitialized\". So it is looking at garbage memory in the counter that it uses to produce unique ids.\n\nThis occurred during createNewContactClique() which is defined [here](https://github.com/simbody/simbody/blob/master/Simbody/include/simbody/internal/ContactSurface.h#L455). It is attempting to be thread-safe by using an `AtomicInteger`; I wonder if gcov is messing with the behavior of that somehow? You could try substituting the C++11-standard std::atomic_int to see if that fixes the problem; if so we should probably use that exclusively in Simbody rather than our pre-C++11 attempt to accomplish the same thing.", "markup": "markdown", "html": "<p>Hi, Steve. The assert that blew was just checking for a reasonable value for a <code>ContactCliqueId</code> -- that is just an int and must be nonnegative or equal to the special negative value used to indicate \"uninitialized\". So it is looking at garbage memory in the counter that it uses to produce unique ids.</p>\n<p>This occurred during createNewContactClique() which is defined <a data-is-external-link=\"true\" href=\"https://github.com/simbody/simbody/blob/master/Simbody/include/simbody/internal/ContactSurface.h#L455\" rel=\"nofollow\">here</a>. It is attempting to be thread-safe by using an <code>AtomicInteger</code>; I wonder if gcov is messing with the behavior of that somehow? You could try substituting the C++11-standard std::atomic_int to see if that fixes the problem; if so we should probably use that exclusively in Simbody rather than our pre-C++11 attempt to accomplish the same thing.</p>", "type": "rendered"}, "created_on": "2016-01-29T22:53:49.474037+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 25102884}