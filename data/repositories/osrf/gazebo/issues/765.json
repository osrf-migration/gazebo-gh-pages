{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/765/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/765.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/765/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/765/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/765/subscribers-can-miss-a-publication"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/765/vote"}}, "reporter": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "title": "Subscribers can miss a publication", "component": {"name": "transport", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122882.json"}}}, "votes": 0, "watches": 2, "content": {"raw": "Test case:\r\n\r\n1) Create two subscribers to the same topic in different processes.\r\n\r\n2) Create a publisher that publishes a message on the topic, and then immediately quits.\r\n\r\nOccasionally, one of the subscribers will not get the message due to communication delays (processing the connections between subscribers and publishers is asynchronous). \r\n\r\nA publisher can call WaitForConnection, but this will wait for only the first connection. We could extend Master to tell a publisher the number of current subscribers on a topic. WaitForConnection could then wait for all the connections, with a timeout.", "markup": "markdown", "html": "<p>Test case:</p>\n<p>1) Create two subscribers to the same topic in different processes.</p>\n<p>2) Create a publisher that publishes a message on the topic, and then immediately quits.</p>\n<p>Occasionally, one of the subscribers will not get the message due to communication delays (processing the connections between subscribers and publishers is asynchronous). </p>\n<p>A publisher can call WaitForConnection, but this will wait for only the first connection. We could extend Master to tell a publisher the number of current subscribers on a topic. WaitForConnection could then wait for all the connections, with a timeout.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2013-07-03T20:23:33.690525+00:00", "milestone": null, "updated_on": "2016-09-14T19:20:56.933130+00:00", "type": "issue", "id": 765}