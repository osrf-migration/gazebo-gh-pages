{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1312/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1312.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1312/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1312/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1312/sensor-visualisations-wireless-sonar-cause"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1312/vote"}}, "reporter": {"display_name": "Andrew Symington", "uuid": "{db1311fc-02e6-442e-84a1-4bb85dfee5ba}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D"}, "html": {"href": "https://bitbucket.org/%7Bdb1311fc-02e6-442e-84a1-4bb85dfee5ba%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:cab3b56e-7c24-487c-b07f-05e0600adf54/8a009f21-29b8-4d43-98ed-2677428e17ff/128"}}, "nickname": "asymingt", "type": "user", "account_id": "557058:cab3b56e-7c24-487c-b07f-05e0600adf54"}, "title": "Sensor visualisations (wireless, sonar) cause client  tr1::bad_weak_ptr exception", "component": {"name": "sensors", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122877.json"}}}, "votes": 0, "watches": 2, "content": {"raw": "My ultimate goal is to draw lines in Gazebo between a GPS sensor and models in the environment (satellite vehicles). Since there is no rendering visual for the GPS sensor, I thought I'd go ahead and copy/modify one of the existing sensor visuals.\r\n\r\nHowever, I'm struggling to find a relatively simple visualisation that doesn't crash the Gazbo client. For example, trying to launch an example world...\r\n\r\n```bash\r\ngazebo /path/to/gazebo/source/worlds/wireless_sensors.world\r\n```\r\n... causes the following **client** exception to be thrown...\r\n\r\n```bash\r\nterminate called after throwing an instance of 'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_weak_ptr> >'\r\n  what():  tr1::bad_weak_ptr\r\n```\r\n\r\nThis happens with Ubuntu 14.04 ```gazebo4``` and the current default source. I have narrowed it down to turning on sensor visuals (sonar, wireless transceiver).\r\n\r\nCan anybody replicate this issue?", "markup": "markdown", "html": "<p>My ultimate goal is to draw lines in Gazebo between a GPS sensor and models in the environment (satellite vehicles). Since there is no rendering visual for the GPS sensor, I thought I'd go ahead and copy/modify one of the existing sensor visuals.</p>\n<p>However, I'm struggling to find a relatively simple visualisation that doesn't crash the Gazbo client. For example, trying to launch an example world...</p>\n<div class=\"codehilite language-bash\"><pre><span></span>gazebo /path/to/gazebo/source/worlds/wireless_sensors.world\n</pre></div>\n\n\n<p>... causes the following <strong>client</strong> exception to be thrown...</p>\n<div class=\"codehilite language-bash\"><pre><span></span>terminate called after throwing an instance of <span class=\"s1\">&#39;boost::exception_detail::clone_impl&lt;boost::exception_detail::error_info_injector&lt;boost::bad_weak_ptr&gt; &gt;&#39;</span>\n  what<span class=\"o\">()</span>:  tr1::bad_weak_ptr\n</pre></div>\n\n\n<p>This happens with Ubuntu 14.04 <code>gazebo4</code> and the current default source. I have narrowed it down to turning on sensor visuals (sonar, wireless transceiver).</p>\n<p>Can anybody replicate this issue?</p>", "type": "rendered"}, "assignee": null, "state": "closed", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2014-10-27T17:31:24.318307+00:00", "milestone": null, "updated_on": "2016-09-14T19:43:29.399676+00:00", "type": "issue", "id": 1312}