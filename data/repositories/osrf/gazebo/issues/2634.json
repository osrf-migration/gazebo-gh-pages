{"priority": "blocker", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2634/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2634.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2634/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2634/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2634/physics-road-load-function-does-not-load"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2634/vote"}}, "reporter": {"display_name": "tahsin kose", "uuid": "{673491fc-0897-428a-aa18-87d90e71273c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B673491fc-0897-428a-aa18-87d90e71273c%7D"}, "html": {"href": "https://bitbucket.org/%7B673491fc-0897-428a-aa18-87d90e71273c%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/01b15e743328fb0f3754505cb3547af3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsTK-5.png"}}, "nickname": "Tahsincan K\u00f6se", "type": "user", "account_id": "5c76fd6c92ac9063b7e87616"}, "title": "physics::Road Load function does not load the road properly from SDF.", "component": {"name": "physics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122876.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "I\u2019m trying to implement a simple Gazebo plugin that adapts the elevation of the roads extracted with OSM to the DEM file of the same region. For this purpose, I attended to accumulate all the roads in a world file as physics::RoadPtr objects. [World](http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1World.html) class still lacks a proper support for the Road objects, therefore I came out with a workaround that uses [Base](http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Base.html) and SDF objects to load the correct road portions. Below is an example code:\r\n\r\n```\r\nphysics::BasePtr road_base = world-&gt;BaseByName(road_name);\r\nphysics::RoadPtr road(new physics::Road(road_base));\r\nsdf::ElementPtr tmp = road_base-&gt;GetSDF();\r\nroad-&gt;Load(tmp);\r\n```\r\n\r\nI expect the road to be properly loaded. However when I execute `road-&gt;Print(&#34;&#34;)` to see whether it&~~#39~~;s filled, only the name of road is seen. Moreover, `road-&gt;Points.size()` gives 0 and `road-&gt;GetWidth()` outputs garbage values. Either [Load](http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Road.html#ad01eb684e0c230a2061212557ebe9bd2) function is not accurately implemented or I make a mistake at some point.\r\n\r\n\u200c\r\n\r\nWhen I looked to the [source of Load function](#!/osrf/gazebo/src/9e18a31cda6328c1d8d4ec08b9d1b6cfcdb93585/gazebo/physics/Road.cc#lines-58), I noticed that it uses `Base-&gt;Load(sdf::ElementPtr)`. However, there is a problem in Base-&gt;Load at line [84](#!/osrf/gazebo/src/9e18a31cda6328c1d8d4ec08b9d1b6cfcdb93585/gazebo/physics/Base.cc#lines-84). At the end it calls [Base::RegisterIntrospectionItems\\(\\)](#!/osrf/gazebo/src/9e18a31cda6328c1d8d4ec08b9d1b6cfcdb93585/gazebo/physics/Base.cc#lines-356), which is empty. I think it\u2019s deliberately left empty to be implemented in the future, however the physics::Road API does not work as expected due to this problem. T~~his makes me wonder that any class inherits from Base should have a problem loading SDF portions, since the problem is at Base.~~\r\n\r\n\u200c\r\n\r\n**EDIT:** RegisterIntrospectionItems seems to be a protected function, which expects inheriting classes to implement itself. API [specifies](http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Base.html#a75a15d2be0ceb16b9e7c9cae19273930) Link, Joint and Model classes implement it. Road also inherits from Base class, but does not implement it, which results in the current problem.\r\n\r\nI\u2019m open to any suggestion for a proper workaround other than editing the Gazebo source and having a source build, at least for the time being.", "markup": "markdown", "html": "<p>I\u2019m trying to implement a simple Gazebo plugin that adapts the elevation of the roads extracted with OSM to the DEM file of the same region. For this purpose, I attended to accumulate all the roads in a world file as physics::RoadPtr objects. <a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1World.html\" rel=\"nofollow\">World</a> class still lacks a proper support for the Road objects, therefore I came out with a workaround that uses <a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Base.html\" rel=\"nofollow\">Base</a> and SDF objects to load the correct road portions. Below is an example code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">physics</span><span class=\"p\">::</span><span class=\"nd\">BasePtr</span> <span class=\"nt\">road_base</span> <span class=\"o\">=</span> <span class=\"nt\">world-</span><span class=\"o\">&amp;</span><span class=\"nt\">gt</span><span class=\"o\">;</span><span class=\"nt\">BaseByName</span><span class=\"o\">(</span><span class=\"nt\">road_name</span><span class=\"o\">);</span>\n<span class=\"nt\">physics</span><span class=\"p\">::</span><span class=\"nd\">RoadPtr</span> <span class=\"nt\">road</span><span class=\"o\">(</span><span class=\"nt\">new</span> <span class=\"nt\">physics</span><span class=\"p\">::</span><span class=\"nd\">Road</span><span class=\"o\">(</span><span class=\"nt\">road_base</span><span class=\"o\">));</span>\n<span class=\"nt\">sdf</span><span class=\"p\">::</span><span class=\"nd\">ElementPtr</span> <span class=\"nt\">tmp</span> <span class=\"o\">=</span> <span class=\"nt\">road_base-</span><span class=\"o\">&amp;</span><span class=\"nt\">gt</span><span class=\"o\">;</span><span class=\"nt\">GetSDF</span><span class=\"o\">();</span>\n<span class=\"nt\">road-</span><span class=\"o\">&amp;</span><span class=\"nt\">gt</span><span class=\"o\">;</span><span class=\"nt\">Load</span><span class=\"o\">(</span><span class=\"nt\">tmp</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>I expect the road to be properly loaded. However when I execute <code>road-&amp;gt;Print(&amp;#34;&amp;#34;)</code> to see whether it&amp;<del><a href=\"#!/osrf/gazebo/issues/39/world-setstate-is-non-deterministic-if-in\" rel=\"nofollow\" title=\"World::SetState is non-deterministic if in a separate thread as physics\" class=\"ap-connect-link\"><s>#39</s></a></del>;s filled, only the name of road is seen. Moreover, <code>road-&amp;gt;Points.size()</code> gives 0 and <code>road-&amp;gt;GetWidth()</code> outputs garbage values. Either <a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Road.html#ad01eb684e0c230a2061212557ebe9bd2\" rel=\"nofollow\">Load</a> function is not accurately implemented or I make a mistake at some point.</p>\n<p>\u200c</p>\n<p>When I looked to the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/9e18a31cda6328c1d8d4ec08b9d1b6cfcdb93585/gazebo/physics/Road.cc#lines-58\" rel=\"nofollow\">source of Load function</a>, I noticed that it uses <code>Base-&amp;gt;Load(sdf::ElementPtr)</code>. However, there is a problem in Base-&amp;gt;Load at line <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/9e18a31cda6328c1d8d4ec08b9d1b6cfcdb93585/gazebo/physics/Base.cc#lines-84\" rel=\"nofollow\">84</a>. At the end it calls <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/9e18a31cda6328c1d8d4ec08b9d1b6cfcdb93585/gazebo/physics/Base.cc#lines-356\" rel=\"nofollow\">Base::RegisterIntrospectionItems()</a>, which is empty. I think it\u2019s deliberately left empty to be implemented in the future, however the physics::Road API does not work as expected due to this problem. T<del>his makes me wonder that any class inherits from Base should have a problem loading SDF portions, since the problem is at Base.</del></p>\n<p>\u200c</p>\n<p><strong>EDIT:</strong> RegisterIntrospectionItems seems to be a protected function, which expects inheriting classes to implement itself. API <a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Base.html#a75a15d2be0ceb16b9e7c9cae19273930\" rel=\"nofollow\">specifies</a> Link, Joint and Model classes implement it. Road also inherits from Base class, but does not implement it, which results in the current problem.</p>\n<p>I\u2019m open to any suggestion for a proper workaround other than editing the Gazebo source and having a source build, at least for the time being.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "9.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242746.json"}}}, "edited_on": null, "created_on": "2019-05-30T08:34:18.097210+00:00", "milestone": null, "updated_on": "2019-05-30T08:41:18.706459+00:00", "type": "issue", "id": 2634}