{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1160/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1160.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1160/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1160/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1160/lcov-coverage-build-with-eigen-dart-causes"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1160/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "lcov coverage build with eigen, dart causes test failures", "component": {"name": "build", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/132954.json"}}}, "votes": 0, "watches": 3, "content": {"raw": "An open source coverage tool (lcov) was integrated in pull request #1047 with `-DCMAKE_BUILD_TYPE=Coverage`. It currently causes many test to fail when compiled against eigen (a DartPhysics dependency) with the following types of error messages:\r\n~~~\r\n$ test/integration/INTEGRATION_physics\r\nINTEGRATION_physics: /usr/include/eigen3/Eigen/src/Core/CommaInitializer.h:95: Eigen::CommaInitializer<MatrixType>::~CommaInitializer() [with XprType = Eigen::Matrix<double, 2, 2>]: Assertion `(m_row+m_currentBlockRows) == m_xpr.rows() && m_col == m_xpr.cols() && \"Too few coefficients passed to comma initializer (operator<<)\"' failed.\r\nAborted (core dumped)\r\n~~~\r\nBacktrace:\r\n~~~\r\nProgram received signal SIGABRT, Aborted.\r\n0x00007ffff223cf77 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\r\n56\t../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory.\r\n(gdb) bt\r\n#0  0x00007ffff223cf77 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\r\n#1  0x00007ffff22405e8 in __GI_abort () at abort.c:90\r\n#2  0x00007ffff2235d43 in __assert_fail_base (fmt=0x7ffff238cf58 \"%s%s%s:%u: %s%sAssertion `%s' failed.\\n%n\", \r\n    assertion=assertion@entry=0x7fffee9eba40 \"(m_row+m_currentBlockRows) == m_xpr.rows() && m_col == m_xpr.cols() && \\\"Too few coefficients passed to comma initializer (operator<<)\\\"\", \r\n    file=file@entry=0x7fffee9eba08 \"/usr/include/eigen3/Eigen/src/Core/CommaInitializer.h\", \r\n    line=line@entry=95, \r\n    function=function@entry=0x7fffee9ee9e0 <Eigen::CommaInitializer<Eigen::Matrix<double, 2, 2, 0, 2, 2> >::~CommaInitializer()::__PRETTY_FUNCTION__> \"Eigen::CommaInitializer<MatrixType>::~CommaInitializer() [with XprType = Eigen::Matrix<double, 2, 2>]\") at assert.c:92\r\n#3  0x00007ffff2235df2 in __GI___assert_fail (\r\n    assertion=0x7fffee9eba40 \"(m_row+m_currentBlockRows) == m_xpr.rows() && m_col == m_xpr.cols() && \\\"Too few coefficients passed to comma initializer (operator<<)\\\"\", \r\n    file=0x7fffee9eba08 \"/usr/include/eigen3/Eigen/src/Core/CommaInitializer.h\", line=95, \r\n    function=0x7fffee9ee9e0 <Eigen::CommaInitializer<Eigen::Matrix<double, 2, 2, 0, 2, 2> >::~CommaInitializer()::__PRETTY_FUNCTION__> \"Eigen::CommaInitializer<MatrixType>::~CommaInitializer() [with XprType = Eigen::Matrix<double, 2, 2>]\") at assert.c:101\r\n#4  0x00007fffee9060cc in Eigen::CommaInitializer<Eigen::Matrix<double, 2, 2, 0, 2, 2> >::~CommaInitializer (\r\n    this=0x7fffffffdcf0, __in_chrg=<optimized out>)\r\n    at /usr/include/eigen3/Eigen/src/Core/CommaInitializer.h:93\r\n#5  0x00007fffee905ffa in Eigen::DenseBase<Eigen::Matrix<double, 2, 2, 0, 2, 2> >::operator<< (\r\n    this=0x7fffffffde90, s=@0x7fffffffde50: 0) at /usr/include/eigen3/Eigen/src/Core/CommaInitializer.h:129\r\n#6  0x00007fffee9019b0 in __static_initialization_and_destruction_0 (__initialize_p=1, __priority=65535)\r\n    at /usr/include/dart/math/Helpers.h:59\r\n#7  0x00007fffee902f05 in _GLOBAL__sub_I_DARTBallJoint.cc(void) ()\r\n    at /home/scpeters/osrf/gazebo/gazebo/physics/dart/DARTBallJoint.cc:139\r\n#8  0x00007ffff7de9856 in call_init (l=l@entry=0x7ffff7fc1ac0, argc=argc@entry=1, \r\n    argv=argv@entry=0x7fffffffdf98, env=env@entry=0x7fffffffdfa8) at dl-init.c:84\r\n#9  0x00007ffff7de9910 in call_init (env=<optimized out>, argv=<optimized out>, argc=<optimized out>, \r\n    l=0x7ffff7fc1ac0) at dl-init.c:55\r\n#10 _dl_init (main_map=0x7ffff7ffe268, argc=1, argv=0x7fffffffdf98, env=0x7fffffffdfa8) at dl-init.c:133\r\n#11 0x00007ffff7ddb66a in _dl_start_user () from /lib64/ld-linux-x86-64.so.2\r\n#12 0x0000000000000001 in ?? ()\r\n#13 0x00007fffffffe2e8 in ?? ()\r\n#14 0x0000000000000000 in ?? ()\r\n(gdb)\r\n~~~", "markup": "markdown", "html": "<p>An open source coverage tool (lcov) was integrated in <a href=\"#!/osrf/gazebo/pull-requests/1047/adding-lcov-coverage\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #1047</a> with <code>-DCMAKE_BUILD_TYPE=Coverage</code>. It currently causes many test to fail when compiled against eigen (a DartPhysics dependency) with the following types of error messages:</p>\n<div class=\"codehilite\"><pre><span></span>$ test/integration/INTEGRATION_physics\nINTEGRATION_physics: /usr/include/eigen3/Eigen/src/Core/CommaInitializer.h:95: Eigen::CommaInitializer&lt;MatrixType&gt;::~CommaInitializer<span class=\"o\">()</span> <span class=\"o\">[</span>with <span class=\"nv\">XprType</span> <span class=\"o\">=</span> Eigen::Matrix&lt;double, <span class=\"m\">2</span>, <span class=\"m\">2</span>&gt;<span class=\"o\">]</span>: Assertion <span class=\"sb\">`</span><span class=\"o\">(</span>m_row+m_currentBlockRows<span class=\"o\">)</span> <span class=\"o\">==</span> m_xpr.rows<span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">m_col</span> <span class=\"o\">==</span> m_xpr.cols<span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"s2\">&quot;Too few coefficients passed to comma initializer (operator&lt;&lt;)&quot;</span><span class=\"err\">&#39;</span> failed.\nAborted <span class=\"o\">(</span>core dumped<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Backtrace:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">Program</span> <span class=\"n\">received</span> <span class=\"n\">signal</span> <span class=\"n\">SIGABRT</span><span class=\"p\">,</span> <span class=\"n\">Aborted</span><span class=\"p\">.</span>\n<span class=\"mh\">0x00007ffff223cf77</span> <span class=\"k\">in</span> <span class=\"n\">__GI_raise</span> <span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"o\">=</span><span class=\"n\">sig</span><span class=\"p\">@</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"p\">..</span><span class=\"o\">/</span><span class=\"n\">nptl</span><span class=\"o\">/</span><span class=\"n\">sysdeps</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"o\">/</span><span class=\"n\">sysv</span><span class=\"o\">/</span><span class=\"n\">linux</span><span class=\"o\">/</span><span class=\"n\">raise</span><span class=\"p\">.</span><span class=\"nl\">c</span><span class=\"p\">:</span><span class=\"mi\">56</span>\n<span class=\"mi\">56</span>  <span class=\"p\">..</span><span class=\"o\">/</span><span class=\"n\">nptl</span><span class=\"o\">/</span><span class=\"n\">sysdeps</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"o\">/</span><span class=\"n\">sysv</span><span class=\"o\">/</span><span class=\"n\">linux</span><span class=\"o\">/</span><span class=\"n\">raise</span><span class=\"p\">.</span><span class=\"nl\">c</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span> <span class=\"n\">bt</span>\n<span class=\"cp\">#0  0x00007ffff223cf77 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56</span>\n<span class=\"cp\">#1  0x00007ffff22405e8 in __GI_abort () at abort.c:90</span>\n<span class=\"cp\">#2  0x00007ffff2235d43 in __assert_fail_base (fmt=0x7ffff238cf58 &quot;%s%s%s:%u: %s%sAssertion `%s&#39; failed.\\n%n&quot;, </span>\n    <span class=\"n\">assertion</span><span class=\"o\">=</span><span class=\"n\">assertion</span><span class=\"p\">@</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"mh\">0x7fffee9eba40</span> <span class=\"s\">&quot;(m_row+m_currentBlockRows) == m_xpr.rows() &amp;&amp; m_col == m_xpr.cols() &amp;&amp; </span><span class=\"se\">\\&quot;</span><span class=\"s\">Too few coefficients passed to comma initializer (operator&lt;&lt;)</span><span class=\"se\">\\&quot;</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> \n    <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">file</span><span class=\"p\">@</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"mh\">0x7fffee9eba08</span> <span class=\"s\">&quot;/usr/include/eigen3/Eigen/src/Core/CommaInitializer.h&quot;</span><span class=\"p\">,</span> \n    <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"n\">line</span><span class=\"p\">@</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">,</span> \n    <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"n\">function</span><span class=\"p\">@</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"mh\">0x7fffee9ee9e0</span> <span class=\"o\">&lt;</span><span class=\"n\">Eigen</span><span class=\"o\">::</span><span class=\"n\">CommaInitializer</span><span class=\"o\">&lt;</span><span class=\"n\">Eigen</span><span class=\"o\">::</span><span class=\"n\">Matrix</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;::~</span><span class=\"n\">CommaInitializer</span><span class=\"p\">()</span><span class=\"o\">::</span><span class=\"n\">__PRETTY_FUNCTION__</span><span class=\"o\">&gt;</span> <span class=\"s\">&quot;Eigen::CommaInitializer&lt;MatrixType&gt;::~CommaInitializer() [with XprType = Eigen::Matrix&lt;double, 2, 2&gt;]&quot;</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">assert</span><span class=\"p\">.</span><span class=\"nl\">c</span><span class=\"p\">:</span><span class=\"mi\">92</span>\n<span class=\"cp\">#3  0x00007ffff2235df2 in __GI___assert_fail (</span>\n    <span class=\"n\">assertion</span><span class=\"o\">=</span><span class=\"mh\">0x7fffee9eba40</span> <span class=\"s\">&quot;(m_row+m_currentBlockRows) == m_xpr.rows() &amp;&amp; m_col == m_xpr.cols() &amp;&amp; </span><span class=\"se\">\\&quot;</span><span class=\"s\">Too few coefficients passed to comma initializer (operator&lt;&lt;)</span><span class=\"se\">\\&quot;</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> \n    <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"mh\">0x7fffee9eba08</span> <span class=\"s\">&quot;/usr/include/eigen3/Eigen/src/Core/CommaInitializer.h&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">,</span> \n    <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"mh\">0x7fffee9ee9e0</span> <span class=\"o\">&lt;</span><span class=\"n\">Eigen</span><span class=\"o\">::</span><span class=\"n\">CommaInitializer</span><span class=\"o\">&lt;</span><span class=\"n\">Eigen</span><span class=\"o\">::</span><span class=\"n\">Matrix</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span> <span class=\"o\">&gt;::~</span><span class=\"n\">CommaInitializer</span><span class=\"p\">()</span><span class=\"o\">::</span><span class=\"n\">__PRETTY_FUNCTION__</span><span class=\"o\">&gt;</span> <span class=\"s\">&quot;Eigen::CommaInitializer&lt;MatrixType&gt;::~CommaInitializer() [with XprType = Eigen::Matrix&lt;double, 2, 2&gt;]&quot;</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">assert</span><span class=\"p\">.</span><span class=\"nl\">c</span><span class=\"p\">:</span><span class=\"mi\">101</span>\n<span class=\"cp\">#4  0x00007fffee9060cc in Eigen::CommaInitializer&lt;Eigen::Matrix&lt;double, 2, 2, 0, 2, 2&gt; &gt;::~CommaInitializer (</span>\n    <span class=\"n\">this</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffffdcf0</span><span class=\"p\">,</span> <span class=\"n\">__in_chrg</span><span class=\"o\">=&lt;</span><span class=\"n\">optimized</span> <span class=\"k\">out</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n    <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">eigen3</span><span class=\"o\">/</span><span class=\"n\">Eigen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Core</span><span class=\"o\">/</span><span class=\"n\">CommaInitializer</span><span class=\"p\">.</span><span class=\"nl\">h</span><span class=\"p\">:</span><span class=\"mi\">93</span>\n<span class=\"cp\">#5  0x00007fffee905ffa in Eigen::DenseBase&lt;Eigen::Matrix&lt;double, 2, 2, 0, 2, 2&gt; &gt;::operator&lt;&lt; (</span>\n    <span class=\"n\">this</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffffde90</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mh\">@0x7fffffffde50</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">eigen3</span><span class=\"o\">/</span><span class=\"n\">Eigen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Core</span><span class=\"o\">/</span><span class=\"n\">CommaInitializer</span><span class=\"p\">.</span><span class=\"nl\">h</span><span class=\"p\">:</span><span class=\"mi\">129</span>\n<span class=\"cp\">#6  0x00007fffee9019b0 in __static_initialization_and_destruction_0 (__initialize_p=1, __priority=65535)</span>\n    <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">dart</span><span class=\"o\">/</span><span class=\"n\">math</span><span class=\"o\">/</span><span class=\"n\">Helpers</span><span class=\"p\">.</span><span class=\"nl\">h</span><span class=\"p\">:</span><span class=\"mi\">59</span>\n<span class=\"cp\">#7  0x00007fffee902f05 in _GLOBAL__sub_I_DARTBallJoint.cc(void) ()</span>\n    <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">scpeters</span><span class=\"o\">/</span><span class=\"n\">osrf</span><span class=\"o\">/</span><span class=\"n\">gazebo</span><span class=\"o\">/</span><span class=\"n\">gazebo</span><span class=\"o\">/</span><span class=\"n\">physics</span><span class=\"o\">/</span><span class=\"n\">dart</span><span class=\"o\">/</span><span class=\"n\">DARTBallJoint</span><span class=\"p\">.</span><span class=\"nl\">cc</span><span class=\"p\">:</span><span class=\"mi\">139</span>\n<span class=\"cp\">#8  0x00007ffff7de9856 in call_init (l=l@entry=0x7ffff7fc1ac0, argc=argc@entry=1, </span>\n    <span class=\"n\">argv</span><span class=\"o\">=</span><span class=\"n\">argv</span><span class=\"p\">@</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffffdf98</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">@</span><span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"mh\">0x7fffffffdfa8</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">dl</span><span class=\"o\">-</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"nl\">c</span><span class=\"p\">:</span><span class=\"mi\">84</span>\n<span class=\"cp\">#9  0x00007ffff7de9910 in call_init (env=&lt;optimized out&gt;, argv=&lt;optimized out&gt;, argc=&lt;optimized out&gt;, </span>\n    <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"mh\">0x7ffff7fc1ac0</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">dl</span><span class=\"o\">-</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"nl\">c</span><span class=\"p\">:</span><span class=\"mi\">55</span>\n<span class=\"cp\">#10 _dl_init (main_map=0x7ffff7ffe268, argc=1, argv=0x7fffffffdf98, env=0x7fffffffdfa8) at dl-init.c:133</span>\n<span class=\"cp\">#11 0x00007ffff7ddb66a in _dl_start_user () from /lib64/ld-linux-x86-64.so.2</span>\n<span class=\"cp\">#12 0x0000000000000001 in ?? ()</span>\n<span class=\"cp\">#13 0x00007fffffffe2e8 in ?? ()</span>\n<span class=\"cp\">#14 0x0000000000000000 in ?? ()</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2014-04-16T22:14:52.856699+00:00", "milestone": null, "updated_on": "2016-09-14T19:22:30.913845+00:00", "type": "issue", "id": 1160}