{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1132/comments/9473405.json"}, "html": {"href": "#!/osrf/gazebo/issues/1132#comment-9473405"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1132.json"}}, "type": "issue", "id": 1132, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Simplify the process of using gazebo as a library even more"}, "content": {"raw": "@iche033 is correct. You can call `gazebo::addPlugin` prior to `gazebo::setupServer` to create all the `SystemPlugins` that you need.\n\nEach plugin may, or may not, consume command-line parameters. Currently, `setupServer` passes the `argc` and `argv` values to each `SystemPlugin`. \n\n@ahundt , I believe your suggestion is to add an alternate `setupServer` that takes a vector of arguments instead of the argc and argv pair. Your initial comment has an example of this. We could also have a `std::map<std::string, std::string>` instead of a vector.\n\nSo, would the following work?\n\n\n```\n#!c++\n\nint main(int argc, char **argv)\n{\n    std::vector<std::string> myArgs;\n    myArgs.push_back(\"--param1\");\n    myArgs.push_back(\"value_for_param1\");\n\n    gazebo::addPlugin(\"path_to_my_system_plugin\");\n    gazebo::setupServer(myArgs);\n\n    ....\n}\n```\n", "markup": "markdown", "html": "<p>@iche033 is correct. You can call <code>gazebo::addPlugin</code> prior to <code>gazebo::setupServer</code> to create all the <code>SystemPlugins</code> that you need.</p>\n<p>Each plugin may, or may not, consume command-line parameters. Currently, <code>setupServer</code> passes the <code>argc</code> and <code>argv</code> values to each <code>SystemPlugin</code>. </p>\n<p>@ahundt , I believe your suggestion is to add an alternate <code>setupServer</code> that takes a vector of arguments instead of the argc and argv pair. Your initial comment has an example of this. We could also have a <code>std::map&lt;std::string, std::string&gt;</code> instead of a vector.</p>\n<p>So, would the following work?</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">myArgs</span><span class=\"p\">;</span>\n    <span class=\"n\">myArgs</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"s\">&quot;--param1&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">myArgs</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"s\">&quot;value_for_param1&quot;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">addPlugin</span><span class=\"p\">(</span><span class=\"s\">&quot;path_to_my_system_plugin&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">gazebo</span><span class=\"o\">::</span><span class=\"n\">setupServer</span><span class=\"p\">(</span><span class=\"n\">myArgs</span><span class=\"p\">);</span>\n\n    <span class=\"p\">....</span>\n<span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "created_on": "2014-04-03T15:36:31.337437+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 9473405}