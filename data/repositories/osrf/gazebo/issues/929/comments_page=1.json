{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6690582.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6690582"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "So this is a feature request for Matrix3::Inverse and conversion to quaternion?", "markup": "markdown", "html": "<p>So this is a feature request for Matrix3::Inverse and conversion to quaternion?</p>", "type": "rendered"}, "created_on": "2013-10-31T00:02:10.639008+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 6690582}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6690619.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6690619"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "For conversion to quaternion, I think the [Matrix4::GetRotation](#!/osrf/gazebo/src/a676255484971eb823e037492a76fff1cfb66436/gazebo/math/Matrix4.cc?at=default#cl-111) function could be pretty easily converted for use with Matrix3.", "markup": "markdown", "html": "<p>For conversion to quaternion, I think the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/a676255484971eb823e037492a76fff1cfb66436/gazebo/math/Matrix4.cc?at=default#cl-111\" rel=\"nofollow\">Matrix4::GetRotation</a> function could be pretty easily converted for use with Matrix3.</p>", "type": "rendered"}, "created_on": "2013-10-31T00:05:57.924856+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 6690619}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6690629.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6690629"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": ">So this is a feature request for Matrix3::Inverse and conversion to quaternion?\n\nThat's part of it. I also ran into some problems (numerical instability) trying to compose quaternions and inverting poses. It feels like the math component could use some attention or does it make sense for the gazebo team to maintain such a thing when other libraries already do such a good job at linear algebra?", "markup": "markdown", "html": "<blockquote>\n<p>So this is a feature request for Matrix3::Inverse and conversion to quaternion?</p>\n</blockquote>\n<p>That's part of it. I also ran into some problems (numerical instability) trying to compose quaternions and inverting poses. It feels like the math component could use some attention or does it make sense for the gazebo team to maintain such a thing when other libraries already do such a good job at linear algebra?</p>", "type": "rendered"}, "created_on": "2013-10-31T00:07:31.184919+00:00", "user": {"display_name": "Jonathan Bohren", "uuid": "{588087c1-4405-46da-b019-43f00b894b30}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B588087c1-4405-46da-b019-43f00b894b30%7D"}, "html": {"href": "https://bitbucket.org/%7B588087c1-4405-46da-b019-43f00b894b30%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jbohren/avatar/"}}, "nickname": "jbohren", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 6690629}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6690649.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6690649"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "This is related to #928, as well.", "markup": "markdown", "html": "<p>This is related to <a href=\"#!/osrf/gazebo/issues/928/math-quaternion-getlog-return-type-is\" rel=\"nofollow\" title=\"math: Quaternion::GetLog return type is confusing\" class=\"ap-connect-link\"><s>#928</s></a>, as well.</p>", "type": "rendered"}, "created_on": "2013-10-31T00:08:39.807020+00:00", "user": {"display_name": "Jonathan Bohren", "uuid": "{588087c1-4405-46da-b019-43f00b894b30}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B588087c1-4405-46da-b019-43f00b894b30%7D"}, "html": {"href": "https://bitbucket.org/%7B588087c1-4405-46da-b019-43f00b894b30%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jbohren/avatar/"}}, "nickname": "jbohren", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 6690649}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6690664.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6690664"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "Is it an issue mainly with the Matrix3 and Matrix4 classes, or have you had problems with Quaternion and Pose?\n\nEDIT: eigen for example would be an alternative to the matrix classes.", "markup": "markdown", "html": "<p>Is it an issue mainly with the Matrix3 and Matrix4 classes, or have you had problems with Quaternion and Pose?</p>\n<p>EDIT: eigen for example would be an alternative to the matrix classes.</p>", "type": "rendered"}, "created_on": "2013-10-31T00:10:49.092671+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2013-10-31T00:13:25.032137+00:00", "type": "issue_comment", "id": 6690664}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6690674.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6690674"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2013-10-31T00:11:53.920469+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 6690674}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6690719.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6690719"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": ">Is it an issue mainly with the Matrix3 and Matrix4 classes, or have you had problems with Quaternion and Pose?\n\nThe math component felt unloved in general, but the only concrete things I could report without digging deeper / collecting data are related to the APIs of Matrix3 and Quaternion.\n\n>EDIT: eigen for example would be an alternative to the matrix classes.\n\nIndeed it would be. There are also contributions to Eigen that extend its features in lie algebras and other useful geometric fomalisms.", "markup": "markdown", "html": "<blockquote>\n<p>Is it an issue mainly with the Matrix3 and Matrix4 classes, or have you had problems with Quaternion and Pose?</p>\n</blockquote>\n<p>The math component felt unloved in general, but the only concrete things I could report without digging deeper / collecting data are related to the APIs of Matrix3 and Quaternion.</p>\n<blockquote>\n<p>EDIT: eigen for example would be an alternative to the matrix classes.</p>\n</blockquote>\n<p>Indeed it would be. There are also contributions to Eigen that extend its features in lie algebras and other useful geometric fomalisms.</p>", "type": "rendered"}, "created_on": "2013-10-31T00:17:30.441549+00:00", "user": {"display_name": "Jonathan Bohren", "uuid": "{588087c1-4405-46da-b019-43f00b894b30}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B588087c1-4405-46da-b019-43f00b894b30%7D"}, "html": {"href": "https://bitbucket.org/%7B588087c1-4405-46da-b019-43f00b894b30%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jbohren/avatar/"}}, "nickname": "jbohren", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 6690719}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6690875.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6690875"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "I changed the title and marked as an enhancement based on our discussion. Feel free to change it to match your intent for this issue.", "markup": "markdown", "html": "<p>I changed the title and marked as an enhancement based on our discussion. Feel free to change it to match your intent for this issue.</p>", "type": "rendered"}, "created_on": "2013-10-31T00:38:30.490679+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 6690875}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6721232.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6721232"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "We have some unit tests already for the math functions ([Matrix3_TEST](#!/osrf/gazebo/src/6531995968a22803d53c051789fc7967746f46e8/gazebo/math/Matrix3_TEST.cc?at=default) for example). You mentioned that you have observed some numerical instabilities in a previous comment. Would you be able to reproduce some of those numerical problems in one of our unit tests? That would help to provide a concrete goal for this issue.", "markup": "markdown", "html": "<p>We have some unit tests already for the math functions (<a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/6531995968a22803d53c051789fc7967746f46e8/gazebo/math/Matrix3_TEST.cc?at=default\" rel=\"nofollow\">Matrix3_TEST</a> for example). You mentioned that you have observed some numerical instabilities in a previous comment. Would you be able to reproduce some of those numerical problems in one of our unit tests? That would help to provide a concrete goal for this issue.</p>", "type": "rendered"}, "created_on": "2013-11-01T22:33:18.522159+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 6721232}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6722026.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6722026"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "The instabilities arose when I used the subtraction operator of the `math::Pose` class when doing some simple Cartesian servoing. I could probably put together a self-contained repro next week. I ended up just converting everything to `math::Matrix4` objects and doing it manually.", "markup": "markdown", "html": "<p>The instabilities arose when I used the subtraction operator of the <code>math::Pose</code> class when doing some simple Cartesian servoing. I could probably put together a self-contained repro next week. I ended up just converting everything to <code>math::Matrix4</code> objects and doing it manually.</p>", "type": "rendered"}, "created_on": "2013-11-02T01:37:22.471582+00:00", "user": {"display_name": "Jonathan Bohren", "uuid": "{588087c1-4405-46da-b019-43f00b894b30}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B588087c1-4405-46da-b019-43f00b894b30%7D"}, "html": {"href": "https://bitbucket.org/%7B588087c1-4405-46da-b019-43f00b894b30%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jbohren/avatar/"}}, "nickname": "jbohren", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 6722026}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6760306.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6760306"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "So here's a comparison showing the difference between using the `math::Pose` subtraction operator and the `math::Vector3` subtraction operator when doing simple proportional error integration:\n\n![unit step response](http://i.imgur.com/PRII7vL.png)\n\nThe code that generated this data can be found here:\nhttps://github.com/jbohren/gzmath_test\n\nThis isn't exactly the effect I saw, but it's indicative of something strange, right? I was surprised to see this sort of oscillation given the calculation.\n\n", "markup": "markdown", "html": "<p>So here's a comparison showing the difference between using the <code>math::Pose</code> subtraction operator and the <code>math::Vector3</code> subtraction operator when doing simple proportional error integration:</p>\n<p><img alt=\"unit step response\" src=\"http://i.imgur.com/PRII7vL.png\" /></p>\n<p>The code that generated this data can be found here:\n<a href=\"https://github.com/jbohren/gzmath_test\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/jbohren/gzmath_test</a></p>\n<p>This isn't exactly the effect I saw, but it's indicative of something strange, right? I was surprised to see this sort of oscillation given the calculation.</p>", "type": "rendered"}, "created_on": "2013-11-05T15:16:39.445162+00:00", "user": {"display_name": "Jonathan Bohren", "uuid": "{588087c1-4405-46da-b019-43f00b894b30}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B588087c1-4405-46da-b019-43f00b894b30%7D"}, "html": {"href": "https://bitbucket.org/%7B588087c1-4405-46da-b019-43f00b894b30%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jbohren/avatar/"}}, "nickname": "jbohren", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 6760306}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6763075.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6763075"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "Quoting from [Pose.hh](#!/osrf/gazebo/src/9fbc8f7c13b526bd14ac25ed40eb85547846462b/gazebo/math/Pose.hh?at=default#cl-125):\n~~~\n      /// \\brief Subtraction operator\n      /// A is the transform from O to P in frame O\n      /// B is the transform from O to Q in frame O\n      /// B - A is the transform from P to Q in frame P\n      /// \\param[in] _pose Pose to subtract from this one\n      /// \\return The resulting pose\n      public: inline Pose operator-(const Pose &_pose) const\n~~~\nI think the difference is caused by the coordinate frame. The Vector3 subtraction gives position expressed in the global frame, while Pose subtraction uses the reference frame of one of the poses. Since your example reference frames are rotated, I would not expect the results to be the same.", "markup": "markdown", "html": "<p>Quoting from <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/9fbc8f7c13b526bd14ac25ed40eb85547846462b/gazebo/math/Pose.hh?at=default#cl-125\" rel=\"nofollow\">Pose.hh</a>:</p>\n<div class=\"codehilite\"><pre><span></span>      /// \\brief Subtraction operator\n      /// A is the transform from O to P in frame O\n      /// B is the transform from O to Q in frame O\n      /// B - A is the transform from P to Q in frame P\n      /// \\param[in] _pose Pose to subtract from this one\n      /// \\return The resulting pose\n      public: inline Pose operator-(const Pose &amp;_pose) const\n</pre></div>\n\n\n<p>I think the difference is caused by the coordinate frame. The Vector3 subtraction gives position expressed in the global frame, while Pose subtraction uses the reference frame of one of the poses. Since your example reference frames are rotated, I would not expect the results to be the same.</p>", "type": "rendered"}, "created_on": "2013-11-05T18:00:09.342518+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 6763075}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6763151.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6763151"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "> ```\n      /// B - A is the transform from P to Q in frame P\n```\n\nWell that's definitely surprising that subtracting two poses in the same frame would give you a pose in a different frame.", "markup": "markdown", "html": "<blockquote>\n<p><code>/// B - A is the transform from P to Q in frame P</code></p>\n</blockquote>\n<p>Well that's definitely surprising that subtracting two poses in the same frame would give you a pose in a different frame.</p>", "type": "rendered"}, "created_on": "2013-11-05T18:06:25.966929+00:00", "user": {"display_name": "Jonathan Bohren", "uuid": "{588087c1-4405-46da-b019-43f00b894b30}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B588087c1-4405-46da-b019-43f00b894b30%7D"}, "html": {"href": "https://bitbucket.org/%7B588087c1-4405-46da-b019-43f00b894b30%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jbohren/avatar/"}}, "nickname": "jbohren", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 6763151}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6763226.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6763226"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "Issue #216 is about some of the confusing behavior about addition and subtraction of poses.", "markup": "markdown", "html": "<p>Issue <a href=\"#!/osrf/gazebo/issues/216/pose-addition-and-subtraction-needs-work\" rel=\"nofollow\" title=\"Pose addition and subtraction needs work\" class=\"ap-connect-link\"><s>#216</s></a> is about some of the confusing behavior about addition and subtraction of poses.</p>", "type": "rendered"}, "created_on": "2013-11-05T18:11:06.409615+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2013-11-05T18:11:34.157406+00:00", "type": "issue_comment", "id": 6763226}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/6763243.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-6763243"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "> Issue #216 is about some of the confusion regarding addition and subtraction of poses.\n\nHah! So it is. Thanks for rounding this stuff up.", "markup": "markdown", "html": "<blockquote>\n<p>Issue <a href=\"#!/osrf/gazebo/issues/216/pose-addition-and-subtraction-needs-work\" rel=\"nofollow\" title=\"Pose addition and subtraction needs work\" class=\"ap-connect-link\"><s>#216</s></a> is about some of the confusion regarding addition and subtraction of poses.</p>\n</blockquote>\n<p>Hah! So it is. Thanks for rounding this stuff up.</p>", "type": "rendered"}, "created_on": "2013-11-05T18:12:28.824967+00:00", "user": {"display_name": "Jonathan Bohren", "uuid": "{588087c1-4405-46da-b019-43f00b894b30}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B588087c1-4405-46da-b019-43f00b894b30%7D"}, "html": {"href": "https://bitbucket.org/%7B588087c1-4405-46da-b019-43f00b894b30%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jbohren/avatar/"}}, "nickname": "jbohren", "type": "user", "account_id": null}, "updated_on": null, "type": "issue_comment", "id": 6763243}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/18710834.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-18710834"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "# Note on subtraction operator for Pose object\n\n\n> Well that's definitely surprising that subtracting two poses in the same frame would give you a pose in a different frame.\n\nI thought graphically it made good sense; i.e. in @traversaro's representation defined in issue #216, we have\n\n`P_Transform_Q` = `O_Transform_Q` - `O_Transform_P`\n\nSince `P_Transform_Q` is a transform from frame `P` to frame `Q`, I thought it is most conveniently defined in reference frame `P` (the base frame). Using another detached frame as reference frame (such as `O`) would have required us to *teleport* the resulting transform to a different frame, obfuscating things graphically.\n\nAnd correspondingly gazebo pose math fashions `O_Transform_B` = `A_Transform_B` + `O_Transform_A` or equivalently `O_Transform_B` = `O_Transform_A`*`A_Transform_B`\n\nOn this note, we need to add tests on `operator*` in [Pose_TEST.cc](#!/osrf/gazebo/src/71e285f4b088b78854926ee58740f9f1595fc7f0/gazebo/math/Pose_TEST.cc?at=default).\n\nSemantically, it does seem the multiplication operator is easier to read than the addition operator.\n\n# UI Question:\n\n@jbohren,\n\nFor UI improvement, taking a closer look at the `gzmath_test` example, I am guessing:\n\n  1. `p_ref` defines a transform (translation followed by rotation) let's say from frame `O` to `P` defined in base frame `O`, and\n  1. `p_servo` defines a transform (translation followed by rotation), let's say from frame `O` to `Q` defined in base frame `O`.\n\nWhich frame do you expect `p_rel` to be defined in? For reference:\n\n~~~\n    gazebo::math::Pose p_rel = p_ref - p_servo;\n~~~\n\n\n# Moving to a new system\n\nHistorically, given the `math::Pose` object is a custom object created in Gazebo, I didn't think too much about modifying its meaning while creating documentation and unit tests for the operators.  The current *definition* was deduced by working backwards from code that was there.  If one follows the updated documentation and the unit tested operators, the results should be consistent and graphically concise.  But as suggested in this issue, current scheme's semantic meanings may be ill-designed. So when we do switch to something else, let's make sure code + documentation + unit tests are all clearly and unambiguously presented at the same time.\n\nSo lastly, if we are moving on to a new representation, for reference, I like IHMC's suggestion (similar to Ravelin implementation), explicitly embedding a reference frame in the transform object. Or maybe we should adopt one of these libraries.", "markup": "markdown", "html": "<h1 id=\"markdown-header-note-on-subtraction-operator-for-pose-object\">Note on subtraction operator for Pose object</h1>\n<blockquote>\n<p>Well that's definitely surprising that subtracting two poses in the same frame would give you a pose in a different frame.</p>\n</blockquote>\n<p>I thought graphically it made good sense; i.e. in @traversaro's representation defined in issue <a href=\"#!/osrf/gazebo/issues/216/pose-addition-and-subtraction-needs-work\" rel=\"nofollow\" title=\"Pose addition and subtraction needs work\" class=\"ap-connect-link\"><s>#216</s></a>, we have</p>\n<p><code>P_Transform_Q</code> = <code>O_Transform_Q</code> - <code>O_Transform_P</code></p>\n<p>Since <code>P_Transform_Q</code> is a transform from frame <code>P</code> to frame <code>Q</code>, I thought it is most conveniently defined in reference frame <code>P</code> (the base frame). Using another detached frame as reference frame (such as <code>O</code>) would have required us to <em>teleport</em> the resulting transform to a different frame, obfuscating things graphically.</p>\n<p>And correspondingly gazebo pose math fashions <code>O_Transform_B</code> = <code>A_Transform_B</code> + <code>O_Transform_A</code> or equivalently <code>O_Transform_B</code> = <code>O_Transform_A</code>*<code>A_Transform_B</code></p>\n<p>On this note, we need to add tests on <code>operator*</code> in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/71e285f4b088b78854926ee58740f9f1595fc7f0/gazebo/math/Pose_TEST.cc?at=default\" rel=\"nofollow\">Pose_TEST.cc</a>.</p>\n<p>Semantically, it does seem the multiplication operator is easier to read than the addition operator.</p>\n<h1 id=\"markdown-header-ui-question\">UI Question:</h1>\n<p>@jbohren,</p>\n<p>For UI improvement, taking a closer look at the <code>gzmath_test</code> example, I am guessing:</p>\n<ol>\n<li><code>p_ref</code> defines a transform (translation followed by rotation) let's say from frame <code>O</code> to <code>P</code> defined in base frame <code>O</code>, and</li>\n<li><code>p_servo</code> defines a transform (translation followed by rotation), let's say from frame <code>O</code> to <code>Q</code> defined in base frame <code>O</code>.</li>\n</ol>\n<p>Which frame do you expect <code>p_rel</code> to be defined in? For reference:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">math</span><span class=\"p\">::</span><span class=\"nd\">Pose</span> <span class=\"nt\">p_rel</span> <span class=\"o\">=</span> <span class=\"nt\">p_ref</span> <span class=\"nt\">-</span> <span class=\"nt\">p_servo</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<h1 id=\"markdown-header-moving-to-a-new-system\">Moving to a new system</h1>\n<p>Historically, given the <code>math::Pose</code> object is a custom object created in Gazebo, I didn't think too much about modifying its meaning while creating documentation and unit tests for the operators.  The current <em>definition</em> was deduced by working backwards from code that was there.  If one follows the updated documentation and the unit tested operators, the results should be consistent and graphically concise.  But as suggested in this issue, current scheme's semantic meanings may be ill-designed. So when we do switch to something else, let's make sure code + documentation + unit tests are all clearly and unambiguously presented at the same time.</p>\n<p>So lastly, if we are moving on to a new representation, for reference, I like IHMC's suggestion (similar to Ravelin implementation), explicitly embedding a reference frame in the transform object. Or maybe we should adopt one of these libraries.</p>", "type": "rendered"}, "created_on": "2015-06-10T00:27:54.754458+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 18710834}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/30609469.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-30609469"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:20:08.421865+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30609469}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929/comments/34127041.json"}, "html": {"href": "#!/osrf/gazebo/issues/929#comment-34127041"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/929.json"}}, "type": "issue", "id": 929, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Consider using Eigen to improve math::Matrix classes"}, "content": {"raw": "Moved this issue to ignition-math now that gazebo math has been fully deprecated. Please continue the discussion on that issue:\n\nhttps://bitbucket.org/ignitionrobotics/ign-math/issues/19/consider-using-eigen", "markup": "markdown", "html": "<p>Moved this issue to ignition-math now that gazebo math has been fully deprecated. Please continue the discussion on that issue:</p>\n<p><a href=\"https://bitbucket.org/ignitionrobotics/ign-math/issues/19/consider-using-eigen\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/ignitionrobotics/ign-math/issues/19/consider-using-eigen</a></p>", "type": "rendered"}, "created_on": "2017-02-02T17:22:50.161286+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 34127041}], "page": 1, "size": 18}