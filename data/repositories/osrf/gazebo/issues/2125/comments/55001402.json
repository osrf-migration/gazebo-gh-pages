{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125/comments/55001402.json"}, "html": {"href": "#!/osrf/gazebo/issues/2125#comment-55001402"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125.json"}}, "type": "issue", "id": 2125, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Depth sensor noise model"}, "content": {"raw": "Thanks for the comment, Javier. \n\nI\u2019ve looked at the noise implementation in ignition-sensors, but I\u2019m not convinced it\u2019d work\u2026 First, it seems to use the same compositor for both RGB and depth images, but RGB images are PF\\_A8R8G8B8, while depth images are PF\\_FLOAT32\\_R. I\u2019m not sure what happens if you try to write the float value into an ARGB texture \\(probably bad things? :slight_smile: \\). Second, additive Gaussian noise doesn\u2019t make much sense for depth images\u2026 Do you know for sure the noise works in depth images there? I haven\u2019t yet tested ignition gazebo much, so I just don\u2019t know\u2026\n\nWhat I tested in the opengl branch is actually exactly what\u2019s done for making RGB noise work, just using a custom compositor with PF\\_FLOAT32\\_R rendertexture. And that\u2019s what didn\u2019t work and got me just black images. I even tested connecting the custom compositor and using the standard Gazebo/DepthMap material, but that didn\u2019t work either. It seems that as soon as I let the original depth image render to the rendertexture, it gets lost somewhere\u2026\n\nDo I understand it correctly that you say somebody has already tried to alter the shader for depth maps to support noise and didn\u2019t succeed?\n\nAs for the CPU: adding the noise in the DepthCamera would IMO break the rendering/sensors decoupling, wouldn\u2019t it? I mean, the rendering namespace doesn\u2019t know about noise\u2026 So adding it to the sensor would make more sense. But then there\u2019d be a difference whether you subscribe to depth messages or use ConnectNewDepthFrame\u2026 But GPU lidar has apparently the same problem\u2026 It seems like the hack I used \\(misusing the first newDepthFrame callback to alter the const data\\) is the best way to keep the decoupling between sensors and rendering, but it is an ugly hack\u2026", "markup": "markdown", "html": "<p>Thanks for the comment, Javier. </p>\n<p>I\u2019ve looked at the noise implementation in ignition-sensors, but I\u2019m not convinced it\u2019d work\u2026 First, it seems to use the same compositor for both RGB and depth images, but RGB images are PF_A8R8G8B8, while depth images are PF_FLOAT32_R. I\u2019m not sure what happens if you try to write the float value into an ARGB texture (probably bad things? <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f642.png\" alt=\"\ud83d\ude42\" title=\":slight_smile:\" data-emoji-short-name=\":slight_smile:\" /> ). Second, additive Gaussian noise doesn\u2019t make much sense for depth images\u2026 Do you know for sure the noise works in depth images there? I haven\u2019t yet tested ignition gazebo much, so I just don\u2019t know\u2026</p>\n<p>What I tested in the opengl branch is actually exactly what\u2019s done for making RGB noise work, just using a custom compositor with PF_FLOAT32_R rendertexture. And that\u2019s what didn\u2019t work and got me just black images. I even tested connecting the custom compositor and using the standard Gazebo/DepthMap material, but that didn\u2019t work either. It seems that as soon as I let the original depth image render to the rendertexture, it gets lost somewhere\u2026</p>\n<p>Do I understand it correctly that you say somebody has already tried to alter the shader for depth maps to support noise and didn\u2019t succeed?</p>\n<p>As for the CPU: adding the noise in the DepthCamera would IMO break the rendering/sensors decoupling, wouldn\u2019t it? I mean, the rendering namespace doesn\u2019t know about noise\u2026 So adding it to the sensor would make more sense. But then there\u2019d be a difference whether you subscribe to depth messages or use ConnectNewDepthFrame\u2026 But GPU lidar has apparently the same problem\u2026 It seems like the hack I used (misusing the first newDepthFrame callback to alter the const data) is the best way to keep the decoupling between sensors and rendering, but it is an ugly hack\u2026</p>", "type": "rendered"}, "created_on": "2019-11-28T00:17:39.661371+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": null, "type": "issue_comment", "id": 55001402}