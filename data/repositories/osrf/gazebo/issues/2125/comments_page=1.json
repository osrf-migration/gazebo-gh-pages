{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125/comments/54920320.json"}, "html": {"href": "#!/osrf/gazebo/issues/2125#comment-54920320"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125.json"}}, "type": "issue", "id": 2125, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Depth sensor noise model"}, "content": {"raw": "Asked also here: [#!/osrf/gazebo/issues/2450/adding-noise-to-depth-sensor](#!/osrf/gazebo/issues/2450/adding-noise-to-depth-sensor) .", "markup": "markdown", "html": "<p>Asked also here: <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issues/2450/adding-noise-to-depth-sensor\" rel=\"nofollow\">#!/osrf/gazebo/issues/2450/adding-noise-to-depth-sensor</a> .</p>", "type": "rendered"}, "created_on": "2019-11-22T13:10:32.761880+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": null, "type": "issue_comment", "id": 54920320}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125/comments/54995208.json"}, "html": {"href": "#!/osrf/gazebo/issues/2125#comment-54995208"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125.json"}}, "type": "issue", "id": 2125, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Depth sensor noise model"}, "content": {"raw": "You can check out my workaround in [https://github.com/peci1/gazebo\\_noisy\\_depth\\_camera](https://github.com/peci1/gazebo_noisy_depth_camera) \\(also @{557058:5c487cba-ea7b-4863-a0ec-cb3a092a8158} \\).\n\n@{557058:2279399d-3c75-4e1e-b818-4fb8339b2939} do you think you could help getting the OpenGL shader working? So far I only got CPU implementation working. I\u2019ve seen you\u2019re the one who added DepthCamera to ignition gazebo, so I hope you could get some quick insights. An attempt to get OpenGL noise working is in branch [opengl](https://github.com/peci1/gazebo_noisy_depth_camera/tree/opengl) . But all I get as soon as I enable the custom compositor is just gray or black images\u2026", "markup": "markdown", "html": "<p>You can check out my workaround in <a data-is-external-link=\"true\" href=\"https://github.com/peci1/gazebo_noisy_depth_camera\" rel=\"nofollow\">https://github.com/peci1/gazebo_noisy_depth_camera</a> (also <span class=\"ap-mention\" data-atlassian-id=\"557058:5c487cba-ea7b-4863-a0ec-cb3a092a8158\">@Michal Staniaszek</span> ).</p>\n<p><span class=\"ap-mention\" data-atlassian-id=\"557058:2279399d-3c75-4e1e-b818-4fb8339b2939\">@Javier Iv\u00e1n Choclin</span> do you think you could help getting the OpenGL shader working? So far I only got CPU implementation working. I\u2019ve seen you\u2019re the one who added DepthCamera to ignition gazebo, so I hope you could get some quick insights. An attempt to get OpenGL noise working is in branch <a data-is-external-link=\"true\" href=\"https://github.com/peci1/gazebo_noisy_depth_camera/tree/opengl\" rel=\"nofollow\">opengl</a> . But all I get as soon as I enable the custom compositor is just gray or black images\u2026</p>", "type": "rendered"}, "created_on": "2019-11-27T16:34:29.596947+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": null, "type": "issue_comment", "id": 54995208}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125/comments/55001114.json"}, "html": {"href": "#!/osrf/gazebo/issues/2125#comment-55001114"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125.json"}}, "type": "issue", "id": 2125, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Depth sensor noise model"}, "content": {"raw": "Hi @{557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1} , unfortunately, I am no longer collaborating with Gazebo as I was doing before since I started a different project, but I will gladly make some comments to help you if I can. Keep in mind that this feature is already implemented in [ignition sensors](https://bitbucket.org/ignitionrobotics/ign-sensors/src/a7228f37710470cdf8c01343eb5a3ecb7d32b41f/src/DepthCameraSensor.cc#lines-341) and it will be available on gazebo 11. If you want to contribute to previous versions of Gazebo, which are going to have support for several years, as [far as I know, ](http://gazebosim.org/blog/gazebo9)you can use what it was done for the [Render Noise Pass](https://bitbucket.org/ignitionrobotics/ign-rendering/src/abea3c1b8bb71d143d5c1da4eac75bda4156cd99/ogre/src/OgreGaussianNoisePass.cc#lines-33).   \n  \nThe correct approach, in my opinion, would be to do something similar in [DepthCamera](#!/osrf/gazebo/src/be467c68f241a0fa31509972b9bf0076a809330c/gazebo/rendering/DepthCamera.cc#lines-364), since it can not be solved using a different shader for opengl in DepthCamera, I don\u2019t remember why we can not use the shader to add the noise. A quick solution could be to iterate over the data in the sensor and add the noise there as it is done on the [Lidar](#!/osrf/gazebo/src/be467c68f241a0fa31509972b9bf0076a809330c/gazebo/sensors/GpuRaySensor.cc#lines-644). What you did is similar, but if that is the case, I would actually work with the output data without using opengl and adding the noise [here](#!/osrf/gazebo/src/be467c68f241a0fa31509972b9bf0076a809330c/gazebo/sensors/DepthCameraSensor.cc#lines-169).", "markup": "markdown", "html": "<p>Hi <span class=\"ap-mention\" data-atlassian-id=\"557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1\">@Martin Pecka</span> , unfortunately, I am no longer collaborating with Gazebo as I was doing before since I started a different project, but I will gladly make some comments to help you if I can. Keep in mind that this feature is already implemented in <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-sensors/src/a7228f37710470cdf8c01343eb5a3ecb7d32b41f/src/DepthCameraSensor.cc#lines-341\" rel=\"nofollow\">ignition sensors</a> and it will be available on gazebo 11. If you want to contribute to previous versions of Gazebo, which are going to have support for several years, as <a data-is-external-link=\"true\" href=\"http://gazebosim.org/blog/gazebo9\" rel=\"nofollow\">far as I know, </a>you can use what it was done for the <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-rendering/src/abea3c1b8bb71d143d5c1da4eac75bda4156cd99/ogre/src/OgreGaussianNoisePass.cc#lines-33\" rel=\"nofollow\">Render Noise Pass</a>.   </p>\n<p>The correct approach, in my opinion, would be to do something similar in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/be467c68f241a0fa31509972b9bf0076a809330c/gazebo/rendering/DepthCamera.cc#lines-364\" rel=\"nofollow\">DepthCamera</a>, since it can not be solved using a different shader for opengl in DepthCamera, I don\u2019t remember why we can not use the shader to add the noise. A quick solution could be to iterate over the data in the sensor and add the noise there as it is done on the <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/be467c68f241a0fa31509972b9bf0076a809330c/gazebo/sensors/GpuRaySensor.cc#lines-644\" rel=\"nofollow\">Lidar</a>. What you did is similar, but if that is the case, I would actually work with the output data without using opengl and adding the noise <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/be467c68f241a0fa31509972b9bf0076a809330c/gazebo/sensors/DepthCameraSensor.cc#lines-169\" rel=\"nofollow\">here</a>.</p>", "type": "rendered"}, "created_on": "2019-11-27T23:37:38.209086+00:00", "user": {"display_name": "Javier Iv\u00e1n Choclin", "uuid": "{745acb37-6a3b-4169-8ba9-2c142a7408fb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B745acb37-6a3b-4169-8ba9-2c142a7408fb%7D"}, "html": {"href": "https://bitbucket.org/%7B745acb37-6a3b-4169-8ba9-2c142a7408fb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:2279399d-3c75-4e1e-b818-4fb8339b2939/26f5815d-5477-4106-ba9b-ac56ee23e175/128"}}, "nickname": "Javier Choclin", "type": "user", "account_id": "557058:2279399d-3c75-4e1e-b818-4fb8339b2939"}, "updated_on": null, "type": "issue_comment", "id": 55001114}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125/comments/55001402.json"}, "html": {"href": "#!/osrf/gazebo/issues/2125#comment-55001402"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/2125.json"}}, "type": "issue", "id": 2125, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Depth sensor noise model"}, "content": {"raw": "Thanks for the comment, Javier. \n\nI\u2019ve looked at the noise implementation in ignition-sensors, but I\u2019m not convinced it\u2019d work\u2026 First, it seems to use the same compositor for both RGB and depth images, but RGB images are PF\\_A8R8G8B8, while depth images are PF\\_FLOAT32\\_R. I\u2019m not sure what happens if you try to write the float value into an ARGB texture \\(probably bad things? :slight_smile: \\). Second, additive Gaussian noise doesn\u2019t make much sense for depth images\u2026 Do you know for sure the noise works in depth images there? I haven\u2019t yet tested ignition gazebo much, so I just don\u2019t know\u2026\n\nWhat I tested in the opengl branch is actually exactly what\u2019s done for making RGB noise work, just using a custom compositor with PF\\_FLOAT32\\_R rendertexture. And that\u2019s what didn\u2019t work and got me just black images. I even tested connecting the custom compositor and using the standard Gazebo/DepthMap material, but that didn\u2019t work either. It seems that as soon as I let the original depth image render to the rendertexture, it gets lost somewhere\u2026\n\nDo I understand it correctly that you say somebody has already tried to alter the shader for depth maps to support noise and didn\u2019t succeed?\n\nAs for the CPU: adding the noise in the DepthCamera would IMO break the rendering/sensors decoupling, wouldn\u2019t it? I mean, the rendering namespace doesn\u2019t know about noise\u2026 So adding it to the sensor would make more sense. But then there\u2019d be a difference whether you subscribe to depth messages or use ConnectNewDepthFrame\u2026 But GPU lidar has apparently the same problem\u2026 It seems like the hack I used \\(misusing the first newDepthFrame callback to alter the const data\\) is the best way to keep the decoupling between sensors and rendering, but it is an ugly hack\u2026", "markup": "markdown", "html": "<p>Thanks for the comment, Javier. </p>\n<p>I\u2019ve looked at the noise implementation in ignition-sensors, but I\u2019m not convinced it\u2019d work\u2026 First, it seems to use the same compositor for both RGB and depth images, but RGB images are PF_A8R8G8B8, while depth images are PF_FLOAT32_R. I\u2019m not sure what happens if you try to write the float value into an ARGB texture (probably bad things? <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f642.png\" alt=\"\ud83d\ude42\" title=\":slight_smile:\" data-emoji-short-name=\":slight_smile:\" /> ). Second, additive Gaussian noise doesn\u2019t make much sense for depth images\u2026 Do you know for sure the noise works in depth images there? I haven\u2019t yet tested ignition gazebo much, so I just don\u2019t know\u2026</p>\n<p>What I tested in the opengl branch is actually exactly what\u2019s done for making RGB noise work, just using a custom compositor with PF_FLOAT32_R rendertexture. And that\u2019s what didn\u2019t work and got me just black images. I even tested connecting the custom compositor and using the standard Gazebo/DepthMap material, but that didn\u2019t work either. It seems that as soon as I let the original depth image render to the rendertexture, it gets lost somewhere\u2026</p>\n<p>Do I understand it correctly that you say somebody has already tried to alter the shader for depth maps to support noise and didn\u2019t succeed?</p>\n<p>As for the CPU: adding the noise in the DepthCamera would IMO break the rendering/sensors decoupling, wouldn\u2019t it? I mean, the rendering namespace doesn\u2019t know about noise\u2026 So adding it to the sensor would make more sense. But then there\u2019d be a difference whether you subscribe to depth messages or use ConnectNewDepthFrame\u2026 But GPU lidar has apparently the same problem\u2026 It seems like the hack I used (misusing the first newDepthFrame callback to alter the const data) is the best way to keep the decoupling between sensors and rendering, but it is an ugly hack\u2026</p>", "type": "rendered"}, "created_on": "2019-11-28T00:17:39.661371+00:00", "user": {"display_name": "Martin Pecka", "uuid": "{41691c43-4ae0-49ba-ba45-3c36439f5af2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D"}, "html": {"href": "https://bitbucket.org/%7B41691c43-4ae0-49ba-ba45-3c36439f5af2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d1ad32a09564f856909994613fdbc37cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMP-1.png"}}, "nickname": "peci1", "type": "user", "account_id": "557058:434ecab2-e510-4ede-8f9a-1c2a5a4032e1"}, "updated_on": null, "type": "issue_comment", "id": 55001402}], "page": 1, "size": 4}