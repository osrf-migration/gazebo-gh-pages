{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2316/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2316.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2316/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2316/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2316/please-help-pausing-the-physics-in-sensors"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2316/vote"}}, "reporter": {"display_name": "Hamza Merzi\u0107", "uuid": "{2100f54d-6bc6-4db0-ada5-db7be9320606}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2100f54d-6bc6-4db0-ada5-db7be9320606%7D"}, "html": {"href": "https://bitbucket.org/%7B2100f54d-6bc6-4db0-ada5-db7be9320606%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:172a2e1e-2bf2-4054-9b9b-9d541ddc8e4e/ab842f18-c8ca-4a0c-a82a-6d4d39ffdb37/128"}}, "nickname": "hamzaethz", "type": "user", "account_id": "557058:172a2e1e-2bf2-4054-9b9b-9d541ddc8e4e"}, "title": "[Please help] Pausing the physics in sensor's OnUpdate function gives \"Took over 1.0 seconds to update a sensor.\"", "component": {"name": "physics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122876.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "I am running multiple simulations on a cluster and **almost 50% of them crash** with the same issue. The exact error message is the following:\r\n\r\n```\r\n#!\r\n\r\ngzserver: /build/gazebo-nhSAPd/gazebo-7.0.0+dfsg/gazebo/sensors/SensorManager.cc:545: void gazebo::sensors::SensorManager::SensorContainer::RunLoop(): Assertion `(diffTime.sec < 1)&&(\"Took over 1.0 seconds to update a sensor.\")' failed.\r\n[2017-07-26 22:08:46,240] Traceback (most recent call last):\r\n  File \"/opt/ros/kinetic/lib/python2.7/dist-packages/rospy/impl/tcpros_base.py\", line 729, in receive_once\r\n    self.stat_bytes += recv_buff(sock, b, p.buff_size)\r\n  File \"/opt/ros/kinetic/lib/python2.7/dist-packages/rospy/impl/tcpros_base.py\", line 103, in recv_buff\r\n    d = sock.recv(buff_size)\r\nerror: [Errno 104] Connection reset by peer\r\n\r\nTraceback (most recent call last):\r\n  File \"trpo_script.py\", line 96, in <module>\r\n    main()\r\n  File \"/grasping_sim/catkin_ws/src/grasping_env/grasping_env/core.py\", line 334, in step\r\n    raise RuntimeError(err)\r\nRuntimeError: transport error completing service call: receive_once[/gazebo/unpause_physics]: unexpected error [Errno 104] Connection reset by peer\r\nAborted (core dumped)\r\n```\r\n\r\nI already posted about this issue [here](http://answers.gazebosim.org/question/16592/simulation-different-when-gzclient-is-open/), [here](http://answers.gazebosim.org/question/16772/gzclient-source-code-location/), [here](http://answers.gazebosim.org/question/16670/pausing-the-physics-in-sensors-onupdate-function-gives-took-over-10-seconds-to-update-a-sensor/) and in this thread. I also found the issue happening a few years back when using parallel physics with island threads as discussed [here](#!/osrf/gazebo/issues/1636/ode-threaded-islands-sometimes-slower-on#comment-18890423). And I spent the last few weeks going through the source code trying to figure out why this would fail and WHY DOES IT NEVER FAIL WHEN GZCLIENT IS OPEN.\r\n\r\n**What I am doing**\r\n\r\nI have an environment that I am applying reinforcement learning to. I am stepping through the environment through ROS, by making a service call to unpause the physics. ROS service server then just does `world_->SetPaused(true/false)`. The measurements that I am returning are the contacts, and to make sure that I have a single observation for every `step`, in the `OnUpdate` callback I pause the world and send the measurement back. \r\n\r\nIn short:\r\nstep from python -> rospy ROS service call -> unpause physics -> measurement received in OnUpdate -> pause physics -> send measurement back (as ROS service to make sure it is received)-> step -> ...\r\n\r\n\r\nThe paradigm is exactly depicted here, but if you think the full source code would help, I can provide it:\r\n```\r\n#!c++\r\n\r\n// I built the plugin by following the instructions here: http://gazebosim.org/tutorials?tut=contact_sensor\r\nGZ_REGISTER_SENSOR_PLUGIN(ObservationPlugin)\r\n\r\n...\r\n\r\nvoid ObservationPlugin::OnUpdate() {\r\n  if (!ros::service::exists(\"/gazebo_sim/transfer_obs\", false)) {\r\n    return;\r\n  }\r\n  // Service that is basically two float arrays, one for contact information (27 floats) and one for robot hand DOF (4 floats).\r\n  grasping_ros_msgs::Observation obs_srv;\r\n\r\n  // Retrieve the contacts and robot hand DOF.\r\n  ...\r\n  \r\n  world_->SetPaused(true);\r\n  obs_client_.call(obs_srv);  // ROS service call which forwards the observation.\r\n}\r\n```\r\n\r\n**What I tried so far**\r\n\r\nI tried a couple of things that I wrote down [here](http://answers.gazebosim.org/question/16592/simulation-different-when-gzclient-is-open/?answer=16676#post-id-16676), which is subscribing to high bandwidth topics (I added some subscribers to gazebo_ros system plugin) and by reducing the `real_time_factor`. Neither of the two helped much. \r\n\r\nPlease, if you have any insights on why this does not work, why the behavior is different when gzclient is open, or know of a better way to structure this so I can achieve what I want, and have it more stable, please don't hold back.", "markup": "markdown", "html": "<p>I am running multiple simulations on a cluster and <strong>almost 50% of them crash</strong> with the same issue. The exact error message is the following:</p>\n<div class=\"codehilite\"><pre><span></span>gzserver: /build/gazebo-nhSAPd/gazebo-7.0.0+dfsg/gazebo/sensors/SensorManager.cc:545: void gazebo::sensors::SensorManager::SensorContainer::RunLoop(): Assertion `(diffTime.sec &lt; 1)&amp;&amp;(&quot;Took over 1.0 seconds to update a sensor.&quot;)&#39; failed.\n[2017-07-26 22:08:46,240] Traceback (most recent call last):\n  File &quot;/opt/ros/kinetic/lib/python2.7/dist-packages/rospy/impl/tcpros_base.py&quot;, line 729, in receive_once\n    self.stat_bytes += recv_buff(sock, b, p.buff_size)\n  File &quot;/opt/ros/kinetic/lib/python2.7/dist-packages/rospy/impl/tcpros_base.py&quot;, line 103, in recv_buff\n    d = sock.recv(buff_size)\nerror: [Errno 104] Connection reset by peer\n\nTraceback (most recent call last):\n  File &quot;trpo_script.py&quot;, line 96, in &lt;module&gt;\n    main()\n  File &quot;/grasping_sim/catkin_ws/src/grasping_env/grasping_env/core.py&quot;, line 334, in step\n    raise RuntimeError(err)\nRuntimeError: transport error completing service call: receive_once[/gazebo/unpause_physics]: unexpected error [Errno 104] Connection reset by peer\nAborted (core dumped)\n</pre></div>\n\n\n<p>I already posted about this issue <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/16592/simulation-different-when-gzclient-is-open/\" rel=\"nofollow\">here</a>, <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/16772/gzclient-source-code-location/\" rel=\"nofollow\">here</a>, <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/16670/pausing-the-physics-in-sensors-onupdate-function-gives-took-over-10-seconds-to-update-a-sensor/\" rel=\"nofollow\">here</a> and in this thread. I also found the issue happening a few years back when using parallel physics with island threads as discussed <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/issues/1636/ode-threaded-islands-sometimes-slower-on#comment-18890423\" rel=\"nofollow\">here</a>. And I spent the last few weeks going through the source code trying to figure out why this would fail and WHY DOES IT NEVER FAIL WHEN GZCLIENT IS OPEN.</p>\n<p><strong>What I am doing</strong></p>\n<p>I have an environment that I am applying reinforcement learning to. I am stepping through the environment through ROS, by making a service call to unpause the physics. ROS service server then just does <code>world_-&gt;SetPaused(true/false)</code>. The measurements that I am returning are the contacts, and to make sure that I have a single observation for every <code>step</code>, in the <code>OnUpdate</code> callback I pause the world and send the measurement back. </p>\n<p>In short:\nstep from python -&gt; rospy ROS service call -&gt; unpause physics -&gt; measurement received in OnUpdate -&gt; pause physics -&gt; send measurement back (as ROS service to make sure it is received)-&gt; step -&gt; ...</p>\n<p>The paradigm is exactly depicted here, but if you think the full source code would help, I can provide it:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"c1\">// I built the plugin by following the instructions here: http://gazebosim.org/tutorials?tut=contact_sensor</span>\n<span class=\"n\">GZ_REGISTER_SENSOR_PLUGIN</span><span class=\"p\">(</span><span class=\"n\">ObservationPlugin</span><span class=\"p\">)</span>\n\n<span class=\"p\">...</span>\n\n<span class=\"kt\">void</span> <span class=\"n\">ObservationPlugin</span><span class=\"o\">::</span><span class=\"n\">OnUpdate</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">service</span><span class=\"o\">::</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s\">&quot;/gazebo_sim/transfer_obs&quot;</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// Service that is basically two float arrays, one for contact information (27 floats) and one for robot hand DOF (4 floats).</span>\n  <span class=\"n\">grasping_ros_msgs</span><span class=\"o\">::</span><span class=\"n\">Observation</span> <span class=\"n\">obs_srv</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Retrieve the contacts and robot hand DOF.</span>\n  <span class=\"p\">...</span>\n\n  <span class=\"n\">world_</span><span class=\"o\">-&gt;</span><span class=\"n\">SetPaused</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n  <span class=\"n\">obs_client_</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">obs_srv</span><span class=\"p\">);</span>  <span class=\"c1\">// ROS service call which forwards the observation.</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p><strong>What I tried so far</strong></p>\n<p>I tried a couple of things that I wrote down <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/16592/simulation-different-when-gzclient-is-open/?answer=16676#post-id-16676\" rel=\"nofollow\">here</a>, which is subscribing to high bandwidth topics (I added some subscribers to gazebo_ros system plugin) and by reducing the <code>real_time_factor</code>. Neither of the two helped much. </p>\n<p>Please, if you have any insights on why this does not work, why the behavior is different when gzclient is open, or know of a better way to structure this so I can achieve what I want, and have it more stable, please don't hold back.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "7.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242744.json"}}}, "edited_on": null, "created_on": "2017-07-10T14:57:29.973927+00:00", "milestone": null, "updated_on": "2017-07-27T11:20:01.952840+00:00", "type": "issue", "id": 2316}