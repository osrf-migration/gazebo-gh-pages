{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/9806424.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-9806424"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "Which physics engines do you plan to use to support this?", "markup": "markdown", "html": "<p>Which physics engines do you plan to use to support this?</p>", "type": "rendered"}, "created_on": "2014-04-23T22:25:21.791182+00:00", "user": {"display_name": "Isura", "uuid": "{8e49d2f4-e17c-48c5-b0e9-a250978f0d12}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8e49d2f4-e17c-48c5-b0e9-a250978f0d12%7D"}, "html": {"href": "https://bitbucket.org/%7B8e49d2f4-e17c-48c5-b0e9-a250978f0d12%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a8dcd95034eb5d875267d3fc69b2bad6d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsI-3.png"}}, "nickname": "isura", "type": "user", "account_id": "557058:c7aec2ca-4717-47cc-a16c-5251f3c3a646"}, "updated_on": null, "type": "issue_comment", "id": 9806424}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/11401796.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-11401796"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2014-07-23T22:03:07.796100+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 11401796}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/11403725.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-11403725"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "A rough draft of propose API for `gazebo::physics:Model` class functions:\n\n~~~\nGetIndependentVelocity(const Pose& P, Vector& v)  // get the velocities of the m degrees-of-freedom of the model (for floating bases, velocity is computed in frame P)\n\nGetIndependentForces(const Pose& P, Vector& f)  // get the forces of the m degrees-of-freedom of the model (for floating bases, force is computed in frame P); forces will include gravity and centrifugal/Coriolis forces\n\nGetIndependentInertia(const Pose& P, Matrix& m)  // get the m x m inertia matrix of the model (for floating bases, inertia is computed in frame P)\n\nGetJacobian(math::Vector3& p, Link startLink, Link endEffector, const Pose& P, Matrix& m) // gets the Jacobian from the start link to the end-effector with respect to point p and defined in pose P\n\nComputeInverseDynamics(const Vector& qdd, Vector& tau) // computes the inverse dynamics (solves for tau) of the robot under gravity, centrifugal/Coriolis forces, and contact forces such that the robot's acceleration at the joints will be qdd\n~~~\n\nwhere\n\nLayout of independent coordinates (assuming n joint degrees-of-freedom + 6 DOF base = m DOF total)\n\nEach Jacobian (J) is a 6xq matrix, where q is determined by a chain specified by a startLink and an endEffector.\n\nA contact Jacobian would be composed by multiplying `[ n s t; zeros(3)] * J`, where n, s, and t are the contact normal and the two contact tangents.\n\n\n\n@isura \nI think we'll add the function calls in gazebo first, and start with lowest hanging fruits.", "markup": "markdown", "html": "<p>A rough draft of propose API for <code>gazebo::physics:Model</code> class functions:</p>\n<div class=\"codehilite\"><pre><span></span>GetIndependentVelocity(const Pose&amp; P, Vector&amp; v)  // get the velocities of the m degrees-of-freedom of the model (for floating bases, velocity is computed in frame P)\n\nGetIndependentForces(const Pose&amp; P, Vector&amp; f)  // get the forces of the m degrees-of-freedom of the model (for floating bases, force is computed in frame P); forces will include gravity and centrifugal/Coriolis forces\n\nGetIndependentInertia(const Pose&amp; P, Matrix&amp; m)  // get the m x m inertia matrix of the model (for floating bases, inertia is computed in frame P)\n\nGetJacobian(math::Vector3&amp; p, Link startLink, Link endEffector, const Pose&amp; P, Matrix&amp; m) // gets the Jacobian from the start link to the end-effector with respect to point p and defined in pose P\n\nComputeInverseDynamics(const Vector&amp; qdd, Vector&amp; tau) // computes the inverse dynamics (solves for tau) of the robot under gravity, centrifugal/Coriolis forces, and contact forces such that the robot&#39;s acceleration at the joints will be qdd\n</pre></div>\n\n\n<p>where</p>\n<p>Layout of independent coordinates (assuming n joint degrees-of-freedom + 6 DOF base = m DOF total)</p>\n<p>Each Jacobian (J) is a 6xq matrix, where q is determined by a chain specified by a startLink and an endEffector.</p>\n<p>A contact Jacobian would be composed by multiplying <code>[ n s t; zeros(3)] * J</code>, where n, s, and t are the contact normal and the two contact tangents.</p>\n<p>@isura \nI think we'll add the function calls in gazebo first, and start with lowest hanging fruits.</p>", "type": "rendered"}, "created_on": "2014-07-24T01:40:34.562677+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 11403725}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/12064331.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-12064331"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "For max performance you may want to think of these matrices primarily as operators that are applied to vectors. So rather than `M`, think of `M*v`. That way if a matrix is sparse (common) or if a matrix-vector product can be computed in an efficient matrix-free manner (also common) then the underlying implementation has a shot at doing it efficiently. Mass matrix, inverse mass matrix, constraint Jacobian, and task Jacobians for multiple tasks would all likely benefit from being considered operators. Getting the full matrix is also very useful, esp. during development, but likely to be suboptimal. It is always possible to create the matrix from the operator, although a special-purpose method that known it is returning the full matrix can possibly do it faster.", "markup": "markdown", "html": "<p>For max performance you may want to think of these matrices primarily as operators that are applied to vectors. So rather than <code>M</code>, think of <code>M*v</code>. That way if a matrix is sparse (common) or if a matrix-vector product can be computed in an efficient matrix-free manner (also common) then the underlying implementation has a shot at doing it efficiently. Mass matrix, inverse mass matrix, constraint Jacobian, and task Jacobians for multiple tasks would all likely benefit from being considered operators. Getting the full matrix is also very useful, esp. during development, but likely to be suboptimal. It is always possible to create the matrix from the operator, although a special-purpose method that known it is returning the full matrix can possibly do it faster.</p>", "type": "rendered"}, "created_on": "2014-08-29T18:05:59.279748+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 12064331}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/12125694.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-12125694"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "@sherm1 Perhaps we can define the useful operations (left multiply by Jacobian or Jacobian transpose) as virtual functions and make a default implementation that calls GetJacobian and does non-sparse computations. The max performance can be obtained by over-loading those methods but would not be required.\n\nHow does that sound?\n\nAlso, gazebo::math doesn't have a generic Matrix class yet.", "markup": "markdown", "html": "<p>@sherm1 Perhaps we can define the useful operations (left multiply by Jacobian or Jacobian transpose) as virtual functions and make a default implementation that calls GetJacobian and does non-sparse computations. The max performance can be obtained by over-loading those methods but would not be required.</p>\n<p>How does that sound?</p>\n<p>Also, gazebo::math doesn't have a generic Matrix class yet.</p>", "type": "rendered"}, "created_on": "2014-09-02T21:49:26.009406+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 12125694}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/12125902.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-12125902"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "Yes, great idea. Define the API so that it is *possible* to make it efficient; then provide a default implementation that gets the job done however.\n\nThe matrix-returning methods are sufficient, if suboptimal. As long as those are provided, they can be used in default implementations for the operators.\n\nIt might be worth thinking (briefly) about sparsity. My inclination would be always to return full matrices and only exploit sparsity in the operator methods. However, depending on the features of the available Matrix class you might be able to return a generic Matrix that might be full or sparse as appropriate. I think it would be overkill to have a separate set of methods that returns sparse matrices.\n\nI should have said that -- the operators are an optimization. To get started, all that's needed are methods that return whole matrices.", "markup": "markdown", "html": "<p>Yes, great idea. Define the API so that it is <em>possible</em> to make it efficient; then provide a default implementation that gets the job done however.</p>\n<p>The matrix-returning methods are sufficient, if suboptimal. As long as those are provided, they can be used in default implementations for the operators.</p>\n<p>It might be worth thinking (briefly) about sparsity. My inclination would be always to return full matrices and only exploit sparsity in the operator methods. However, depending on the features of the available Matrix class you might be able to return a generic Matrix that might be full or sparse as appropriate. I think it would be overkill to have a separate set of methods that returns sparse matrices.</p>\n<p>I should have said that -- the operators are an optimization. To get started, all that's needed are methods that return whole matrices.</p>", "type": "rendered"}, "created_on": "2014-09-02T22:05:51.732858+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 12125902}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/12125956.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-12125956"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "Adding @chrisdembia to this discussion.", "markup": "markdown", "html": "<p>Adding @chrisdembia to this discussion.</p>", "type": "rendered"}, "created_on": "2014-09-02T22:11:04.893373+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 12125956}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/12190750.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-12190750"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "starting work in jacobian_gazebo_4.0 branch (b6529c1)", "markup": "markdown", "html": "<p>starting work in jacobian_gazebo_4.0 branch (<a href=\"#!/osrf/gazebo/commits/b6529c1\" rel=\"nofollow\" class=\"ap-connect-link\">b6529c1</a>)</p>", "type": "rendered"}, "created_on": "2014-09-05T18:12:07.493512+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 12190750}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/12191082.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-12191082"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "I'm going to start a gazebo_design document for creating a `gazebo::math::Matrix` class that should implement these methods and allow them to be overloaded.", "markup": "markdown", "html": "<p>I'm going to start a gazebo_design document for creating a <code>gazebo::math::Matrix</code> class that should implement these methods and allow them to be overloaded.</p>", "type": "rendered"}, "created_on": "2014-09-05T18:40:45.819653+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 12191082}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/15314401.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-15314401"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "Added (tentative) [implementation](https://bitbucket.org/jlee02/gazebo_dart/commits/17fb624ccafee750998b1f4dd40877a6bebd5b34) of the API for dart.\n\nTo make it work:\n\n  * general size of vector and matrix need to be added to  gazebo  \n  * dart should implement [API for Jacobian between arbitrary links](https://github.com/dartsim/dart/issues/230).", "markup": "markdown", "html": "<p>Added (tentative) <a data-is-external-link=\"true\" href=\"https://bitbucket.org/jlee02/gazebo_dart/commits/17fb624ccafee750998b1f4dd40877a6bebd5b34\" rel=\"nofollow\">implementation</a> of the API for dart.</p>\n<p>To make it work:</p>\n<ul>\n<li>general size of vector and matrix need to be added to  gazebo  </li>\n<li>dart should implement <a data-is-external-link=\"true\" href=\"https://github.com/dartsim/dart/issues/230\" rel=\"nofollow\">API for Jacobian between arbitrary links</a>.</li>\n</ul>", "type": "rendered"}, "created_on": "2015-01-28T22:05:31.111318+00:00", "user": {"display_name": "Jeongseok Lee", "uuid": "{3907b560-aed7-43bd-bfa9-fd9873322291}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D"}, "html": {"href": "https://bitbucket.org/%7B3907b560-aed7-43bd-bfa9-fd9873322291%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/242819b368397b2b4cddf273b2ba9bf8d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJL-0.png"}}, "nickname": "jlee02", "type": "user", "account_id": "557058:e3fbdece-a1d8-4fb6-a9f1-236ecb09bd9d"}, "updated_on": null, "type": "issue_comment", "id": 15314401}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/30611352.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-30611352"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:24:54.913465+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30611352}], "page": 1, "size": 11}