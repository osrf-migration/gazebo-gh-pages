{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/12064331.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-12064331"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "For max performance you may want to think of these matrices primarily as operators that are applied to vectors. So rather than `M`, think of `M*v`. That way if a matrix is sparse (common) or if a matrix-vector product can be computed in an efficient matrix-free manner (also common) then the underlying implementation has a shot at doing it efficiently. Mass matrix, inverse mass matrix, constraint Jacobian, and task Jacobians for multiple tasks would all likely benefit from being considered operators. Getting the full matrix is also very useful, esp. during development, but likely to be suboptimal. It is always possible to create the matrix from the operator, although a special-purpose method that known it is returning the full matrix can possibly do it faster.", "markup": "markdown", "html": "<p>For max performance you may want to think of these matrices primarily as operators that are applied to vectors. So rather than <code>M</code>, think of <code>M*v</code>. That way if a matrix is sparse (common) or if a matrix-vector product can be computed in an efficient matrix-free manner (also common) then the underlying implementation has a shot at doing it efficiently. Mass matrix, inverse mass matrix, constraint Jacobian, and task Jacobians for multiple tasks would all likely benefit from being considered operators. Getting the full matrix is also very useful, esp. during development, but likely to be suboptimal. It is always possible to create the matrix from the operator, although a special-purpose method that known it is returning the full matrix can possibly do it faster.</p>", "type": "rendered"}, "created_on": "2014-08-29T18:05:59.279748+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 12064331}