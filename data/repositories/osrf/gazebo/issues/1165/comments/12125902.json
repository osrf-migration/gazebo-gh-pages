{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165/comments/12125902.json"}, "html": {"href": "#!/osrf/gazebo/issues/1165#comment-12125902"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1165.json"}}, "type": "issue", "id": 1165, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "API for extracting generalized inertia, velocity, contact Jacobians from Gazebo"}, "content": {"raw": "Yes, great idea. Define the API so that it is *possible* to make it efficient; then provide a default implementation that gets the job done however.\n\nThe matrix-returning methods are sufficient, if suboptimal. As long as those are provided, they can be used in default implementations for the operators.\n\nIt might be worth thinking (briefly) about sparsity. My inclination would be always to return full matrices and only exploit sparsity in the operator methods. However, depending on the features of the available Matrix class you might be able to return a generic Matrix that might be full or sparse as appropriate. I think it would be overkill to have a separate set of methods that returns sparse matrices.\n\nI should have said that -- the operators are an optimization. To get started, all that's needed are methods that return whole matrices.", "markup": "markdown", "html": "<p>Yes, great idea. Define the API so that it is <em>possible</em> to make it efficient; then provide a default implementation that gets the job done however.</p>\n<p>The matrix-returning methods are sufficient, if suboptimal. As long as those are provided, they can be used in default implementations for the operators.</p>\n<p>It might be worth thinking (briefly) about sparsity. My inclination would be always to return full matrices and only exploit sparsity in the operator methods. However, depending on the features of the available Matrix class you might be able to return a generic Matrix that might be full or sparse as appropriate. I think it would be overkill to have a separate set of methods that returns sparse matrices.</p>\n<p>I should have said that -- the operators are an optimization. To get started, all that's needed are methods that return whole matrices.</p>", "type": "rendered"}, "created_on": "2014-09-02T22:05:51.732858+00:00", "user": {"display_name": "Michael Sherman", "uuid": "{997c6f1e-e2a3-4f0e-8fa4-fed745840d50}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D"}, "html": {"href": "https://bitbucket.org/%7B997c6f1e-e2a3-4f0e-8fa4-fed745840d50%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355dea43ed612b7be3c9361df2d52213d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMS-2.png"}}, "nickname": "sherm1", "type": "user", "account_id": "557058:4590c319-b75f-4187-93d4-6cec61da74f7"}, "updated_on": null, "type": "issue_comment", "id": 12125902}