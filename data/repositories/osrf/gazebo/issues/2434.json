{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2434/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2434.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2434/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2434/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2434/deleting-objects-using-world-removemodel"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2434/vote"}}, "reporter": {"display_name": "Jorge Nicho", "uuid": "{da042263-4828-4a98-94e0-97cab858c670}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda042263-4828-4a98-94e0-97cab858c670%7D"}, "html": {"href": "https://bitbucket.org/%7Bda042263-4828-4a98-94e0-97cab858c670%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8d1a78e394960b57aa54ff21afadeaabd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJN-2.png"}}, "nickname": "jrgnicho", "type": "user", "account_id": "5a9d75454d8ce72a74a380e6"}, "title": "Deleting Objects using World::RemoveModel(...) causes gazebo to crash", "component": {"name": "physics", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122876.json"}}}, "votes": 1, "watches": 5, "content": {"raw": "Hello,\r\n\r\nWe have an [application](https://github.com/swri-robotics/gilbreth/tree/object-deletion-crashes-gazebo) where we periodically spawn objects on a moving conveyor and then delete them after the objects go past a certain virtual wall in the workcell.  However, after just a few of minutes of running the application the gazebo simulator crashes with the following error message:\r\n```\r\n[Dbg] [ObjectDisposalPlugin.cc:111] [deletion_wall] Removing model: object_19\r\ngzserver: /usr/include/boost/smart_ptr/shared_ptr.hpp:648: typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::physics::SurfaceParams; typename boost::detail::sp_member_access<T>::type = gazebo::physics::SurfaceParams*]: Assertion `px != 0' failed.\r\n```\r\nI suspect that some sort of race condition is taking place when we call the [RemoveModel(...) method](https://github.com/swri-robotics/gilbreth/blob/2bcb6402ed776c7fdd81853dfcb521388ab74713/gilbreth_gazebo/src/plugins/ObjectDisposalPlugin.cc#L113).\r\nThe issue can be reproduced by following the[ README instructions ](https://github.com/swri-robotics/gilbreth/blob/object-deletion-crashes-gazebo/DEMO.md) on the [object-deletion-crashes-gazebo branch](https://github.com/swri-robotics/gilbreth/tree/object-deletion-crashes-gazebo)\r\n\r\nThank you", "markup": "markdown", "html": "<p>Hello,</p>\n<p>We have an <a data-is-external-link=\"true\" href=\"https://github.com/swri-robotics/gilbreth/tree/object-deletion-crashes-gazebo\" rel=\"nofollow\">application</a> where we periodically spawn objects on a moving conveyor and then delete them after the objects go past a certain virtual wall in the workcell.  However, after just a few of minutes of running the application the gazebo simulator crashes with the following error message:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">[</span><span class=\"nx\">Dbg</span><span class=\"cp\">]</span> <span class=\"cp\">[</span><span class=\"nx\">ObjectDisposalPlugin.cc</span><span class=\"p\">:</span><span class=\"mi\">111</span><span class=\"cp\">]</span> <span class=\"cp\">[</span><span class=\"nx\">deletion_wall</span><span class=\"cp\">]</span> <span class=\"nt\">Removing</span> <span class=\"nt\">model</span><span class=\"o\">:</span> <span class=\"nt\">object_19</span>\n<span class=\"nt\">gzserver</span><span class=\"o\">:</span> <span class=\"o\">/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">include</span><span class=\"o\">/</span><span class=\"nt\">boost</span><span class=\"o\">/</span><span class=\"nt\">smart_ptr</span><span class=\"o\">/</span><span class=\"nt\">shared_ptr</span><span class=\"p\">.</span><span class=\"nc\">hpp</span><span class=\"p\">:</span><span class=\"nd\">648</span><span class=\"o\">:</span> <span class=\"nt\">typename</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">detail</span><span class=\"p\">::</span><span class=\"nd\">sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">type</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">operator-</span><span class=\"o\">&gt;()</span> <span class=\"nt\">const</span> <span class=\"cp\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::physics::SurfaceParams</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::physics::SurfaceParams</span><span class=\"o\">*</span><span class=\"cp\">]</span><span class=\"o\">:</span> <span class=\"nt\">Assertion</span> <span class=\"err\">`</span><span class=\"nt\">px</span> <span class=\"o\">!=</span> <span class=\"nt\">0</span><span class=\"err\">&#39;</span> <span class=\"nt\">failed</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>I suspect that some sort of race condition is taking place when we call the <a data-is-external-link=\"true\" href=\"https://github.com/swri-robotics/gilbreth/blob/2bcb6402ed776c7fdd81853dfcb521388ab74713/gilbreth_gazebo/src/plugins/ObjectDisposalPlugin.cc#L113\" rel=\"nofollow\">RemoveModel(...) method</a>.\nThe issue can be reproduced by following the<a data-is-external-link=\"true\" href=\"https://github.com/swri-robotics/gilbreth/blob/object-deletion-crashes-gazebo/DEMO.md\" rel=\"nofollow\"> README instructions </a> on the <a data-is-external-link=\"true\" href=\"https://github.com/swri-robotics/gilbreth/tree/object-deletion-crashes-gazebo\" rel=\"nofollow\">object-deletion-crashes-gazebo branch</a></p>\n<p>Thank you</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-05T16:57:27.973665+00:00", "milestone": null, "updated_on": "2018-03-08T20:51:18.185076+00:00", "type": "issue", "id": 2434}