{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/18696785.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-18696785"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": "Can you get a backtrace to see which thread is causing the failure?\n\n~~~\n$ gdb gzserver\n...\n(gdb) r your_world_name.world\n...\nfailure\n...\n(gdb) thread apply all bt\n~~~\n\nIf you make a test repository with the plugin and world file (similar to the one in #1624), I'll be more able to find time to test it.", "markup": "markdown", "html": "<p>Can you get a backtrace to see which thread is causing the failure?</p>\n<div class=\"codehilite\"><pre><span></span>$ gdb gzserver\n...\n<span class=\"o\">(</span>gdb<span class=\"o\">)</span> r your_world_name.world\n...\nfailure\n...\n<span class=\"o\">(</span>gdb<span class=\"o\">)</span> thread apply all bt\n</pre></div>\n\n\n<p>If you make a test repository with the plugin and world file (similar to the one in <a href=\"#!/osrf/gazebo/issues/1624/imusensorplugin-onupdate-is-not-called\" rel=\"nofollow\" title=\"`ImuSensorPlugin::OnUpdate()` is not called\" class=\"ap-connect-link\">#1624</a>), I'll be more able to find time to test it.</p>", "type": "rendered"}, "created_on": "2015-06-09T17:30:34.739815+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 18696785}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/18715548.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-18715548"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": "Ok, the repository can be found [here](https://bitbucket.org/ElteHupkes/gazebo-remove-errors). The easiest way to run, from the repo root:\n\n```\nmkdir build\ncd build\ncmake ../src\nmake\ncd ../tools\n./run\n```\n\nThis starts a gdb session with the correct model / plugin paths loaded into environment variables. To run, do `r testworld.sdf`.\n\nThe repo has two branches:\n\n- `master`, which is pretty much the example above, only it loads the model from file and not from SDF directly (doesn't make a difference for the error)\n- `clear`, which calls `World::Clear()` instead of `World::RemoveModel()`. Like I mentioned before, this works fine with the initial model, so I'm using a different model here which has an IMU-sensor, I suspect the sensor's what's causing the problem. This actually segfaults, so it may take a few inserts / removes before invalid memory is accessed. For me, the gdb output of this second example is:\n\n```\nPlugin loaded.\nAdded model #0\nModels in world: 1\nWorld cleared, adding new...\nAdded model #0\nModels in world: 1\nWorld cleared, adding new...\nAdded model #0\n*** Error in `/usr/bin/gzserver': free(): invalid next size (fast): 0x00007fff7829ef00 ***\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fff99bf8700 (LWP 13213)]\n0x00007ffff5e4b119 in ?? () from /usr/lib/x86_64-linux-gnu/libsdformat.so.2\n```\n\nThat may or me not be an entirely different issue - if you want, I'll create another issue for it.", "markup": "markdown", "html": "<p>Ok, the repository can be found <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ElteHupkes/gazebo-remove-errors\" rel=\"nofollow\">here</a>. The easiest way to run, from the repo root:</p>\n<div class=\"codehilite\"><pre><span></span>mkdir build\ncd build\ncmake ../src\nmake\ncd ../tools\n./run\n</pre></div>\n\n\n<p>This starts a gdb session with the correct model / plugin paths loaded into environment variables. To run, do <code>r testworld.sdf</code>.</p>\n<p>The repo has two branches:</p>\n<ul>\n<li><code>master</code>, which is pretty much the example above, only it loads the model from file and not from SDF directly (doesn't make a difference for the error)</li>\n<li><code>clear</code>, which calls <code>World::Clear()</code> instead of <code>World::RemoveModel()</code>. Like I mentioned before, this works fine with the initial model, so I'm using a different model here which has an IMU-sensor, I suspect the sensor's what's causing the problem. This actually segfaults, so it may take a few inserts / removes before invalid memory is accessed. For me, the gdb output of this second example is:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>Plugin loaded.\nAdded model #0\nModels in world: 1\nWorld cleared, adding new...\nAdded model #0\nModels in world: 1\nWorld cleared, adding new...\nAdded model #0\n*** Error in `/usr/bin/gzserver&#39;: free(): invalid next size (fast): 0x00007fff7829ef00 ***\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fff99bf8700 (LWP 13213)]\n0x00007ffff5e4b119 in ?? () from /usr/lib/x86_64-linux-gnu/libsdformat.so.2\n</pre></div>\n\n\n<p>That may or me not be an entirely different issue - if you want, I'll create another issue for it.</p>", "type": "rendered"}, "created_on": "2015-06-10T07:27:54.119115+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": "2015-06-10T07:28:41.918372+00:00", "type": "issue_comment", "id": 18715548}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/18731383.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-18731383"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": "It looks like a transport problem according to the failure in thread 5. I'll cc @caguero since he's the transport expert.", "markup": "markdown", "html": "<p>It looks like a transport problem according to the failure in thread 5. I'll cc @caguero since he's the transport expert.</p>", "type": "rendered"}, "created_on": "2015-06-10T17:59:24.618256+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 18731383}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/18746326.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-18746326"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": "Alright. FYI, the \"clear\" branch seems to be a different issue - indeed it doesn't seem to segfault if the deleted model doesn't have a sensor (an IMU sensor, at least). This is my workaround for now, I don't need the sensors for contact detection, so I remove them before inserting the model. Would you like me to report a different issue for this?", "markup": "markdown", "html": "<p>Alright. FYI, the \"clear\" branch seems to be a different issue - indeed it doesn't seem to segfault if the deleted model doesn't have a sensor (an IMU sensor, at least). This is my workaround for now, I don't need the sensors for contact detection, so I remove them before inserting the model. Would you like me to report a different issue for this?</p>", "type": "rendered"}, "created_on": "2015-06-11T10:24:41.060290+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 18746326}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/20638595.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-20638595"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": "I'd like to add some info to this since I'm running into it again, this time without any hope for a workaround. The world plugin I'm using is really quite simple in that it just inserts and removes certain models based on some simulation state. I consistently get boost null pointers on Thread 1 on removing models using an `entity_delete` request though. Relevant part of the gdb output:\n\n```\nThread 1 (Thread 0x7ffff7f80880 (LWP 26363)):\n#0  0x00007ffff49e7cc9 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n#1  0x00007ffff49eb0d8 in __GI_abort () at abort.c:89\n#2  0x00007ffff49e0b86 in __assert_fail_base (\n    fmt=0x7ffff4b31830 \"%s%s%s:%u: %s%sAssertion `%s' failed.\\n%n\", \n    assertion=assertion@entry=0x7ffff70afb21 \"px != 0\", \n    file=file@entry=0x7ffff70afef8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=line@entry=653, \n    function=function@entry=0x7ffff70b2580 \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::physics::Entity; typename boost::detail::sp_member_access<T>::type = gazebo::physics::Entit\"...) at assert.c:92\n#3  0x00007ffff49e0c32 in __GI___assert_fail (assertion=0x7ffff70afb21 \"px != 0\", \n    file=0x7ffff70afef8 \"/usr/include/boost/smart_ptr/shared_ptr.hpp\", line=653, \n    function=0x7ffff70b2580 \"typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::physics::Entity; typename boost::detail::sp_member_access<T>::type = gazebo::physics::Entit\"...) at assert.c:101\n#4  0x00007ffff705c2dc in ?? () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.5\n#5  0x00007ffff707393e in gazebo::sensors::ContactSensor::Fini() ()\n   from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.5\n#6  0x00007ffff70a3ca6 in gazebo::sensors::SensorManager::SensorContainer::RemoveSensor(std::string const&) () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.5\n#7  0x00007ffff70a4258 in gazebo::sensors::SensorManager::Update(bool) ()\n   from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.5\n#8  0x000000000041583f in gazebo::Server::Run() ()\n#9  0x000000000040dde9 in ?? ()\n#10 0x00007ffff49d2ec5 in __libc_start_main (main=0x40dcf0, argc=3, argv=0x7fffffffd828, \n    init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffd818)\n    at libc-start.c:287\n#11 0x000000000040fb2e in _start ()\n```\n\nAgain, this only seems to happen if the model has sensors - which makes sense given that the error here appears to originate from a `ContactSensor`.\n\nCuriously, this also only appears to happen when using `gzserver`, I've yet to see it happen using the `gazebo` command, though this might be a coincidence.", "markup": "markdown", "html": "<p>I'd like to add some info to this since I'm running into it again, this time without any hope for a workaround. The world plugin I'm using is really quite simple in that it just inserts and removes certain models based on some simulation state. I consistently get boost null pointers on Thread 1 on removing models using an <code>entity_delete</code> request though. Relevant part of the gdb output:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">Thread</span> <span class=\"nt\">1</span> <span class=\"o\">(</span><span class=\"nt\">Thread</span> <span class=\"nt\">0x7ffff7f80880</span> <span class=\"o\">(</span><span class=\"nt\">LWP</span> <span class=\"nt\">26363</span><span class=\"o\">)):</span>\n<span class=\"p\">#</span><span class=\"nn\">0</span>  <span class=\"nt\">0x00007ffff49e7cc9</span> <span class=\"nt\">in</span> <span class=\"nt\">__GI_raise</span> <span class=\"o\">(</span><span class=\"nt\">sig</span><span class=\"o\">=</span><span class=\"nt\">sig</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">6</span><span class=\"o\">)</span> <span class=\"nt\">at</span> <span class=\"o\">../</span><span class=\"nt\">nptl</span><span class=\"o\">/</span><span class=\"nt\">sysdeps</span><span class=\"o\">/</span><span class=\"nt\">unix</span><span class=\"o\">/</span><span class=\"nt\">sysv</span><span class=\"o\">/</span><span class=\"nt\">linux</span><span class=\"o\">/</span><span class=\"nt\">raise</span><span class=\"p\">.</span><span class=\"nc\">c</span><span class=\"p\">:</span><span class=\"nd\">56</span>\n<span class=\"p\">#</span><span class=\"nn\">1</span>  <span class=\"nt\">0x00007ffff49eb0d8</span> <span class=\"nt\">in</span> <span class=\"nt\">__GI_abort</span> <span class=\"o\">()</span> <span class=\"nt\">at</span> <span class=\"nt\">abort</span><span class=\"p\">.</span><span class=\"nc\">c</span><span class=\"p\">:</span><span class=\"nd\">89</span>\n<span class=\"p\">#</span><span class=\"nn\">2</span>  <span class=\"nt\">0x00007ffff49e0b86</span> <span class=\"nt\">in</span> <span class=\"nt\">__assert_fail_base</span> <span class=\"o\">(</span>\n    <span class=\"nt\">fmt</span><span class=\"o\">=</span><span class=\"nt\">0x7ffff4b31830</span> <span class=\"s2\">&quot;%s%s%s:%u: %s%sAssertion `%s&#39; failed.\\n%n&quot;</span><span class=\"o\">,</span> \n    <span class=\"nt\">assertion</span><span class=\"o\">=</span><span class=\"nt\">assertion</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">0x7ffff70afb21</span> <span class=\"s2\">&quot;px != 0&quot;</span><span class=\"o\">,</span> \n    <span class=\"nt\">file</span><span class=\"o\">=</span><span class=\"nt\">file</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">0x7ffff70afef8</span> <span class=\"s2\">&quot;/usr/include/boost/smart_ptr/shared_ptr.hpp&quot;</span><span class=\"o\">,</span> <span class=\"nt\">line</span><span class=\"o\">=</span><span class=\"nt\">line</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">653</span><span class=\"o\">,</span> \n    <span class=\"nt\">function</span><span class=\"o\">=</span><span class=\"nt\">function</span><span class=\"p\">@</span><span class=\"k\">entry</span><span class=\"o\">=</span><span class=\"nt\">0x7ffff70b2580</span> <span class=\"err\">&quot;</span><span class=\"nt\">typename</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">detail</span><span class=\"p\">::</span><span class=\"nd\">sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">type</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">operator-</span><span class=\"o\">&gt;()</span> <span class=\"nt\">const</span> <span class=\"cp\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::physics::Entity</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::physics::Entit</span><span class=\"s2\">&quot;...) at assert.c:92</span>\n<span class=\"s2\">#3  0x00007ffff49e0c32 in __GI___assert_fail (assertion=0x7ffff70afb21 &quot;</span><span class=\"nx\">px</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"s2\">&quot;, </span>\n<span class=\"s2\">    file=0x7ffff70afef8 &quot;</span><span class=\"p\">/</span><span class=\"nx\">usr</span><span class=\"p\">/</span><span class=\"nb\">include</span><span class=\"p\">/</span><span class=\"nx\">boost</span><span class=\"p\">/</span><span class=\"nx\">smart_ptr</span><span class=\"p\">/</span><span class=\"nx\">shared_ptr.hpp</span><span class=\"s2\">&quot;, line=653, </span>\n<span class=\"s2\">    function=0x7ffff70b2580 &quot;</span><span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"nx\">boost</span><span class=\"nl\">::shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::operator</span><span class=\"o\">-&gt;</span><span class=\"p\">()</span> <span class=\"nx\">const</span> <span class=\"err\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::physics::Entity</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::physics::Entit</span><span class=\"s2\">&quot;...) at assert.c:101</span>\n<span class=\"s2\">#4  0x00007ffff705c2dc in ?? () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.5</span>\n<span class=\"s2\">#5  0x00007ffff707393e in gazebo::sensors::ContactSensor::Fini() ()</span>\n<span class=\"s2\">   from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.5</span>\n<span class=\"s2\">#6  0x00007ffff70a3ca6 in gazebo::sensors::SensorManager::SensorContainer::RemoveSensor(std::string const&amp;) () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.5</span>\n<span class=\"s2\">#7  0x00007ffff70a4258 in gazebo::sensors::SensorManager::Update(bool) ()</span>\n<span class=\"s2\">   from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.5</span>\n<span class=\"s2\">#8  0x000000000041583f in gazebo::Server::Run() ()</span>\n<span class=\"s2\">#9  0x000000000040dde9 in ?? ()</span>\n<span class=\"s2\">#10 0x00007ffff49d2ec5 in __libc_start_main (main=0x40dcf0, argc=3, argv=0x7fffffffd828, </span>\n<span class=\"s2\">    init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffd818)</span>\n<span class=\"s2\">    at libc-start.c:287</span>\n<span class=\"s2\">#11 0x000000000040fb2e in _start ()</span>\n</pre></div>\n\n\n<p>Again, this only seems to happen if the model has sensors - which makes sense given that the error here appears to originate from a <code>ContactSensor</code>.</p>\n<p>Curiously, this also only appears to happen when using <code>gzserver</code>, I've yet to see it happen using the <code>gazebo</code> command, though this might be a coincidence.</p>", "type": "rendered"}, "created_on": "2015-08-02T20:46:25.100149+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 20638595}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/20870671.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-20870671"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": "Problem's still there with Gazebo 6 by the way, and occurs whenever I repeatedly insert / remove a model through the messaging interface and the model has a contact sensor. Sometimes the error's a boost null pointer as above, sometimes it is a segmentation fault; I suspect sensors are deleted twice under certain circumstances.", "markup": "markdown", "html": "<p>Problem's still there with Gazebo 6 by the way, and occurs whenever I repeatedly insert / remove a model through the messaging interface and the model has a contact sensor. Sometimes the error's a boost null pointer as above, sometimes it is a segmentation fault; I suspect sensors are deleted twice under certain circumstances.</p>", "type": "rendered"}, "created_on": "2015-08-12T15:49:24.694428+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 20870671}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/20889374.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-20889374"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": "Ok I'm *pretty sure* that this is what happens to trigger the crash on the sensor thread:\n\n- When the model is removed from the world, `Link::Fini()` is called for all links, which in turn calls `sensors::remove_sensor()` for each of its sensors\n- Then sensor to be removed is placed on the `removeSensors` property of the `SensorManager` to be removed by the main sensor thread\n- By the time the main sensor thread runs, the model and all its links have been removed from the world\n- The main sensor thread calls `ContactSensor::Fini()`, which tries to remove the contact filter from the physics manager. To do so, it fetches the scoped name of its parent entity with `this->world->GetEntity(this->parentName)->GetScopedName()`. However, per the previous point, the world no longer knows about the entity that goes by `this->parentName`, so the smart pointer returned by `World::GetEntity()` is `null`, and `->GetScopedName()` on a null pointer crashes the code.\n\nThe only thing I haven't been able to figure out is why this doesn't happen when the GUI is enabled, i.e. it happens when running `gzserver` only, but not when running `gazebo` or when running `gzserver` and `gzclient` separately. Possibly the extra I/O overhead caused by communicating all the deletes to the client causes the thread to be preempted and the sensor thread to run before the entities are deleted from the world.", "markup": "markdown", "html": "<p>Ok I'm <em>pretty sure</em> that this is what happens to trigger the crash on the sensor thread:</p>\n<ul>\n<li>When the model is removed from the world, <code>Link::Fini()</code> is called for all links, which in turn calls <code>sensors::remove_sensor()</code> for each of its sensors</li>\n<li>Then sensor to be removed is placed on the <code>removeSensors</code> property of the <code>SensorManager</code> to be removed by the main sensor thread</li>\n<li>By the time the main sensor thread runs, the model and all its links have been removed from the world</li>\n<li>The main sensor thread calls <code>ContactSensor::Fini()</code>, which tries to remove the contact filter from the physics manager. To do so, it fetches the scoped name of its parent entity with <code>this-&gt;world-&gt;GetEntity(this-&gt;parentName)-&gt;GetScopedName()</code>. However, per the previous point, the world no longer knows about the entity that goes by <code>this-&gt;parentName</code>, so the smart pointer returned by <code>World::GetEntity()</code> is <code>null</code>, and <code>-&gt;GetScopedName()</code> on a null pointer crashes the code.</li>\n</ul>\n<p>The only thing I haven't been able to figure out is why this doesn't happen when the GUI is enabled, i.e. it happens when running <code>gzserver</code> only, but not when running <code>gazebo</code> or when running <code>gzserver</code> and <code>gzclient</code> separately. Possibly the extra I/O overhead caused by communicating all the deletes to the client causes the thread to be preempted and the sensor thread to run before the entities are deleted from the world.</p>", "type": "rendered"}, "created_on": "2015-08-13T10:58:04.258942+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 20889374}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/21184816.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-21184816"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": "I can confirm the above is indeed the cause of the null pointer with the contact sensor, replacing the contact sensor with one that doesn't try to get its parent at this stage solves the issue. It can simply be worked around by storing the topic name the first time it is calculated and using that to unregister it.\n\nI've also managed to isolate why the segfault occurs, which is a different issue though triggered through a similar mechanism. At the point of the segfault we have at thread 1:\n\n```\nThread 1 (Thread 0x7ffff7f7d880 (LWP 5756)):\n#0  0x00007ffff4da2088 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#1  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#2  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#3  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#4  0x00007ffff4da1e34 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#5  0x00007ffff6303ef6 in gazebo::physics::Base::~Base() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#6  0x00007ffff6340ff9 in gazebo::physics::Link::~Link() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#7  0x00007ffff12eff09 in gazebo::physics::ODELink::~ODELink() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics_ode.so.6\n#8  0x00007ffff5ff71ce in ?? () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#9  0x00007ffff601ae3a in gazebo::sensors::ImuSensor::~ImuSensor() () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#10 0x00007ffff601aed9 in gazebo::sensors::ImuSensor::~ImuSensor() () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#11 0x00007ffff5ff71ce in ?? () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#12 0x00007ffff603915e in gazebo::sensors::SensorManager::SensorContainer::RemoveSensor(std::string const&) () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#13 0x00007ffff6039688 in gazebo::sensors::SensorManager::Update(bool) () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#14 0x00007ffff7bb1037 in gazebo::Server::Run() () from /usr/lib/x86_64-linux-gnu/libgazebo.so.6\n#15 0x0000000000402449 in ?? ()\n#16 0x00007ffff68b7ec5 in __libc_start_main (main=0x402350, argc=2, argv=0x7fffffffd7f8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffd7e8) at libc-start.c:287\n#17 0x00000000004029b8 in _start ()\n```\n\nMeanwhile at thread 23:\n\n```\nThread 23 (Thread 0x7fff9d1f7700 (LWP 5781)):\n#0  0x00007ffff69150e7 in _int_free (av=0x7fff78000020, p=<optimized out>, have_lock=0) at malloc.c:3987\n#1  0x00007ffff4da00c2 in sdf::Element::~Element() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#2  0x00007ffff4da0349 in sdf::Element::~Element() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#3  0x00007ffff4da1f01 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#4  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#5  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#6  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#7  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#8  0x00007ffff4da1e34 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#9  0x00007ffff4da1e34 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#10 0x00007ffff6303ef6 in gazebo::physics::Base::~Base() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#11 0x00007ffff6354e79 in gazebo::physics::Model::~Model() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#12 0x00007ffff62efe0e in ?? () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#13 0x00007ffff6388386 in gazebo::physics::World::RemoveModel(std::string const&) () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#14 0x00007ffff6388bbc in gazebo::physics::World::ProcessEntityMsgs() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#15 0x00007ffff6391190 in gazebo::physics::World::ProcessMessages() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#16 0x00007ffff6395198 in gazebo::physics::World::Step() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#17 0x00007ffff6395615 in gazebo::physics::World::RunLoop() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#18 0x00007ffff4b6ba4a in ?? () from /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.54.0\n#19 0x00007ffff5796182 in start_thread (arg=0x7fff9d1f7700) at pthread_create.c:312\n#20 0x00007ffff699047d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111\n```\n\nBoth the main thread and the sensor thread call `Element::Reset()` on the sensor element. This would be fine, if they didn't run consecutively, at some point during both the calls the smart pointers' reference counter of one of these elements goes to zero, and the `Element::~Element()` is called before the call to `Element::Reset()` on the different thread finishes. This call then tries to access the `dataPtr` of the element, which was just deleted by `Element::~Element()`, resulting in the segfault. I'm not sure what the best solution to this problem is, apart from having to make sure that no two threads are resetting the same element consecutively.. Perhaps `Element::Reset()` should be made thread-safe as an issue of `SDFormat`?\n\n@scpeters this issue has become a mess because it's actually separate issues:\n\n1. A bug in the `ContactSensor` as detailed in the previous comment\n2. The segfault from this issue\n3. The original issue with networking, which I haven't reproduced in a while, but might go hand in hand with one of the above\n\nI've little hope anything is going to be solved with the issue in this state. Is it a good idea if I create new bugreports for (1) and (2), leaving this issue for (3) until I have more information about it?", "markup": "markdown", "html": "<p>I can confirm the above is indeed the cause of the null pointer with the contact sensor, replacing the contact sensor with one that doesn't try to get its parent at this stage solves the issue. It can simply be worked around by storing the topic name the first time it is calculated and using that to unregister it.</p>\n<p>I've also managed to isolate why the segfault occurs, which is a different issue though triggered through a similar mechanism. At the point of the segfault we have at thread 1:</p>\n<div class=\"codehilite\"><pre><span></span>Thread 1 (Thread 0x7ffff7f7d880 (LWP 5756)):\n#0  0x00007ffff4da2088 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#1  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#2  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#3  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#4  0x00007ffff4da1e34 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#5  0x00007ffff6303ef6 in gazebo::physics::Base::~Base() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#6  0x00007ffff6340ff9 in gazebo::physics::Link::~Link() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#7  0x00007ffff12eff09 in gazebo::physics::ODELink::~ODELink() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics_ode.so.6\n#8  0x00007ffff5ff71ce in ?? () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#9  0x00007ffff601ae3a in gazebo::sensors::ImuSensor::~ImuSensor() () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#10 0x00007ffff601aed9 in gazebo::sensors::ImuSensor::~ImuSensor() () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#11 0x00007ffff5ff71ce in ?? () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#12 0x00007ffff603915e in gazebo::sensors::SensorManager::SensorContainer::RemoveSensor(std::string const&amp;) () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#13 0x00007ffff6039688 in gazebo::sensors::SensorManager::Update(bool) () from /usr/lib/x86_64-linux-gnu/libgazebo_sensors.so.6\n#14 0x00007ffff7bb1037 in gazebo::Server::Run() () from /usr/lib/x86_64-linux-gnu/libgazebo.so.6\n#15 0x0000000000402449 in ?? ()\n#16 0x00007ffff68b7ec5 in __libc_start_main (main=0x402350, argc=2, argv=0x7fffffffd7f8, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffd7e8) at libc-start.c:287\n#17 0x00000000004029b8 in _start ()\n</pre></div>\n\n\n<p>Meanwhile at thread 23:</p>\n<div class=\"codehilite\"><pre><span></span>Thread 23 (Thread 0x7fff9d1f7700 (LWP 5781)):\n#0  0x00007ffff69150e7 in _int_free (av=0x7fff78000020, p=&lt;optimized out&gt;, have_lock=0) at malloc.c:3987\n#1  0x00007ffff4da00c2 in sdf::Element::~Element() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#2  0x00007ffff4da0349 in sdf::Element::~Element() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#3  0x00007ffff4da1f01 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#4  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#5  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#6  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#7  0x00007ffff4da1ecc in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#8  0x00007ffff4da1e34 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#9  0x00007ffff4da1e34 in sdf::Element::Reset() () from /usr/lib/x86_64-linux-gnu/libsdformat.so.3\n#10 0x00007ffff6303ef6 in gazebo::physics::Base::~Base() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#11 0x00007ffff6354e79 in gazebo::physics::Model::~Model() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#12 0x00007ffff62efe0e in ?? () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#13 0x00007ffff6388386 in gazebo::physics::World::RemoveModel(std::string const&amp;) () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#14 0x00007ffff6388bbc in gazebo::physics::World::ProcessEntityMsgs() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#15 0x00007ffff6391190 in gazebo::physics::World::ProcessMessages() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#16 0x00007ffff6395198 in gazebo::physics::World::Step() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#17 0x00007ffff6395615 in gazebo::physics::World::RunLoop() () from /usr/lib/x86_64-linux-gnu/libgazebo_physics.so.6\n#18 0x00007ffff4b6ba4a in ?? () from /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.54.0\n#19 0x00007ffff5796182 in start_thread (arg=0x7fff9d1f7700) at pthread_create.c:312\n#20 0x00007ffff699047d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111\n</pre></div>\n\n\n<p>Both the main thread and the sensor thread call <code>Element::Reset()</code> on the sensor element. This would be fine, if they didn't run consecutively, at some point during both the calls the smart pointers' reference counter of one of these elements goes to zero, and the <code>Element::~Element()</code> is called before the call to <code>Element::Reset()</code> on the different thread finishes. This call then tries to access the <code>dataPtr</code> of the element, which was just deleted by <code>Element::~Element()</code>, resulting in the segfault. I'm not sure what the best solution to this problem is, apart from having to make sure that no two threads are resetting the same element consecutively.. Perhaps <code>Element::Reset()</code> should be made thread-safe as an issue of <code>SDFormat</code>?</p>\n<p>@scpeters this issue has become a mess because it's actually separate issues:</p>\n<ol>\n<li>A bug in the <code>ContactSensor</code> as detailed in the previous comment</li>\n<li>The segfault from this issue</li>\n<li>The original issue with networking, which I haven't reproduced in a while, but might go hand in hand with one of the above</li>\n</ol>\n<p>I've little hope anything is going to be solved with the issue in this state. Is it a good idea if I create new bugreports for (1) and (2), leaving this issue for (3) until I have more information about it?</p>", "type": "rendered"}, "created_on": "2015-08-24T08:50:14.479428+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 21184816}, {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/30610594.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-30610594"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2016-09-14T19:22:59.519172+00:00", "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, "updated_on": null, "type": "issue_comment", "id": 30610594}], "page": 1, "size": 9}