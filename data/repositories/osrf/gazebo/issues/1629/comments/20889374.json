{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629/comments/20889374.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629#comment-20889374"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}}, "type": "issue", "id": 1629, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Removing model from plugin crashes with null pointer"}, "content": {"raw": "Ok I'm *pretty sure* that this is what happens to trigger the crash on the sensor thread:\n\n- When the model is removed from the world, `Link::Fini()` is called for all links, which in turn calls `sensors::remove_sensor()` for each of its sensors\n- Then sensor to be removed is placed on the `removeSensors` property of the `SensorManager` to be removed by the main sensor thread\n- By the time the main sensor thread runs, the model and all its links have been removed from the world\n- The main sensor thread calls `ContactSensor::Fini()`, which tries to remove the contact filter from the physics manager. To do so, it fetches the scoped name of its parent entity with `this->world->GetEntity(this->parentName)->GetScopedName()`. However, per the previous point, the world no longer knows about the entity that goes by `this->parentName`, so the smart pointer returned by `World::GetEntity()` is `null`, and `->GetScopedName()` on a null pointer crashes the code.\n\nThe only thing I haven't been able to figure out is why this doesn't happen when the GUI is enabled, i.e. it happens when running `gzserver` only, but not when running `gazebo` or when running `gzserver` and `gzclient` separately. Possibly the extra I/O overhead caused by communicating all the deletes to the client causes the thread to be preempted and the sensor thread to run before the entities are deleted from the world.", "markup": "markdown", "html": "<p>Ok I'm <em>pretty sure</em> that this is what happens to trigger the crash on the sensor thread:</p>\n<ul>\n<li>When the model is removed from the world, <code>Link::Fini()</code> is called for all links, which in turn calls <code>sensors::remove_sensor()</code> for each of its sensors</li>\n<li>Then sensor to be removed is placed on the <code>removeSensors</code> property of the <code>SensorManager</code> to be removed by the main sensor thread</li>\n<li>By the time the main sensor thread runs, the model and all its links have been removed from the world</li>\n<li>The main sensor thread calls <code>ContactSensor::Fini()</code>, which tries to remove the contact filter from the physics manager. To do so, it fetches the scoped name of its parent entity with <code>this-&gt;world-&gt;GetEntity(this-&gt;parentName)-&gt;GetScopedName()</code>. However, per the previous point, the world no longer knows about the entity that goes by <code>this-&gt;parentName</code>, so the smart pointer returned by <code>World::GetEntity()</code> is <code>null</code>, and <code>-&gt;GetScopedName()</code> on a null pointer crashes the code.</li>\n</ul>\n<p>The only thing I haven't been able to figure out is why this doesn't happen when the GUI is enabled, i.e. it happens when running <code>gzserver</code> only, but not when running <code>gazebo</code> or when running <code>gzserver</code> and <code>gzclient</code> separately. Possibly the extra I/O overhead caused by communicating all the deletes to the client causes the thread to be preempted and the sensor thread to run before the entities are deleted from the world.</p>", "type": "rendered"}, "created_on": "2015-08-13T10:58:04.258942+00:00", "user": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "updated_on": null, "type": "issue_comment", "id": 20889374}