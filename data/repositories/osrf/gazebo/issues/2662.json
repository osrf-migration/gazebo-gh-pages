{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2662/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2662.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2662/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2662/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2662/plugin-for-rotating-velodyne-around-an"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2662/vote"}}, "reporter": {"display_name": "Mohamed Lamine", "uuid": "{3f9e1d24-334a-432f-b9dc-41b4485ff8a8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3f9e1d24-334a-432f-b9dc-41b4485ff8a8%7D"}, "html": {"href": "https://bitbucket.org/%7B3f9e1d24-334a-432f-b9dc-41b4485ff8a8%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a692ac8e06cb309cb124c521a97ba5a7d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsML-3.png"}}, "nickname": "Mohamed Lamine", "type": "user", "account_id": "5c7581619170244d98d825a0"}, "title": "Plugin for rotating velodyne around an axis passing through its center", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Hi,\r\n\r\nI'm trying to create a plugin to make velodyne VLP-16 Lidar rotate around an axis passing through its center \\(X or Y axis\\). This generates 16 rotating scan lines subject to the effect of their natural rotation around the Z axis and another rotation of the velodyne body around X or Y axis.\r\n\r\nI'm using gazebo 9.0 and ros Melodic.\r\n\r\nThe URDF joint definition is :\r\n\r\n```c++\r\n<joint name=\"${name}_base_mount_joint\" type=\"continuous\">\r\n      <xacro:insert_block name=\"origin\" />\r\n      <parent link=\"${namespace}/${parent}\"/>\r\n      <child link=\"${namespace}/${name}\"/>\r\n      <!-- origin xyz=\"0 0 -0.11885\" rpy=\"3.14 0 0\" /-->\r\n      <axis xyz=\"1 0 0\" rpy=\"0 0 0\" />\r\n      <limit effort=\"100\" velocity=\"1\"/>\r\n      <joint_properties damping=\"0.0\" friction=\"0.0\"/>\r\n    </joint>\r\n\r\n  <!-- Transmission is important to link the joints and the controller -->\r\n    <transmission name=\"${name}_base_mount_joint_trans\">\r\n      <type>transmission_interface/SimpleTransmission</type>\r\n      <joint name=\"${name}_base_mount_joint\">\r\n     <hardwareInterface>EffortJointInterface</hardwareInterface>\r\n      </joint>\r\n      <actuator name=\"${name}_base_mount_joint_motor\">\r\n    <hardwareInterface>EffortJointInterface</hardwareInterface>\r\n        <mechanicalReduction>1</mechanicalReduction>\r\n      </actuator>\r\n    </transmission>\r\n\r\n  <gazebo>\r\n    <plugin name=\"gazebo_rotate_velodyne_plugin\" filename=\"libgazebo_ros_rotate_velodyne.so\">\r\n      <alwaysOn>true</alwaysOn>\r\n      <updateRate>100.0</updateRate>\r\n      <velocity>50</velocity>\r\n      <MotorJoint>velodyne_base_mount_joint</MotorJoint>\r\n      <torque>60</torque>\r\n      <broadcastTF>1</broadcastTF>\r\n      <commandTopic>cmd_vel</commandTopic>\r\n      <robotBaseFrame>base_link</robotBaseFrame>\r\n    </plugin>\r\n  </gazebo>\r\n  \r\n  The plugin configuration is this:\r\n  \r\n  #ifndef _VELODYNE_PLUGIN_HH_\r\n#define _VELODYNE_PLUGIN_HH_    \r\n#include <gazebo/gazebo.hh>\r\n#include <gazebo/physics/physics.hh>\r\n#include <ros/ros.h>\r\n#include <geometry_msgs/Twist.h>\r\n#include <nav_msgs/Odometry.h>\r\n// Boost\r\n#include <boost/thread.hpp>\r\n// Custom Callback Queue\r\n#include <ros/callback_queue.h>\r\n#include <gazebo/physics/physics.hh>\r\n#include \"ros/callback_queue.h\"\r\n#include \"ros/subscribe_options.h\"\r\n#include \"std_msgs/Float32.h\"\r\n#include <gazebo/transport/transport.hh>\r\n#include <gazebo/msgs/msgs.hh>\r\n\r\nnamespace gazebo\r\n{\r\n  /// \\brief A plugin to control a Velodyne sensor.\r\n  class GazeboRotateVelodynePlugin : public ModelPlugin\r\n  {\r\n    /// \\brief Constructor\r\n    public: GazeboRotateVelodynePlugin() {}\r\n    /// \\brief The load function is called by Gazebo when the plugin is\r\n    /// inserted into simulation\r\n    /// \\param[in] _model A pointer to the model that this plugin is\r\n    /// attached to.\r\n    /// \\param[in] _sdf A pointer to the plugin's SDF element.\r\n    public: virtual void Load(physics::ModelPtr _model, sdf::ElementPtr _sdf)\r\n{\r\n    // Output this message to see if this plugin is attached to our velodyne model\r\n    std::cerr << \"\\nThe velodyne plugin is attach to model[\" <<\r\n              _model->GetName() << \"]\\n\";\r\n  // Safety check\r\n  if (_model->GetJointCount() == 0)\r\n  {\r\n    std::cerr << \"Invalid joint count, Velodyne plugin not loaded\\n\";\r\n    return;\r\n  }\r\n  // Store the model pointer for convenience.\r\n  this->model = _model;\r\n  // Get the first joint. We are making an assumption about the model\r\n  // having one joint that is the rotational joint.\r\n  this->joint = _model->GetJoints()[0];\r\n  // Setup a P-controller, with a gain of 0.1.\r\n  this->pid = common::PID(0.1, 0.1, 0.1);\r\n  // Apply the P-controller to the joint.\r\n  this->model->GetJointController()->SetVelocityPID(\r\n      this->joint->GetScopedName(), this->pid);\r\n  // Default to zero velocity\r\n  this->velocity = 0;\r\n  // Check that the velocity element exists, then read the value\r\n  if (_sdf->HasElement(\"velocity\"))\r\n      velocity = _sdf->Get<double>(\"velocity\");\r\n\r\n  this->SetVelocity(velocity);\r\n\r\n  // Create the node\r\n  this->node = transport::NodePtr(new transport::Node());\r\n    #if GAZEBO_MAJOR_VERSION < 8\r\n              this->node->Init(this->model->GetWorld()->GetName());\r\n    #else\r\n              this->node->Init(this->model->GetWorld()->Name());\r\n    #endif\r\n\r\n  // Create a topic name\r\n  std::string topicName = \"~/\" + this->model->GetName() + \"/vel_cmd\";\r\n\r\n  // Subscribe to the topic, and register a callback\r\n  this->sub = this->node->Subscribe(topicName,\r\n                                    &GazeboRotateVelodynePlugin::OnMsg, this);\r\n\r\n  this->torque = 50.0;\r\n    if (!_sdf->HasElement(\"torque\")) {\r\n      ROS_WARN_NAMED(\"rotate_velodyne_plugin\", \"GazeboRotateVelodynePlugin Plugin (ns = %s) missing <torque>, defaults to %f\",\r\n          this->robot_namespace_.c_str(), this->torque);\r\n    } else {\r\n      this->torque = _sdf->GetElement(\"torque\")->Get<double>();\r\n    }\r\n\r\n    this->command_topic_ = \"cmd_vel\";\r\n    if (!_sdf->HasElement(\"commandTopic\")) {\r\n      ROS_WARN_NAMED(\"rotate_velodyne_plugin\", \"GazeboRotateVelodynePlugin Plugin (ns = %s) missing <commandTopic>, defaults to \\\"%s\\\"\",\r\n          this->robot_namespace_.c_str(), this->command_topic_.c_str());\r\n    } else {\r\n      this->command_topic_ = _sdf->GetElement(\"commandTopic\")->Get<std::string>();\r\n    }\r\n\r\n    this->robot_base_frame_ = \"base_link\";\r\n    if (!_sdf->HasElement(\"robotBaseFrame\")) {\r\n      ROS_WARN_NAMED(\"rotate_velodyne_plugin\", \"GazeboRotateVelodynePlugin Plugin (ns = %s) missing <robotBaseFrame>, defaults to \\\"%s\\\"\",\r\n          this->robot_namespace_.c_str(), this->robot_base_frame_.c_str());\r\n    } else {\r\n      this->robot_base_frame_ = _sdf->GetElement(\"robotBaseFrame\")->Get<std::string>();\r\n    }\r\n\r\n    this->update_rate_ = 100.0;\r\n    if (!_sdf->HasElement(\"updateRate\")) {\r\n      ROS_WARN_NAMED(\"rotate_velodyne_plugin\", \"GazeboRosRotateVelodynePlugin Plugin (ns = %s) missing <updateRate>, defaults to %f\",\r\n          this->robot_namespace_.c_str(), this->update_rate_);\r\n    } else {\r\n      this->update_rate_ = _sdf->GetElement(\"updateRate\")->Get<double>();\r\n    }\r\n          // Initialize ros, if it has not already bee initialized.\r\n          if (!ros::isInitialized())\r\n          {\r\n              int argc = 0;\r\n              char **argv = NULL;\r\n              ros::init(argc, argv, \"gazebo_client\",\r\n                        ros::init_options::NoSigintHandler);\r\n          }\r\n// Create our ROS node. This acts in a similar manner to\r\n// the Gazebo node\r\n          this->rosNode.reset(new ros::NodeHandle(\"gazebo_client\"));\r\n\r\n          // Create a named topic, and subscribe to it.\r\n          ros::SubscribeOptions so =\r\n                  ros::SubscribeOptions::create<std_msgs::Float32>(\r\n                          \"/\" + this->model->GetName() + \"/vel_cmd\",\r\n                          1,\r\n                          boost::bind(&GazeboRotateVelodynePlugin::OnRosMsg, this, _1),\r\n                          ros::VoidPtr(), &this->rosQueue);\r\n          this->rosSub = this->rosNode->subscribe(so);\r\n// Spin up the queue helper thread.\r\n          this->rosQueueThread =\r\n                  std::thread(std::bind(&GazeboRotateVelodynePlugin::QueueThread, this));\r\n}\r\n       /// \\brief Set the velocity of the Velodyne\r\n      /// \\param[in] _vel New target velocity\r\n  public: void SetVelocity(const double &_vel)\r\n      {\r\n          // Set the joint's target velocity.\r\n          this->model->GetJointController()->SetVelocityTarget(\r\n                  this->joint->GetScopedName(), _vel);\r\n      }\r\n      /// \\brief Handle incoming message\r\n      /// \\param[in] _msg Repurpose a vector3 message. This function will\r\n      /// only use the x component.\r\n  private: void OnMsg(ConstVector3dPtr &_msg)\r\n      {\r\n          this->SetVelocity(_msg->x());\r\n      }\r\n      /// \\brief A node used for transport\r\n  private: transport::NodePtr node;\r\n\r\n      /// \\brief A subscriber to a named topic.\r\n  private: transport::SubscriberPtr sub;\r\n\r\n      /// \\brief Handle an incoming message from ROS\r\n      /// \\param[in] _msg A float value that is used to set the velocity\r\n      /// of the Velodyne.\r\n  public: void OnRosMsg(const std_msgs::Float32ConstPtr &_msg)\r\n      {\r\n          this->SetVelocity(_msg->data);\r\n      }\r\n\r\n      /// \\brief ROS helper function that processes messages\r\n  private: void QueueThread()\r\n      {\r\n          static const double timeout = 0.01;\r\n          while (this->rosNode->ok())\r\n          {\r\n              this->rosQueue.callAvailable(ros::WallDuration(timeout));\r\n          }\r\n      }\r\n    /// \\brief Pointer to the model.\r\n  private: physics::ModelPtr model;\r\n\r\n    /// \\brief Pointer to the joint.\r\n  private: physics::JointPtr joint;\r\n\r\n    /// \\brief A PID controller for the joint.\r\n  private: common::PID pid;\r\n\r\n      /// \\brief A node use for ROS transport\r\n  private: std::unique_ptr<ros::NodeHandle> rosNode;\r\n\r\n    /// \\brief A ROS subscriber\r\n  private: ros::Subscriber rosSub;\r\n\r\n    /// \\brief A ROS callbackqueue that helps process messages\r\n  private: ros::CallbackQueue rosQueue;\r\n\r\n    /// \\brief A thread the keeps running the rosQueue\r\n  private: std::thread rosQueueThread;\r\n\r\nprivate:\r\n      double update_rate_;\r\n      double velocity;\r\n      double torque;\r\n      double x_;\r\n      double rot_;\r\n      std::string robot_namespace_;\r\n      std::string command_topic_;\r\n      std::string robot_base_frame_;\r\n      boost::mutex lock;\r\n      ros::CallbackQueue queue_;\r\n      boost::thread callback_queue_thread_;\r\n      ros::Subscriber cmd_vel_subscriber_;\r\n      ros::NodeHandle* rosnode_;\r\n  };\r\n  // Tell Gazebo about this plugin, so that Gazebo can call Load on this plugin.\r\n  GZ_REGISTER_MODEL_PLUGIN(GazeboRotateVelodynePlugin)\r\n}\r\n#endif\r\n\r\nThe problem is when I come to get rviz to publish the PointCloud2 message I get difformed data. All data are published on one single axis.\r\n\r\nThe second problem is that I can't control the rotating joint by the /cmd_vel topic, I send commmands using : rostopic pub /vel_cmd std_msgs/Float32 5.0 but nothing changes.\r\n\r\nAnyone any idea where the problem lies please? \r\n```\r\n\r\n\u200c", "markup": "markdown", "html": "<p>Hi,</p>\n<p>I'm trying to create a plugin to make velodyne VLP-16 Lidar rotate around an axis passing through its center (X or Y axis). This generates 16 rotating scan lines subject to the effect of their natural rotation around the Z axis and another rotation of the velodyne body around X or Y axis.</p>\n<p>I'm using gazebo 9.0 and ros Melodic.</p>\n<p>The URDF joint definition is :</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"o\">&lt;</span><span class=\"n\">joint</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;${name}_base_mount_joint&quot;</span> <span class=\"n\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;continuous&quot;</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nl\">xacro</span><span class=\"p\">:</span><span class=\"n\">insert_block</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;origin&quot;</span> <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">parent</span> <span class=\"n\">link</span><span class=\"o\">=</span><span class=\"s\">&quot;${namespace}/${parent}&quot;</span><span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">child</span> <span class=\"n\">link</span><span class=\"o\">=</span><span class=\"s\">&quot;${namespace}/${name}&quot;</span><span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;!--</span> <span class=\"n\">origin</span> <span class=\"n\">xyz</span><span class=\"o\">=</span><span class=\"s\">&quot;0 0 -0.11885&quot;</span> <span class=\"n\">rpy</span><span class=\"o\">=</span><span class=\"s\">&quot;3.14 0 0&quot;</span> <span class=\"o\">/--&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">axis</span> <span class=\"n\">xyz</span><span class=\"o\">=</span><span class=\"s\">&quot;1 0 0&quot;</span> <span class=\"n\">rpy</span><span class=\"o\">=</span><span class=\"s\">&quot;0 0 0&quot;</span> <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">limit</span> <span class=\"n\">effort</span><span class=\"o\">=</span><span class=\"s\">&quot;100&quot;</span> <span class=\"n\">velocity</span><span class=\"o\">=</span><span class=\"s\">&quot;1&quot;</span><span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">joint_properties</span> <span class=\"n\">damping</span><span class=\"o\">=</span><span class=\"s\">&quot;0.0&quot;</span> <span class=\"n\">friction</span><span class=\"o\">=</span><span class=\"s\">&quot;0.0&quot;</span><span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">joint</span><span class=\"o\">&gt;</span>\n\n  <span class=\"o\">&lt;!--</span> <span class=\"n\">Transmission</span> <span class=\"n\">is</span> <span class=\"n\">important</span> <span class=\"n\">to</span> <span class=\"n\">link</span> <span class=\"n\">the</span> <span class=\"n\">joints</span> <span class=\"n\">and</span> <span class=\"n\">the</span> <span class=\"n\">controller</span> <span class=\"o\">--&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">transmission</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;${name}_base_mount_joint_trans&quot;</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">type</span><span class=\"o\">&gt;</span><span class=\"n\">transmission_interface</span><span class=\"o\">/</span><span class=\"n\">SimpleTransmission</span><span class=\"o\">&lt;/</span><span class=\"n\">type</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">joint</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;${name}_base_mount_joint&quot;</span><span class=\"o\">&gt;</span>\n     <span class=\"o\">&lt;</span><span class=\"n\">hardwareInterface</span><span class=\"o\">&gt;</span><span class=\"n\">EffortJointInterface</span><span class=\"o\">&lt;/</span><span class=\"n\">hardwareInterface</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;/</span><span class=\"n\">joint</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">actuator</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;${name}_base_mount_joint_motor&quot;</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">hardwareInterface</span><span class=\"o\">&gt;</span><span class=\"n\">EffortJointInterface</span><span class=\"o\">&lt;/</span><span class=\"n\">hardwareInterface</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"n\">mechanicalReduction</span><span class=\"o\">&gt;</span><span class=\"mi\">1</span><span class=\"o\">&lt;/</span><span class=\"n\">mechanicalReduction</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;/</span><span class=\"n\">actuator</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">transmission</span><span class=\"o\">&gt;</span>\n\n  <span class=\"o\">&lt;</span><span class=\"n\">gazebo</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">plugin</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;gazebo_rotate_velodyne_plugin&quot;</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s\">&quot;libgazebo_ros_rotate_velodyne.so&quot;</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">alwaysOn</span><span class=\"o\">&gt;</span><span class=\"nb\">true</span><span class=\"o\">&lt;/</span><span class=\"n\">alwaysOn</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">updateRate</span><span class=\"o\">&gt;</span><span class=\"mf\">100.0</span><span class=\"o\">&lt;/</span><span class=\"n\">updateRate</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">velocity</span><span class=\"o\">&gt;</span><span class=\"mi\">50</span><span class=\"o\">&lt;/</span><span class=\"n\">velocity</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">MotorJoint</span><span class=\"o\">&gt;</span><span class=\"n\">velodyne_base_mount_joint</span><span class=\"o\">&lt;/</span><span class=\"n\">MotorJoint</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">torque</span><span class=\"o\">&gt;</span><span class=\"mi\">60</span><span class=\"o\">&lt;/</span><span class=\"n\">torque</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">broadcastTF</span><span class=\"o\">&gt;</span><span class=\"mi\">1</span><span class=\"o\">&lt;/</span><span class=\"n\">broadcastTF</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">commandTopic</span><span class=\"o\">&gt;</span><span class=\"n\">cmd_vel</span><span class=\"o\">&lt;/</span><span class=\"n\">commandTopic</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">robotBaseFrame</span><span class=\"o\">&gt;</span><span class=\"n\">base_link</span><span class=\"o\">&lt;/</span><span class=\"n\">robotBaseFrame</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">plugin</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;/</span><span class=\"n\">gazebo</span><span class=\"o\">&gt;</span>\n\n  <span class=\"n\">The</span> <span class=\"n\">plugin</span> <span class=\"n\">configuration</span> <span class=\"n\">is</span> <span class=\"k\">this</span><span class=\"o\">:</span>\n\n  <span class=\"cp\">#ifndef _VELODYNE_PLUGIN_HH_</span>\n<span class=\"cp\">#define _VELODYNE_PLUGIN_HH_    </span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/gazebo.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/physics/physics.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ros/ros.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;geometry_msgs/Twist.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;nav_msgs/Odometry.h&gt;</span><span class=\"cp\"></span>\n<span class=\"c1\">// Boost</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;boost/thread.hpp&gt;</span><span class=\"cp\"></span>\n<span class=\"c1\">// Custom Callback Queue</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ros/callback_queue.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/physics/physics.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&quot;ros/callback_queue.h&quot;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&quot;ros/subscribe_options.h&quot;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&quot;std_msgs/Float32.h&quot;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/transport/transport.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/msgs/msgs.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">gazebo</span>\n<span class=\"p\">{</span>\n  <span class=\"c1\">/// \\brief A plugin to control a Velodyne sensor.</span>\n  <span class=\"k\">class</span> <span class=\"nc\">GazeboRotateVelodynePlugin</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">ModelPlugin</span>\n  <span class=\"p\">{</span>\n    <span class=\"c1\">/// \\brief Constructor</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"n\">GazeboRotateVelodynePlugin</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"c1\">/// \\brief The load function is called by Gazebo when the plugin is</span>\n    <span class=\"c1\">/// inserted into simulation</span>\n    <span class=\"c1\">/// \\param[in] _model A pointer to the model that this plugin is</span>\n    <span class=\"c1\">/// attached to.</span>\n    <span class=\"c1\">/// \\param[in] _sdf A pointer to the plugin&#39;s SDF element.</span>\n    <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">Load</span><span class=\"p\">(</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">ModelPtr</span> <span class=\"n\">_model</span><span class=\"p\">,</span> <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"n\">_sdf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// Output this message to see if this plugin is attached to our velodyne model</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">The velodyne plugin is attach to model[&quot;</span> <span class=\"o\">&lt;&lt;</span>\n              <span class=\"n\">_model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;]</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Safety check</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetJointCount</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Invalid joint count, Velodyne plugin not loaded</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// Store the model pointer for convenience.</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">_model</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Get the first joint. We are making an assumption about the model</span>\n  <span class=\"c1\">// having one joint that is the rotational joint.</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">joint</span> <span class=\"o\">=</span> <span class=\"n\">_model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetJoints</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"c1\">// Setup a P-controller, with a gain of 0.1.</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">pid</span> <span class=\"o\">=</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">PID</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">);</span>\n  <span class=\"c1\">// Apply the P-controller to the joint.</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetJointController</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">SetVelocityPID</span><span class=\"p\">(</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">joint</span><span class=\"o\">-&gt;</span><span class=\"n\">GetScopedName</span><span class=\"p\">(),</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">pid</span><span class=\"p\">);</span>\n  <span class=\"c1\">// Default to zero velocity</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Check that the velocity element exists, then read the value</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">HasElement</span><span class=\"p\">(</span><span class=\"s\">&quot;velocity&quot;</span><span class=\"p\">))</span>\n      <span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">Get</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;velocity&quot;</span><span class=\"p\">);</span>\n\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">SetVelocity</span><span class=\"p\">(</span><span class=\"n\">velocity</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Create the node</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">NodePtr</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"p\">());</span>\n    <span class=\"cp\">#if GAZEBO_MAJOR_VERSION &lt; 8</span>\n              <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">Init</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWorld</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">GetName</span><span class=\"p\">());</span>\n    <span class=\"cp\">#else</span>\n              <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">Init</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetWorld</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">Name</span><span class=\"p\">());</span>\n    <span class=\"cp\">#endif</span>\n\n  <span class=\"c1\">// Create a topic name</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">topicName</span> <span class=\"o\">=</span> <span class=\"s\">&quot;~/&quot;</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/vel_cmd&quot;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Subscribe to the topic, and register a callback</span>\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"n\">topicName</span><span class=\"p\">,</span>\n                                    <span class=\"o\">&amp;</span><span class=\"n\">GazeboRotateVelodynePlugin</span><span class=\"o\">::</span><span class=\"n\">OnMsg</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n\n  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">torque</span> <span class=\"o\">=</span> <span class=\"mf\">50.0</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">HasElement</span><span class=\"p\">(</span><span class=\"s\">&quot;torque&quot;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"n\">ROS_WARN_NAMED</span><span class=\"p\">(</span><span class=\"s\">&quot;rotate_velodyne_plugin&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;GazeboRotateVelodynePlugin Plugin (ns = %s) missing &lt;torque&gt;, defaults to %f&quot;</span><span class=\"p\">,</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">robot_namespace_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">torque</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">torque</span> <span class=\"o\">=</span> <span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">GetElement</span><span class=\"p\">(</span><span class=\"s\">&quot;torque&quot;</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">Get</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">command_topic_</span> <span class=\"o\">=</span> <span class=\"s\">&quot;cmd_vel&quot;</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">HasElement</span><span class=\"p\">(</span><span class=\"s\">&quot;commandTopic&quot;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"n\">ROS_WARN_NAMED</span><span class=\"p\">(</span><span class=\"s\">&quot;rotate_velodyne_plugin&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;GazeboRotateVelodynePlugin Plugin (ns = %s) missing &lt;commandTopic&gt;, defaults to </span><span class=\"se\">\\&quot;</span><span class=\"s\">%s</span><span class=\"se\">\\&quot;</span><span class=\"s\">&quot;</span><span class=\"p\">,</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">robot_namespace_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">command_topic_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">command_topic_</span> <span class=\"o\">=</span> <span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">GetElement</span><span class=\"p\">(</span><span class=\"s\">&quot;commandTopic&quot;</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">Get</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">robot_base_frame_</span> <span class=\"o\">=</span> <span class=\"s\">&quot;base_link&quot;</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">HasElement</span><span class=\"p\">(</span><span class=\"s\">&quot;robotBaseFrame&quot;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"n\">ROS_WARN_NAMED</span><span class=\"p\">(</span><span class=\"s\">&quot;rotate_velodyne_plugin&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;GazeboRotateVelodynePlugin Plugin (ns = %s) missing &lt;robotBaseFrame&gt;, defaults to </span><span class=\"se\">\\&quot;</span><span class=\"s\">%s</span><span class=\"se\">\\&quot;</span><span class=\"s\">&quot;</span><span class=\"p\">,</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">robot_namespace_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">robot_base_frame_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">robot_base_frame_</span> <span class=\"o\">=</span> <span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">GetElement</span><span class=\"p\">(</span><span class=\"s\">&quot;robotBaseFrame&quot;</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">Get</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">update_rate_</span> <span class=\"o\">=</span> <span class=\"mf\">100.0</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">HasElement</span><span class=\"p\">(</span><span class=\"s\">&quot;updateRate&quot;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"n\">ROS_WARN_NAMED</span><span class=\"p\">(</span><span class=\"s\">&quot;rotate_velodyne_plugin&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;GazeboRosRotateVelodynePlugin Plugin (ns = %s) missing &lt;updateRate&gt;, defaults to %f&quot;</span><span class=\"p\">,</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">robot_namespace_</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">update_rate_</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">update_rate_</span> <span class=\"o\">=</span> <span class=\"n\">_sdf</span><span class=\"o\">-&gt;</span><span class=\"n\">GetElement</span><span class=\"p\">(</span><span class=\"s\">&quot;updateRate&quot;</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">Get</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n          <span class=\"c1\">// Initialize ros, if it has not already bee initialized.</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">isInitialized</span><span class=\"p\">())</span>\n          <span class=\"p\">{</span>\n              <span class=\"kt\">int</span> <span class=\"n\">argc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n              <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n              <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s\">&quot;gazebo_client&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">init_options</span><span class=\"o\">::</span><span class=\"n\">NoSigintHandler</span><span class=\"p\">);</span>\n          <span class=\"p\">}</span>\n<span class=\"c1\">// Create our ROS node. This acts in a similar manner to</span>\n<span class=\"c1\">// the Gazebo node</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">rosNode</span><span class=\"p\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">NodeHandle</span><span class=\"p\">(</span><span class=\"s\">&quot;gazebo_client&quot;</span><span class=\"p\">));</span>\n\n          <span class=\"c1\">// Create a named topic, and subscribe to it.</span>\n          <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">SubscribeOptions</span> <span class=\"n\">so</span> <span class=\"o\">=</span>\n                  <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">SubscribeOptions</span><span class=\"o\">::</span><span class=\"n\">create</span><span class=\"o\">&lt;</span><span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">Float32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n                          <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetName</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/vel_cmd&quot;</span><span class=\"p\">,</span>\n                          <span class=\"mi\">1</span><span class=\"p\">,</span>\n                          <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GazeboRotateVelodynePlugin</span><span class=\"o\">::</span><span class=\"n\">OnRosMsg</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">_1</span><span class=\"p\">),</span>\n                          <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">VoidPtr</span><span class=\"p\">(),</span> <span class=\"o\">&amp;</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">rosQueue</span><span class=\"p\">);</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">rosSub</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">rosNode</span><span class=\"o\">-&gt;</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">so</span><span class=\"p\">);</span>\n<span class=\"c1\">// Spin up the queue helper thread.</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">rosQueueThread</span> <span class=\"o\">=</span>\n                  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kr\">thread</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">GazeboRotateVelodynePlugin</span><span class=\"o\">::</span><span class=\"n\">QueueThread</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n       <span class=\"c1\">/// \\brief Set the velocity of the Velodyne</span>\n      <span class=\"c1\">/// \\param[in] _vel New target velocity</span>\n  <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"kt\">void</span> <span class=\"n\">SetVelocity</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"o\">&amp;</span><span class=\"n\">_vel</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n          <span class=\"c1\">// Set the joint&#39;s target velocity.</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetJointController</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">SetVelocityTarget</span><span class=\"p\">(</span>\n                  <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">joint</span><span class=\"o\">-&gt;</span><span class=\"n\">GetScopedName</span><span class=\"p\">(),</span> <span class=\"n\">_vel</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">/// \\brief Handle incoming message</span>\n      <span class=\"c1\">/// \\param[in] _msg Repurpose a vector3 message. This function will</span>\n      <span class=\"c1\">/// only use the x component.</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"kt\">void</span> <span class=\"n\">OnMsg</span><span class=\"p\">(</span><span class=\"n\">ConstVector3dPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">_msg</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">SetVelocity</span><span class=\"p\">(</span><span class=\"n\">_msg</span><span class=\"o\">-&gt;</span><span class=\"n\">x</span><span class=\"p\">());</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">/// \\brief A node used for transport</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">NodePtr</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">/// \\brief A subscriber to a named topic.</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">SubscriberPtr</span> <span class=\"n\">sub</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">/// \\brief Handle an incoming message from ROS</span>\n      <span class=\"c1\">/// \\param[in] _msg A float value that is used to set the velocity</span>\n      <span class=\"c1\">/// of the Velodyne.</span>\n  <span class=\"k\">public</span><span class=\"o\">:</span> <span class=\"kt\">void</span> <span class=\"n\">OnRosMsg</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std_msgs</span><span class=\"o\">::</span><span class=\"n\">Float32ConstPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">_msg</span><span class=\"p\">)</span>\n      <span class=\"p\">{</span>\n          <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">SetVelocity</span><span class=\"p\">(</span><span class=\"n\">_msg</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">/// \\brief ROS helper function that processes messages</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"kt\">void</span> <span class=\"n\">QueueThread</span><span class=\"p\">()</span>\n      <span class=\"p\">{</span>\n          <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span><span class=\"p\">;</span>\n          <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">rosNode</span><span class=\"o\">-&gt;</span><span class=\"n\">ok</span><span class=\"p\">())</span>\n          <span class=\"p\">{</span>\n              <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">rosQueue</span><span class=\"p\">.</span><span class=\"n\">callAvailable</span><span class=\"p\">(</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">WallDuration</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"p\">));</span>\n          <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"c1\">/// \\brief Pointer to the model.</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">ModelPtr</span> <span class=\"n\">model</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">/// \\brief Pointer to the joint.</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">JointPtr</span> <span class=\"n\">joint</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">/// \\brief A PID controller for the joint.</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"n\">common</span><span class=\"o\">::</span><span class=\"n\">PID</span> <span class=\"n\">pid</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">/// \\brief A node use for ROS transport</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">NodeHandle</span><span class=\"o\">&gt;</span> <span class=\"n\">rosNode</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">/// \\brief A ROS subscriber</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Subscriber</span> <span class=\"n\">rosSub</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">/// \\brief A ROS callbackqueue that helps process messages</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">CallbackQueue</span> <span class=\"n\">rosQueue</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">/// \\brief A thread the keeps running the rosQueue</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kr\">thread</span> <span class=\"n\">rosQueueThread</span><span class=\"p\">;</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n      <span class=\"kt\">double</span> <span class=\"n\">update_rate_</span><span class=\"p\">;</span>\n      <span class=\"kt\">double</span> <span class=\"n\">velocity</span><span class=\"p\">;</span>\n      <span class=\"kt\">double</span> <span class=\"n\">torque</span><span class=\"p\">;</span>\n      <span class=\"kt\">double</span> <span class=\"n\">x_</span><span class=\"p\">;</span>\n      <span class=\"kt\">double</span> <span class=\"n\">rot_</span><span class=\"p\">;</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">robot_namespace_</span><span class=\"p\">;</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">command_topic_</span><span class=\"p\">;</span>\n      <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">robot_base_frame_</span><span class=\"p\">;</span>\n      <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">mutex</span> <span class=\"n\">lock</span><span class=\"p\">;</span>\n      <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">CallbackQueue</span> <span class=\"n\">queue_</span><span class=\"p\">;</span>\n      <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"kr\">thread</span> <span class=\"n\">callback_queue_thread_</span><span class=\"p\">;</span>\n      <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">Subscriber</span> <span class=\"n\">cmd_vel_subscriber_</span><span class=\"p\">;</span>\n      <span class=\"n\">ros</span><span class=\"o\">::</span><span class=\"n\">NodeHandle</span><span class=\"o\">*</span> <span class=\"n\">rosnode_</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n  <span class=\"c1\">// Tell Gazebo about this plugin, so that Gazebo can call Load on this plugin.</span>\n  <span class=\"n\">GZ_REGISTER_MODEL_PLUGIN</span><span class=\"p\">(</span><span class=\"n\">GazeboRotateVelodynePlugin</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#endif</span>\n\n<span class=\"n\">The</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">when</span> <span class=\"n\">I</span> <span class=\"n\">come</span> <span class=\"n\">to</span> <span class=\"n\">get</span> <span class=\"n\">rviz</span> <span class=\"n\">to</span> <span class=\"n\">publish</span> <span class=\"n\">the</span> <span class=\"n\">PointCloud2</span> <span class=\"n\">message</span> <span class=\"n\">I</span> <span class=\"n\">get</span> <span class=\"n\">difformed</span> <span class=\"n\">data</span><span class=\"p\">.</span> <span class=\"n\">All</span> <span class=\"n\">data</span> <span class=\"n\">are</span> <span class=\"n\">published</span> <span class=\"n\">on</span> <span class=\"n\">one</span> <span class=\"n\">single</span> <span class=\"n\">axis</span><span class=\"p\">.</span>\n\n<span class=\"n\">The</span> <span class=\"n\">second</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">that</span> <span class=\"n\">I</span> <span class=\"n\">can</span><span class=\"err\">&#39;</span><span class=\"n\">t</span> <span class=\"n\">control</span> <span class=\"n\">the</span> <span class=\"n\">rotating</span> <span class=\"n\">joint</span> <span class=\"n\">by</span> <span class=\"n\">the</span> <span class=\"o\">/</span><span class=\"n\">cmd_vel</span> <span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"n\">I</span> <span class=\"n\">send</span> <span class=\"n\">commmands</span> <span class=\"k\">using</span> <span class=\"o\">:</span> <span class=\"n\">rostopic</span> <span class=\"n\">pub</span> <span class=\"o\">/</span><span class=\"n\">vel_cmd</span> <span class=\"n\">std_msgs</span><span class=\"o\">/</span><span class=\"n\">Float32</span> <span class=\"mf\">5.0</span> <span class=\"n\">but</span> <span class=\"n\">nothing</span> <span class=\"n\">changes</span><span class=\"p\">.</span>\n\n<span class=\"n\">Anyone</span> <span class=\"n\">any</span> <span class=\"n\">idea</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">problem</span> <span class=\"n\">lies</span> <span class=\"n\">please</span><span class=\"o\">?</span> \n</pre></div>\n\n\n<p>\u200c</p>", "type": "rendered"}, "assignee": null, "state": "invalid", "version": {"name": "9.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/242746.json"}}}, "edited_on": null, "created_on": "2019-09-30T08:05:55.393910+00:00", "milestone": null, "updated_on": "2019-10-15T07:57:29.627114+00:00", "type": "issue", "id": 2662}