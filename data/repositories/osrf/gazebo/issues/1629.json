{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1629/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1629.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1629/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1629/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1629/removing-model-from-plugin-crashes-with"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1629/vote"}}, "reporter": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "title": "Removing model from plugin crashes with null pointer", "component": null, "votes": 1, "watches": 5, "content": {"raw": "I'm writing a plugin which inserts a model into a world, checks for contacts and then removes it again. This works fine until the `RemoveModel` step, which crashes the plugin with a NULL boost smart pointer. I've tried doing it several ways already (through a topic, through `world_->Clear()` which would also be fine in my case), but every approach sooner or later crashes with either a threading error, a boost null pointer dereferencing or a segmentation fault. Probably I'm clearing the models at an unexpected moment, but I honestly have no idea how to work around it. It also seems that which approach crashes when depends on the complexity of the model.\r\n\r\nThe simplest case, using `RemoveModel`, crashes *always* as long as the model has more than one link. I've managed to isolate it into a plugin that causes it:\r\n\r\n\r\n```\r\n#!c++\r\n\r\n#include <gazebo/gazebo.hh>\r\n#include <gazebo/physics/physics.hh>\r\n#include <boost/thread/mutex.hpp>\r\n#include <boost/lexical_cast.hpp>\r\n#include <iostream>\r\n#include <queue>\r\n\r\nnamespace gazebo\r\n{\r\nclass BreakPlugin : public WorldPlugin {\r\npublic:\r\n\tBreakPlugin() : WorldPlugin() {}\r\n\r\n\tvoid Load(physics::WorldPtr _world, sdf::ElementPtr _sdf) {\r\n\t\tstd::cout << \"Plugin loaded.\" << std::endl;\r\n\r\n\t\tcounter_ = 0;\r\n\r\n\t\tworld_ = _world;\r\n\r\n\t\t// Pause the world\r\n\t\tworld_->SetPaused(true);\r\n\r\n\t\t// Create a new transport node for advertising / subscribing\r\n\t\tnode_.reset(new transport::Node());\r\n\t\tnode_->Init();\r\n\r\n\t\t// Subscribe to model insertion\r\n\t\tmodelSub_ = node_->Subscribe(\"~/model/info\", &BreakPlugin::OnModel, this);\r\n\r\n\t\t// Subscribe to contacts\r\n\t\tcontactsSub_ = node_->Subscribe(\"~/physics/contacts\", &BreakPlugin::OnContacts, this);\r\n\r\n\t\tthis->AddNew();\r\n\t}\r\n\r\n\tvoid AddNew() {\r\n\t\t// The sphere model from the world plugin example - remove works\r\n\t\t// fine with one link, crashes with two.\r\n\t\tsdf::SDF sphereSDF;\r\n\t\tsphereSDF.SetFromString(\r\n\t\t\t\t\"<sdf version ='1.5'>\\\r\n\t\t\t\t\t  <model name ='sphere'>\\\r\n\t\t\t\t\t\t<pose>1 0 0 0 0 0</pose>\\\r\n\t\t\t\t\t\t<link name ='link'>\\\r\n\t\t\t\t\t\t  <pose>0 0 .5 0 0 0</pose>\\\r\n\t\t\t\t\t\t  <collision name ='collision'>\\\r\n\t\t\t\t\t\t\t<geometry>\\\r\n\t\t\t\t\t\t\t  <sphere><radius>0.5</radius></sphere>\\\r\n\t\t\t\t\t\t\t</geometry>\\\r\n\t\t\t\t\t\t  </collision>\\\r\n\t\t\t\t\t\t  <visual name ='visual'>\\\r\n\t\t\t\t\t\t\t<geometry>\\\r\n\t\t\t\t\t\t\t  <sphere><radius>0.5</radius></sphere>\\\r\n\t\t\t\t\t\t\t</geometry>\\\r\n\t\t\t\t\t\t  </visual>\\\r\n\t\t\t\t\t\t</link>\\\r\n\t\t\t\t\t\t<link name ='link2'>\\\r\n\t\t\t\t\t\t  <pose>0 0 1.5 0 0 0</pose>\\\r\n\t\t\t\t\t\t  <collision name ='collision'>\\\r\n\t\t\t\t\t\t\t<geometry>\\\r\n\t\t\t\t\t\t\t  <sphere><radius>0.5</radius></sphere>\\\r\n\t\t\t\t\t\t\t</geometry>\\\r\n\t\t\t\t\t\t  </collision>\\\r\n\t\t\t\t\t\t  <visual name ='visual'>\\\r\n\t\t\t\t\t\t\t<geometry>\\\r\n\t\t\t\t\t\t\t  <sphere><radius>0.5</radius></sphere>\\\r\n\t\t\t\t\t\t\t</geometry>\\\r\n\t\t\t\t\t\t  </visual>\\\r\n\t\t\t\t\t\t</link>\\\r\n\t\t\t\t\t  </model>\\\r\n\t\t\t\t\t</sdf>\");\r\n\r\n\t\tsdf::ElementPtr model = sphereSDF.root->GetElement(\"model\");\r\n\t\tstd::string name = \"unique_sphere_\"+boost::lexical_cast<std::string>(counter_);\r\n\t\tmodel->GetAttribute(\"name\")->SetFromString(name);\r\n\t\tworld_->InsertModelSDF(sphereSDF);\r\n\t\tstd::cout << \"Added model #\" << counter_ << std::endl;\r\n\t}\r\n\r\n\tvoid OnModel(ConstModelPtr & msg) {\r\n\t\t// Unpause the world for a step of processing\r\n\t\tworld_->SetPaused(false);\r\n\t\tstd::cout << \"Models in world: \" << world_->GetModelCount() << std::endl;\r\n\t}\r\n\r\n\tvoid OnContacts(ConstContactsPtr &msg) {\r\n\t\t// Handle contacts\r\n\t\tworld_->SetPaused(true);\r\n\t\tstd::string name = \"unique_sphere_\"+boost::lexical_cast<std::string>(counter_);\r\n\r\n\t\t// Crash will occur shortly after this - not removing the model works fine.\r\n\t\tworld_->RemoveModel(name);\r\n\r\n\t\t// This output is still shown, so I'm assuming the crash occurs on another thread\r\n\t\tstd::cout << \"Model removed.\" << std::endl;\r\n\t}\r\n\r\nprivate:\r\n\t// Store a pointer to the world\r\n\tphysics::WorldPtr world_;\r\n\r\n\t// Request counter\r\n\tint counter_;\r\n\r\n\t// Transport node\r\n\ttransport::NodePtr node_;\r\n\r\n\t// Subscribers / publishers\r\n\ttransport::SubscriberPtr modelSub_;\r\n\ttransport::SubscriberPtr contactsSub_;\r\n};\r\n\r\nGZ_REGISTER_WORLD_PLUGIN(BreakPlugin)\r\n\r\n}\r\n```\r\n\r\nJust attach this plugin to any world, run it, and it will crash with:\r\n\r\n```\r\n/usr/include/boost/smart_ptr/shared_ptr.hpp:653: typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = gazebo::transport::Node; typename boost::detail::sp_member_access<T>::type = gazebo::transport::Node*]: Assertion `px != 0' failed.\r\n```\r\n\r\nI've been testing it with this empty zero gravity world:\r\n```\r\n<?xml version=\"1.0\" ?>\r\n<sdf version=\"1.5\">\r\n  <world name=\"default\">\r\n    <physics type=\"ode\">\r\n      <gravity>0 0 0</gravity>\r\n    </physics>\r\n\r\n  <plugin name=\"breakplugin\" filename=\"libbreakplugin.so\" />\r\n  </world>\r\n</sdf>\r\n```\r\n\r\nUnfortunately I haven't yet been able to figure out *why* this happens. Is there anything about the way I'm deleting the model that is unsafe? If I do it with `world_->Clear()` at the same point it works fine for this example, but crashes with a segfault with another (the conditions of which I can't yet pinpoint, but I think it has something to do with a sensor updating after the model is deleted).\r\n\r\nIf possible, could someone perhaps suggest a workaround, i.e. a way of deleting a model safely?", "markup": "markdown", "html": "<p>I'm writing a plugin which inserts a model into a world, checks for contacts and then removes it again. This works fine until the <code>RemoveModel</code> step, which crashes the plugin with a NULL boost smart pointer. I've tried doing it several ways already (through a topic, through <code>world_-&gt;Clear()</code> which would also be fine in my case), but every approach sooner or later crashes with either a threading error, a boost null pointer dereferencing or a segmentation fault. Probably I'm clearing the models at an unexpected moment, but I honestly have no idea how to work around it. It also seems that which approach crashes when depends on the complexity of the model.</p>\n<p>The simplest case, using <code>RemoveModel</code>, crashes <em>always</em> as long as the model has more than one link. I've managed to isolate it into a plugin that causes it:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/gazebo.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;gazebo/physics/physics.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;boost/thread/mutex.hpp&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;boost/lexical_cast.hpp&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;queue&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">gazebo</span>\n<span class=\"p\">{</span>\n<span class=\"k\">class</span> <span class=\"nc\">BreakPlugin</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">WorldPlugin</span> <span class=\"p\">{</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">BreakPlugin</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"n\">WorldPlugin</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">Load</span><span class=\"p\">(</span><span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">WorldPtr</span> <span class=\"n\">_world</span><span class=\"p\">,</span> <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"n\">_sdf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Plugin loaded.&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n        <span class=\"n\">counter_</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"n\">world_</span> <span class=\"o\">=</span> <span class=\"n\">_world</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// Pause the world</span>\n        <span class=\"n\">world_</span><span class=\"o\">-&gt;</span><span class=\"n\">SetPaused</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// Create a new transport node for advertising / subscribing</span>\n        <span class=\"n\">node_</span><span class=\"p\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">Node</span><span class=\"p\">());</span>\n        <span class=\"n\">node_</span><span class=\"o\">-&gt;</span><span class=\"n\">Init</span><span class=\"p\">();</span>\n\n        <span class=\"c1\">// Subscribe to model insertion</span>\n        <span class=\"n\">modelSub_</span> <span class=\"o\">=</span> <span class=\"n\">node_</span><span class=\"o\">-&gt;</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"s\">&quot;~/model/info&quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">BreakPlugin</span><span class=\"o\">::</span><span class=\"n\">OnModel</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// Subscribe to contacts</span>\n        <span class=\"n\">contactsSub_</span> <span class=\"o\">=</span> <span class=\"n\">node_</span><span class=\"o\">-&gt;</span><span class=\"n\">Subscribe</span><span class=\"p\">(</span><span class=\"s\">&quot;~/physics/contacts&quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">BreakPlugin</span><span class=\"o\">::</span><span class=\"n\">OnContacts</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n\n        <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">AddNew</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">AddNew</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// The sphere model from the world plugin example - remove works</span>\n        <span class=\"c1\">// fine with one link, crashes with two.</span>\n        <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">SDF</span> <span class=\"n\">sphereSDF</span><span class=\"p\">;</span>\n        <span class=\"n\">sphereSDF</span><span class=\"p\">.</span><span class=\"n\">SetFromString</span><span class=\"p\">(</span>\n                <span class=\"s\">&quot;&lt;sdf version =&#39;1.5&#39;&gt;\\</span>\n<span class=\"s\">                      &lt;model name =&#39;sphere&#39;&gt;\\</span>\n<span class=\"s\">                        &lt;pose&gt;1 0 0 0 0 0&lt;/pose&gt;\\</span>\n<span class=\"s\">                        &lt;link name =&#39;link&#39;&gt;\\</span>\n<span class=\"s\">                          &lt;pose&gt;0 0 .5 0 0 0&lt;/pose&gt;\\</span>\n<span class=\"s\">                          &lt;collision name =&#39;collision&#39;&gt;\\</span>\n<span class=\"s\">                            &lt;geometry&gt;\\</span>\n<span class=\"s\">                              &lt;sphere&gt;&lt;radius&gt;0.5&lt;/radius&gt;&lt;/sphere&gt;\\</span>\n<span class=\"s\">                            &lt;/geometry&gt;\\</span>\n<span class=\"s\">                          &lt;/collision&gt;\\</span>\n<span class=\"s\">                          &lt;visual name =&#39;visual&#39;&gt;\\</span>\n<span class=\"s\">                            &lt;geometry&gt;\\</span>\n<span class=\"s\">                              &lt;sphere&gt;&lt;radius&gt;0.5&lt;/radius&gt;&lt;/sphere&gt;\\</span>\n<span class=\"s\">                            &lt;/geometry&gt;\\</span>\n<span class=\"s\">                          &lt;/visual&gt;\\</span>\n<span class=\"s\">                        &lt;/link&gt;\\</span>\n<span class=\"s\">                        &lt;link name =&#39;link2&#39;&gt;\\</span>\n<span class=\"s\">                          &lt;pose&gt;0 0 1.5 0 0 0&lt;/pose&gt;\\</span>\n<span class=\"s\">                          &lt;collision name =&#39;collision&#39;&gt;\\</span>\n<span class=\"s\">                            &lt;geometry&gt;\\</span>\n<span class=\"s\">                              &lt;sphere&gt;&lt;radius&gt;0.5&lt;/radius&gt;&lt;/sphere&gt;\\</span>\n<span class=\"s\">                            &lt;/geometry&gt;\\</span>\n<span class=\"s\">                          &lt;/collision&gt;\\</span>\n<span class=\"s\">                          &lt;visual name =&#39;visual&#39;&gt;\\</span>\n<span class=\"s\">                            &lt;geometry&gt;\\</span>\n<span class=\"s\">                              &lt;sphere&gt;&lt;radius&gt;0.5&lt;/radius&gt;&lt;/sphere&gt;\\</span>\n<span class=\"s\">                            &lt;/geometry&gt;\\</span>\n<span class=\"s\">                          &lt;/visual&gt;\\</span>\n<span class=\"s\">                        &lt;/link&gt;\\</span>\n<span class=\"s\">                      &lt;/model&gt;\\</span>\n<span class=\"s\">                    &lt;/sdf&gt;&quot;</span><span class=\"p\">);</span>\n\n        <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">sphereSDF</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"o\">-&gt;</span><span class=\"n\">GetElement</span><span class=\"p\">(</span><span class=\"s\">&quot;model&quot;</span><span class=\"p\">);</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;unique_sphere_&quot;</span><span class=\"o\">+</span><span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">lexical_cast</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">counter_</span><span class=\"p\">);</span>\n        <span class=\"n\">model</span><span class=\"o\">-&gt;</span><span class=\"n\">GetAttribute</span><span class=\"p\">(</span><span class=\"s\">&quot;name&quot;</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">SetFromString</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n        <span class=\"n\">world_</span><span class=\"o\">-&gt;</span><span class=\"n\">InsertModelSDF</span><span class=\"p\">(</span><span class=\"n\">sphereSDF</span><span class=\"p\">);</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Added model #&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">counter_</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">OnModel</span><span class=\"p\">(</span><span class=\"n\">ConstModelPtr</span> <span class=\"o\">&amp;</span> <span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Unpause the world for a step of processing</span>\n        <span class=\"n\">world_</span><span class=\"o\">-&gt;</span><span class=\"n\">SetPaused</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Models in world: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">world_</span><span class=\"o\">-&gt;</span><span class=\"n\">GetModelCount</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">OnContacts</span><span class=\"p\">(</span><span class=\"n\">ConstContactsPtr</span> <span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Handle contacts</span>\n        <span class=\"n\">world_</span><span class=\"o\">-&gt;</span><span class=\"n\">SetPaused</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;unique_sphere_&quot;</span><span class=\"o\">+</span><span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">lexical_cast</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">counter_</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// Crash will occur shortly after this - not removing the model works fine.</span>\n        <span class=\"n\">world_</span><span class=\"o\">-&gt;</span><span class=\"n\">RemoveModel</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// This output is still shown, so I&#39;m assuming the crash occurs on another thread</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Model removed.&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"k\">private</span><span class=\"o\">:</span>\n    <span class=\"c1\">// Store a pointer to the world</span>\n    <span class=\"n\">physics</span><span class=\"o\">::</span><span class=\"n\">WorldPtr</span> <span class=\"n\">world_</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Request counter</span>\n    <span class=\"kt\">int</span> <span class=\"n\">counter_</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Transport node</span>\n    <span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">NodePtr</span> <span class=\"n\">node_</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Subscribers / publishers</span>\n    <span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">SubscriberPtr</span> <span class=\"n\">modelSub_</span><span class=\"p\">;</span>\n    <span class=\"n\">transport</span><span class=\"o\">::</span><span class=\"n\">SubscriberPtr</span> <span class=\"n\">contactsSub_</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">GZ_REGISTER_WORLD_PLUGIN</span><span class=\"p\">(</span><span class=\"n\">BreakPlugin</span><span class=\"p\">)</span>\n\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Just attach this plugin to any world, run it, and it will crash with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">/</span><span class=\"nt\">usr</span><span class=\"o\">/</span><span class=\"nt\">include</span><span class=\"o\">/</span><span class=\"nt\">boost</span><span class=\"o\">/</span><span class=\"nt\">smart_ptr</span><span class=\"o\">/</span><span class=\"nt\">shared_ptr</span><span class=\"p\">.</span><span class=\"nc\">hpp</span><span class=\"p\">:</span><span class=\"nd\">653</span><span class=\"o\">:</span> <span class=\"nt\">typename</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">detail</span><span class=\"p\">::</span><span class=\"nd\">sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">type</span> <span class=\"nt\">boost</span><span class=\"p\">::</span><span class=\"nd\">shared_ptr</span><span class=\"o\">&lt;</span><span class=\"nt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"nd\">operator-</span><span class=\"o\">&gt;()</span> <span class=\"nt\">const</span> <span class=\"cp\">[</span><span class=\"k\">with</span> <span class=\"n\">T</span><span class=\"o\"> =</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Node</span><span class=\"p\">;</span> <span class=\"nx\">typename</span> <span class=\"nx\">boost</span><span class=\"nl\">::detail::sp_member_access</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"nl\">::type</span> <span class=\"o\">=</span> <span class=\"nx\">gazebo</span><span class=\"nl\">::transport::Node</span><span class=\"o\">*</span><span class=\"cp\">]</span><span class=\"o\">:</span> <span class=\"nt\">Assertion</span> <span class=\"err\">`</span><span class=\"nt\">px</span> <span class=\"o\">!=</span> <span class=\"nt\">0</span><span class=\"err\">&#39;</span> <span class=\"nt\">failed</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>I've been testing it with this empty zero gravity world:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span>\n<span class=\"nt\">&lt;sdf</span> <span class=\"na\">version=</span><span class=\"s\">&quot;1.5&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;world</span> <span class=\"na\">name=</span><span class=\"s\">&quot;default&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;physics</span> <span class=\"na\">type=</span><span class=\"s\">&quot;ode&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;gravity&gt;</span>0 0 0<span class=\"nt\">&lt;/gravity&gt;</span>\n    <span class=\"nt\">&lt;/physics&gt;</span>\n\n  <span class=\"nt\">&lt;plugin</span> <span class=\"na\">name=</span><span class=\"s\">&quot;breakplugin&quot;</span> <span class=\"na\">filename=</span><span class=\"s\">&quot;libbreakplugin.so&quot;</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/world&gt;</span>\n<span class=\"nt\">&lt;/sdf&gt;</span>\n</pre></div>\n\n\n<p>Unfortunately I haven't yet been able to figure out <em>why</em> this happens. Is there anything about the way I'm deleting the model that is unsafe? If I do it with <code>world_-&gt;Clear()</code> at the same point it works fine for this example, but crashes with a segfault with another (the conditions of which I can't yet pinpoint, but I think it has something to do with a sensor updating after the model is deleted).</p>\n<p>If possible, could someone perhaps suggest a workaround, i.e. a way of deleting a model safely?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2015-06-09T09:10:07.239729+00:00", "milestone": null, "updated_on": "2016-09-14T19:22:59.502841+00:00", "type": "issue", "id": 1629}