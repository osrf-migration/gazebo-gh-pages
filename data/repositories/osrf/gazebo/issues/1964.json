{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1964/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1964.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1964/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1964/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1964/using-transparent-pre-defined-materials"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1964/vote"}}, "reporter": {"display_name": "MarcZofka", "uuid": "{8e492043-1cf9-4b92-b4a3-fddba650d752}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8e492043-1cf9-4b92-b4a3-fddba650d752%7D"}, "html": {"href": "https://bitbucket.org/%7B8e492043-1cf9-4b92-b4a3-fddba650d752%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/464aedaf98009220dfbcb95b5611ec90d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsM-5.png"}}, "nickname": "GzMRZ", "type": "user", "account_id": "557058:d819a9eb-8b76-48aa-9fd8-c23583587a7b"}, "title": "Using transparent, pre-defined materials causes memory leak", "component": {"name": "rendering", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122881.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "Hi Guys,\r\n\r\ni have recognized a very strange behaviour caused by one of my robot models: Having both, gzclient and gzserver, running the necessary RAM increases more and more until the whole system begins to stutter due to memory swapping. By several checks, we have verified, that this only happens if gzclient is running and the model is within the view frustrum of gzclient's virtual camera.\r\n\r\nI tried to isolate the error by removing parts of my robot piece by piece. Finally, i've figured out, that this is caused by using transparent materials in a link's visual definition:\r\n\r\n```\r\n#!xml\r\n <visual name='Redglass_Mesh'>\r\n        <pose>0.25 0 .25 0 0 1.5707</pose>\r\n        <transparency>0.0</transparency>\r\n        <geometry><mesh><uri>model://path/to/meshes/mesh.stl</uri></mesh></geometry>\r\n        <material>\r\n          <script>\r\n            <uri>file://media/materials/scripts/gazebo.material</uri>\r\n            <name>Gazebo/RedTransparent</name>\r\n          </script>\r\n        </material>\r\n      </visual>\r\n```\r\nReplacing the material with a non-transparent color fixes the issue. \r\nIn our case, we have replaced the material name *RedTransparent* with *Red*  to \r\navoid the memory leak successfully.\r\n\r\nThis issue occurs on debian-packaged Gazebo 6.5.1 as well as Gazebo 6.6 on Ubuntu 14.04 on several CPU/GPU combinations.\r\n\r\nBest regards!\r\n", "markup": "markdown", "html": "<p>Hi Guys,</p>\n<p>i have recognized a very strange behaviour caused by one of my robot models: Having both, gzclient and gzserver, running the necessary RAM increases more and more until the whole system begins to stutter due to memory swapping. By several checks, we have verified, that this only happens if gzclient is running and the model is within the view frustrum of gzclient's virtual camera.</p>\n<p>I tried to isolate the error by removing parts of my robot piece by piece. Finally, i've figured out, that this is caused by using transparent materials in a link's visual definition:</p>\n<div class=\"codehilite language-xml\"><pre><span></span> <span class=\"nt\">&lt;visual</span> <span class=\"na\">name=</span><span class=\"s\">&#39;Redglass_Mesh&#39;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;pose&gt;</span>0.25 0 .25 0 0 1.5707<span class=\"nt\">&lt;/pose&gt;</span>\n        <span class=\"nt\">&lt;transparency&gt;</span>0.0<span class=\"nt\">&lt;/transparency&gt;</span>\n        <span class=\"nt\">&lt;geometry&gt;&lt;mesh&gt;&lt;uri&gt;</span>model://path/to/meshes/mesh.stl<span class=\"nt\">&lt;/uri&gt;&lt;/mesh&gt;&lt;/geometry&gt;</span>\n        <span class=\"nt\">&lt;material&gt;</span>\n          <span class=\"nt\">&lt;script&gt;</span>\n            <span class=\"nt\">&lt;uri&gt;</span>file://media/materials/scripts/gazebo.material<span class=\"nt\">&lt;/uri&gt;</span>\n            <span class=\"nt\">&lt;name&gt;</span>Gazebo/RedTransparent<span class=\"nt\">&lt;/name&gt;</span>\n          <span class=\"nt\">&lt;/script&gt;</span>\n        <span class=\"nt\">&lt;/material&gt;</span>\n      <span class=\"nt\">&lt;/visual&gt;</span>\n</pre></div>\n\n\n<p>Replacing the material with a non-transparent color fixes the issue. \nIn our case, we have replaced the material name <em>RedTransparent</em> with <em>Red</em>  to \navoid the memory leak successfully.</p>\n<p>This issue occurs on debian-packaged Gazebo 6.5.1 as well as Gazebo 6.6 on Ubuntu 14.04 on several CPU/GPU combinations.</p>\n<p>Best regards!</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "6.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/170782.json"}}}, "edited_on": null, "created_on": "2016-05-16T08:51:44.820754+00:00", "milestone": null, "updated_on": "2016-05-16T08:51:44.820754+00:00", "type": "issue", "id": 1964}