{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/1966/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/1966.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1966/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/1966/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/1966/camera-output-appears-to-depend-on-real"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/1966/vote"}}, "reporter": {"display_name": "Xander Dunn", "uuid": "{f831b046-1fb3-44c5-a22e-f02af08b1d56}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf831b046-1fb3-44c5-a22e-f02af08b1d56%7D"}, "html": {"href": "https://bitbucket.org/%7Bf831b046-1fb3-44c5-a22e-f02af08b1d56%7D/"}, "avatar": {"href": "https://bitbucket.org/account/xanderdunn/avatar/"}}, "nickname": "xanderdunn", "type": "user", "account_id": null}, "title": "Camera Output Appears to Depend on Real World Time", "component": {"name": "sensors", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/122877.json"}}}, "votes": 2, "watches": 7, "content": {"raw": "Gazebo 7.0.0. \r\n\r\nWe start Gazebo paused and take each step by sending the message that's sent by `gz world -s`.  At a rate of 20 steps/s (as measured in real world time), we see consistent joint state and camera images across all runs.  \r\n\r\nHowever, if this rate is slowed down to 10 steps/s or slower, we see the camera images become different from our faster runs despite the joint states being identical on each step.  As a trivial example, simply sleep for 1 second between each step.  The joint states remain unaffected by the sleep: they are identical across all runs.  However, the images from this slower run are different from the images in the 20 steps/s run.  We wouldn't expect any aspect of the simulation to be affected by time spent paused between steps.\r\n\r\nNote that images are not compared visually, but at the level of the array values.  Values differ significantly:\r\n```\r\n[[[ 0.02885249]\r\n  [ 0.02885249]\r\n  [ 0.02885249]\r\n  ...,\r\n```\r\nvs\r\n```\r\n[[[ 0.03031733]\r\n  [ 0.03031733]\r\n  [ 0.03031733]\r\n  ...,\r\n```\r\n\r\nNote that this is *without* the camera noise mentioned in #1965.  \r\n\r\nThis is a significant problem for us because varying degrees of computational load or computational complexity produce inconsistent results.\r\n\r\nI have this set up such that it's easily reproducible, so let me know if there are any helpful experiments I can perform.", "markup": "markdown", "html": "<p>Gazebo 7.0.0. </p>\n<p>We start Gazebo paused and take each step by sending the message that's sent by <code>gz world -s</code>.  At a rate of 20 steps/s (as measured in real world time), we see consistent joint state and camera images across all runs.  </p>\n<p>However, if this rate is slowed down to 10 steps/s or slower, we see the camera images become different from our faster runs despite the joint states being identical on each step.  As a trivial example, simply sleep for 1 second between each step.  The joint states remain unaffected by the sleep: they are identical across all runs.  However, the images from this slower run are different from the images in the 20 steps/s run.  We wouldn't expect any aspect of the simulation to be affected by time spent paused between steps.</p>\n<p>Note that images are not compared visually, but at the level of the array values.  Values differ significantly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[[[ 0.02885249]</span>\n  <span class=\"k\">[ 0.02885249]</span>\n  <span class=\"k\">[ 0.02885249]</span>\n  <span class=\"na\">...,</span>\n</pre></div>\n\n\n<p>vs</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[[[ 0.03031733]</span>\n  <span class=\"k\">[ 0.03031733]</span>\n  <span class=\"k\">[ 0.03031733]</span>\n  <span class=\"na\">...,</span>\n</pre></div>\n\n\n<p>Note that this is <em>without</em> the camera noise mentioned in <a href=\"#!/osrf/gazebo/issues/1965/camera-noise-does-not-obey-global-seed\" rel=\"nofollow\" title=\"Camera Noise Does Not Obey Global Seed\" class=\"ap-connect-link\">#1965</a>.  </p>\n<p>This is a significant problem for us because varying degrees of computational load or computational complexity produce inconsistent results.</p>\n<p>I have this set up such that it's easily reproducible, so let me know if there are any helpful experiments I can perform.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2016-05-19T01:37:53.635937+00:00", "milestone": null, "updated_on": "2016-09-14T19:20:00.154368+00:00", "type": "issue", "id": 1966}