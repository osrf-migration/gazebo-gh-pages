{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2701/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2701.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2701/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2701/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2701/compilation-error-on-windows-due-to-not"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2701/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "Compilation error on Windows due to not found UCRT headers", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I tried to compile the latest Gazebo 11 on Windows with dependency created by vcpkg \\(see [https://github.com/iit-danieli-joint-lab/idjl-software-dependencies-vcpkg/blob/add-gazebo-deps/.github/workflows/ci.yml#L181](https://github.com/iit-danieli-joint-lab/idjl-software-dependencies-vcpkg/blob/add-gazebo-deps/.github/workflows/ci.yml#L181) for the complete script\\) and I am experiencing this error during CMake configuration:\r\n\r\n```\r\n-- Found Windows SDK Universal CRT include directory: WINDOWS\\_KITS\\_UCRT\\_INCLUDE-NOTFOUND  \r\n-- Configuration successful. Type make to compile gazebo  \r\n-- Configuring done  \r\nCMake Error: The following variables are used in this project, but they are set to NOTFOUND.  \r\nPlease set them or make sure they are set and tested correctly in the CMake files:  \r\nWINDOWS\\_KITS\\_UCRT\\_INCLUDE  \r\nused as include directory in directory C:/idjl-ws/src/gazebo/plugins  \r\nused as include directory in directory C:/idjl-ws/src/gazebo/plugins  \r\nused as include directory in directory C:/idjl-ws/src/gazebo/plugins\r\n```\r\n\r\nApparently, this is due to this snippet of code present in [#!/osrf/gazebo/src/c1537db2c8550db2566a634fcee382a7ab6d7fbe/plugins/CMakeLists.txt#lines-5](#!/osrf/gazebo/src/c1537db2c8550db2566a634fcee382a7ab6d7fbe/plugins/CMakeLists.txt#lines-5) :\r\n\r\n```\r\nif(WIN32 AND NOT UNIX)\r\n  # Solves errors about not finding _imp_sprintf and similar on some Windows systems.\r\n  set(CMAKE_CXX_STANDARD_LIBRARIES \"${CMAKE_CXX_STANDARD_LIBRARIES} legacy_stdio_definitions.lib\")\r\n\r\n  # Include Universal CRT includes. They are sometimes needed by gtest. If not added,\r\n  # compilation fails not finding symbols like _isatty, write, close etc.\r\n  get_filename_component(windows_kits_dir\r\n    \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows Kits\\\\Installed Roots;KitsRoot10]\" ABSOLUTE)\r\n  set(programfilesx86 \"ProgramFiles(x86)\")  \r\n  find_path(WINDOWS_KITS_UCRT_INCLUDE NAMES assert.h\r\n    PATHS\r\n    \"${windows_kits_dir}/include\"\r\n    \"$ENV{ProgramFiles}/Windows Kits/10/include\"\r\n    \"$ENV{${programfilesx86}}/Windows Kits/10/include\"\r\n  )  \r\n\r\n  message(STATUS \"Found Windows SDK Universal CRT include directory: ${WINDOWS_KITS_UCRT_INCLUDE}\")\r\n  include_directories(${WINDOWS_KITS_UCRT_INCLUDE})  \r\nendif()\r\n```\r\n\r\nThis code was added in the PR [#!/osrf/gazebo/pull-requests/2652/added-support-for-tracked-vehicles/diff](#!/osrf/gazebo/pull-requests/2652/added-support-for-tracked-vehicles/diff), see in particular the related comment [#!/osrf/gazebo/pull-requests/2652/added-support-for-tracked-vehicles/diff#comment-101282921](#!/osrf/gazebo/pull-requests/2652/added-support-for-tracked-vehicles/diff#comment-101282921) .\r\n\r\nThey are meant to fix a specific build failure of a new added test in that PR, but it was added in a location that affects the compilation of all plugins-related compilation units. Furthermore, I am not sure how the find logic did work, as \\(at least on my machine, Windows Version 1709 build 16299.192 \\) the \\`windows\\_kits\\_dir\\` variable extracted from the Registry Edit points to \\`C:/Program Files \\(x86\\)/Windows Kits/10\\`, while the include directories are in `C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt` \\(where `10.0.10240.0` is the specific Windows SDK number\\) so it cannot be found by the `find_path` CMake command. Note that my Windows version is relatively old, so it may be possible that on recent versions on Windows the behaviour is different.\r\n\r\n\u200c", "markup": "markdown", "html": "<p>I tried to compile the latest Gazebo 11 on Windows with dependency created by vcpkg (see <a data-is-external-link=\"true\" href=\"https://github.com/iit-danieli-joint-lab/idjl-software-dependencies-vcpkg/blob/add-gazebo-deps/.github/workflows/ci.yml#L181\" rel=\"nofollow\">https://github.com/iit-danieli-joint-lab/idjl-software-dependencies-vcpkg/blob/add-gazebo-deps/.github/workflows/ci.yml#L181</a> for the complete script) and I am experiencing this error during CMake configuration:</p>\n<div class=\"codehilite\"><pre><span></span>-- Found Windows SDK Universal CRT include directory: WINDOWS\\_KITS\\_UCRT\\_INCLUDE-NOTFOUND  \n-- Configuration successful. Type make to compile gazebo  \n-- Configuring done  \nCMake Error: The following variables are used in this project, but they are set to NOTFOUND.  \nPlease set them or make sure they are set and tested correctly in the CMake files:  \nWINDOWS\\_KITS\\_UCRT\\_INCLUDE  \nused as include directory in directory C:/idjl-ws/src/gazebo/plugins  \nused as include directory in directory C:/idjl-ws/src/gazebo/plugins  \nused as include directory in directory C:/idjl-ws/src/gazebo/plugins\n</pre></div>\n\n\n<p>Apparently, this is due to this snippet of code present in <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/c1537db2c8550db2566a634fcee382a7ab6d7fbe/plugins/CMakeLists.txt#lines-5\" rel=\"nofollow\">#!/osrf/gazebo/src/c1537db2c8550db2566a634fcee382a7ab6d7fbe/plugins/CMakeLists.txt#lines-5</a> :</p>\n<div class=\"codehilite\"><pre><span></span>if(WIN32 AND NOT UNIX)\n  # Solves errors about not finding _imp_sprintf and similar on some Windows systems.\n  set(CMAKE_CXX_STANDARD_LIBRARIES &quot;<span class=\"cp\">${</span><span class=\"n\">CMAKE_CXX_STANDARD_LIBRARIES</span><span class=\"cp\">}</span> legacy_stdio_definitions.lib&quot;)\n\n  # Include Universal CRT includes. They are sometimes needed by gtest. If not added,\n  # compilation fails not finding symbols like _isatty, write, close etc.\n  get_filename_component(windows_kits_dir\n    &quot;[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows Kits\\\\Installed Roots;KitsRoot10]&quot; ABSOLUTE)\n  set(programfilesx86 &quot;ProgramFiles(x86)&quot;)  \n  find_path(WINDOWS_KITS_UCRT_INCLUDE NAMES assert.h\n    PATHS\n    &quot;<span class=\"cp\">${</span><span class=\"n\">windows_kits_dir</span><span class=\"cp\">}</span>/include&quot;\n    &quot;<span class=\"nv\">$ENV</span>{ProgramFiles}/Windows Kits/10/include&quot;\n    &quot;<span class=\"nv\">$ENV</span>{<span class=\"cp\">${</span><span class=\"n\">programfilesx86</span><span class=\"cp\">}</span>}/Windows Kits/10/include&quot;\n  )  \n\n  message(STATUS &quot;Found Windows SDK Universal CRT include directory: <span class=\"cp\">${</span><span class=\"n\">WINDOWS_KITS_UCRT_INCLUDE</span><span class=\"cp\">}</span>&quot;)\n  include_directories(<span class=\"cp\">${</span><span class=\"n\">WINDOWS_KITS_UCRT_INCLUDE</span><span class=\"cp\">}</span>)  \nendif()\n</pre></div>\n\n\n<p>This code was added in the PR <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/pull-requests/2652/added-support-for-tracked-vehicles/diff\" rel=\"nofollow\">#!/osrf/gazebo/pull-requests/2652/added-support-for-tracked-vehicles/diff</a>, see in particular the related comment <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/pull-requests/2652/added-support-for-tracked-vehicles/diff#comment-101282921\" rel=\"nofollow\">#!/osrf/gazebo/pull-requests/2652/added-support-for-tracked-vehicles/diff#comment-101282921</a> .</p>\n<p>They are meant to fix a specific build failure of a new added test in that PR, but it was added in a location that affects the compilation of all plugins-related compilation units. Furthermore, I am not sure how the find logic did work, as (at least on my machine, Windows Version 1709 build 16299.192 ) the `windows_kits_dir` variable extracted from the Registry Edit points to `C:/Program Files (x86)/Windows Kits/10`, while the include directories are in <code>C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt</code> (where <code>10.0.10240.0</code> is the specific Windows SDK number) so it cannot be found by the <code>find_path</code> CMake command. Note that my Windows version is relatively old, so it may be possible that on recent versions on Windows the behaviour is different.</p>\n<p>\u200c</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2020-03-15T11:22:33.622968+00:00", "milestone": null, "updated_on": "2020-03-15T18:40:14.482110+00:00", "type": "issue", "id": 2701}