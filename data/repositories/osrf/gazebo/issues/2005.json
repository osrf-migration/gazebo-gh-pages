{"priority": "blocker", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2005/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2005.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2005/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2005/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2005/segfault-when-calling-ipopt-virtual-method"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2005/vote"}}, "reporter": null, "title": "segfault when calling ipopt virtual method", "component": null, "votes": 0, "watches": null, "content": {"raw": "the following very simple plugin crashes:\r\n\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <string>\r\n#include <IpIpoptApplication.hpp>\r\n#include <gazebo/gazebo.hh>\r\n\r\nnamespace gazebo\r\n{\r\n    class myGazeboPlugin : public WorldPlugin\r\n    {\r\n    public:\r\n        myGazeboPlugin() : WorldPlugin(), r(false)\r\n        {\r\n        }\r\n\r\n        void Load(physics::WorldPtr _world, sdf::ElementPtr _sdf)\r\n        {\r\n\r\n            Ipopt::RegisteredOptions* a = new Ipopt::RegisteredOptions;\r\n            a->SetRegisteringCategory(\"Undocumented\");\r\n\r\n        }\r\n    };\r\n\r\n  extern \"C\" GZ_COMMON_VISIBLE gazebo::WorldPlugin *RegisterPlugin();\r\n  gazebo::WorldPlugin *RegisterPlugin()\r\n  {\r\n    return new myGazeboPlugin();\r\n  }\r\n}\r\n\r\nnote:\r\n1. SetRegisteringCategory is a virtual method\r\n2. by making SetRegisteringCategory a non virtual method and rebuild ipopt the segfault goes away\r\n3. by making \"a\" a real object (so not a pointer) the segfault does not occur calling the method but occurs in the  Ipopt::RegisteredOptions* a = new Ipopt::RegisteredOptions; in a subsequent instantiation of the plugin object. think this happen due to the nature of the RegisterOptions itself that require to be managed through pointers.\r\n\r\nrequest:\r\nis there a way to correctly use ipopt inside a gazebo plugin?", "markup": "markdown", "html": "<p>the following very simple plugin crashes:</p>\n<p>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;string&gt;\n#include &lt;IpIpoptApplication.hpp&gt;\n#include &lt;gazebo/gazebo.hh&gt;</p>\n<p>namespace gazebo\n{\n    class myGazeboPlugin : public WorldPlugin\n    {\n    public:\n        myGazeboPlugin() : WorldPlugin(), r(false)\n        {\n        }</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">void</span> <span class=\"nt\">Load</span><span class=\"o\">(</span><span class=\"nt\">physics</span><span class=\"p\">::</span><span class=\"nd\">WorldPtr</span> <span class=\"nt\">_world</span><span class=\"o\">,</span> <span class=\"nt\">sdf</span><span class=\"p\">::</span><span class=\"nd\">ElementPtr</span> <span class=\"nt\">_sdf</span><span class=\"o\">)</span>\n    <span class=\"p\">{</span>\n\n        <span class=\"n\">Ipopt</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">RegisteredOptions</span><span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">new</span> <span class=\"n\">Ipopt</span><span class=\"o\">::</span><span class=\"n\">RegisteredOptions</span><span class=\"p\">;</span>\n        <span class=\"err\">a-&gt;SetRegisteringCategory(&quot;Undocumented&quot;)</span><span class=\"p\">;</span>\n\n    <span class=\"p\">}</span>\n<span class=\"err\">}</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<p>extern \"C\" GZ_COMMON_VISIBLE gazebo::WorldPlugin <em>RegisterPlugin();\n  gazebo::WorldPlugin </em>RegisterPlugin()\n  {\n    return new myGazeboPlugin();\n  }\n}</p>\n<p>note:\n1. SetRegisteringCategory is a virtual method\n2. by making SetRegisteringCategory a non virtual method and rebuild ipopt the segfault goes away\n3. by making \"a\" a real object (so not a pointer) the segfault does not occur calling the method but occurs in the  Ipopt::RegisteredOptions* a = new Ipopt::RegisteredOptions; in a subsequent instantiation of the plugin object. think this happen due to the nature of the RegisterOptions itself that require to be managed through pointers.</p>\n<p>request:\nis there a way to correctly use ipopt inside a gazebo plugin?</p>", "type": "rendered"}, "assignee": null, "state": "on hold", "version": {"name": "all", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/225575.json"}}}, "edited_on": null, "created_on": "2016-07-08T09:00:14.818894+00:00", "milestone": null, "updated_on": "2018-11-10T16:04:28.129127+00:00", "type": "issue", "id": 2005}