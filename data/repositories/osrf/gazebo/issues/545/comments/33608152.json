{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/545/comments/33608152.json"}, "html": {"href": "#!/osrf/gazebo/issues/545#comment-33608152"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/545.json"}}, "type": "issue", "id": 545, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Request: Change contact reference frame from global to local for msgs::Contact"}, "content": {"raw": "using Gazebo 7.0.0 and kinetic version of gazebo_ros_pkgs\nI need to recover the possibility in the gazebo_ros_bumper to get the force/torque/position/normal in a user given frame (for instance link/sensor frame). I found a way to re-activate commented out code https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_bumper.cpp#L146  but then had wrong data in a simple test case. \nThis is because the line https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_bumper.cpp#L256 is using a reverse transform to get force from world to desired frame.\n\nFrom the information contained in this issue, namely force/torque are in sensor frame and position/normal are in global frame, I could understand and fix the behaviour of the gazebo_ros_bumper with a forward transform from link/sensor to world and then a reverse transform to desired frame. All fine.\n\nBut then found out another issue. In some cases, the contact.wrench(j).body_1_wrench().force  is not the force of the current sensor, but of the \"other\" object expressed in its own local link (body 1 is not the sensor collision object). Hence making the transform completely wrong. One needs to select the correct body and apply the correct transform.\n\n@nkoenig says because the collision names are known, so are the body names and one can transform in the frame one likes. The problem I found is how to know which body the sensor is attached to and match it then with the collision name given by the contacts. As far as I know the collision name can be user given in the SDF and could differ from the body name. Unfortunately, the contactsensor part of the SDF where a collision tag is embedded is inaccessible from the plugin (the parent sdf is protected). I might have missed something.\n[EDIT]Indeed, I now found a way to access the parent sdf (and so also the collision name), by doing sdf->getParent() ! I was first looking at the sensor only...[\\EDIT]\n\nI wanted to comment in this issues as this non-obvious frames (part in link frame, part in global) should be cleared up or settled and self-describing in the messages somehow (the same way as ROS is using PoseStamped containing the frame name) as suggested by @scpeters ?\n\nthanks", "markup": "markdown", "html": "<p>using Gazebo 7.0.0 and kinetic version of gazebo_ros_pkgs\nI need to recover the possibility in the gazebo_ros_bumper to get the force/torque/position/normal in a user given frame (for instance link/sensor frame). I found a way to re-activate commented out code <a href=\"https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_bumper.cpp#L146\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_bumper.cpp#L146</a>  but then had wrong data in a simple test case. \nThis is because the line <a href=\"https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_bumper.cpp#L256\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ros-simulation/gazebo_ros_pkgs/blob/kinetic-devel/gazebo_plugins/src/gazebo_ros_bumper.cpp#L256</a> is using a reverse transform to get force from world to desired frame.</p>\n<p>From the information contained in this issue, namely force/torque are in sensor frame and position/normal are in global frame, I could understand and fix the behaviour of the gazebo_ros_bumper with a forward transform from link/sensor to world and then a reverse transform to desired frame. All fine.</p>\n<p>But then found out another issue. In some cases, the contact.wrench(j).body_1_wrench().force  is not the force of the current sensor, but of the \"other\" object expressed in its own local link (body 1 is not the sensor collision object). Hence making the transform completely wrong. One needs to select the correct body and apply the correct transform.</p>\n<p>@nkoenig says because the collision names are known, so are the body names and one can transform in the frame one likes. The problem I found is how to know which body the sensor is attached to and match it then with the collision name given by the contacts. As far as I know the collision name can be user given in the SDF and could differ from the body name. Unfortunately, the contactsensor part of the SDF where a collision tag is embedded is inaccessible from the plugin (the parent sdf is protected). I might have missed something.\n[EDIT]Indeed, I now found a way to access the parent sdf (and so also the collision name), by doing sdf-&gt;getParent() ! I was first looking at the sensor only...[\\EDIT]</p>\n<p>I wanted to comment in this issues as this non-obvious frames (part in link frame, part in global) should be cleared up or settled and self-describing in the messages somehow (the same way as ROS is using PoseStamped containing the frame name) as suggested by @scpeters ?</p>\n<p>thanks</p>", "type": "rendered"}, "created_on": "2017-01-12T18:09:17.305852+00:00", "user": {"display_name": "guihome", "uuid": "{14c77b35-0c1c-464f-a43f-eb5ec0e138f9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B14c77b35-0c1c-464f-a43f-eb5ec0e138f9%7D"}, "html": {"href": "https://bitbucket.org/%7B14c77b35-0c1c-464f-a43f-eb5ec0e138f9%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/3ba6b96476ddba092f22b89e54d506bed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsG-2.png"}}, "nickname": "guihome", "type": "user", "account_id": "557058:4bef7f21-4cf9-40a1-b7cb-6361752182dd"}, "updated_on": "2017-01-13T17:45:36.271284+00:00", "type": "issue_comment", "id": 33608152}