{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "links": {"attachments": {"href": "data/repositories/osrf/gazebo/issues/2025/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/gazebo/issues/2025.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2025/watch"}, "comments": {"href": "data/repositories/osrf/gazebo/issues/2025/comments_page=1.json"}, "html": {"href": "#!/osrf/gazebo/issues/2025/symbol-visibility-issues-on-linux"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/gazebo/issues/2025/vote"}}, "reporter": {"display_name": "Rich Mattes", "uuid": "{1ef6f3dd-b8db-412b-94e9-e430e7aafd23}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B1ef6f3dd-b8db-412b-94e9-e430e7aafd23%7D"}, "html": {"href": "https://bitbucket.org/%7B1ef6f3dd-b8db-412b-94e9-e430e7aafd23%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d431baafeedf5d8921cb50a3c9902e16d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRM-0.png"}}, "nickname": "richmattes", "type": "user", "account_id": "557058:a38935e3-9a08-40d9-917a-ff19973e58df"}, "title": "Symbol visibility issues on Linux", "component": {"name": "build", "links": {"self": {"href": "data/repositories/osrf/gazebo/components/132954.json"}}}, "votes": 0, "watches": 1, "content": {"raw": "I'm working on a report of player failing to load the libgazebo_player plugin.  It looks like it's due to the fact that libgazebo_player references several symbols that aren't exported.  I put together a quick test to link a blank cpp file against libgazebo_player and got the following results:\r\n\r\n```\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo_shared::addPlugin(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<boost::shared_ptr<gazebo::SystemPlugin>, std::allocator<boost::shared_ptr<gazebo::SystemPlugin> > >&)'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::init_world(boost::shared_ptr<gazebo::physics::World>)'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::load()'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::sensors::stop()'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::sensors::load()'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::Master::Init(unsigned short)'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::sensors::init()'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::Master::Master()'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::sensors::fini()'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::create_world(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::stop_worlds()'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo_shared::setup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, char**, std::vector<boost::shared_ptr<gazebo::SystemPlugin>, std::allocator<boost::shared_ptr<gazebo::SystemPlugin> > >&)'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::load_world(boost::shared_ptr<gazebo::physics::World>, boost::shared_ptr<sdf::Element>)'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::fini()'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo_shared::printVersion()'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::World::RunBlocking(unsigned int)'\r\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::Master::RunThread()'\r\n```\r\n\r\nThe problem seems to be that the preprocessor definitions to enable symbol visibility are only being enabled in (WIN32) conditionals in gazebo/CMakeLists.txt, gazebo/physics/CMakeLists.txt, and gazebo/sensors/CMakeLists.txt.  There might be more cases of this, but the Player plugin only uses functions from those three.\r\n\r\nThe -DBUILDING_DLL* preprocessor definitions in the above files should either be moved out of WIN32 conditionals, or directly added to the CMAKE_CXX_FLAGS as in gazebo/rendering/CMakeLists.txt.  Ideally, all of the subdirectories would use the same approach.", "markup": "markdown", "html": "<p>I'm working on a report of player failing to load the libgazebo_player plugin.  It looks like it's due to the fact that libgazebo_player references several symbols that aren't exported.  I put together a quick test to link a blank cpp file against libgazebo_player and got the following results:</p>\n<div class=\"codehilite\"><pre><span></span>/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo_shared::addPlugin(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;boost::shared_ptr&lt;gazebo::SystemPlugin&gt;, std::allocator&lt;boost::shared_ptr&lt;gazebo::SystemPlugin&gt; &gt; &gt;&amp;)&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::init_world(boost::shared_ptr&lt;gazebo::physics::World&gt;)&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::load()&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::sensors::stop()&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::sensors::load()&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::Master::Init(unsigned short)&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::sensors::init()&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::Master::Master()&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::sensors::fini()&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::create_world(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::stop_worlds()&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo_shared::setup(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int, char**, std::vector&lt;boost::shared_ptr&lt;gazebo::SystemPlugin&gt;, std::allocator&lt;boost::shared_ptr&lt;gazebo::SystemPlugin&gt; &gt; &gt;&amp;)&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::load_world(boost::shared_ptr&lt;gazebo::physics::World&gt;, boost::shared_ptr&lt;sdf::Element&gt;)&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::fini()&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo_shared::printVersion()&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::physics::World::RunBlocking(unsigned int)&#39;\n/usr/lib64/player/libgazebo_player.so: undefined reference to `gazebo::Master::RunThread()&#39;\n</pre></div>\n\n\n<p>The problem seems to be that the preprocessor definitions to enable symbol visibility are only being enabled in (WIN32) conditionals in gazebo/CMakeLists.txt, gazebo/physics/CMakeLists.txt, and gazebo/sensors/CMakeLists.txt.  There might be more cases of this, but the Player plugin only uses functions from those three.</p>\n<p>The -DBUILDING_DLL* preprocessor definitions in the above files should either be moved out of WIN32 conditionals, or directly added to the CMAKE_CXX_FLAGS as in gazebo/rendering/CMakeLists.txt.  Ideally, all of the subdirectories would use the same approach.</p>", "type": "rendered"}, "assignee": null, "state": "closed", "version": {"name": "6.0", "links": {"self": {"href": "data/repositories/osrf/gazebo/versions/170782.json"}}}, "edited_on": null, "created_on": "2016-07-31T23:48:31.178871+00:00", "milestone": null, "updated_on": "2016-09-14T19:45:30.453789+00:00", "type": "issue", "id": 2025}