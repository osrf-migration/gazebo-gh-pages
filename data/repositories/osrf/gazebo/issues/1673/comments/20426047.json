{"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1673/comments/20426047.json"}, "html": {"href": "#!/osrf/gazebo/issues/1673#comment-20426047"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/gazebo/issues/1673.json"}}, "type": "issue", "id": 1673, "repository": {"links": {"self": {"href": "data/repositories/osrf/gazebo.json"}, "html": {"href": "#!/osrf/gazebo"}, "avatar": {"href": "data/bytebucket.org/ravatar/{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}ts=1694483"}}, "type": "repository", "name": "gazebo", "full_name": "osrf/gazebo", "uuid": "{51a0cd5d-8697-4eb1-8b08-e919ee881e1c}"}, "title": "Add flags to link against test fixture"}, "content": {"raw": "As I said in the pull request, I'm linking specifically against `gazebo_test_fixture` in the [benchmark repository](https://github.com/scpeters/benchmark/blob/master/tools/TestMacro.cmake#L13-L19). I think the extra work for downstream users in creating integration tests is not just linking against `gazebo_test_fixture`; that part is easy. There's lots of steps, though, that could be simplified:\n\n* add gtest sources to downstream repository\n* compile gtest\n* for each test, create an executable, link against relevant libraries\n* add the test\n* create a `check_test_ran` test to catch seg-faults\n\nWe use some cmake macros to simplify this for ourselves. Would it be desirable to install a cmake helper macro/function intended for downstream use (similar to [osrf/gazebo/cmake/GazeboTestUtils.cmake](#!/osrf/gazebo/src/04c8460a5b855f9719c0cc306adf43f79064ed6a/cmake/GazeboTestUtils.cmake?at=default) or the [TestMacro.cmake](https://github.com/scpeters/benchmark/blob/master/tools/TestMacro.cmake) in the benchmark repository)? I would ask the opinion of @dirk-thomas if we were to do so.", "markup": "markdown", "html": "<p>As I said in the pull request, I'm linking specifically against <code>gazebo_test_fixture</code> in the <a data-is-external-link=\"true\" href=\"https://github.com/scpeters/benchmark/blob/master/tools/TestMacro.cmake#L13-L19\" rel=\"nofollow\">benchmark repository</a>. I think the extra work for downstream users in creating integration tests is not just linking against <code>gazebo_test_fixture</code>; that part is easy. There's lots of steps, though, that could be simplified:</p>\n<ul>\n<li>add gtest sources to downstream repository</li>\n<li>compile gtest</li>\n<li>for each test, create an executable, link against relevant libraries</li>\n<li>add the test</li>\n<li>create a <code>check_test_ran</code> test to catch seg-faults</li>\n</ul>\n<p>We use some cmake macros to simplify this for ourselves. Would it be desirable to install a cmake helper macro/function intended for downstream use (similar to <a data-is-external-link=\"true\" href=\"#!/osrf/gazebo/src/04c8460a5b855f9719c0cc306adf43f79064ed6a/cmake/GazeboTestUtils.cmake?at=default\" rel=\"nofollow\">osrf/gazebo/cmake/GazeboTestUtils.cmake</a> or the <a data-is-external-link=\"true\" href=\"https://github.com/scpeters/benchmark/blob/master/tools/TestMacro.cmake\" rel=\"nofollow\">TestMacro.cmake</a> in the benchmark repository)? I would ask the opinion of @dirk-thomas if we were to do so.</p>", "type": "rendered"}, "created_on": "2015-07-23T17:25:46.433566+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 20426047}